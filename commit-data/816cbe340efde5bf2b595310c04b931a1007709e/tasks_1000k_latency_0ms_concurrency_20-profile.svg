<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (1,161 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (293 samples, 25.24%)</title><rect x="10.0" y="739.0" width="297.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="750.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.09%)</title><rect x="11.0" y="723.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.09%)</title><rect x="11.0" y="707.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.09%)</title><rect x="11.0" y="691.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.09%)</title><rect x="11.0" y="675.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="11.0" y="659.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="11.0" y="643.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="11.0" y="627.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="11.0" y="611.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="11.0" y="595.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="11.0" y="579.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="11.0" y="563.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="11.0" y="547.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest.toStruct (1 samples, 0.09%)</title><rect x="11.0" y="531.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData.toStruct (1 samples, 0.09%)</title><rect x="11.0" y="515.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData$OffsetCommitRequestTopic.toStruct (1 samples, 0.09%)</title><rect x="11.0" y="499.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.0" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (291 samples, 25.06%)</title><rect x="12.0" y="723.0" width="295.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.0" y="734.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (6 samples, 0.52%)</title><rect x="13.0" y="707.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.52%)</title><rect x="13.0" y="691.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/644657036.accept (6 samples, 0.52%)</title><rect x="13.0" y="675.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (6 samples, 0.52%)</title><rect x="13.0" y="659.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.52%)</title><rect x="13.0" y="643.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.0" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.43%)</title><rect x="14.1" y="627.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.34%)</title><rect x="19.1" y="707.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.34%)</title><rect x="19.1" y="691.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.1" y="702.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.17%)</title><rect x="20.2" y="675.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.17%)</title><rect x="20.2" y="659.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.2" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (2 samples, 0.17%)</title><rect x="20.2" y="643.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="22.2" y="675.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="22.2" y="659.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.2" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="22.2" y="643.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="22.2" y="627.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="22.2" y="611.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.2" y="622.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="22.2" y="595.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="25.2" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (3 samples, 0.26%)</title><rect x="23.2" y="707.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (3 samples, 0.26%)</title><rect x="23.2" y="691.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="24.2" y="675.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="24.2" y="659.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.2" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="24.2" y="643.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="24.2" y="627.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="24.2" y="611.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.2" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.17%)</title><rect x="24.2" y="595.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.2" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="25.2" y="579.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="25.2" y="563.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.2" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$268/1939915927.test (1 samples, 0.09%)</title><rect x="25.2" y="547.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.2" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="26.3" y="707.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.3" y="718.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (217 samples, 18.69%)</title><rect x="27.3" y="707.0" width="220.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.3" y="718.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/214042909.accept (205 samples, 17.66%)</title><rect x="29.3" y="691.0" width="208.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.3" y="702.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (204 samples, 17.57%)</title><rect x="30.3" y="675.0" width="207.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="33.3" y="686.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.17%)</title><rect x="35.4" y="659.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (164 samples, 14.13%)</title><rect x="37.4" y="659.0" width="166.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.4" y="670.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (164 samples, 14.13%)</title><rect x="37.4" y="643.0" width="166.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="40.4" y="654.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (164 samples, 14.13%)</title><rect x="37.4" y="627.0" width="166.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.4" y="638.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (164 samples, 14.13%)</title><rect x="37.4" y="611.0" width="166.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.4" y="622.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (164 samples, 14.13%)</title><rect x="37.4" y="595.0" width="166.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.4" y="606.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (164 samples, 14.13%)</title><rect x="37.4" y="579.0" width="166.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="40.4" y="590.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (117 samples, 10.08%)</title><rect x="37.4" y="563.0" width="119.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.4" y="574.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (22 samples, 1.89%)</title><rect x="37.4" y="547.0" width="22.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.4" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (22 samples, 1.89%)</title><rect x="37.4" y="531.0" width="22.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="40.4" y="542.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (15 samples, 1.29%)</title><rect x="44.6" y="515.0" width="15.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="47.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (15 samples, 1.29%)</title><rect x="44.6" y="499.0" width="15.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.17%)</title><rect x="59.8" y="547.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="62.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (2 samples, 0.17%)</title><rect x="59.8" y="531.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="62.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="60.8" y="515.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.8" y="526.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.09%)</title><rect x="60.8" y="499.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="63.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (93 samples, 8.01%)</title><rect x="61.8" y="547.0" width="94.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.8" y="558.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (93 samples, 8.01%)</title><rect x="61.8" y="531.0" width="94.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.8" y="542.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (91 samples, 7.84%)</title><rect x="63.9" y="515.0" width="92.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.9" y="526.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (91 samples, 7.84%)</title><rect x="63.9" y="499.0" width="92.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="66.9" y="510.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (89 samples, 7.67%)</title><rect x="65.9" y="483.0" width="90.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.9" y="494.0">sun/misc/U..</text>
</g>
<g>
<title>Unsafe_Unpark (82 samples, 7.06%)</title><rect x="66.9" y="467.0" width="83.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="69.9" y="478.0">Unsafe_Un..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="74.0" y="451.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="77.0" y="462.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.17%)</title><rect x="76.1" y="451.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="79.1" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="78.1" y="451.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="81.1" y="462.0"></text>
</g>
<g>
<title>__pthread_cond_signal (52 samples, 4.48%)</title><rect x="79.1" y="451.0" width="52.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="82.1" y="462.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (6 samples, 0.52%)</title><rect x="132.0" y="451.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="135.0" y="462.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 1.03%)</title><rect x="138.1" y="451.0" width="12.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="141.1" y="462.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.09%)</title><rect x="150.3" y="467.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="153.3" y="478.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="151.3" y="467.0" width="2.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="154.3" y="478.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="153.3" y="467.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="156.3" y="478.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.17%)</title><rect x="154.3" y="467.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="157.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (42 samples, 3.62%)</title><rect x="156.4" y="563.0" width="42.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="159.4" y="574.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (42 samples, 3.62%)</title><rect x="156.4" y="547.0" width="42.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.4" y="558.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (42 samples, 3.62%)</title><rect x="156.4" y="531.0" width="42.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="159.4" y="542.0">java..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="198.0" y="515.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.09%)</title><rect x="199.0" y="563.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.09%)</title><rect x="199.0" y="547.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.09%)</title><rect x="199.0" y="531.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.34%)</title><rect x="200.1" y="563.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.34%)</title><rect x="200.1" y="547.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.34%)</title><rect x="200.1" y="531.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (4 samples, 0.34%)</title><rect x="200.1" y="515.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.1" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.26%)</title><rect x="204.1" y="659.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="207.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.26%)</title><rect x="204.1" y="643.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.34%)</title><rect x="207.2" y="659.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.34%)</title><rect x="207.2" y="643.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.34%)</title><rect x="207.2" y="627.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (20 samples, 1.72%)</title><rect x="211.2" y="659.0" width="20.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="214.2" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (20 samples, 1.72%)</title><rect x="211.2" y="643.0" width="20.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.2" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.34%)</title><rect x="223.4" y="627.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.4" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="223.4" y="611.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.4" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.09%)</title><rect x="223.4" y="595.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.4" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="223.4" y="579.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.4" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.26%)</title><rect x="224.5" y="611.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.5" y="622.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.34%)</title><rect x="227.5" y="627.0" width="4.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="230.5" y="638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.52%)</title><rect x="231.6" y="659.0" width="6.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="234.6" y="670.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.17%)</title><rect x="237.7" y="691.0" width="2.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="240.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.17%)</title><rect x="239.7" y="691.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.17%)</title><rect x="239.7" y="675.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="242.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.09%)</title><rect x="241.7" y="691.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="244.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.09%)</title><rect x="241.7" y="675.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.34%)</title><rect x="242.7" y="691.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="245.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.34%)</title><rect x="242.7" y="675.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.34%)</title><rect x="242.7" y="659.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="245.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.34%)</title><rect x="242.7" y="643.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.7" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.26%)</title><rect x="243.8" y="627.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="246.8" y="691.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="249.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="246.8" y="675.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.09%)</title><rect x="246.8" y="659.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="246.8" y="643.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="246.8" y="627.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (59 samples, 5.08%)</title><rect x="247.8" y="707.0" width="60.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.8" y="718.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 5.00%)</title><rect x="248.8" y="691.0" width="59.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.8" y="702.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 3.10%)</title><rect x="248.8" y="675.0" width="36.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.8" y="686.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (36 samples, 3.10%)</title><rect x="248.8" y="659.0" width="36.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="251.8" y="670.0">org..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="248.8" y="643.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="248.8" y="627.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="251.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 3.01%)</title><rect x="249.9" y="643.0" width="35.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.9" y="654.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (30 samples, 2.58%)</title><rect x="249.9" y="627.0" width="30.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.9" y="638.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (30 samples, 2.58%)</title><rect x="249.9" y="611.0" width="30.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.9" y="622.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (18 samples, 1.55%)</title><rect x="249.9" y="595.0" width="18.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (10 samples, 0.86%)</title><rect x="258.0" y="579.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (10 samples, 0.86%)</title><rect x="258.0" y="563.0" width="10.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (10 samples, 0.86%)</title><rect x="258.0" y="547.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (10 samples, 0.86%)</title><rect x="258.0" y="531.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="261.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (10 samples, 0.86%)</title><rect x="258.0" y="515.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (10 samples, 0.86%)</title><rect x="258.0" y="499.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="261.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (10 samples, 0.86%)</title><rect x="258.0" y="483.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 0.95%)</title><rect x="268.2" y="595.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.09%)</title><rect x="268.2" y="579.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.86%)</title><rect x="269.2" y="579.0" width="10.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="272.2" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="269.2" y="563.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="272.2" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="269.2" y="547.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="272.2" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="269.2" y="531.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="272.2" y="542.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.09%)</title><rect x="269.2" y="515.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="272.2" y="526.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.09%)</title><rect x="269.2" y="499.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="272.2" y="510.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="269.2" y="483.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="272.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (9 samples, 0.78%)</title><rect x="270.2" y="563.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.2" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (9 samples, 0.78%)</title><rect x="270.2" y="547.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.2" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (8 samples, 0.69%)</title><rect x="271.2" y="531.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.2" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="277.3" y="515.0" width="2.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="280.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.09%)</title><rect x="279.3" y="595.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.09%)</title><rect x="280.4" y="627.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="280.4" y="611.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="280.4" y="595.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="280.4" y="579.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="280.4" y="563.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="280.4" y="547.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (4 samples, 0.34%)</title><rect x="281.4" y="627.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.26%)</title><rect x="282.4" y="611.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="282.4" y="595.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="282.4" y="579.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="283.4" y="595.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="283.4" y="579.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="283.4" y="563.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="283.4" y="547.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="286.4" y="558.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.09%)</title><rect x="283.4" y="531.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="286.4" y="542.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="283.4" y="515.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.4" y="526.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="284.4" y="563.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="287.4" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="284.4" y="547.0" width="1.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="287.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (12 samples, 1.03%)</title><rect x="285.4" y="675.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.86%)</title><rect x="285.4" y="659.0" width="10.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="288.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.69%)</title><rect x="285.4" y="643.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.4" y="654.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.17%)</title><rect x="285.4" y="627.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/193729802.accept (2 samples, 0.17%)</title><rect x="285.4" y="611.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="288.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.17%)</title><rect x="285.4" y="595.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.17%)</title><rect x="285.4" y="579.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (2 samples, 0.17%)</title><rect x="285.4" y="563.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (2 samples, 0.17%)</title><rect x="285.4" y="547.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.4" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="285.4" y="531.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="285.4" y="515.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="288.4" y="526.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.09%)</title><rect x="286.5" y="531.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.5" y="542.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.09%)</title><rect x="286.5" y="515.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (3 samples, 0.26%)</title><rect x="287.5" y="627.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (3 samples, 0.26%)</title><rect x="287.5" y="611.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.5" y="622.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="288.5" y="595.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.5" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="288.5" y="579.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.5" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="288.5" y="563.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.5" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="289.5" y="595.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.5" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="289.5" y="579.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.5" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="289.5" y="563.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.5" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="289.5" y="547.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.5" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="289.5" y="531.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="292.5" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="289.5" y="515.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="290.5" y="627.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="290.5" y="611.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.5" y="622.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="290.5" y="595.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.5" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.09%)</title><rect x="290.5" y="579.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.5" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.09%)</title><rect x="290.5" y="563.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.5" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="290.5" y="547.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.17%)</title><rect x="291.5" y="627.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.17%)</title><rect x="291.5" y="611.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.5" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="291.5" y="595.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.5" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="291.5" y="579.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.5" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="291.5" y="563.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="294.5" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="291.5" y="547.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.5" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="291.5" y="531.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.5" y="542.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.17%)</title><rect x="291.5" y="515.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="294.5" y="526.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="292.5" y="499.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.5" y="510.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="292.5" y="483.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.5" y="494.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="292.5" y="467.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="295.5" y="478.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="292.5" y="451.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.17%)</title><rect x="293.6" y="643.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.17%)</title><rect x="293.6" y="627.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="293.6" y="611.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.17%)</title><rect x="293.6" y="595.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.17%)</title><rect x="293.6" y="579.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.6" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="293.6" y="563.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.6" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="293.6" y="547.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.6" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="293.6" y="531.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.6" y="542.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="293.6" y="515.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.6" y="526.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="293.6" y="499.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.6" y="510.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="293.6" y="483.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.6" y="494.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/2100961961.get (1 samples, 0.09%)</title><rect x="294.6" y="563.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="297.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.17%)</title><rect x="295.6" y="659.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="298.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.09%)</title><rect x="295.6" y="643.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="295.6" y="627.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.09%)</title><rect x="296.6" y="643.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.rejoinNeededOrPending (1 samples, 0.09%)</title><rect x="296.6" y="627.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="297.6" y="675.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="300.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.09%)</title><rect x="297.6" y="659.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="300.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (1 samples, 0.09%)</title><rect x="297.6" y="643.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.17%)</title><rect x="298.6" y="675.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="301.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.17%)</title><rect x="298.6" y="659.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="301.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.17%)</title><rect x="298.6" y="643.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="301.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.17%)</title><rect x="298.6" y="627.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.17%)</title><rect x="298.6" y="611.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.17%)</title><rect x="298.6" y="595.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.17%)</title><rect x="298.6" y="579.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="301.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.17%)</title><rect x="298.6" y="563.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.17%)</title><rect x="298.6" y="547.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="301.6" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.17%)</title><rect x="298.6" y="531.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="301.6" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="298.6" y="515.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="301.6" y="526.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="299.7" y="515.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="302.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.60%)</title><rect x="300.7" y="675.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="303.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.52%)</title><rect x="301.7" y="659.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="304.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="302.7" y="643.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="305.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="302.7" y="627.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="305.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="302.7" y="611.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="302.7" y="595.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="302.7" y="579.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="305.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="303.7" y="643.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="306.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="303.7" y="627.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.26%)</title><rect x="304.7" y="643.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="306.8" y="627.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.8" y="638.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="306.8" y="611.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="309.8" y="622.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="306.8" y="595.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="309.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="306.8" y="579.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="306.8" y="563.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="309.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.09%)</title><rect x="306.8" y="547.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.8" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.run (716 samples, 61.67%)</title><rect x="307.8" y="739.0" width="727.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.8" y="750.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (716 samples, 61.67%)</title><rect x="307.8" y="723.0" width="727.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.8" y="734.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (716 samples, 61.67%)</title><rect x="307.8" y="707.0" width="727.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="310.8" y="718.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1152616950.run (453 samples, 39.02%)</title><rect x="314.9" y="691.0" width="460.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="317.9" y="702.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$27..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (449 samples, 38.67%)</title><rect x="319.0" y="675.0" width="456.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="322.0" y="686.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$put..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (449 samples, 38.67%)</title><rect x="319.0" y="659.0" width="456.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="322.0" y="670.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (443 samples, 38.16%)</title><rect x="319.0" y="643.0" width="450.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="322.0" y="654.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.schedul..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (2 samples, 0.17%)</title><rect x="326.1" y="627.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="329.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (150 samples, 12.92%)</title><rect x="328.1" y="627.0" width="152.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.1" y="638.0">com/linecorp/decato..</text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="341.3" y="611.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="344.3" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.60%)</title><rect x="344.4" y="611.0" width="7.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="347.4" y="622.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="346.4" y="595.0" width="5.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="349.4" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (126 samples, 10.85%)</title><rect x="351.5" y="611.0" width="128.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.5" y="622.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (126 samples, 10.85%)</title><rect x="351.5" y="595.0" width="128.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.5" y="606.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (126 samples, 10.85%)</title><rect x="351.5" y="579.0" width="128.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="354.5" y="590.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (126 samples, 10.85%)</title><rect x="351.5" y="563.0" width="128.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="354.5" y="574.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (126 samples, 10.85%)</title><rect x="351.5" y="547.0" width="128.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="354.5" y="558.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (31 samples, 2.67%)</title><rect x="351.5" y="531.0" width="31.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.5" y="542.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 0.69%)</title><rect x="351.5" y="515.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="354.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 0.69%)</title><rect x="351.5" y="499.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="354.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (8 samples, 0.69%)</title><rect x="351.5" y="483.0" width="8.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="354.5" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.69%)</title><rect x="351.5" y="467.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="354.5" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (8 samples, 0.69%)</title><rect x="351.5" y="451.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.5" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="358.6" y="435.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="361.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (23 samples, 1.98%)</title><rect x="359.6" y="515.0" width="23.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="362.6" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (23 samples, 1.98%)</title><rect x="359.6" y="499.0" width="23.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="362.6" y="510.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="359.6" y="483.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="362.6" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="359.6" y="467.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="362.6" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="359.6" y="451.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="362.6" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="359.6" y="435.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="362.6" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="359.6" y="419.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="362.6" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="359.6" y="403.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="362.6" y="414.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="359.6" y="387.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="362.6" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="359.6" y="371.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="362.6" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.09%)</title><rect x="359.6" y="355.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="362.6" y="366.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.09%)</title><rect x="359.6" y="339.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="362.6" y="350.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="360.6" y="419.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="363.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (10 samples, 0.86%)</title><rect x="361.7" y="483.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="364.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (10 samples, 0.86%)</title><rect x="361.7" y="467.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="364.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (3 samples, 0.26%)</title><rect x="368.8" y="451.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (11 samples, 0.95%)</title><rect x="371.8" y="483.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="374.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (11 samples, 0.95%)</title><rect x="371.8" y="467.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="374.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (6 samples, 0.52%)</title><rect x="371.8" y="451.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="374.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.17%)</title><rect x="377.9" y="451.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="380.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="378.9" y="435.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="381.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (3 samples, 0.26%)</title><rect x="380.0" y="451.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="383.0" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="382.0" y="435.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="385.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (87 samples, 7.49%)</title><rect x="383.0" y="531.0" width="88.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="386.0" y="542.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.34%)</title><rect x="383.0" y="515.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="386.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.34%)</title><rect x="383.0" y="499.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="386.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (4 samples, 0.34%)</title><rect x="383.0" y="483.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="386.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (4 samples, 0.34%)</title><rect x="383.0" y="467.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="386.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (4 samples, 0.34%)</title><rect x="383.0" y="451.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="386.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="384.0" y="435.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="387.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (2 samples, 0.17%)</title><rect x="385.0" y="435.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="388.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (2 samples, 0.17%)</title><rect x="385.0" y="419.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.17%)</title><rect x="387.1" y="515.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="390.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.17%)</title><rect x="387.1" y="499.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="390.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.69%)</title><rect x="389.1" y="515.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="392.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.69%)</title><rect x="389.1" y="499.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="392.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.52%)</title><rect x="390.1" y="483.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="393.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.34%)</title><rect x="392.2" y="467.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="395.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.09%)</title><rect x="396.2" y="483.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="399.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.34%)</title><rect x="397.2" y="515.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="400.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.26%)</title><rect x="398.3" y="499.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="401.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (69 samples, 5.94%)</title><rect x="401.3" y="515.0" width="70.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="404.3" y="526.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.38%)</title><rect x="401.3" y="499.0" width="16.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="402.3" y="483.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="405.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.17%)</title><rect x="403.3" y="483.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="406.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.17%)</title><rect x="403.3" y="467.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="406.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.17%)</title><rect x="403.3" y="451.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.17%)</title><rect x="403.3" y="435.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="406.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.17%)</title><rect x="403.3" y="419.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.69%)</title><rect x="405.4" y="483.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="408.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (5 samples, 0.43%)</title><rect x="405.4" y="467.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="408.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.09%)</title><rect x="409.4" y="451.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="412.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.26%)</title><rect x="410.4" y="467.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="413.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.26%)</title><rect x="410.4" y="451.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="413.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.17%)</title><rect x="411.5" y="435.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="414.5" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.17%)</title><rect x="411.5" y="419.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="414.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.34%)</title><rect x="413.5" y="483.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="416.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.34%)</title><rect x="413.5" y="467.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="416.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (53 samples, 4.57%)</title><rect x="417.6" y="499.0" width="53.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.6" y="510.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (53 samples, 4.57%)</title><rect x="417.6" y="483.0" width="53.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="420.6" y="494.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (51 samples, 4.39%)</title><rect x="419.6" y="467.0" width="51.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="422.6" y="478.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.64%)</title><rect x="423.7" y="451.0" width="19.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="426.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (4 samples, 0.34%)</title><rect x="424.7" y="435.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="427.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.17%)</title><rect x="428.7" y="435.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="431.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.60%)</title><rect x="430.8" y="435.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="433.8" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.60%)</title><rect x="430.8" y="419.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="433.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.60%)</title><rect x="430.8" y="403.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="433.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.09%)</title><rect x="431.8" y="387.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="434.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.43%)</title><rect x="432.8" y="387.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.26%)</title><rect x="437.9" y="435.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="440.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.09%)</title><rect x="437.9" y="419.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="440.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.17%)</title><rect x="438.9" y="419.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="441.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.17%)</title><rect x="438.9" y="403.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="440.9" y="435.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="443.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="440.9" y="419.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="443.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="442.0" y="403.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="445.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.78%)</title><rect x="443.0" y="451.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="446.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.60%)</title><rect x="445.0" y="435.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="448.0" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="445.0" y="419.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="448.0" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="445.0" y="403.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="448.0" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="445.0" y="387.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="448.0" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="445.0" y="371.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="448.0" y="382.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="445.0" y="355.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="448.0" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.52%)</title><rect x="446.0" y="419.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="449.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.52%)</title><rect x="446.0" y="403.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="449.0" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.52%)</title><rect x="446.0" y="387.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="449.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="452.1" y="451.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (9 samples, 0.78%)</title><rect x="453.1" y="451.0" width="9.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="456.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (9 samples, 0.78%)</title><rect x="453.1" y="435.0" width="9.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="456.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (9 samples, 0.78%)</title><rect x="453.1" y="419.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (9 samples, 0.78%)</title><rect x="453.1" y="403.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.1" y="414.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (9 samples, 0.78%)</title><rect x="453.1" y="387.0" width="9.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.1" y="398.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.78%)</title><rect x="453.1" y="371.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="456.1" y="382.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (1 samples, 0.09%)</title><rect x="461.3" y="355.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="464.3" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.43%)</title><rect x="462.3" y="451.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="465.3" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.43%)</title><rect x="462.3" y="435.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="465.3" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.43%)</title><rect x="462.3" y="419.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="465.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.17%)</title><rect x="467.4" y="451.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="470.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="467.4" y="435.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="470.4" y="446.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (2 samples, 0.17%)</title><rect x="469.4" y="451.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="472.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.69%)</title><rect x="471.4" y="531.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="474.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.69%)</title><rect x="471.4" y="515.0" width="8.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="474.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.69%)</title><rect x="471.4" y="499.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="474.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.69%)</title><rect x="471.4" y="483.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="474.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.69%)</title><rect x="471.4" y="467.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="474.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="478.5" y="451.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="481.5" y="462.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="479.6" y="611.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="482.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (257 samples, 22.14%)</title><rect x="480.6" y="627.0" width="261.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="483.6" y="638.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (51 samples, 4.39%)</title><rect x="480.6" y="611.0" width="51.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="483.6" y="622.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (1 samples, 0.09%)</title><rect x="480.6" y="595.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="483.6" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (50 samples, 4.31%)</title><rect x="481.6" y="595.0" width="50.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="484.6" y="606.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (50 samples, 4.31%)</title><rect x="481.6" y="579.0" width="50.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="484.6" y="590.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (19 samples, 1.64%)</title><rect x="490.7" y="563.0" width="19.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="493.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (19 samples, 1.64%)</title><rect x="490.7" y="547.0" width="19.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="493.7" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (19 samples, 1.64%)</title><rect x="490.7" y="531.0" width="19.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="493.7" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (19 samples, 1.64%)</title><rect x="490.7" y="515.0" width="19.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="493.7" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.43%)</title><rect x="510.1" y="563.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="513.1" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.43%)</title><rect x="510.1" y="547.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="513.1" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.43%)</title><rect x="510.1" y="531.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="513.1" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (17 samples, 1.46%)</title><rect x="515.1" y="563.0" width="17.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="518.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 1.03%)</title><rect x="520.2" y="547.0" width="12.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="523.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="520.2" y="531.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="523.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="520.2" y="515.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="523.2" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 0.95%)</title><rect x="521.2" y="531.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="524.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="529.4" y="515.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="532.4" y="526.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.17%)</title><rect x="530.4" y="515.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="533.4" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="532.4" y="611.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="535.4" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="533.4" y="595.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="536.4" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.17%)</title><rect x="533.4" y="579.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="536.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (131 samples, 11.28%)</title><rect x="535.5" y="611.0" width="133.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="538.5" y="622.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (131 samples, 11.28%)</title><rect x="535.5" y="595.0" width="133.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="538.5" y="606.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (36 samples, 3.10%)</title><rect x="544.6" y="579.0" width="36.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="547.6" y="590.0">com..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="549.7" y="563.0" width="3.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="552.7" y="574.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="549.7" y="547.0" width="3.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="552.7" y="558.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (23 samples, 1.98%)</title><rect x="552.7" y="563.0" width="23.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="555.7" y="574.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (22 samples, 1.89%)</title><rect x="553.8" y="547.0" width="22.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="556.8" y="558.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (19 samples, 1.64%)</title><rect x="553.8" y="531.0" width="19.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="556.8" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (19 samples, 1.64%)</title><rect x="553.8" y="515.0" width="19.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="556.8" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (19 samples, 1.64%)</title><rect x="553.8" y="499.0" width="19.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="556.8" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 0.95%)</title><rect x="557.8" y="483.0" width="11.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="560.8" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="558.8" y="467.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="561.8" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.52%)</title><rect x="559.9" y="467.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="562.9" y="478.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="559.9" y="451.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="562.9" y="462.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.43%)</title><rect x="560.9" y="451.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="563.9" y="462.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.17%)</title><rect x="562.9" y="435.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="565.9" y="446.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="562.9" y="419.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="565.9" y="430.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="563.9" y="419.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="566.9" y="430.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.09%)</title><rect x="564.9" y="435.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="567.9" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.26%)</title><rect x="566.0" y="467.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="569.0" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="566.0" y="451.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="569.0" y="462.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="567.0" y="435.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="570.0" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="568.0" y="451.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="571.0" y="462.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="569.0" y="483.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="572.0" y="494.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (2 samples, 0.17%)</title><rect x="571.0" y="483.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="574.0" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.26%)</title><rect x="573.1" y="531.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="576.1" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.17%)</title><rect x="576.1" y="563.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="579.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.17%)</title><rect x="576.1" y="547.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="579.1" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.17%)</title><rect x="576.1" y="531.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="579.1" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="576.1" y="515.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="579.1" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="576.1" y="499.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="579.1" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="576.1" y="483.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="579.1" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="576.1" y="467.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="579.1" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="576.1" y="451.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="579.1" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="576.1" y="435.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="579.1" y="446.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="576.1" y="419.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="579.1" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="576.1" y="403.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="579.1" y="414.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.09%)</title><rect x="576.1" y="387.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="579.1" y="398.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="577.1" y="451.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="580.1" y="462.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="578.1" y="563.0" width="3.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="581.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.78%)</title><rect x="581.2" y="579.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="584.2" y="590.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (7 samples, 0.60%)</title><rect x="581.2" y="563.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="584.2" y="574.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (7 samples, 0.60%)</title><rect x="581.2" y="547.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="584.2" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.17%)</title><rect x="588.3" y="563.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="591.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.17%)</title><rect x="588.3" y="547.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="591.3" y="558.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="590.3" y="579.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="593.3" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="593.4" y="579.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="596.4" y="590.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (73 samples, 6.29%)</title><rect x="594.4" y="579.0" width="74.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="597.4" y="590.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (71 samples, 6.12%)</title><rect x="596.4" y="563.0" width="72.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="599.4" y="574.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (13 samples, 1.12%)</title><rect x="605.6" y="547.0" width="13.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="608.6" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (13 samples, 1.12%)</title><rect x="605.6" y="531.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="608.6" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (13 samples, 1.12%)</title><rect x="605.6" y="515.0" width="13.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="608.6" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (13 samples, 1.12%)</title><rect x="605.6" y="499.0" width="13.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="608.6" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="618.8" y="547.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="621.8" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="618.8" y="531.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="621.8" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="618.8" y="515.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="621.8" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="619.8" y="499.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="622.8" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (47 samples, 4.05%)</title><rect x="620.8" y="547.0" width="47.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="623.8" y="558.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (41 samples, 3.53%)</title><rect x="626.9" y="531.0" width="41.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="629.9" y="542.0">jav..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.09%)</title><rect x="626.9" y="515.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="629.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (9 samples, 0.78%)</title><rect x="628.0" y="515.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="631.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (9 samples, 0.78%)</title><rect x="628.0" y="499.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="631.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (31 samples, 2.67%)</title><rect x="637.1" y="515.0" width="31.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="640.1" y="526.0">ja..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="655.4" y="499.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="658.4" y="510.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.09%)</title><rect x="655.4" y="483.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="658.4" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="656.4" y="499.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="659.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.69%)</title><rect x="657.4" y="499.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="660.4" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="664.5" y="483.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="667.5" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="664.5" y="467.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="667.5" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="664.5" y="451.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="667.5" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="664.5" y="435.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="667.5" y="446.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="664.5" y="419.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="667.5" y="430.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.26%)</title><rect x="665.6" y="499.0" width="3.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="668.6" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (51 samples, 4.39%)</title><rect x="668.6" y="611.0" width="51.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="671.6" y="622.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (51 samples, 4.39%)</title><rect x="668.6" y="595.0" width="51.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="671.6" y="606.0">com/l..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="672.7" y="579.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="675.7" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="672.7" y="563.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="675.7" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="672.7" y="547.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="675.7" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="672.7" y="531.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="675.7" y="542.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="672.7" y="515.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="675.7" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="672.7" y="499.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="675.7" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2034428208.process (28 samples, 2.41%)</title><rect x="673.7" y="579.0" width="28.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="676.7" y="590.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (24 samples, 2.07%)</title><rect x="677.8" y="563.0" width="24.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="680.8" y="574.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (21 samples, 1.81%)</title><rect x="677.8" y="547.0" width="21.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="680.8" y="558.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.26%)</title><rect x="678.8" y="531.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="681.8" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.26%)</title><rect x="678.8" y="515.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="681.8" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.26%)</title><rect x="678.8" y="499.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="681.8" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.26%)</title><rect x="678.8" y="483.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="681.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.17%)</title><rect x="679.8" y="467.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="682.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="680.8" y="451.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="683.8" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.78%)</title><rect x="681.8" y="531.0" width="9.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="684.8" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.43%)</title><rect x="685.9" y="515.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="688.9" y="526.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="685.9" y="499.0" width="5.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="688.9" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.69%)</title><rect x="691.0" y="531.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="694.0" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.09%)</title><rect x="698.1" y="515.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="701.1" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.26%)</title><rect x="699.1" y="547.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="702.1" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="700.1" y="531.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="703.1" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="700.1" y="515.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="703.1" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="700.1" y="499.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="703.1" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.09%)</title><rect x="701.1" y="515.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="704.1" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="702.1" y="579.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="705.1" y="590.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.26%)</title><rect x="702.1" y="563.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="705.1" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.78%)</title><rect x="705.2" y="579.0" width="9.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="708.2" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.52%)</title><rect x="708.2" y="563.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.2" y="574.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.34%)</title><rect x="709.3" y="547.0" width="4.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="712.3" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.09%)</title><rect x="713.3" y="547.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="716.3" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.26%)</title><rect x="714.3" y="579.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="717.3" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.26%)</title><rect x="714.3" y="563.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="717.3" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.26%)</title><rect x="717.4" y="579.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="720.4" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="718.4" y="563.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="721.4" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="719.4" y="563.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="722.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.09%)</title><rect x="720.4" y="611.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="723.4" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="720.4" y="595.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="723.4" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="720.4" y="579.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="723.4" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="720.4" y="563.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="723.4" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="720.4" y="547.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="723.4" y="558.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="720.4" y="531.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="723.4" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="720.4" y="515.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="723.4" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1508789423.linkToTargetMethod (2 samples, 0.17%)</title><rect x="721.5" y="611.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="724.5" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (2 samples, 0.17%)</title><rect x="721.5" y="595.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="724.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1500829048.get$Lambda (2 samples, 0.17%)</title><rect x="721.5" y="579.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="724.5" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="721.5" y="563.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="724.5" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="721.5" y="547.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="724.5" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="722.5" y="547.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="725.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.46%)</title><rect x="723.5" y="611.0" width="17.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="726.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.46%)</title><rect x="723.5" y="595.0" width="17.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="726.5" y="606.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.52%)</title><rect x="727.6" y="579.0" width="6.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="730.6" y="590.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="729.6" y="563.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="732.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.52%)</title><rect x="733.7" y="579.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="736.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1500829048.accept (5 samples, 0.43%)</title><rect x="733.7" y="563.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="736.7" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (5 samples, 0.43%)</title><rect x="733.7" y="547.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="736.7" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (5 samples, 0.43%)</title><rect x="733.7" y="531.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="736.7" y="542.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 0.43%)</title><rect x="733.7" y="515.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="736.7" y="526.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 0.43%)</title><rect x="733.7" y="499.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="736.7" y="510.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="734.7" y="483.0" width="4.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="737.7" y="494.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="736.7" y="467.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="739.7" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1027268022.accept (1 samples, 0.09%)</title><rect x="738.7" y="563.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="741.7" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="738.7" y="547.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="741.7" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="738.7" y="531.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="741.7" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="738.7" y="515.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="741.7" y="526.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="739.8" y="579.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="742.8" y="590.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="740.8" y="611.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="743.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.55%)</title><rect x="741.8" y="627.0" width="18.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="744.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 1.55%)</title><rect x="741.8" y="611.0" width="18.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="744.8" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (2 samples, 0.17%)</title><rect x="742.8" y="595.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="745.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 1.29%)</title><rect x="744.8" y="595.0" width="15.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="747.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1500829048.accept (15 samples, 1.29%)</title><rect x="744.8" y="579.0" width="15.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="747.8" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (15 samples, 1.29%)</title><rect x="744.8" y="563.0" width="15.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="747.8" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (15 samples, 1.29%)</title><rect x="744.8" y="547.0" width="15.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="747.8" y="558.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (15 samples, 1.29%)</title><rect x="744.8" y="531.0" width="15.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="747.8" y="542.0"></text>
</g>
<g>
<title>java/time/Duration.create (15 samples, 1.29%)</title><rect x="744.8" y="515.0" width="15.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.8" y="526.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.78%)</title><rect x="760.1" y="627.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="763.1" y="638.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.78%)</title><rect x="760.1" y="611.0" width="9.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="763.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 0.52%)</title><rect x="769.2" y="643.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="772.2" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="772.3" y="627.0" width="3.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="775.3" y="638.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="773.3" y="611.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="776.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.52%)</title><rect x="775.3" y="691.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="778.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.52%)</title><rect x="775.3" y="675.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="778.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.52%)</title><rect x="775.3" y="659.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="778.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.52%)</title><rect x="775.3" y="643.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="778.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.09%)</title><rect x="780.4" y="627.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="783.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (250 samples, 21.53%)</title><rect x="781.4" y="691.0" width="254.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="784.4" y="702.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (249 samples, 21.45%)</title><rect x="782.4" y="675.0" width="253.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.4" y="686.0">java/util/concurrent/LinkedBlockin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (221 samples, 19.04%)</title><rect x="787.5" y="659.0" width="224.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="790.5" y="670.0">java/util/concurrent/locks/Abs..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (23 samples, 1.98%)</title><rect x="795.7" y="643.0" width="23.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="798.7" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (13 samples, 1.12%)</title><rect x="819.0" y="643.0" width="13.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="822.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 1.12%)</title><rect x="819.0" y="627.0" width="13.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="822.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 1.12%)</title><rect x="819.0" y="611.0" width="13.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="822.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.12%)</title><rect x="819.0" y="595.0" width="13.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="822.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (176 samples, 15.16%)</title><rect x="832.2" y="643.0" width="178.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="835.2" y="654.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (176 samples, 15.16%)</title><rect x="832.2" y="627.0" width="178.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="835.2" y="638.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="835.3" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="838.3" y="622.0"></text>
</g>
<g>
<title>Unsafe_Park (169 samples, 14.56%)</title><rect x="836.3" y="611.0" width="171.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="839.3" y="622.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.43%)</title><rect x="843.4" y="595.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="846.4" y="606.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.09%)</title><rect x="848.5" y="595.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="851.5" y="606.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 1.89%)</title><rect x="849.5" y="595.0" width="22.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="852.5" y="606.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.69%)</title><rect x="856.6" y="579.0" width="8.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="859.6" y="590.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.26%)</title><rect x="859.7" y="563.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="862.7" y="574.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="861.7" y="547.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="864.7" y="558.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="862.7" y="563.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="865.7" y="574.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="863.7" y="563.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="866.7" y="574.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="864.8" y="579.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="867.8" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.52%)</title><rect x="865.8" y="579.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="868.8" y="590.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="871.9" y="595.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="874.9" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="872.9" y="595.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="875.9" y="606.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.69%)</title><rect x="873.9" y="595.0" width="8.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="876.9" y="606.0"></text>
</g>
<g>
<title>__lll_unlock_wake (44 samples, 3.79%)</title><rect x="882.0" y="595.0" width="44.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="885.0" y="606.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (57 samples, 4.91%)</title><rect x="926.8" y="595.0" width="57.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="929.8" y="606.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.52%)</title><rect x="984.7" y="595.0" width="6.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="987.7" y="606.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="990.8" y="595.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="993.8" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.09%)</title><rect x="991.8" y="595.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="994.8" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.17%)</title><rect x="992.8" y="595.0" width="2.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="995.8" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.34%)</title><rect x="994.9" y="595.0" width="4.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="997.9" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.17%)</title><rect x="998.9" y="595.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1001.9" y="606.0"></text>
</g>
<g>
<title>_init (2 samples, 0.17%)</title><rect x="1001.0" y="595.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1004.0" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="1003.0" y="595.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1006.0" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="1004.0" y="595.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.0" y="606.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="1006.0" y="595.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1009.0" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.26%)</title><rect x="1008.1" y="611.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1011.1" y="622.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="1011.1" y="643.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1014.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 1.98%)</title><rect x="1012.1" y="659.0" width="23.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1015.1" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 1.98%)</title><rect x="1012.1" y="643.0" width="23.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1015.1" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 1.98%)</title><rect x="1012.1" y="627.0" width="23.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1015.1" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 1.98%)</title><rect x="1012.1" y="611.0" width="23.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1015.1" y="622.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1035.5" y="739.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1038.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1035.5" y="723.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1038.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1035.5" y="707.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1038.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1035.5" y="691.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1038.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="1035.5" y="675.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1038.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="1035.5" y="659.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1038.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="1035.5" y="643.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1038.5" y="654.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="1035.5" y="627.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1038.5" y="638.0"></text>
</g>
<g>
<title>start_thread (151 samples, 13.01%)</title><rect x="1036.5" y="739.0" width="153.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1039.5" y="750.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (151 samples, 13.01%)</title><rect x="1036.5" y="723.0" width="153.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1039.5" y="734.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 1.89%)</title><rect x="1036.5" y="707.0" width="22.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1039.5" y="718.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.43%)</title><rect x="1036.5" y="691.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1039.5" y="702.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.43%)</title><rect x="1036.5" y="675.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1039.5" y="686.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.17%)</title><rect x="1036.5" y="659.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1039.5" y="670.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.26%)</title><rect x="1038.6" y="659.0" width="3.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1041.6" y="670.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.46%)</title><rect x="1041.6" y="691.0" width="17.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1044.6" y="702.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.78%)</title><rect x="1041.6" y="675.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1044.6" y="686.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1041.6" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1044.6" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.09%)</title><rect x="1041.6" y="643.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1044.6" y="654.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.17%)</title><rect x="1042.6" y="659.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1045.6" y="670.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::mark_card_deferred(unsigned long) (1 samples, 0.09%)</title><rect x="1042.6" y="643.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.6" y="654.0"></text>
</g>
<g>
<title>Atomic::cmpxchg(signed char, signed char volatile*, signed char) (1 samples, 0.09%)</title><rect x="1042.6" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1045.6" y="638.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.09%)</title><rect x="1043.6" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1046.6" y="654.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.09%)</title><rect x="1044.7" y="659.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.7" y="670.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1045.7" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1048.7" y="670.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.34%)</title><rect x="1046.7" y="659.0" width="4.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1049.7" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.09%)</title><rect x="1050.8" y="675.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.8" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1050.8" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1053.8" y="670.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1050.8" y="643.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.8" y="654.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.60%)</title><rect x="1051.8" y="675.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1054.8" y="686.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.60%)</title><rect x="1051.8" y="659.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1054.8" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.60%)</title><rect x="1051.8" y="643.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.8" y="654.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.60%)</title><rect x="1051.8" y="627.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.8" y="638.0"></text>
</g>
<g>
<title>PtrQueueSet::deallocate_buffer(void**) (1 samples, 0.09%)</title><rect x="1051.8" y="611.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1054.8" y="622.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="1051.8" y="595.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1054.8" y="606.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="1051.8" y="579.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1054.8" y="590.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.52%)</title><rect x="1052.8" y="611.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1055.8" y="622.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.52%)</title><rect x="1052.8" y="595.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1055.8" y="606.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.17%)</title><rect x="1056.9" y="579.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.9" y="590.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.17%)</title><rect x="1056.9" y="563.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1059.9" y="574.0"></text>
</g>
<g>
<title>JavaThread::run() (128 samples, 11.02%)</title><rect x="1058.9" y="707.0" width="130.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.9" y="718.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (128 samples, 11.02%)</title><rect x="1058.9" y="691.0" width="130.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.9" y="702.0">JavaThread::thre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (128 samples, 11.02%)</title><rect x="1058.9" y="675.0" width="130.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1061.9" y="686.0">CompileBroker::c..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (127 samples, 10.94%)</title><rect x="1058.9" y="659.0" width="129.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.9" y="670.0">CompileBroker::i..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (127 samples, 10.94%)</title><rect x="1058.9" y="643.0" width="129.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.9" y="654.0">C2Compiler::comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (127 samples, 10.94%)</title><rect x="1058.9" y="627.0" width="129.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.9" y="638.0">Compile::Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (56 samples, 4.82%)</title><rect x="1058.9" y="611.0" width="56.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.9" y="622.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.17%)</title><rect x="1058.9" y="595.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1061.9" y="606.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1058.9" y="579.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.9" y="590.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1059.9" y="579.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1062.9" y="590.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.43%)</title><rect x="1060.9" y="595.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1063.9" y="606.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (5 samples, 0.43%)</title><rect x="1060.9" y="579.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1063.9" y="590.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.09%)</title><rect x="1061.9" y="563.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1064.9" y="574.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="1063.0" y="563.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1066.0" y="574.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1063.0" y="547.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1066.0" y="558.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.17%)</title><rect x="1064.0" y="563.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1067.0" y="574.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.17%)</title><rect x="1064.0" y="547.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1067.0" y="558.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.43%)</title><rect x="1066.0" y="595.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1069.0" y="606.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.43%)</title><rect x="1066.0" y="579.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1069.0" y="590.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1067.0" y="563.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1070.0" y="574.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.26%)</title><rect x="1068.0" y="563.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.0" y="574.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.17%)</title><rect x="1069.1" y="547.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1072.1" y="558.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1070.1" y="531.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.1" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.09%)</title><rect x="1071.1" y="595.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1074.1" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.09%)</title><rect x="1071.1" y="579.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1074.1" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1071.1" y="563.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1074.1" y="574.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.09%)</title><rect x="1071.1" y="547.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1074.1" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (43 samples, 3.70%)</title><rect x="1072.1" y="595.0" width="43.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1075.1" y="606.0">Phas..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1073.1" y="579.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1076.1" y="590.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.26%)</title><rect x="1074.1" y="579.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1077.1" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.17%)</title><rect x="1077.2" y="579.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.2" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1077.2" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.2" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1078.2" y="563.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.2" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.17%)</title><rect x="1079.2" y="579.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1082.2" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1079.2" y="563.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1082.2" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1080.2" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.2" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.34%)</title><rect x="1081.2" y="579.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1084.2" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.17%)</title><rect x="1083.3" y="563.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.3" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1084.3" y="547.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.3" y="558.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.09%)</title><rect x="1084.3" y="531.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1087.3" y="542.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.09%)</title><rect x="1084.3" y="515.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.3" y="526.0"></text>
</g>
<g>
<title>rRegNOper::type() const (1 samples, 0.09%)</title><rect x="1084.3" y="499.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.3" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 0.95%)</title><rect x="1085.3" y="579.0" width="11.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1088.3" y="590.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.17%)</title><rect x="1090.4" y="563.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.4" y="574.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1092.4" y="563.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.4" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.17%)</title><rect x="1093.4" y="563.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.4" y="574.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="1095.5" y="563.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.5" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1096.5" y="579.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.5" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1096.5" y="563.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1099.5" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.26%)</title><rect x="1097.5" y="579.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1100.5" y="590.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.09%)</title><rect x="1099.5" y="563.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1102.5" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.09%)</title><rect x="1100.6" y="579.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.6" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.09%)</title><rect x="1100.6" y="563.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1103.6" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.43%)</title><rect x="1101.6" y="579.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.6" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.34%)</title><rect x="1102.6" y="563.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.6" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.09%)</title><rect x="1106.7" y="579.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.7" y="590.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.09%)</title><rect x="1106.7" y="563.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.7" y="574.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.17%)</title><rect x="1107.7" y="579.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.7" y="590.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.17%)</title><rect x="1107.7" y="563.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.7" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 0.17%)</title><rect x="1107.7" y="547.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.7" y="558.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.17%)</title><rect x="1109.7" y="579.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.7" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.09%)</title><rect x="1111.7" y="579.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.7" y="590.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="1111.7" y="563.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.7" y="574.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.17%)</title><rect x="1112.8" y="579.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.8" y="590.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1113.8" y="563.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.8" y="574.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1114.8" y="579.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.8" y="590.0"></text>
</g>
<g>
<title>Compile::Optimize() (61 samples, 5.25%)</title><rect x="1115.8" y="611.0" width="62.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.8" y="622.0">Compil..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.26%)</title><rect x="1115.8" y="595.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.26%)</title><rect x="1115.8" y="579.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1116.8" y="563.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1117.8" y="563.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1120.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_AddP(Node*, Node*) (1 samples, 0.09%)</title><rect x="1117.8" y="547.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.8" y="558.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1117.8" y="531.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.8" y="542.0"></text>
</g>
<g>
<title>Compile::AliasType::Init(int, TypePtr const*) (1 samples, 0.09%)</title><rect x="1117.8" y="515.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.8" y="526.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1117.8" y="499.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.8" y="510.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1117.8" y="483.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.8" y="494.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1117.8" y="467.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1120.8" y="478.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.17%)</title><rect x="1118.9" y="595.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.9" y="606.0"></text>
</g>
<g>
<title>CallNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1118.9" y="579.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.9" y="590.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1119.9" y="579.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.9" y="590.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1119.9" y="563.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.9" y="574.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1119.9" y="547.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.9" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1119.9" y="531.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.9" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1119.9" y="515.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.9" y="526.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1119.9" y="499.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.9" y="510.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1119.9" y="483.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.9" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (43 samples, 3.70%)</title><rect x="1120.9" y="595.0" width="43.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.9" y="606.0">Phas..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.09%)</title><rect x="1120.9" y="579.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.9" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.26%)</title><rect x="1121.9" y="579.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.9" y="590.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.09%)</title><rect x="1123.9" y="563.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.9" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.26%)</title><rect x="1125.0" y="579.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.0" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1126.0" y="563.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.0" y="574.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.09%)</title><rect x="1127.0" y="563.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.0" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (30 samples, 2.58%)</title><rect x="1128.0" y="579.0" width="30.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.0" y="590.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (25 samples, 2.15%)</title><rect x="1133.1" y="563.0" width="25.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.1" y="574.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (25 samples, 2.15%)</title><rect x="1133.1" y="547.0" width="25.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.1" y="558.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1153.4" y="531.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.4" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1153.4" y="515.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.4" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.17%)</title><rect x="1154.4" y="531.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.4" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.17%)</title><rect x="1156.5" y="531.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.5" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.09%)</title><rect x="1158.5" y="579.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.5" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1159.5" y="579.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.5" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.09%)</title><rect x="1160.5" y="563.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.5" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1160.5" y="547.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.5" y="558.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.09%)</title><rect x="1160.5" y="531.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.5" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1161.5" y="579.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.5" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1161.5" y="563.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.5" y="574.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1161.5" y="547.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.5" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1161.5" y="531.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.5" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1162.6" y="579.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.6" y="590.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1162.6" y="563.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="574.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.09%)</title><rect x="1162.6" y="547.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="558.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1163.6" y="579.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.6" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 0.95%)</title><rect x="1164.6" y="595.0" width="11.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.6" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 0.86%)</title><rect x="1165.6" y="579.0" width="10.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.6" y="590.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1167.6" y="563.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.6" y="574.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1167.6" y="547.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.6" y="558.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.09%)</title><rect x="1167.6" y="531.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.6" y="542.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1167.6" y="515.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.6" y="526.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1167.6" y="499.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.6" y="510.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1167.6" y="483.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.6" y="494.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1167.6" y="467.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.6" y="478.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1167.6" y="451.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.6" y="462.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1167.6" y="435.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.6" y="446.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1168.7" y="547.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.7" y="558.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1168.7" y="531.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.7" y="542.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1168.7" y="515.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.7" y="526.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1169.7" y="563.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.7" y="574.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1170.7" y="563.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.7" y="574.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.26%)</title><rect x="1171.7" y="563.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.7" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1171.7" y="547.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.7" y="558.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1172.7" y="547.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.7" y="558.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1173.7" y="547.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.7" y="558.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1173.7" y="531.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.7" y="542.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.8" y="563.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.8" y="574.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1174.8" y="547.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.8" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.8" y="531.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.8" y="515.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.8" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.8" y="499.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.8" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.8" y="483.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.8" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.8" y="467.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.8" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.8" y="451.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.8" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.8" y="435.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.8" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.8" y="419.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.8" y="403.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.8" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.8" y="387.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.8" y="371.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.8" y="382.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.8" y="355.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="366.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1174.8" y="339.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.8" y="350.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.8" y="323.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.8" y="334.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1175.8" y="595.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.8" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1175.8" y="579.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1175.8" y="563.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.8" y="574.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1175.8" y="547.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.8" y="558.0"></text>
</g>
<g>
<title>StoreLNode::Opcode() const (1 samples, 0.09%)</title><rect x="1176.8" y="595.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.69%)</title><rect x="1177.8" y="611.0" width="8.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.69%)</title><rect x="1177.8" y="595.0" width="8.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.69%)</title><rect x="1177.8" y="579.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.69%)</title><rect x="1177.8" y="563.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.69%)</title><rect x="1177.8" y="547.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.69%)</title><rect x="1177.8" y="531.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.60%)</title><rect x="1177.8" y="515.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.60%)</title><rect x="1177.8" y="499.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.60%)</title><rect x="1177.8" y="483.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.60%)</title><rect x="1177.8" y="467.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.60%)</title><rect x="1177.8" y="451.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.52%)</title><rect x="1177.8" y="435.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1177.8" y="419.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1177.8" y="403.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1177.8" y="387.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1177.8" y="371.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1177.8" y="355.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1177.8" y="339.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1177.8" y="323.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1177.8" y="307.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1177.8" y="291.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1177.8" y="275.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1177.8" y="259.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.8" y="243.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.8" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.8" y="227.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.8" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.8" y="211.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.8" y="195.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.8" y="179.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.8" y="163.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.8" y="147.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.8" y="158.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.8" y="131.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.8" y="142.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1177.8" y="115.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="126.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1177.8" y="99.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.8" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1177.8" y="83.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="94.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1177.8" y="67.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="78.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1177.8" y="51.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.8" y="62.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1177.8" y="35.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.8" y="46.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1178.8" y="243.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="254.0"></text>
</g>
<g>
<title>SubINode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="227.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="238.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.09%)</title><rect x="1178.8" y="211.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="222.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1178.8" y="195.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1181.8" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1179.8" y="323.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1179.8" y="307.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1179.8" y="291.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.8" y="302.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1179.8" y="275.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.8" y="286.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1179.8" y="259.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="270.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1179.8" y="243.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.8" y="254.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1179.8" y="227.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="238.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1179.8" y="211.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.8" y="222.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.09%)</title><rect x="1179.8" y="195.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.9" y="419.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.9" y="403.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.9" y="387.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.9" y="371.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.9" y="355.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.9" y="339.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.9" y="323.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.9" y="307.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.9" y="291.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.9" y="275.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.9" y="259.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.9" y="243.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.9" y="227.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="211.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.9" y="195.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.9" y="179.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.9" y="163.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.9" y="147.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="131.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="115.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.9" y="126.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="99.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="110.0"></text>
</g>
<g>
<title>TypeLong::singleton() const (1 samples, 0.09%)</title><rect x="1180.9" y="83.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="94.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1181.9" y="227.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1181.9" y="211.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.9" y="222.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1181.9" y="195.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.9" y="206.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1181.9" y="179.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.9" y="190.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1181.9" y="163.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.9" y="174.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1181.9" y="147.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.9" y="158.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1181.9" y="131.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.9" y="142.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.09%)</title><rect x="1181.9" y="115.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="126.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1182.9" y="419.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method_type() (1 samples, 0.09%)</title><rect x="1182.9" y="403.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="414.0"></text>
</g>
<g>
<title>ConstantPool::method_type_at_if_loaded(constantPoolHandle, int) (1 samples, 0.09%)</title><rect x="1182.9" y="387.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.9" y="398.0"></text>
</g>
<g>
<title>ConstantPoolCacheEntry::method_type_if_resolved(constantPoolHandle) (1 samples, 0.09%)</title><rect x="1182.9" y="371.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1183.9" y="435.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1183.9" y="419.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="430.0"></text>
</g>
<g>
<title>Parse::push_constant(ciConstant, bool, bool, Type const*) (1 samples, 0.09%)</title><rect x="1183.9" y="403.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="414.0"></text>
</g>
<g>
<title>Type::make_from_constant(ciConstant, bool, bool) (1 samples, 0.09%)</title><rect x="1183.9" y="387.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.9" y="398.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_constant(ciObject*, bool, bool) (1 samples, 0.09%)</title><rect x="1183.9" y="371.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.9" y="382.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1183.9" y="355.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.9" y="366.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1183.9" y="339.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.9" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.9" y="515.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.9" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.9" y="499.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.9" y="483.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.9" y="467.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.9" y="451.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.9" y="435.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.9" y="419.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.9" y="403.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.9" y="387.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.9" y="371.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.9" y="355.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.9" y="339.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.9" y="323.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.9" y="307.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.9" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.9" y="291.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.9" y="275.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.9" y="259.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.9" y="243.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1184.9" y="227.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.9" y="238.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1184.9" y="211.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.9" y="222.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.09%)</title><rect x="1184.9" y="195.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.9" y="206.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.17%)</title><rect x="1185.9" y="611.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="622.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1187.0" y="595.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1190.0" y="606.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1188.0" y="659.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.0" y="670.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::select_task(CompileQueue*) (1 samples, 0.09%)</title><rect x="1188.0" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.0" y="654.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::is_method_profiled(Method*) (1 samples, 0.09%)</title><rect x="1188.0" y="627.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.0" y="638.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.09%)</title><rect x="1189.0" y="707.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="718.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.09%)</title><rect x="1189.0" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.0" y="702.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1189.0" y="675.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="686.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1189.0" y="659.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="670.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1189.0" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1189.0" y="627.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.0" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1189.0" y="611.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.0" y="622.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.09%)</title><rect x="1189.0" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="606.0"></text>
</g>
</g>
</svg>
