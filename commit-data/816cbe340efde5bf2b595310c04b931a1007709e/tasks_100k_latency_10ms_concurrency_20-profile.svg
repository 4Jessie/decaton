<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (434 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.23%)</title><rect x="10.0" y="931.0" width="2.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.23%)</title><rect x="10.0" y="915.0" width="2.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 6.22%)</title><rect x="12.7" y="931.0" width="73.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.7" y="942.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (27 samples, 6.22%)</title><rect x="12.7" y="915.0" width="73.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.7" y="926.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.23%)</title><rect x="12.7" y="899.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.23%)</title><rect x="12.7" y="883.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.23%)</title><rect x="12.7" y="867.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.23%)</title><rect x="12.7" y="851.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.23%)</title><rect x="12.7" y="835.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.7" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (10 samples, 2.30%)</title><rect x="15.4" y="899.0" width="27.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.4" y="910.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/551183003.accept (9 samples, 2.07%)</title><rect x="15.4" y="883.0" width="24.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.4" y="894.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (9 samples, 2.07%)</title><rect x="15.4" y="867.0" width="24.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.4" y="878.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (5 samples, 1.15%)</title><rect x="15.4" y="851.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (5 samples, 1.15%)</title><rect x="15.4" y="835.0" width="13.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (5 samples, 1.15%)</title><rect x="15.4" y="819.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.4" y="830.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.23%)</title><rect x="18.2" y="803.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.23%)</title><rect x="20.9" y="803.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.23%)</title><rect x="20.9" y="787.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.23%)</title><rect x="20.9" y="771.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.9" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.46%)</title><rect x="23.6" y="803.0" width="5.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="26.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 0.92%)</title><rect x="29.0" y="851.0" width="10.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.0" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.69%)</title><rect x="29.0" y="835.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.0" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.46%)</title><rect x="31.8" y="819.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.8" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.23%)</title><rect x="31.8" y="803.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.8" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.23%)</title><rect x="31.8" y="787.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.8" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.23%)</title><rect x="31.8" y="771.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.8" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.23%)</title><rect x="34.5" y="803.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.5" y="814.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.23%)</title><rect x="37.2" y="835.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.2" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.23%)</title><rect x="37.2" y="819.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.2" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.23%)</title><rect x="37.2" y="803.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.2" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.23%)</title><rect x="37.2" y="787.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="40.2" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.23%)</title><rect x="37.2" y="771.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="40.2" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.23%)</title><rect x="37.2" y="755.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="40.2" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.23%)</title><rect x="37.2" y="739.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="40.2" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.23%)</title><rect x="37.2" y="723.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="40.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.23%)</title><rect x="39.9" y="883.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="42.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.23%)</title><rect x="39.9" y="867.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.23%)</title><rect x="39.9" y="851.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.23%)</title><rect x="39.9" y="835.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.9" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.23%)</title><rect x="39.9" y="819.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 3.69%)</title><rect x="42.6" y="899.0" width="43.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.6" y="910.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 3.69%)</title><rect x="42.6" y="883.0" width="43.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.6" y="894.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (12 samples, 2.76%)</title><rect x="45.3" y="867.0" width="32.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.3" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 1.38%)</title><rect x="45.3" y="851.0" width="16.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 1.38%)</title><rect x="45.3" y="835.0" width="16.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.92%)</title><rect x="45.3" y="819.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.92%)</title><rect x="45.3" y="803.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (3 samples, 0.69%)</title><rect x="48.1" y="787.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.1" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (2 samples, 0.46%)</title><rect x="48.1" y="771.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="51.1" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2 samples, 0.46%)</title><rect x="48.1" y="755.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.1" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (2 samples, 0.46%)</title><rect x="48.1" y="739.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.1" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (2 samples, 0.46%)</title><rect x="48.1" y="723.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.1" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (2 samples, 0.46%)</title><rect x="48.1" y="707.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.1" y="718.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_epollWait (1 samples, 0.23%)</title><rect x="50.8" y="691.0" width="2.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="53.8" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.23%)</title><rect x="53.5" y="771.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.5" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.23%)</title><rect x="53.5" y="755.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.5" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.23%)</title><rect x="53.5" y="739.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="56.5" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.23%)</title><rect x="53.5" y="723.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.5" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1 samples, 0.23%)</title><rect x="53.5" y="707.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.5" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollCtl (1 samples, 0.23%)</title><rect x="53.5" y="691.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.23%)</title><rect x="56.2" y="819.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.23%)</title><rect x="58.9" y="819.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.23%)</title><rect x="58.9" y="803.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="61.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.23%)</title><rect x="58.9" y="787.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.23%)</title><rect x="58.9" y="771.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="61.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.23%)</title><rect x="58.9" y="755.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="61.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.&lt;init&gt; (1 samples, 0.23%)</title><rect x="58.9" y="739.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="61.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.sizeBuffer (1 samples, 0.23%)</title><rect x="58.9" y="723.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.9" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.23%)</title><rect x="58.9" y="707.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="61.9" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.23%)</title><rect x="58.9" y="691.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.15%)</title><rect x="61.7" y="851.0" width="13.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.23%)</title><rect x="64.4" y="835.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casNext (1 samples, 0.23%)</title><rect x="64.4" y="819.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.4" y="830.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.compareAndSwapObject (1 samples, 0.23%)</title><rect x="64.4" y="803.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.4" y="814.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::write_ref_field_pre_work(unsigned int*, oopDesc*) (1 samples, 0.23%)</title><rect x="64.4" y="787.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="67.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.46%)</title><rect x="67.1" y="835.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.46%)</title><rect x="67.1" y="819.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.46%)</title><rect x="67.1" y="803.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.23%)</title><rect x="67.1" y="787.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.23%)</title><rect x="67.1" y="771.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.23%)</title><rect x="67.1" y="755.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="70.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.23%)</title><rect x="67.1" y="739.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.23%)</title><rect x="67.1" y="723.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.23%)</title><rect x="67.1" y="707.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.23%)</title><rect x="67.1" y="691.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="70.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.23%)</title><rect x="67.1" y="675.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="70.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.23%)</title><rect x="69.8" y="787.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.23%)</title><rect x="69.8" y="771.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="72.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.23%)</title><rect x="69.8" y="755.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.8" y="766.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.23%)</title><rect x="69.8" y="739.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.23%)</title><rect x="72.5" y="835.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="75.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.23%)</title><rect x="72.5" y="819.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.23%)</title><rect x="72.5" y="803.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.5" y="814.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.23%)</title><rect x="72.5" y="787.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.23%)</title><rect x="72.5" y="771.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.23%)</title><rect x="72.5" y="755.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="75.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.23%)</title><rect x="75.3" y="851.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.23%)</title><rect x="75.3" y="835.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.23%)</title><rect x="78.0" y="867.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.23%)</title><rect x="78.0" y="851.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="81.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.23%)</title><rect x="78.0" y="835.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.23%)</title><rect x="78.0" y="819.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="81.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.23%)</title><rect x="78.0" y="803.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.23%)</title><rect x="78.0" y="787.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.23%)</title><rect x="78.0" y="771.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.23%)</title><rect x="78.0" y="755.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.23%)</title><rect x="78.0" y="739.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.23%)</title><rect x="78.0" y="723.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="81.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.23%)</title><rect x="78.0" y="707.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.23%)</title><rect x="80.7" y="867.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="83.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.23%)</title><rect x="80.7" y="851.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="83.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.23%)</title><rect x="80.7" y="835.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.23%)</title><rect x="83.4" y="867.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="86.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.23%)</title><rect x="83.4" y="851.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="86.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.23%)</title><rect x="83.4" y="835.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="86.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.23%)</title><rect x="83.4" y="819.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="86.4" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.run (182 samples, 41.94%)</title><rect x="86.1" y="931.0" width="494.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="89.1" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (182 samples, 41.94%)</title><rect x="86.1" y="915.0" width="494.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.1" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (182 samples, 41.94%)</title><rect x="86.1" y="899.0" width="494.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.1" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1799395138.run (176 samples, 40.55%)</title><rect x="88.8" y="883.0" width="478.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.8" y="894.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (176 samples, 40.55%)</title><rect x="88.8" y="867.0" width="478.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.8" y="878.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTas..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (176 samples, 40.55%)</title><rect x="88.8" y="851.0" width="478.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.8" y="862.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (173 samples, 39.86%)</title><rect x="88.8" y="835.0" width="470.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.8" y="846.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleTh..</text>
</g>
<g>
<title>_init (1 samples, 0.23%)</title><rect x="94.3" y="819.0" width="2.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="97.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (33 samples, 7.60%)</title><rect x="97.0" y="819.0" width="89.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="100.0" y="830.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (33 samples, 7.60%)</title><rect x="97.0" y="803.0" width="89.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="100.0" y="814.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (33 samples, 7.60%)</title><rect x="97.0" y="787.0" width="89.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="100.0" y="798.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (33 samples, 7.60%)</title><rect x="97.0" y="771.0" width="89.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.0" y="782.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (33 samples, 7.60%)</title><rect x="97.0" y="755.0" width="89.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="100.0" y="766.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (33 samples, 7.60%)</title><rect x="97.0" y="739.0" width="89.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.0" y="750.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (14 samples, 3.23%)</title><rect x="97.0" y="723.0" width="38.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="100.0" y="734.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 1.84%)</title><rect x="97.0" y="707.0" width="21.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="100.0" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 1.84%)</title><rect x="97.0" y="691.0" width="21.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="100.0" y="702.0">c..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.23%)</title><rect x="110.6" y="675.0" width="2.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="113.6" y="686.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.23%)</title><rect x="110.6" y="659.0" width="2.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="113.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.46%)</title><rect x="113.3" y="675.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="116.3" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.46%)</title><rect x="113.3" y="659.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="116.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.46%)</title><rect x="113.3" y="643.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="116.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.46%)</title><rect x="113.3" y="627.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="116.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 1.38%)</title><rect x="118.8" y="707.0" width="16.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="121.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 1.38%)</title><rect x="118.8" y="691.0" width="16.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="121.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 0.92%)</title><rect x="124.2" y="675.0" width="10.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="127.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.92%)</title><rect x="124.2" y="659.0" width="10.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="127.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.92%)</title><rect x="124.2" y="643.0" width="10.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="127.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (18 samples, 4.15%)</title><rect x="135.1" y="723.0" width="48.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="138.1" y="734.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.69%)</title><rect x="135.1" y="707.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="138.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.69%)</title><rect x="135.1" y="691.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="138.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.23%)</title><rect x="140.5" y="675.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.46%)</title><rect x="143.2" y="707.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.23%)</title><rect x="145.9" y="691.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.23%)</title><rect x="145.9" y="675.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.23%)</title><rect x="145.9" y="659.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="148.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.46%)</title><rect x="148.7" y="707.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.46%)</title><rect x="148.7" y="691.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="151.7" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.23%)</title><rect x="148.7" y="675.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="151.7" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.23%)</title><rect x="148.7" y="659.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="151.7" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.23%)</title><rect x="148.7" y="643.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="151.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.23%)</title><rect x="151.4" y="675.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="154.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (11 samples, 2.53%)</title><rect x="154.1" y="707.0" width="29.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="157.1" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.92%)</title><rect x="154.1" y="691.0" width="10.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="157.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.23%)</title><rect x="162.3" y="675.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="165.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.23%)</title><rect x="162.3" y="659.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.23%)</title><rect x="162.3" y="643.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="165.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 1.61%)</title><rect x="165.0" y="691.0" width="19.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="168.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 1.61%)</title><rect x="165.0" y="675.0" width="19.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 1.61%)</title><rect x="165.0" y="659.0" width="19.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="168.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.23%)</title><rect x="170.4" y="643.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.46%)</title><rect x="173.1" y="643.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.23%)</title><rect x="175.9" y="627.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.23%)</title><rect x="175.9" y="611.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="178.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.23%)</title><rect x="175.9" y="595.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.9" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.23%)</title><rect x="175.9" y="579.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="178.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.46%)</title><rect x="178.6" y="643.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.46%)</title><rect x="178.6" y="627.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="181.6" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.46%)</title><rect x="178.6" y="611.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="181.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.23%)</title><rect x="184.0" y="723.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="187.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.23%)</title><rect x="184.0" y="707.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="187.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.23%)</title><rect x="184.0" y="691.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.23%)</title><rect x="184.0" y="675.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="187.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (129 samples, 29.72%)</title><rect x="186.7" y="819.0" width="350.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.7" y="830.0">com/linecorp/decaton/processor/runtime/ProcessPi..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.23%)</title><rect x="205.8" y="803.0" width="2.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="208.8" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.23%)</title><rect x="205.8" y="787.0" width="2.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="208.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (26 samples, 5.99%)</title><rect x="208.5" y="803.0" width="70.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.5" y="814.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (23 samples, 5.30%)</title><rect x="216.6" y="787.0" width="62.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.6" y="798.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (21 samples, 4.84%)</title><rect x="222.1" y="771.0" width="57.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.1" y="782.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (14 samples, 3.23%)</title><rect x="224.8" y="755.0" width="38.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.8" y="766.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (14 samples, 3.23%)</title><rect x="224.8" y="739.0" width="38.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.8" y="750.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (14 samples, 3.23%)</title><rect x="224.8" y="723.0" width="38.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.8" y="734.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.69%)</title><rect x="254.7" y="707.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.69%)</title><rect x="254.7" y="691.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.7" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.23%)</title><rect x="262.9" y="755.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.23%)</title><rect x="262.9" y="739.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.9" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.23%)</title><rect x="262.9" y="723.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.9" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (5 samples, 1.15%)</title><rect x="265.6" y="755.0" width="13.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.6" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 0.92%)</title><rect x="268.3" y="739.0" width="10.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.92%)</title><rect x="268.3" y="723.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.23%)</title><rect x="279.2" y="803.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.23%)</title><rect x="279.2" y="787.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.2" y="798.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.23%)</title><rect x="279.2" y="771.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (25 samples, 5.76%)</title><rect x="281.9" y="803.0" width="68.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.9" y="814.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (25 samples, 5.76%)</title><rect x="281.9" y="787.0" width="68.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.9" y="798.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 2.30%)</title><rect x="281.9" y="771.0" width="27.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.9" y="782.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 2.30%)</title><rect x="281.9" y="755.0" width="27.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.9" y="766.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 1.84%)</title><rect x="284.6" y="739.0" width="21.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.6" y="750.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 1.61%)</title><rect x="284.6" y="723.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.6" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 1.61%)</title><rect x="284.6" y="707.0" width="19.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.6" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 1.61%)</title><rect x="284.6" y="691.0" width="19.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.6" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.69%)</title><rect x="292.8" y="675.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="295.8" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.46%)</title><rect x="292.8" y="659.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="295.8" y="670.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.23%)</title><rect x="292.8" y="643.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="295.8" y="654.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.23%)</title><rect x="295.5" y="643.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="298.5" y="654.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.23%)</title><rect x="295.5" y="627.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="298.5" y="638.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.23%)</title><rect x="295.5" y="611.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="298.5" y="622.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.23%)</title><rect x="298.2" y="659.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="301.2" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.23%)</title><rect x="300.9" y="675.0" width="2.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="303.9" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.23%)</title><rect x="303.6" y="723.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="306.6" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.23%)</title><rect x="306.4" y="739.0" width="2.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="309.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.69%)</title><rect x="309.1" y="771.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.1" y="782.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.46%)</title><rect x="309.1" y="755.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.1" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.23%)</title><rect x="309.1" y="739.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="312.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.23%)</title><rect x="309.1" y="723.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="312.1" y="734.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.23%)</title><rect x="311.8" y="739.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.8" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.23%)</title><rect x="314.5" y="755.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.5" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.23%)</title><rect x="314.5" y="739.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="317.5" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (12 samples, 2.76%)</title><rect x="317.2" y="771.0" width="32.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="320.2" y="782.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 2.76%)</title><rect x="317.2" y="755.0" width="32.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="320.2" y="766.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.92%)</title><rect x="317.2" y="739.0" width="10.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="320.2" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.92%)</title><rect x="317.2" y="723.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.2" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.92%)</title><rect x="317.2" y="707.0" width="10.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="320.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.92%)</title><rect x="317.2" y="691.0" width="10.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="320.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 0.92%)</title><rect x="317.2" y="675.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="320.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.23%)</title><rect x="328.1" y="739.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.1" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.23%)</title><rect x="328.1" y="723.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="331.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.23%)</title><rect x="328.1" y="707.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.1" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 1.61%)</title><rect x="330.8" y="739.0" width="19.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="333.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 1.15%)</title><rect x="336.3" y="723.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="339.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.15%)</title><rect x="336.3" y="707.0" width="13.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="339.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.23%)</title><rect x="339.0" y="691.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="342.0" y="702.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.69%)</title><rect x="341.7" y="691.0" width="8.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="344.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (65 samples, 14.98%)</title><rect x="349.9" y="803.0" width="176.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="352.9" y="814.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (65 samples, 14.98%)</title><rect x="349.9" y="787.0" width="176.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="352.9" y="798.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1535456609.process (61 samples, 14.06%)</title><rect x="352.6" y="771.0" width="165.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.6" y="782.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (61 samples, 14.06%)</title><rect x="352.6" y="755.0" width="165.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="355.6" y="766.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (61 samples, 14.06%)</title><rect x="352.6" y="739.0" width="165.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="355.6" y="750.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.23%)</title><rect x="352.6" y="723.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="355.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (59 samples, 13.59%)</title><rect x="355.3" y="723.0" width="160.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="358.3" y="734.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/lang/Thread.sleep (58 samples, 13.36%)</title><rect x="355.3" y="707.0" width="157.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="358.3" y="718.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (52 samples, 11.98%)</title><rect x="366.2" y="691.0" width="141.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="369.2" y="702.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.23%)</title><rect x="379.8" y="675.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="382.8" y="686.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.23%)</title><rect x="382.5" y="675.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="385.5" y="686.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.69%)</title><rect x="385.2" y="675.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="388.2" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.92%)</title><rect x="393.4" y="675.0" width="10.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="396.4" y="686.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.46%)</title><rect x="398.8" y="659.0" width="5.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="401.8" y="670.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (38 samples, 8.76%)</title><rect x="404.2" y="675.0" width="103.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="407.2" y="686.0">os::sleep(Th..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.92%)</title><rect x="423.3" y="659.0" width="10.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="426.3" y="670.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.46%)</title><rect x="428.7" y="643.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="431.7" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 1.38%)</title><rect x="434.1" y="659.0" width="16.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="437.1" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 3.00%)</title><rect x="450.5" y="659.0" width="35.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="453.5" y="670.0">__p..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.69%)</title><rect x="485.8" y="659.0" width="8.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="488.8" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.23%)</title><rect x="494.0" y="659.0" width="2.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="497.0" y="670.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.92%)</title><rect x="496.7" y="659.0" width="10.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="499.7" y="670.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.23%)</title><rect x="507.6" y="691.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="510.6" y="702.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.23%)</title><rect x="510.3" y="691.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="513.3" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.23%)</title><rect x="513.0" y="707.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="516.0" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.23%)</title><rect x="513.0" y="691.0" width="2.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="516.0" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.23%)</title><rect x="515.7" y="723.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="518.7" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.23%)</title><rect x="518.4" y="771.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="521.4" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.23%)</title><rect x="518.4" y="755.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="521.4" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.23%)</title><rect x="518.4" y="739.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="521.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.46%)</title><rect x="521.2" y="771.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="524.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.69%)</title><rect x="526.6" y="803.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="529.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.69%)</title><rect x="526.6" y="787.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="529.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.23%)</title><rect x="532.0" y="771.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="535.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/2024933089.accept (1 samples, 0.23%)</title><rect x="532.0" y="755.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="535.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (1 samples, 0.23%)</title><rect x="532.0" y="739.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="535.0" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.23%)</title><rect x="532.0" y="723.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="535.0" y="734.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.23%)</title><rect x="532.0" y="707.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="535.0" y="718.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.23%)</title><rect x="534.7" y="803.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="537.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 1.61%)</title><rect x="537.5" y="819.0" width="19.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="540.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 1.61%)</title><rect x="537.5" y="803.0" width="19.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="540.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 1.61%)</title><rect x="537.5" y="787.0" width="19.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="540.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/1770763560.accept (7 samples, 1.61%)</title><rect x="537.5" y="771.0" width="19.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="540.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$44 (7 samples, 1.61%)</title><rect x="537.5" y="755.0" width="19.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="540.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/749338177.complete (7 samples, 1.61%)</title><rect x="537.5" y="739.0" width="19.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="540.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$54 (7 samples, 1.61%)</title><rect x="537.5" y="723.0" width="19.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="540.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (7 samples, 1.61%)</title><rect x="537.5" y="707.0" width="19.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="540.5" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 1.61%)</title><rect x="537.5" y="691.0" width="19.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="540.5" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 1.61%)</title><rect x="537.5" y="675.0" width="19.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="540.5" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (7 samples, 1.61%)</title><rect x="537.5" y="659.0" width="19.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="540.5" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.23%)</title><rect x="556.5" y="819.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="559.5" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.23%)</title><rect x="556.5" y="803.0" width="2.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="559.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.69%)</title><rect x="559.2" y="835.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="562.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 1.15%)</title><rect x="567.4" y="883.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="570.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 0.92%)</title><rect x="570.1" y="867.0" width="10.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="573.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.23%)</title><rect x="570.1" y="851.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="573.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.23%)</title><rect x="570.1" y="835.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="573.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.69%)</title><rect x="572.8" y="851.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="575.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.69%)</title><rect x="572.8" y="835.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="575.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.69%)</title><rect x="572.8" y="819.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="575.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.69%)</title><rect x="572.8" y="803.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="575.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.46%)</title><rect x="581.0" y="931.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="584.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.46%)</title><rect x="581.0" y="915.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="584.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.46%)</title><rect x="581.0" y="899.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="584.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (2 samples, 0.46%)</title><rect x="581.0" y="883.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="584.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (2 samples, 0.46%)</title><rect x="581.0" y="867.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.0" y="878.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (2 samples, 0.46%)</title><rect x="581.0" y="851.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="584.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$85/920396360.get (2 samples, 0.46%)</title><rect x="581.0" y="835.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="584.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.recoverableException (1 samples, 0.23%)</title><rect x="583.7" y="819.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="586.7" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$EmptySet.isEmpty (1 samples, 0.23%)</title><rect x="583.7" y="803.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="586.7" y="814.0"></text>
</g>
<g>
<title>start_thread (222 samples, 51.15%)</title><rect x="586.4" y="931.0" width="603.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="589.4" y="942.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (222 samples, 51.15%)</title><rect x="586.4" y="915.0" width="603.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="589.4" y="926.0">java_start(Thread*)</text>
</g>
<g>
<title>ConcurrentG1RefineThread::run() (1 samples, 0.23%)</title><rect x="586.4" y="899.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="589.4" y="910.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::run_young_rs_sampling() (1 samples, 0.23%)</title><rect x="586.4" y="883.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="589.4" y="894.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::sample_young_list_rs_lengths() (1 samples, 0.23%)</title><rect x="586.4" y="867.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="589.4" y="878.0"></text>
</g>
<g>
<title>YoungList::rs_length_sampling_next() (1 samples, 0.23%)</title><rect x="586.4" y="851.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="589.4" y="862.0"></text>
</g>
<g>
<title>G1CollectorPolicy::update_incremental_cset_info(HeapRegion*, unsigned long) (1 samples, 0.23%)</title><rect x="586.4" y="835.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="589.4" y="846.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.23%)</title><rect x="586.4" y="819.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="589.4" y="830.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.23%)</title><rect x="586.4" y="803.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="589.4" y="814.0"></text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 1.84%)</title><rect x="589.1" y="899.0" width="21.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="592.1" y="910.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.23%)</title><rect x="589.1" y="883.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="592.1" y="894.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.23%)</title><rect x="589.1" y="867.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="592.1" y="878.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.23%)</title><rect x="589.1" y="851.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="592.1" y="862.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 1.61%)</title><rect x="591.8" y="883.0" width="19.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="594.8" y="894.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 1.61%)</title><rect x="591.8" y="867.0" width="19.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="594.8" y="878.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.23%)</title><rect x="591.8" y="851.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="594.8" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 1.38%)</title><rect x="594.6" y="851.0" width="16.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="597.6" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.92%)</title><rect x="594.6" y="835.0" width="10.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="597.6" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.23%)</title><rect x="602.7" y="819.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="605.7" y="830.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.23%)</title><rect x="602.7" y="803.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="605.7" y="814.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.46%)</title><rect x="605.4" y="835.0" width="5.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="608.4" y="846.0"></text>
</g>
<g>
<title>JavaThread::run() (213 samples, 49.08%)</title><rect x="610.9" y="899.0" width="579.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="613.9" y="910.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (213 samples, 49.08%)</title><rect x="610.9" y="883.0" width="579.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="613.9" y="894.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (213 samples, 49.08%)</title><rect x="610.9" y="867.0" width="579.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="613.9" y="878.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (212 samples, 48.85%)</title><rect x="610.9" y="851.0" width="576.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="613.9" y="862.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (209 samples, 48.16%)</title><rect x="610.9" y="835.0" width="568.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="613.9" y="846.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (209 samples, 48.16%)</title><rect x="610.9" y="819.0" width="568.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="613.9" y="830.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (71 samples, 16.36%)</title><rect x="610.9" y="803.0" width="193.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="613.9" y="814.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.23%)</title><rect x="610.9" y="787.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="613.9" y="798.0"></text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.46%)</title><rect x="613.6" y="787.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="616.6" y="798.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.23%)</title><rect x="613.6" y="771.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="616.6" y="782.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.23%)</title><rect x="613.6" y="755.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="616.6" y="766.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.23%)</title><rect x="616.3" y="771.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="619.3" y="782.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.23%)</title><rect x="616.3" y="755.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="619.3" y="766.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.23%)</title><rect x="616.3" y="739.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="619.3" y="750.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.23%)</title><rect x="616.3" y="723.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="619.3" y="734.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.23%)</title><rect x="616.3" y="707.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="619.3" y="718.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.46%)</title><rect x="619.0" y="787.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="622.0" y="798.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.23%)</title><rect x="619.0" y="771.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="622.0" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.23%)</title><rect x="619.0" y="755.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="622.0" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.23%)</title><rect x="619.0" y="739.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="622.0" y="750.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.23%)</title><rect x="621.8" y="771.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="624.8" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 1.38%)</title><rect x="624.5" y="787.0" width="16.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="627.5" y="798.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.23%)</title><rect x="624.5" y="771.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="627.5" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.15%)</title><rect x="627.2" y="771.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="630.2" y="782.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.69%)</title><rect x="627.2" y="755.0" width="8.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="630.2" y="766.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.46%)</title><rect x="635.3" y="755.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="638.3" y="766.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.23%)</title><rect x="635.3" y="739.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="638.3" y="750.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.23%)</title><rect x="638.1" y="739.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="641.1" y="750.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.23%)</title><rect x="638.1" y="723.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="641.1" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.23%)</title><rect x="638.1" y="707.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="641.1" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.23%)</title><rect x="638.1" y="691.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="641.1" y="702.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.23%)</title><rect x="638.1" y="675.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="641.1" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.23%)</title><rect x="640.8" y="787.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="643.8" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.23%)</title><rect x="640.8" y="771.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="643.8" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.23%)</title><rect x="643.5" y="787.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="646.5" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.23%)</title><rect x="643.5" y="771.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="646.5" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.23%)</title><rect x="643.5" y="755.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="646.5" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.23%)</title><rect x="643.5" y="739.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="646.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (58 samples, 13.36%)</title><rect x="646.2" y="787.0" width="157.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="649.2" y="798.0">PhaseChaitin::Regist..</text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.23%)</title><rect x="646.2" y="771.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="649.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 1.15%)</title><rect x="648.9" y="771.0" width="13.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="651.9" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.23%)</title><rect x="654.4" y="755.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="657.4" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.46%)</title><rect x="657.1" y="755.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="660.1" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.23%)</title><rect x="659.8" y="739.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="662.8" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.92%)</title><rect x="662.5" y="771.0" width="10.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="665.5" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.69%)</title><rect x="665.3" y="755.0" width="8.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="668.3" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.23%)</title><rect x="670.7" y="739.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="673.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 1.38%)</title><rect x="673.4" y="771.0" width="16.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="676.4" y="782.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.23%)</title><rect x="687.0" y="755.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="690.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 1.84%)</title><rect x="689.7" y="771.0" width="21.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="692.7" y="782.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 1.61%)</title><rect x="692.4" y="755.0" width="19.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="695.4" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.23%)</title><rect x="708.8" y="739.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="711.8" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.23%)</title><rect x="711.5" y="771.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="714.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.23%)</title><rect x="711.5" y="755.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="714.5" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.23%)</title><rect x="711.5" y="739.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="714.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 1.15%)</title><rect x="714.2" y="771.0" width="13.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="717.2" y="782.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.23%)</title><rect x="722.4" y="755.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="725.4" y="766.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.23%)</title><rect x="725.1" y="755.0" width="2.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="728.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.46%)</title><rect x="727.8" y="771.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="730.8" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.23%)</title><rect x="730.5" y="755.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="733.5" y="766.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (16 samples, 3.69%)</title><rect x="733.2" y="771.0" width="43.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="736.2" y="782.0">Phas..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.23%)</title><rect x="733.2" y="755.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="736.2" y="766.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.23%)</title><rect x="733.2" y="739.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="736.2" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.23%)</title><rect x="733.2" y="723.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="736.2" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.23%)</title><rect x="733.2" y="707.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="736.2" y="718.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (15 samples, 3.46%)</title><rect x="735.9" y="755.0" width="40.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="738.9" y="766.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (14 samples, 3.23%)</title><rect x="738.7" y="739.0" width="38.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="741.7" y="750.0">Pha..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.23%)</title><rect x="738.7" y="723.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="741.7" y="734.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.69%)</title><rect x="741.4" y="723.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="744.4" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.23%)</title><rect x="746.8" y="707.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="749.8" y="718.0"></text>
</g>
<g>
<title>LiveRangeMap::find(Node const*) (1 samples, 0.23%)</title><rect x="749.5" y="723.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="752.5" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (9 samples, 2.07%)</title><rect x="752.3" y="723.0" width="24.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="755.3" y="734.0">P..</text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.46%)</title><rect x="776.7" y="771.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="779.7" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.23%)</title><rect x="779.4" y="755.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="782.4" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.23%)</title><rect x="782.2" y="771.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="785.2" y="782.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.23%)</title><rect x="782.2" y="755.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="785.2" y="766.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 1.38%)</title><rect x="784.9" y="771.0" width="16.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="787.9" y="782.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.23%)</title><rect x="790.3" y="755.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="793.3" y="766.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.69%)</title><rect x="793.0" y="755.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="796.0" y="766.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.23%)</title><rect x="798.5" y="739.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="801.5" y="750.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.23%)</title><rect x="798.5" y="723.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="801.5" y="734.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.23%)</title><rect x="801.2" y="771.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="804.2" y="782.0"></text>
</g>
<g>
<title>Compile::Optimize() (128 samples, 29.49%)</title><rect x="803.9" y="803.0" width="348.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="806.9" y="814.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.23%)</title><rect x="803.9" y="787.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="806.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.92%)</title><rect x="806.6" y="787.0" width="10.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="809.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::ConnectionGraph(Compile*, PhaseIterGVN*) (1 samples, 0.23%)</title><rect x="806.6" y="771.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="809.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.69%)</title><rect x="809.4" y="771.0" width="8.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="812.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.69%)</title><rect x="809.4" y="755.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="812.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.46%)</title><rect x="812.1" y="739.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="815.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.46%)</title><rect x="812.1" y="723.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="815.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.23%)</title><rect x="812.1" y="707.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="815.1" y="718.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.23%)</title><rect x="812.1" y="691.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="815.1" y="702.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.23%)</title><rect x="812.1" y="675.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="815.1" y="686.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.23%)</title><rect x="812.1" y="659.0" width="2.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="815.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="707.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="817.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="691.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="817.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="675.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="817.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="659.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="817.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="643.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="817.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="627.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="817.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="611.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="817.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="595.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="817.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="579.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="817.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="563.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="817.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="547.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="817.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="531.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="817.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="515.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="817.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="499.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="817.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="483.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="817.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="467.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="817.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="451.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="817.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="435.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="817.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="419.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="817.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="403.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="817.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="387.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="817.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="814.8" y="371.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="817.8" y="382.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.23%)</title><rect x="814.8" y="355.0" width="2.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="817.8" y="366.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.23%)</title><rect x="817.5" y="787.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="820.5" y="798.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.23%)</title><rect x="817.5" y="771.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="820.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (106 samples, 24.42%)</title><rect x="820.2" y="787.0" width="288.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="823.2" y="798.0">PhaseIdealLoop::build_and_optimize(bool..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.46%)</title><rect x="820.2" y="771.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="823.2" y="782.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.23%)</title><rect x="822.9" y="755.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="825.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.69%)</title><rect x="825.7" y="771.0" width="8.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="828.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.23%)</title><rect x="831.1" y="755.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="834.1" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (98 samples, 22.58%)</title><rect x="833.8" y="771.0" width="266.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="836.8" y="782.0">PhaseIdealLoop::build_loop_late(Vect..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (97 samples, 22.35%)</title><rect x="836.5" y="755.0" width="263.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="839.5" y="766.0">PhaseIdealLoop::build_loop_late_pos..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 1.38%)</title><rect x="836.5" y="739.0" width="16.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="839.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (90 samples, 20.74%)</title><rect x="852.9" y="739.0" width="244.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="855.9" y="750.0">PhaseIdealLoop::get_late_ctrl(No..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (2 samples, 0.46%)</title><rect x="1048.6" y="723.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1051.6" y="734.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.46%)</title><rect x="1048.6" y="707.0" width="5.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1051.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (15 samples, 3.46%)</title><rect x="1054.1" y="723.0" width="40.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.1" y="734.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.23%)</title><rect x="1094.8" y="723.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1097.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.23%)</title><rect x="1094.8" y="707.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.8" y="718.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.23%)</title><rect x="1097.6" y="739.0" width="2.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1100.6" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.23%)</title><rect x="1100.3" y="771.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.3" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.23%)</title><rect x="1103.0" y="771.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.0" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.23%)</title><rect x="1105.7" y="771.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.7" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.23%)</title><rect x="1105.7" y="755.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.7" y="766.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.23%)</title><rect x="1105.7" y="739.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.7" y="750.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.23%)</title><rect x="1105.7" y="723.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.7" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.23%)</title><rect x="1108.4" y="787.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.4" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.23%)</title><rect x="1108.4" y="771.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.4" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (12 samples, 2.76%)</title><rect x="1111.2" y="787.0" width="32.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.2" y="798.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (12 samples, 2.76%)</title><rect x="1111.2" y="771.0" width="32.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.2" y="782.0">Ph..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.23%)</title><rect x="1111.2" y="755.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.2" y="766.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.23%)</title><rect x="1111.2" y="739.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.2" y="750.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.23%)</title><rect x="1111.2" y="723.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.2" y="734.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.23%)</title><rect x="1111.2" y="707.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.2" y="718.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (3 samples, 0.69%)</title><rect x="1113.9" y="755.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.9" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.23%)</title><rect x="1122.0" y="755.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.0" y="766.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.23%)</title><rect x="1122.0" y="739.0" width="2.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1125.0" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 0.46%)</title><rect x="1124.7" y="755.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.7" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.69%)</title><rect x="1130.2" y="755.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.2" y="766.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.23%)</title><rect x="1138.3" y="755.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.3" y="766.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.23%)</title><rect x="1138.3" y="739.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.3" y="750.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.23%)</title><rect x="1141.1" y="755.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.1" y="766.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.23%)</title><rect x="1141.1" y="739.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.1" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.23%)</title><rect x="1141.1" y="723.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.1" y="734.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.23%)</title><rect x="1141.1" y="707.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.1" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.23%)</title><rect x="1141.1" y="691.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.1" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.23%)</title><rect x="1143.8" y="787.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.8" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.23%)</title><rect x="1143.8" y="771.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.8" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.23%)</title><rect x="1143.8" y="755.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.8" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.23%)</title><rect x="1143.8" y="739.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.8" y="750.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.23%)</title><rect x="1143.8" y="723.0" width="2.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1146.8" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.23%)</title><rect x="1146.5" y="787.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.5" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.23%)</title><rect x="1146.5" y="771.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.5" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.23%)</title><rect x="1146.5" y="755.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.5" y="766.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.23%)</title><rect x="1146.5" y="739.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.5" y="750.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.23%)</title><rect x="1149.2" y="787.0" width="2.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1152.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 2.07%)</title><rect x="1151.9" y="803.0" width="24.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.9" y="814.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 2.07%)</title><rect x="1151.9" y="787.0" width="24.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.9" y="798.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 1.84%)</title><rect x="1151.9" y="771.0" width="21.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 1.84%)</title><rect x="1151.9" y="755.0" width="21.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.9" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 1.84%)</title><rect x="1151.9" y="739.0" width="21.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.9" y="750.0">P..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 1.84%)</title><rect x="1151.9" y="723.0" width="21.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="734.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.38%)</title><rect x="1151.9" y="707.0" width="16.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.38%)</title><rect x="1151.9" y="691.0" width="16.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.38%)</title><rect x="1151.9" y="675.0" width="16.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.38%)</title><rect x="1151.9" y="659.0" width="16.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.38%)</title><rect x="1151.9" y="643.0" width="16.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.15%)</title><rect x="1151.9" y="627.0" width="13.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.9" y="638.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.23%)</title><rect x="1151.9" y="611.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.9" y="622.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.23%)</title><rect x="1151.9" y="595.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.9" y="606.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.23%)</title><rect x="1151.9" y="579.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.9" y="590.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.23%)</title><rect x="1151.9" y="563.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.9" y="574.0"></text>
</g>
<g>
<title>BitMap::set_union(BitMap) (1 samples, 0.23%)</title><rect x="1151.9" y="547.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.9" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1154.7" y="611.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1154.7" y="595.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1154.7" y="579.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1154.7" y="563.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1154.7" y="547.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1154.7" y="531.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1154.7" y="515.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1154.7" y="499.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1154.7" y="483.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1154.7" y="467.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1154.7" y="451.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1154.7" y="435.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1154.7" y="419.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1154.7" y="403.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1154.7" y="387.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1154.7" y="371.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1154.7" y="355.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1154.7" y="339.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1154.7" y="323.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1154.7" y="307.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1154.7" y="291.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1154.7" y="275.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1154.7" y="259.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1154.7" y="243.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1154.7" y="227.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1154.7" y="211.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1154.7" y="195.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1154.7" y="179.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1154.7" y="163.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1154.7" y="147.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.7" y="158.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1154.7" y="131.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.7" y="142.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.23%)</title><rect x="1154.7" y="115.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.7" y="126.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.23%)</title><rect x="1154.7" y="99.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.7" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.23%)</title><rect x="1154.7" y="83.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.7" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.23%)</title><rect x="1154.7" y="67.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.7" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.23%)</title><rect x="1154.7" y="51.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.7" y="62.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.23%)</title><rect x="1154.7" y="35.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.69%)</title><rect x="1157.4" y="611.0" width="8.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.4" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.69%)</title><rect x="1157.4" y="595.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.4" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.69%)</title><rect x="1157.4" y="579.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.69%)</title><rect x="1157.4" y="563.0" width="8.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.69%)</title><rect x="1157.4" y="547.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.69%)</title><rect x="1157.4" y="531.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.69%)</title><rect x="1157.4" y="515.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.69%)</title><rect x="1157.4" y="499.0" width="8.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.69%)</title><rect x="1157.4" y="483.0" width="8.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.69%)</title><rect x="1157.4" y="467.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.46%)</title><rect x="1157.4" y="451.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.46%)</title><rect x="1157.4" y="435.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.46%)</title><rect x="1157.4" y="419.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.4" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.46%)</title><rect x="1157.4" y="403.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.4" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.46%)</title><rect x="1157.4" y="387.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.46%)</title><rect x="1157.4" y="371.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.46%)</title><rect x="1157.4" y="355.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.46%)</title><rect x="1157.4" y="339.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.46%)</title><rect x="1157.4" y="323.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.4" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.46%)</title><rect x="1157.4" y="307.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.4" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.46%)</title><rect x="1157.4" y="291.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.46%)</title><rect x="1157.4" y="275.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.46%)</title><rect x="1157.4" y="259.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.46%)</title><rect x="1157.4" y="243.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.46%)</title><rect x="1157.4" y="227.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.4" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.46%)</title><rect x="1157.4" y="211.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.4" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.46%)</title><rect x="1157.4" y="195.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.46%)</title><rect x="1157.4" y="179.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.46%)</title><rect x="1157.4" y="163.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.46%)</title><rect x="1157.4" y="147.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.46%)</title><rect x="1157.4" y="131.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.4" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1157.4" y="115.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.4" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1157.4" y="99.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.4" y="110.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.23%)</title><rect x="1157.4" y="83.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.4" y="94.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.23%)</title><rect x="1157.4" y="67.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.4" y="78.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.23%)</title><rect x="1157.4" y="51.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.4" y="62.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.23%)</title><rect x="1157.4" y="35.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.4" y="46.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.23%)</title><rect x="1160.1" y="115.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.1" y="126.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.23%)</title><rect x="1162.8" y="451.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.8" y="462.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.23%)</title><rect x="1162.8" y="435.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.8" y="446.0"></text>
</g>
<g>
<title>Parse::ensure_memory_phi(int, bool) (1 samples, 0.23%)</title><rect x="1162.8" y="419.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.8" y="430.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 0.23%)</title><rect x="1162.8" y="403.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.8" y="414.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.23%)</title><rect x="1162.8" y="387.0" width="2.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1165.8" y="398.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_constant() (1 samples, 0.23%)</title><rect x="1165.5" y="627.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.5" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_constant_by_index(constantPoolHandle, int, int, ciInstanceKlass*) (1 samples, 0.23%)</title><rect x="1165.5" y="611.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.5" y="622.0"></text>
</g>
<g>
<title>ciObject::is_array() (1 samples, 0.23%)</title><rect x="1165.5" y="595.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.5" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.46%)</title><rect x="1168.2" y="707.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.46%)</title><rect x="1168.2" y="691.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.46%)</title><rect x="1168.2" y="675.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.46%)</title><rect x="1168.2" y="659.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.46%)</title><rect x="1168.2" y="643.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.46%)</title><rect x="1168.2" y="627.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.46%)</title><rect x="1168.2" y="611.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.2" y="622.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.23%)</title><rect x="1168.2" y="595.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.2" y="606.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.23%)</title><rect x="1168.2" y="579.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.2" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.23%)</title><rect x="1168.2" y="563.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.2" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.23%)</title><rect x="1168.2" y="547.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.2" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.23%)</title><rect x="1168.2" y="531.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.2" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.23%)</title><rect x="1168.2" y="515.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.2" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.23%)</title><rect x="1168.2" y="499.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.2" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.23%)</title><rect x="1168.2" y="483.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.2" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.23%)</title><rect x="1168.2" y="467.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.2" y="478.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.23%)</title><rect x="1168.2" y="451.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.2" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.23%)</title><rect x="1168.2" y="435.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.2" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.23%)</title><rect x="1168.2" y="419.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="430.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.23%)</title><rect x="1168.2" y="403.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.2" y="414.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.23%)</title><rect x="1168.2" y="387.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="398.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.23%)</title><rect x="1168.2" y="371.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.2" y="382.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.23%)</title><rect x="1168.2" y="355.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.2" y="366.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.23%)</title><rect x="1168.2" y="339.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.2" y="350.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.23%)</title><rect x="1168.2" y="323.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.2" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.23%)</title><rect x="1168.2" y="307.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.2" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.23%)</title><rect x="1168.2" y="291.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.2" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1171.0" y="595.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.0" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1171.0" y="579.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1171.0" y="563.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1171.0" y="547.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.23%)</title><rect x="1171.0" y="531.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.23%)</title><rect x="1171.0" y="515.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.23%)</title><rect x="1171.0" y="499.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.23%)</title><rect x="1171.0" y="483.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.23%)</title><rect x="1171.0" y="467.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.23%)</title><rect x="1171.0" y="451.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.0" y="462.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.23%)</title><rect x="1171.0" y="435.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.23%)</title><rect x="1173.7" y="771.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.7" y="782.0"></text>
</g>
<g>
<title>GraphKit::use_exception_state(SafePointNode*) (1 samples, 0.23%)</title><rect x="1173.7" y="755.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.7" y="766.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.23%)</title><rect x="1173.7" y="739.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.7" y="750.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.23%)</title><rect x="1173.7" y="723.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.7" y="734.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.23%)</title><rect x="1176.4" y="803.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.4" y="814.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.23%)</title><rect x="1179.1" y="835.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="846.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.23%)</title><rect x="1179.1" y="819.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.1" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.23%)</title><rect x="1179.1" y="803.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.23%)</title><rect x="1179.1" y="787.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="798.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.23%)</title><rect x="1179.1" y="771.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="782.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.23%)</title><rect x="1179.1" y="755.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="766.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.23%)</title><rect x="1179.1" y="739.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.1" y="750.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.23%)</title><rect x="1181.8" y="835.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::ciObjectFactory(Arena*, int) (1 samples, 0.23%)</title><rect x="1181.8" y="819.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.8" y="830.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.23%)</title><rect x="1181.8" y="803.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="814.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.23%)</title><rect x="1181.8" y="787.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="798.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.23%)</title><rect x="1181.8" y="771.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="782.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.23%)</title><rect x="1181.8" y="755.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.23%)</title><rect x="1184.6" y="835.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.6" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.23%)</title><rect x="1184.6" y="819.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.6" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.23%)</title><rect x="1184.6" y="803.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.6" y="814.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.23%)</title><rect x="1184.6" y="787.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.6" y="798.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.23%)</title><rect x="1184.6" y="771.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.6" y="782.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.23%)</title><rect x="1187.3" y="851.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.3" y="862.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.23%)</title><rect x="1187.3" y="835.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.3" y="846.0"></text>
</g>
</g>
</svg>
