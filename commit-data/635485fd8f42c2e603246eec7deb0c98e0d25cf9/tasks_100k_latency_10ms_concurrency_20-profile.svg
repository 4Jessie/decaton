<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (270 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.37%)</title><rect x="10.0" y="739.0" width="4.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>Deoptimization::unpack_frames(JavaThread*, int) (1 samples, 0.37%)</title><rect x="10.0" y="723.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>vframeArray::unpack_to_stack(frame&amp;, int, int) (1 samples, 0.37%)</title><rect x="10.0" y="707.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>vframeArrayElement::unpack_on_stack(int, int, int, frame*, bool, bool, int) (1 samples, 0.37%)</title><rect x="10.0" y="691.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>AbstractInterpreter::deopt_continue_after_entry(Method*, unsigned char*, int, bool) (1 samples, 0.37%)</title><rect x="10.0" y="675.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>Bytecode_member_ref::result_type() const (1 samples, 0.37%)</title><rect x="10.0" y="659.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>SignatureIterator::iterate() (1 samples, 0.37%)</title><rect x="10.0" y="643.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>SignatureIterator::parse_type() (1 samples, 0.37%)</title><rect x="10.0" y="627.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.37%)</title><rect x="14.4" y="739.0" width="4.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="17.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.37%)</title><rect x="14.4" y="723.0" width="4.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="17.4" y="734.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.37%)</title><rect x="14.4" y="707.0" width="4.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="17.4" y="718.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.37%)</title><rect x="14.4" y="691.0" width="4.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="17.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 10.00%)</title><rect x="18.7" y="739.0" width="118.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.7" y="750.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (27 samples, 10.00%)</title><rect x="18.7" y="723.0" width="118.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.7" y="734.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.74%)</title><rect x="18.7" y="707.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.7" y="718.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.37%)</title><rect x="18.7" y="691.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="21.7" y="702.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.37%)</title><rect x="18.7" y="675.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="21.7" y="686.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.37%)</title><rect x="18.7" y="659.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.7" y="670.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.37%)</title><rect x="18.7" y="643.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="21.7" y="654.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.37%)</title><rect x="18.7" y="627.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="21.7" y="638.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.37%)</title><rect x="18.7" y="611.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="21.7" y="622.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.37%)</title><rect x="18.7" y="595.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.7" y="606.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.37%)</title><rect x="18.7" y="579.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="21.7" y="590.0"></text>
</g>
<g>
<title>CompileBroker::create_compile_task(CompileQueue*, int, methodHandle, int, int, methodHandle, int, char const*, bool) (1 samples, 0.37%)</title><rect x="18.7" y="563.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.7" y="574.0"></text>
</g>
<g>
<title>AccessFlags::atomic_set_bits(int) (1 samples, 0.37%)</title><rect x="18.7" y="547.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="21.7" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.37%)</title><rect x="23.1" y="691.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.37%)</title><rect x="27.5" y="707.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.5" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.37%)</title><rect x="27.5" y="691.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.5" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.37%)</title><rect x="27.5" y="675.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.5" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (1 samples, 0.37%)</title><rect x="27.5" y="659.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.5" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/511473681.invoke_MT (1 samples, 0.37%)</title><rect x="27.5" y="643.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="30.5" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$BMH/1796566552.reinvoke (1 samples, 0.37%)</title><rect x="27.5" y="627.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.5" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/592688102.invokeStatic_L6_L (1 samples, 0.37%)</title><rect x="27.5" y="611.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.5" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaMetafactory.metafactory (1 samples, 0.37%)</title><rect x="27.5" y="595.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.5" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.37%)</title><rect x="27.5" y="579.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.5" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.37%)</title><rect x="27.5" y="563.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.5" y="574.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.defineAnonymousClass (1 samples, 0.37%)</title><rect x="27.5" y="547.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.5" y="558.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass (1 samples, 0.37%)</title><rect x="27.5" y="531.0" width="4.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="30.5" y="542.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, KlassHandle, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.37%)</title><rect x="27.5" y="515.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="30.5" y="526.0"></text>
</g>
<g>
<title>ClassFileParser::parseClassFile(Symbol*, ClassLoaderData*, Handle, KlassHandle, GrowableArray&lt;Handle&gt;*, TempNewSymbol&amp;, bool, Thread*) (1 samples, 0.37%)</title><rect x="27.5" y="499.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="30.5" y="510.0"></text>
</g>
<g>
<title>ClassFileParser::parse_fields(Symbol*, bool, FieldAllocationCount*, unsigned short*, Thread*) (1 samples, 0.37%)</title><rect x="27.5" y="483.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="30.5" y="494.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 3.33%)</title><rect x="31.9" y="707.0" width="39.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.9" y="718.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1002981214.accept (9 samples, 3.33%)</title><rect x="31.9" y="691.0" width="39.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.9" y="702.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (9 samples, 3.33%)</title><rect x="31.9" y="675.0" width="39.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.9" y="686.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (5 samples, 1.85%)</title><rect x="31.9" y="659.0" width="21.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.9" y="670.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (5 samples, 1.85%)</title><rect x="31.9" y="643.0" width="21.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.9" y="654.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (5 samples, 1.85%)</title><rect x="31.9" y="627.0" width="21.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.9" y="638.0">c..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 1.85%)</title><rect x="31.9" y="611.0" width="21.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.9" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 1.85%)</title><rect x="31.9" y="595.0" width="21.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.9" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 1.85%)</title><rect x="31.9" y="579.0" width="21.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.9" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.37%)</title><rect x="45.0" y="563.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="48.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.37%)</title><rect x="45.0" y="547.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="48.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.37%)</title><rect x="45.0" y="531.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.0" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="49.3" y="563.0" width="4.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="52.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.48%)</title><rect x="53.7" y="659.0" width="17.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.7" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.48%)</title><rect x="53.7" y="643.0" width="17.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.7" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.74%)</title><rect x="62.4" y="627.0" width="8.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="65.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 5.56%)</title><rect x="71.2" y="707.0" width="65.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.2" y="718.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 5.56%)</title><rect x="71.2" y="691.0" width="65.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.2" y="702.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 3.33%)</title><rect x="75.6" y="675.0" width="39.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.6" y="686.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.85%)</title><rect x="75.6" y="659.0" width="21.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="78.6" y="670.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.85%)</title><rect x="75.6" y="643.0" width="21.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.6" y="654.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.11%)</title><rect x="75.6" y="627.0" width="13.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="78.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.74%)</title><rect x="75.6" y="611.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.completeNext (1 samples, 0.37%)</title><rect x="75.6" y="595.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.requestQueue (1 samples, 0.37%)</title><rect x="75.6" y="579.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.37%)</title><rect x="79.9" y="595.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.apiKey (1 samples, 0.37%)</title><rect x="79.9" y="579.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.9" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollLast (1 samples, 0.37%)</title><rect x="79.9" y="563.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.37%)</title><rect x="84.3" y="611.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.37%)</title><rect x="84.3" y="595.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.37%)</title><rect x="84.3" y="579.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.37%)</title><rect x="84.3" y="563.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.37%)</title><rect x="84.3" y="547.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.37%)</title><rect x="88.7" y="627.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="91.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.37%)</title><rect x="88.7" y="611.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.37%)</title><rect x="88.7" y="595.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (1 samples, 0.37%)</title><rect x="88.7" y="579.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="91.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.&lt;init&gt; (1 samples, 0.37%)</title><rect x="88.7" y="563.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="91.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (1 samples, 0.37%)</title><rect x="88.7" y="547.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="91.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.37%)</title><rect x="88.7" y="531.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="91.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.37%)</title><rect x="93.0" y="627.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.37%)</title><rect x="93.0" y="611.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.37%)</title><rect x="93.0" y="595.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="96.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.37%)</title><rect x="93.0" y="579.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.37%)</title><rect x="93.0" y="563.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.37%)</title><rect x="93.0" y="547.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.37%)</title><rect x="93.0" y="531.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.37%)</title><rect x="93.0" y="515.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.37%)</title><rect x="93.0" y="499.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$4.validate (1 samples, 0.37%)</title><rect x="93.0" y="483.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="96.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.48%)</title><rect x="97.4" y="659.0" width="17.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.4" y="670.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.37%)</title><rect x="97.4" y="643.0" width="4.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="100.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.11%)</title><rect x="101.8" y="643.0" width="13.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.11%)</title><rect x="101.8" y="627.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.11%)</title><rect x="101.8" y="611.0" width="13.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="104.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 1.11%)</title><rect x="101.8" y="595.0" width="13.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="104.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 1.11%)</title><rect x="101.8" y="579.0" width="13.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="104.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 1.11%)</title><rect x="101.8" y="563.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.8" y="574.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 1.11%)</title><rect x="101.8" y="547.0" width="13.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="104.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 1.48%)</title><rect x="114.9" y="675.0" width="17.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 1.48%)</title><rect x="114.9" y="659.0" width="17.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 1.11%)</title><rect x="114.9" y="643.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.9" y="654.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.37%)</title><rect x="114.9" y="627.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/608238280.accept (1 samples, 0.37%)</title><rect x="114.9" y="611.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="117.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.37%)</title><rect x="114.9" y="595.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.37%)</title><rect x="114.9" y="579.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="117.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.37%)</title><rect x="114.9" y="563.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="117.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.37%)</title><rect x="114.9" y="547.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="117.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.37%)</title><rect x="114.9" y="531.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.9" y="542.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.37%)</title><rect x="119.3" y="627.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="122.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.37%)</title><rect x="119.3" y="611.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="122.3" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.37%)</title><rect x="119.3" y="595.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="122.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.37%)</title><rect x="123.6" y="627.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.6" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.37%)</title><rect x="123.6" y="611.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="126.6" y="622.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="123.6" y="595.0" width="4.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="126.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.37%)</title><rect x="128.0" y="643.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="131.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.37%)</title><rect x="128.0" y="627.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.0" y="638.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.37%)</title><rect x="128.0" y="611.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="131.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.37%)</title><rect x="128.0" y="595.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="131.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.37%)</title><rect x="128.0" y="579.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="131.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.37%)</title><rect x="132.4" y="675.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="135.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="132.4" y="659.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="135.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="132.4" y="643.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="132.4" y="627.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="135.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.37%)</title><rect x="132.4" y="611.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="135.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.37%)</title><rect x="132.4" y="595.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="135.4" y="606.0"></text>
</g>
<g>
<title>java/lang/Thread.run (197 samples, 72.96%)</title><rect x="136.7" y="739.0" width="861.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="139.7" y="750.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (197 samples, 72.96%)</title><rect x="136.7" y="723.0" width="861.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="139.7" y="734.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (197 samples, 72.96%)</title><rect x="136.7" y="707.0" width="861.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="139.7" y="718.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.37%)</title><rect x="136.7" y="691.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/505398260.run (185 samples, 68.52%)</title><rect x="141.1" y="691.0" width="808.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="144.1" y="702.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/505398260.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (185 samples, 68.52%)</title><rect x="141.1" y="675.0" width="808.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.1" y="686.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (185 samples, 68.52%)</title><rect x="141.1" y="659.0" width="808.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.1" y="670.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (178 samples, 65.93%)</title><rect x="141.1" y="643.0" width="777.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="144.1" y="654.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.37%)</title><rect x="171.7" y="627.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="174.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (40 samples, 14.81%)</title><rect x="176.1" y="627.0" width="174.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="179.1" y="638.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (40 samples, 14.81%)</title><rect x="176.1" y="611.0" width="174.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.1" y="622.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (40 samples, 14.81%)</title><rect x="176.1" y="595.0" width="174.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.1" y="606.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (39 samples, 14.44%)</title><rect x="176.1" y="579.0" width="170.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.1" y="590.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (39 samples, 14.44%)</title><rect x="176.1" y="563.0" width="170.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.1" y="574.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (39 samples, 14.44%)</title><rect x="176.1" y="547.0" width="170.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="179.1" y="558.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (16 samples, 5.93%)</title><rect x="176.1" y="531.0" width="69.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="179.1" y="542.0">com/fas..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.37%)</title><rect x="211.0" y="515.0" width="4.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="214.0" y="526.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="211.0" y="499.0" width="4.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="214.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.74%)</title><rect x="215.4" y="515.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="218.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.74%)</title><rect x="215.4" y="499.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.74%)</title><rect x="215.4" y="483.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.4" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.74%)</title><rect x="215.4" y="467.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.4" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.74%)</title><rect x="215.4" y="451.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.4" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.74%)</title><rect x="215.4" y="435.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (5 samples, 1.85%)</title><rect x="224.1" y="515.0" width="21.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.1" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 1.85%)</title><rect x="224.1" y="499.0" width="21.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.1" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.37%)</title><rect x="232.9" y="483.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="235.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.37%)</title><rect x="232.9" y="467.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="235.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.74%)</title><rect x="237.3" y="483.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.74%)</title><rect x="237.3" y="467.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.37%)</title><rect x="241.6" y="451.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (17 samples, 6.30%)</title><rect x="246.0" y="531.0" width="74.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.0" y="542.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.37%)</title><rect x="246.0" y="515.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.37%)</title><rect x="246.0" y="499.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.37%)</title><rect x="246.0" y="483.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.37%)</title><rect x="246.0" y="467.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.0" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="246.0" y="451.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="249.0" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="246.0" y="435.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="249.0" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="246.0" y="419.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="249.0" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.37%)</title><rect x="246.0" y="403.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="249.0" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.37%)</title><rect x="246.0" y="387.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="249.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (16 samples, 5.93%)</title><rect x="250.4" y="515.0" width="69.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="253.4" y="526.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.48%)</title><rect x="250.4" y="499.0" width="17.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.37%)</title><rect x="250.4" y="483.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.37%)</title><rect x="250.4" y="467.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="253.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.37%)</title><rect x="250.4" y="451.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.11%)</title><rect x="254.7" y="483.0" width="13.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (12 samples, 4.44%)</title><rect x="267.9" y="499.0" width="52.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.9" y="510.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (12 samples, 4.44%)</title><rect x="267.9" y="483.0" width="52.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.9" y="494.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (12 samples, 4.44%)</title><rect x="267.9" y="467.0" width="52.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.9" y="478.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.74%)</title><rect x="272.2" y="451.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="275.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.37%)</title><rect x="272.2" y="435.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.37%)</title><rect x="272.2" y="419.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="275.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.37%)</title><rect x="272.2" y="403.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="275.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.37%)</title><rect x="272.2" y="387.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.37%)</title><rect x="276.6" y="435.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.11%)</title><rect x="281.0" y="451.0" width="13.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 1.11%)</title><rect x="281.0" y="435.0" width="13.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.11%)</title><rect x="281.0" y="419.0" width="13.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="284.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.11%)</title><rect x="281.0" y="403.0" width="13.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.0" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 1.11%)</title><rect x="281.0" y="387.0" width="13.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 1.48%)</title><rect x="294.1" y="451.0" width="17.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 1.48%)</title><rect x="294.1" y="435.0" width="17.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 1.48%)</title><rect x="294.1" y="419.0" width="17.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 1.48%)</title><rect x="294.1" y="403.0" width="17.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.1" y="414.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 1.48%)</title><rect x="294.1" y="387.0" width="17.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.1" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.37%)</title><rect x="294.1" y="371.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="297.1" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.37%)</title><rect x="294.1" y="355.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="297.1" y="366.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 1.11%)</title><rect x="298.4" y="371.0" width="13.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.37%)</title><rect x="302.8" y="355.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.8" y="366.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (1 samples, 0.37%)</title><rect x="307.2" y="355.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="310.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.74%)</title><rect x="311.6" y="451.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="314.6" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.74%)</title><rect x="311.6" y="435.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="314.6" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.74%)</title><rect x="311.6" y="419.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="314.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 2.22%)</title><rect x="320.3" y="531.0" width="26.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.3" y="542.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.37%)</title><rect x="320.3" y="515.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 1.85%)</title><rect x="324.7" y="515.0" width="21.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="327.7" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 1.85%)</title><rect x="324.7" y="499.0" width="21.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="327.7" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 1.85%)</title><rect x="324.7" y="483.0" width="21.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="327.7" y="494.0">c..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 1.85%)</title><rect x="324.7" y="467.0" width="21.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="327.7" y="478.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.37%)</title><rect x="346.5" y="579.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="349.5" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.37%)</title><rect x="346.5" y="563.0" width="4.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="349.5" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="346.5" y="547.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="349.5" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (121 samples, 44.81%)</title><rect x="350.9" y="627.0" width="528.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="353.9" y="638.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (24 samples, 8.89%)</title><rect x="350.9" y="611.0" width="104.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.9" y="622.0">com/linecorp..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (21 samples, 7.78%)</title><rect x="364.0" y="595.0" width="91.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="367.0" y="606.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (16 samples, 5.93%)</title><rect x="385.9" y="579.0" width="69.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.9" y="590.0">ch/qos/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (16 samples, 5.93%)</title><rect x="385.9" y="563.0" width="69.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.9" y="574.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 3.33%)</title><rect x="416.4" y="547.0" width="39.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="419.4" y="558.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 3.33%)</title><rect x="416.4" y="531.0" width="39.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.4" y="542.0">jav..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.74%)</title><rect x="442.7" y="515.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="445.7" y="526.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.37%)</title><rect x="451.4" y="515.0" width="4.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="454.4" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.11%)</title><rect x="455.8" y="611.0" width="13.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="458.8" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.11%)</title><rect x="455.8" y="595.0" width="13.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="458.8" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 1.11%)</title><rect x="455.8" y="579.0" width="13.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="458.8" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (17 samples, 6.30%)</title><rect x="468.9" y="611.0" width="74.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.9" y="622.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (17 samples, 6.30%)</title><rect x="468.9" y="595.0" width="74.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="471.9" y="606.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 1.48%)</title><rect x="473.3" y="579.0" width="17.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="476.3" y="590.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.48%)</title><rect x="473.3" y="563.0" width="17.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.3" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.11%)</title><rect x="473.3" y="547.0" width="13.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="476.3" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.74%)</title><rect x="473.3" y="531.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.3" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.74%)</title><rect x="473.3" y="515.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="476.3" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.74%)</title><rect x="473.3" y="499.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="476.3" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.37%)</title><rect x="477.6" y="483.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="480.6" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.37%)</title><rect x="477.6" y="467.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="480.6" y="478.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.37%)</title><rect x="477.6" y="451.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="480.6" y="462.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.37%)</title><rect x="477.6" y="435.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="480.6" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.37%)</title><rect x="482.0" y="531.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="485.0" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="486.4" y="547.0" width="4.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="489.4" y="558.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.37%)</title><rect x="490.7" y="579.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.7" y="590.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.37%)</title><rect x="490.7" y="563.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="493.7" y="574.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.37%)</title><rect x="490.7" y="547.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="493.7" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.37%)</title><rect x="490.7" y="531.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="493.7" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.37%)</title><rect x="495.1" y="579.0" width="4.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="498.1" y="590.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 3.70%)</title><rect x="499.5" y="579.0" width="43.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="502.5" y="590.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 3.70%)</title><rect x="499.5" y="563.0" width="43.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="502.5" y="574.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.37%)</title><rect x="499.5" y="547.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="502.5" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.37%)</title><rect x="499.5" y="531.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="502.5" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.37%)</title><rect x="499.5" y="515.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="502.5" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.37%)</title><rect x="499.5" y="499.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.5" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.37%)</title><rect x="499.5" y="483.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="502.5" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.37%)</title><rect x="499.5" y="467.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="502.5" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 3.33%)</title><rect x="503.9" y="547.0" width="39.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="506.9" y="558.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 1.85%)</title><rect x="521.3" y="531.0" width="21.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="524.3" y="542.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.37%)</title><rect x="521.3" y="515.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="524.3" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.48%)</title><rect x="525.7" y="515.0" width="17.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="528.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.74%)</title><rect x="534.4" y="499.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="537.4" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (67 samples, 24.81%)</title><rect x="543.2" y="611.0" width="292.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="546.2" y="622.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (67 samples, 24.81%)</title><rect x="543.2" y="595.0" width="292.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="546.2" y="606.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1713460839.process (61 samples, 22.59%)</title><rect x="543.2" y="579.0" width="266.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="546.2" y="590.0">com/linecorp/decaton/benchmark/Decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (61 samples, 22.59%)</title><rect x="543.2" y="563.0" width="266.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="546.2" y="574.0">com/linecorp/decaton/benchmark/Decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (61 samples, 22.59%)</title><rect x="543.2" y="547.0" width="266.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="546.2" y="558.0">com/linecorp/decaton/benchmark/Recor..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.74%)</title><rect x="543.2" y="531.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="546.2" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.74%)</title><rect x="543.2" y="515.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="546.2" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.74%)</title><rect x="543.2" y="499.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="546.2" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.74%)</title><rect x="543.2" y="483.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="546.2" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (56 samples, 20.74%)</title><rect x="551.9" y="531.0" width="244.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="554.9" y="542.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>java/lang/Thread.sleep (56 samples, 20.74%)</title><rect x="551.9" y="515.0" width="244.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="554.9" y="526.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (55 samples, 20.37%)</title><rect x="556.3" y="499.0" width="240.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="559.3" y="510.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.85%)</title><rect x="573.8" y="483.0" width="21.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="576.8" y="494.0">H..</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.37%)</title><rect x="595.6" y="483.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="598.6" y="494.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 1.11%)</title><rect x="600.0" y="483.0" width="13.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="603.0" y="494.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (42 samples, 15.56%)</title><rect x="613.1" y="483.0" width="183.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="616.1" y="494.0">os::sleep(Thread*, long,..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.74%)</title><rect x="626.2" y="467.0" width="8.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="629.2" y="478.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.74%)</title><rect x="626.2" y="451.0" width="8.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="629.2" y="462.0"></text>
</g>
<g>
<title>__lll_unlock_wake (9 samples, 3.33%)</title><rect x="635.0" y="467.0" width="39.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="638.0" y="478.0">__l..</text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.37%)</title><rect x="674.3" y="467.0" width="4.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="677.3" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (19 samples, 7.04%)</title><rect x="678.7" y="467.0" width="83.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="681.7" y="478.0">__pthread..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 1.11%)</title><rect x="761.7" y="467.0" width="13.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="764.7" y="478.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 1.48%)</title><rect x="774.8" y="467.0" width="17.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="777.8" y="478.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.37%)</title><rect x="792.3" y="467.0" width="4.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="795.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.37%)</title><rect x="796.7" y="531.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="799.7" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.74%)</title><rect x="801.0" y="531.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="804.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.37%)</title><rect x="809.8" y="579.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="812.8" y="590.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.37%)</title><rect x="809.8" y="563.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="812.8" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.74%)</title><rect x="814.1" y="579.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.1" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.74%)</title><rect x="814.1" y="563.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="817.1" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.74%)</title><rect x="822.9" y="579.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="825.9" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.37%)</title><rect x="827.3" y="563.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="830.3" y="574.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.37%)</title><rect x="827.3" y="547.0" width="4.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="830.3" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.37%)</title><rect x="831.6" y="579.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="834.6" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.37%)</title><rect x="831.6" y="563.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="834.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 3.70%)</title><rect x="836.0" y="611.0" width="43.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="839.0" y="622.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 3.70%)</title><rect x="836.0" y="595.0" width="43.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="839.0" y="606.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.48%)</title><rect x="857.9" y="579.0" width="17.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="860.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1309548006.accept (4 samples, 1.48%)</title><rect x="857.9" y="563.0" width="17.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="860.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (4 samples, 1.48%)</title><rect x="857.9" y="547.0" width="17.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="860.9" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (4 samples, 1.48%)</title><rect x="857.9" y="531.0" width="17.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="860.9" y="542.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 1.48%)</title><rect x="857.9" y="515.0" width="17.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="860.9" y="526.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 1.48%)</title><rect x="857.9" y="499.0" width="17.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="860.9" y="510.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.11%)</title><rect x="862.2" y="483.0" width="13.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="865.2" y="494.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.11%)</title><rect x="862.2" y="467.0" width="13.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="865.2" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.37%)</title><rect x="875.3" y="579.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="878.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 3.33%)</title><rect x="879.7" y="627.0" width="39.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="882.7" y="638.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 3.33%)</title><rect x="879.7" y="611.0" width="39.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="882.7" y="622.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 3.33%)</title><rect x="879.7" y="595.0" width="39.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="882.7" y="606.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1309548006.accept (9 samples, 3.33%)</title><rect x="879.7" y="579.0" width="39.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="882.7" y="590.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (9 samples, 3.33%)</title><rect x="879.7" y="563.0" width="39.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="882.7" y="574.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 3.33%)</title><rect x="879.7" y="547.0" width="39.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="882.7" y="558.0">com..</text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 3.33%)</title><rect x="879.7" y="531.0" width="39.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="882.7" y="542.0">jav..</text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 3.33%)</title><rect x="879.7" y="515.0" width="39.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="882.7" y="526.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.37%)</title><rect x="919.0" y="643.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.0" y="654.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.37%)</title><rect x="919.0" y="627.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="922.0" y="638.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.37%)</title><rect x="919.0" y="611.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="922.0" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="919.0" y="595.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="922.0" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="919.0" y="579.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="922.0" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="919.0" y="563.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="922.0" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.37%)</title><rect x="919.0" y="547.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="922.0" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.37%)</title><rect x="919.0" y="531.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="922.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 2.22%)</title><rect x="923.4" y="643.0" width="26.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="926.4" y="654.0">c..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 1.48%)</title><rect x="949.6" y="691.0" width="17.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="952.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.48%)</title><rect x="949.6" y="675.0" width="17.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="952.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.48%)</title><rect x="949.6" y="659.0" width="17.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="952.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.37%)</title><rect x="949.6" y="643.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="952.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.11%)</title><rect x="954.0" y="643.0" width="13.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="957.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 2.59%)</title><rect x="967.1" y="691.0" width="30.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="970.1" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 2.59%)</title><rect x="967.1" y="675.0" width="30.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="970.1" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.37%)</title><rect x="975.9" y="659.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="978.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.37%)</title><rect x="975.9" y="643.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="978.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.37%)</title><rect x="975.9" y="627.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="978.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.37%)</title><rect x="975.9" y="611.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="978.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.48%)</title><rect x="980.2" y="659.0" width="17.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="983.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.48%)</title><rect x="980.2" y="643.0" width="17.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="983.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.48%)</title><rect x="980.2" y="627.0" width="17.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="983.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.48%)</title><rect x="980.2" y="611.0" width="17.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="983.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.74%)</title><rect x="997.7" y="739.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1000.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.74%)</title><rect x="997.7" y="723.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1000.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.37%)</title><rect x="1002.1" y="707.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1005.1" y="718.0"></text>
</g>
<g>
<title>start_thread (42 samples, 15.56%)</title><rect x="1006.4" y="739.0" width="183.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1009.4" y="750.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (42 samples, 15.56%)</title><rect x="1006.4" y="723.0" width="183.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1009.4" y="734.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 2.59%)</title><rect x="1006.4" y="707.0" width="30.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1009.4" y="718.0">Ga..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.37%)</title><rect x="1006.4" y="691.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1009.4" y="702.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.37%)</title><rect x="1006.4" y="675.0" width="4.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1009.4" y="686.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 2.22%)</title><rect x="1010.8" y="691.0" width="26.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1013.8" y="702.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.22%)</title><rect x="1010.8" y="675.0" width="26.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1013.8" y="686.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 2.22%)</title><rect x="1010.8" y="659.0" width="26.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1013.8" y="670.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.11%)</title><rect x="1019.6" y="643.0" width="13.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1022.6" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.74%)</title><rect x="1023.9" y="627.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1026.9" y="638.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.37%)</title><rect x="1032.7" y="643.0" width="4.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1035.7" y="654.0"></text>
</g>
<g>
<title>JavaThread::run() (34 samples, 12.59%)</title><rect x="1037.0" y="707.0" width="148.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1040.0" y="718.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (34 samples, 12.59%)</title><rect x="1037.0" y="691.0" width="148.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1040.0" y="702.0">JavaThread::thread_..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (34 samples, 12.59%)</title><rect x="1037.0" y="675.0" width="148.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1040.0" y="686.0">CompileBroker::comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (32 samples, 11.85%)</title><rect x="1037.0" y="659.0" width="139.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1040.0" y="670.0">CompileBroker::in..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (29 samples, 10.74%)</title><rect x="1037.0" y="643.0" width="126.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1040.0" y="654.0">C2Compiler::comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (29 samples, 10.74%)</title><rect x="1037.0" y="627.0" width="126.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.0" y="638.0">Compile::Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (18 samples, 6.67%)</title><rect x="1037.0" y="611.0" width="78.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1040.0" y="622.0">Compile::..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.74%)</title><rect x="1037.0" y="595.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1040.0" y="606.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.37%)</title><rect x="1037.0" y="579.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1040.0" y="590.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.37%)</title><rect x="1037.0" y="563.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1040.0" y="574.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.37%)</title><rect x="1037.0" y="547.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1040.0" y="558.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.37%)</title><rect x="1041.4" y="579.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1044.4" y="590.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.37%)</title><rect x="1041.4" y="563.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1044.4" y="574.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.11%)</title><rect x="1045.8" y="595.0" width="13.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1048.8" y="606.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.11%)</title><rect x="1045.8" y="579.0" width="13.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1048.8" y="590.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.74%)</title><rect x="1050.1" y="563.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.1" y="574.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.37%)</title><rect x="1054.5" y="547.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1057.5" y="558.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.37%)</title><rect x="1054.5" y="531.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1057.5" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.37%)</title><rect x="1058.9" y="595.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.9" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.37%)</title><rect x="1058.9" y="579.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.9" y="590.0"></text>
</g>
<g>
<title>testI_regNode::ideal_Opcode() const (1 samples, 0.37%)</title><rect x="1058.9" y="563.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.9" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.37%)</title><rect x="1063.3" y="595.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1066.3" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (11 samples, 4.07%)</title><rect x="1067.6" y="595.0" width="48.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.6" y="606.0">Phas..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.37%)</title><rect x="1067.6" y="579.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.6" y="590.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.37%)</title><rect x="1072.0" y="579.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1075.0" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.37%)</title><rect x="1076.4" y="579.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.4" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.37%)</title><rect x="1080.7" y="579.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.7" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.85%)</title><rect x="1085.1" y="579.0" width="21.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.1" y="590.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.37%)</title><rect x="1093.9" y="563.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.9" y="574.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.37%)</title><rect x="1098.2" y="563.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.2" y="574.0"></text>
</g>
<g>
<title>addP_rRegNode::rule() const (1 samples, 0.37%)</title><rect x="1102.6" y="563.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.6" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.37%)</title><rect x="1107.0" y="579.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.0" y="590.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.37%)</title><rect x="1111.3" y="579.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.3" y="590.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.37%)</title><rect x="1111.3" y="563.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.3" y="574.0"></text>
</g>
<g>
<title>Compile::Optimize() (8 samples, 2.96%)</title><rect x="1115.7" y="611.0" width="35.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.7" y="622.0">Co..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.37%)</title><rect x="1115.7" y="595.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.7" y="606.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.37%)</title><rect x="1115.7" y="579.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.7" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (5 samples, 1.85%)</title><rect x="1120.1" y="595.0" width="21.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.1" y="606.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.37%)</title><rect x="1120.1" y="579.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.1" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.11%)</title><rect x="1124.4" y="579.0" width="13.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.4" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.74%)</title><rect x="1128.8" y="563.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.8" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.37%)</title><rect x="1133.2" y="547.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.2" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.37%)</title><rect x="1137.6" y="579.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.6" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.37%)</title><rect x="1137.6" y="563.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.6" y="574.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1137.6" y="547.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.6" y="558.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.37%)</title><rect x="1137.6" y="531.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.6" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.37%)</title><rect x="1141.9" y="595.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.9" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.37%)</title><rect x="1146.3" y="595.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.3" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.37%)</title><rect x="1146.3" y="579.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.3" y="590.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.37%)</title><rect x="1146.3" y="563.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.3" y="574.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.37%)</title><rect x="1146.3" y="547.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.3" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.74%)</title><rect x="1150.7" y="611.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.74%)</title><rect x="1150.7" y="595.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.74%)</title><rect x="1150.7" y="579.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.74%)</title><rect x="1150.7" y="563.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.74%)</title><rect x="1150.7" y="547.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.74%)</title><rect x="1150.7" y="531.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1150.7" y="515.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1150.7" y="499.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1150.7" y="483.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1150.7" y="467.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1150.7" y="451.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1150.7" y="435.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1150.7" y="419.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1150.7" y="403.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.7" y="414.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.37%)</title><rect x="1150.7" y="387.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.7" y="398.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.37%)</title><rect x="1150.7" y="371.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.7" y="382.0"></text>
</g>
<g>
<title>ciVirtualCallData::translate_from(ProfileData const*) (1 samples, 0.37%)</title><rect x="1150.7" y="355.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.7" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1155.0" y="515.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1155.0" y="499.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1155.0" y="483.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1155.0" y="467.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1155.0" y="451.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1155.0" y="435.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1155.0" y="419.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1155.0" y="403.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.0" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1155.0" y="387.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.0" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1155.0" y="371.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1155.0" y="355.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1155.0" y="339.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1155.0" y="323.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1155.0" y="307.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.0" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1155.0" y="291.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.0" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1155.0" y="275.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1155.0" y="259.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1155.0" y="243.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1155.0" y="227.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1155.0" y="211.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.0" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1155.0" y="195.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1155.0" y="179.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1155.0" y="163.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1155.0" y="147.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1155.0" y="131.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1155.0" y="115.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.0" y="126.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1155.0" y="99.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.0" y="110.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.37%)</title><rect x="1155.0" y="83.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="94.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.37%)</title><rect x="1155.0" y="67.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.0" y="78.0"></text>
</g>
<g>
<title>JVMState::clone_deep(Compile*) const (1 samples, 0.37%)</title><rect x="1155.0" y="51.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.0" y="62.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.37%)</title><rect x="1155.0" y="35.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.37%)</title><rect x="1159.4" y="611.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.4" y="622.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.37%)</title><rect x="1159.4" y="595.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.4" y="606.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.11%)</title><rect x="1163.8" y="643.0" width="13.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.8" y="654.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.11%)</title><rect x="1163.8" y="627.0" width="13.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.8" y="638.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.11%)</title><rect x="1163.8" y="611.0" width="13.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.8" y="622.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.11%)</title><rect x="1163.8" y="595.0" width="13.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.8" y="606.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.37%)</title><rect x="1163.8" y="579.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.8" y="590.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.37%)</title><rect x="1163.8" y="563.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.8" y="574.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.37%)</title><rect x="1163.8" y="547.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.8" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.37%)</title><rect x="1163.8" y="531.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.8" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.37%)</title><rect x="1163.8" y="515.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.8" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.37%)</title><rect x="1163.8" y="499.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.8" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.37%)</title><rect x="1163.8" y="483.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.8" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.37%)</title><rect x="1163.8" y="467.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.8" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1163.8" y="451.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.8" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1163.8" y="435.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.8" y="446.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.37%)</title><rect x="1163.8" y="419.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.8" y="430.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.37%)</title><rect x="1163.8" y="403.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.8" y="414.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.74%)</title><rect x="1168.1" y="579.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.1" y="590.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.74%)</title><rect x="1168.1" y="563.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.1" y="574.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (2 samples, 0.74%)</title><rect x="1168.1" y="547.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.1" y="558.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (2 samples, 0.74%)</title><rect x="1168.1" y="531.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.1" y="542.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (2 samples, 0.74%)</title><rect x="1168.1" y="515.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.1" y="526.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (2 samples, 0.74%)</title><rect x="1168.1" y="499.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.1" y="510.0"></text>
</g>
<g>
<title>LinearScanWalker::set_use_pos(Interval*, int, bool) (1 samples, 0.37%)</title><rect x="1172.5" y="483.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="494.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.74%)</title><rect x="1176.9" y="659.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.9" y="670.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.74%)</title><rect x="1176.9" y="643.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.9" y="654.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.74%)</title><rect x="1176.9" y="627.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="638.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.74%)</title><rect x="1176.9" y="611.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.9" y="622.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.37%)</title><rect x="1176.9" y="595.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="606.0"></text>
</g>
<g>
<title>nmethod::make_not_entrant_or_zombie(unsigned int) (1 samples, 0.37%)</title><rect x="1181.3" y="595.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="606.0"></text>
</g>
<g>
<title>nmethod::flush_dependencies(BoolObjectClosure*) (1 samples, 0.37%)</title><rect x="1181.3" y="579.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::remove_dependent_nmethod(nmethod*) (1 samples, 0.37%)</title><rect x="1181.3" y="563.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="574.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.37%)</title><rect x="1185.6" y="707.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.6" y="718.0"></text>
</g>
</g>
</svg>
