<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (1,222 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="10.0" y="995.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="10.0" y="979.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (322 samples, 26.35%)</title><rect x="11.0" y="995.0" width="310.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1006.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (321 samples, 26.27%)</title><rect x="11.0" y="979.0" width="309.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="990.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="11.0" y="963.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="14.0" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="11.0" y="947.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="14.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.16%)</title><rect x="11.9" y="963.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.9" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.16%)</title><rect x="11.9" y="947.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/545885956.accept (2 samples, 0.16%)</title><rect x="11.9" y="931.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.16%)</title><rect x="11.9" y="915.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.16%)</title><rect x="11.9" y="899.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.9" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.08%)</title><rect x="12.9" y="883.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.16%)</title><rect x="13.9" y="963.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.16%)</title><rect x="13.9" y="947.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.9" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="14.8" y="931.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.8" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="14.8" y="915.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="14.8" y="899.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="14.8" y="883.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="14.8" y="867.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.8" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="14.8" y="851.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="14.8" y="835.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="14.8" y="819.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="14.8" y="803.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/45257687.get (1 samples, 0.08%)</title><rect x="14.8" y="787.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="15.8" y="963.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.8" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="15.8" y="947.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.8" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="15.8" y="931.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.8" y="942.0"></text>
</g>
<g>
<title>java/time/Duration.&lt;init&gt; (1 samples, 0.08%)</title><rect x="15.8" y="915.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.8" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (255 samples, 20.87%)</title><rect x="16.8" y="963.0" width="246.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.8" y="974.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/399519.accept (250 samples, 20.46%)</title><rect x="16.8" y="947.0" width="241.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.8" y="958.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (249 samples, 20.38%)</title><rect x="17.7" y="931.0" width="240.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.7" y="942.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (202 samples, 16.53%)</title><rect x="17.7" y="915.0" width="195.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.7" y="926.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (202 samples, 16.53%)</title><rect x="17.7" y="899.0" width="195.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.7" y="910.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (202 samples, 16.53%)</title><rect x="17.7" y="883.0" width="195.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.7" y="894.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (202 samples, 16.53%)</title><rect x="17.7" y="867.0" width="195.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="878.0">java/util/concurrent/Exec..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (202 samples, 16.53%)</title><rect x="17.7" y="851.0" width="195.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.7" y="862.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (175 samples, 14.32%)</title><rect x="41.9" y="835.0" width="169.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.9" y="846.0">java/util/concurrent/L..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="41.9" y="819.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="44.9" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="41.9" y="803.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="44.9" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="41.9" y="787.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="44.9" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="41.9" y="771.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="44.9" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="41.9" y="755.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="44.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (143 samples, 11.70%)</title><rect x="42.8" y="819.0" width="138.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.8" y="830.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (143 samples, 11.70%)</title><rect x="42.8" y="803.0" width="138.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.8" y="814.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (143 samples, 11.70%)</title><rect x="42.8" y="787.0" width="138.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.8" y="798.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (143 samples, 11.70%)</title><rect x="42.8" y="771.0" width="138.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.8" y="782.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (143 samples, 11.70%)</title><rect x="42.8" y="755.0" width="138.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.8" y="766.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (75 samples, 6.14%)</title><rect x="108.5" y="739.0" width="72.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.5" y="750.0">sun/misc..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.25%)</title><rect x="109.5" y="723.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="112.5" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (65 samples, 5.32%)</title><rect x="112.4" y="723.0" width="62.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="115.4" y="734.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.25%)</title><rect x="112.4" y="707.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="115.4" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="115.3" y="707.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="118.3" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (42 samples, 3.44%)</title><rect x="116.2" y="707.0" width="40.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="119.2" y="718.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.41%)</title><rect x="156.8" y="707.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="159.8" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.15%)</title><rect x="161.6" y="707.0" width="13.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="164.6" y="718.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.08%)</title><rect x="175.1" y="723.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="178.1" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.33%)</title><rect x="176.1" y="723.0" width="3.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="179.1" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="180.0" y="723.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="183.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (31 samples, 2.54%)</title><rect x="180.9" y="819.0" width="30.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="183.9" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (31 samples, 2.54%)</title><rect x="180.9" y="803.0" width="30.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="183.9" y="814.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (31 samples, 2.54%)</title><rect x="180.9" y="787.0" width="30.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="183.9" y="798.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (31 samples, 2.54%)</title><rect x="180.9" y="771.0" width="30.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.9" y="782.0">ja..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="210.9" y="835.0" width="1.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="213.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.25%)</title><rect x="212.8" y="915.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="215.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.25%)</title><rect x="212.8" y="899.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="215.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.41%)</title><rect x="215.7" y="915.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="218.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.41%)</title><rect x="215.7" y="899.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.41%)</title><rect x="215.7" y="883.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="218.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (39 samples, 3.19%)</title><rect x="220.5" y="915.0" width="37.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.5" y="926.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (36 samples, 2.95%)</title><rect x="221.5" y="899.0" width="34.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.5" y="910.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (15 samples, 1.23%)</title><rect x="237.9" y="883.0" width="14.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.9" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (12 samples, 0.98%)</title><rect x="237.9" y="867.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.9" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (12 samples, 0.98%)</title><rect x="237.9" y="851.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.9" y="862.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (12 samples, 0.98%)</title><rect x="237.9" y="835.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.9" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="243.7" y="819.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="246.7" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="243.7" y="803.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="246.7" y="814.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="243.7" y="787.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="246.7" y="798.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="243.7" y="771.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="246.7" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.41%)</title><rect x="244.6" y="819.0" width="4.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="247.6" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="249.5" y="867.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.5" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.16%)</title><rect x="250.4" y="867.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.4" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="252.4" y="883.0" width="3.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="255.4" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="256.2" y="899.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="259.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.16%)</title><rect x="258.2" y="947.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.16%)</title><rect x="258.2" y="931.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.16%)</title><rect x="258.2" y="915.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.16%)</title><rect x="260.1" y="947.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.16%)</title><rect x="260.1" y="931.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="263.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.16%)</title><rect x="260.1" y="915.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.16%)</title><rect x="260.1" y="899.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.08%)</title><rect x="261.1" y="883.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="264.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="261.1" y="867.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="262.0" y="947.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="265.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="262.0" y="931.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="265.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 4.91%)</title><rect x="263.0" y="963.0" width="57.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="266.0" y="974.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (59 samples, 4.83%)</title><rect x="263.0" y="947.0" width="57.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="266.0" y="958.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (33 samples, 2.70%)</title><rect x="263.0" y="931.0" width="31.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.0" y="942.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.08%)</title><rect x="263.0" y="915.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="263.0" y="899.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="266.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="263.0" y="883.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="266.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.update (1 samples, 0.08%)</title><rect x="263.0" y="867.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (32 samples, 2.62%)</title><rect x="264.0" y="915.0" width="30.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.0" y="926.0">or..</text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.16%)</title><rect x="264.0" y="899.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.16%)</title><rect x="264.0" y="883.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (2 samples, 0.16%)</title><rect x="264.0" y="867.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (29 samples, 2.37%)</title><rect x="265.9" y="899.0" width="28.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.9" y="910.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 2.13%)</title><rect x="265.9" y="883.0" width="25.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="268.9" y="894.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.13%)</title><rect x="265.9" y="867.0" width="25.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.9" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.31%)</title><rect x="265.9" y="851.0" width="15.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="268.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.08%)</title><rect x="273.6" y="835.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="276.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.08%)</title><rect x="273.6" y="819.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.remove (1 samples, 0.08%)</title><rect x="273.6" y="803.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.08%)</title><rect x="273.6" y="787.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.08%)</title><rect x="273.6" y="771.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.57%)</title><rect x="274.6" y="835.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.57%)</title><rect x="274.6" y="819.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="277.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.57%)</title><rect x="274.6" y="803.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="277.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.57%)</title><rect x="274.6" y="787.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.57%)</title><rect x="274.6" y="771.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.57%)</title><rect x="274.6" y="755.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.57%)</title><rect x="274.6" y="739.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 0.82%)</title><rect x="281.3" y="851.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="284.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.82%)</title><rect x="281.3" y="835.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.33%)</title><rect x="281.3" y="819.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.3" y="830.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.33%)</title><rect x="281.3" y="803.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="284.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 0.49%)</title><rect x="285.2" y="819.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.2" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (6 samples, 0.49%)</title><rect x="285.2" y="803.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.16%)</title><rect x="291.0" y="883.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.16%)</title><rect x="291.0" y="867.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="294.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="291.0" y="851.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="294.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="291.0" y="835.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="291.0" y="819.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="292.9" y="883.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="295.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="292.9" y="867.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="292.9" y="851.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="292.9" y="835.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.08%)</title><rect x="293.9" y="899.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="296.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="293.9" y="883.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="293.9" y="867.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.9" y="878.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="293.9" y="851.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="293.9" y="835.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (12 samples, 0.98%)</title><rect x="294.9" y="931.0" width="11.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.65%)</title><rect x="294.9" y="915.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="297.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.57%)</title><rect x="294.9" y="899.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.9" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="294.9" y="883.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="297.9" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="294.9" y="867.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="297.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="294.9" y="851.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="297.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="294.9" y="835.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="294.9" y="819.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (2 samples, 0.16%)</title><rect x="294.9" y="803.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$79/1526176674.get (2 samples, 0.16%)</title><rect x="294.9" y="787.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.16%)</title><rect x="296.8" y="883.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.8" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="297.8" y="867.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.8" y="878.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="297.8" y="851.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="300.8" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.08%)</title><rect x="297.8" y="835.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.8" y="846.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.08%)</title><rect x="297.8" y="819.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.8" y="830.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="297.8" y="803.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="300.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.25%)</title><rect x="298.7" y="883.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="301.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.16%)</title><rect x="299.7" y="867.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="300.7" y="851.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="300.7" y="835.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="300.7" y="819.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="303.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="300.7" y="803.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="303.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="300.7" y="787.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="303.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="300.7" y="771.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.7" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="300.7" y="755.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="303.7" y="766.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="300.7" y="739.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="303.7" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="300.7" y="723.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="303.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$55/2028017635.get (1 samples, 0.08%)</title><rect x="300.7" y="707.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="303.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="301.6" y="899.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="304.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="301.6" y="883.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="301.6" y="867.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="304.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="301.6" y="851.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="301.6" y="835.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="301.6" y="819.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="304.6" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="301.6" y="803.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="304.6" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="301.6" y="787.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="304.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.08%)</title><rect x="301.6" y="771.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.6" y="782.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.08%)</title><rect x="301.6" y="755.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="304.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (4 samples, 0.33%)</title><rect x="302.6" y="915.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="305.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (2 samples, 0.16%)</title><rect x="302.6" y="899.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="305.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (2 samples, 0.16%)</title><rect x="302.6" y="883.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="303.6" y="867.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="306.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.08%)</title><rect x="303.6" y="851.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="306.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.08%)</title><rect x="303.6" y="835.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="306.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="303.6" y="819.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="306.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="303.6" y="803.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.08%)</title><rect x="304.5" y="899.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="307.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.08%)</title><rect x="305.5" y="899.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.08%)</title><rect x="305.5" y="883.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="305.5" y="867.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="306.4" y="931.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.08%)</title><rect x="306.4" y="915.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.08%)</title><rect x="307.4" y="931.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.08%)</title><rect x="307.4" y="915.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.33%)</title><rect x="308.4" y="931.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.25%)</title><rect x="308.4" y="915.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="308.4" y="899.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="311.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.08%)</title><rect x="308.4" y="883.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.08%)</title><rect x="308.4" y="867.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="311.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="308.4" y="851.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="311.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.read (1 samples, 0.08%)</title><rect x="308.4" y="835.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.16%)</title><rect x="309.3" y="899.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="309.3" y="883.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="312.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="309.3" y="867.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.08%)</title><rect x="309.3" y="851.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.08%)</title><rect x="309.3" y="835.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="309.3" y="819.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.08%)</title><rect x="309.3" y="803.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedCount.update (1 samples, 0.08%)</title><rect x="309.3" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.nanoseconds (1 samples, 0.08%)</title><rect x="310.3" y="883.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.3" y="894.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="310.3" y="867.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="313.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="311.3" y="915.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="311.3" y="899.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="311.3" y="883.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="311.3" y="867.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="311.3" y="851.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="311.3" y="835.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.08%)</title><rect x="311.3" y="819.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.3" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="311.3" y="803.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.57%)</title><rect x="312.2" y="931.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.2" y="942.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.08%)</title><rect x="312.2" y="915.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="315.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.49%)</title><rect x="313.2" y="915.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="316.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.33%)</title><rect x="313.2" y="899.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="316.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (4 samples, 0.33%)</title><rect x="313.2" y="883.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="316.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.25%)</title><rect x="313.2" y="867.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="316.2" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.25%)</title><rect x="313.2" y="851.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="316.2" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.25%)</title><rect x="313.2" y="835.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="316.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.25%)</title><rect x="313.2" y="819.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.25%)</title><rect x="313.2" y="803.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="316.2" y="814.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="313.2" y="787.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="316.2" y="798.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="314.2" y="787.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="317.2" y="798.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="314.2" y="771.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="317.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="314.2" y="755.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.2" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="314.2" y="739.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="317.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/1600704919.test (1 samples, 0.08%)</title><rect x="314.2" y="723.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="317.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.08%)</title><rect x="314.2" y="707.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/108286319.test (1 samples, 0.08%)</title><rect x="314.2" y="691.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="317.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.08%)</title><rect x="314.2" y="675.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="317.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="314.2" y="659.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="314.2" y="643.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="314.2" y="627.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.08%)</title><rect x="314.2" y="611.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="317.2" y="622.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="315.1" y="787.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="318.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="315.1" y="771.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="318.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="315.1" y="755.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.08%)</title><rect x="315.1" y="739.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="318.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="316.1" y="867.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="319.1" y="878.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="316.1" y="851.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="316.1" y="835.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="316.1" y="819.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.16%)</title><rect x="317.1" y="899.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="320.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.16%)</title><rect x="317.1" y="883.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="320.1" y="894.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="317.1" y="867.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="320.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="317.1" y="851.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="320.1" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="317.1" y="835.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="320.1" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="317.1" y="819.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="320.1" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.08%)</title><rect x="318.0" y="867.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="319.0" y="931.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="322.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="319.0" y="915.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="322.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="319.0" y="899.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="319.0" y="883.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="322.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.08%)</title><rect x="320.0" y="947.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="320.9" y="979.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.9" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.run (745 samples, 60.97%)</title><rect x="321.9" y="995.0" width="719.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="324.9" y="1006.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (745 samples, 60.97%)</title><rect x="321.9" y="979.0" width="719.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="324.9" y="990.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (745 samples, 60.97%)</title><rect x="321.9" y="963.0" width="719.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="324.9" y="974.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="327.7" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="330.7" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="328.7" y="947.0" width="2.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="331.7" y="958.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="328.7" y="931.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="331.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (3 samples, 0.25%)</title><rect x="331.6" y="947.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/517546042.run (496 samples, 40.59%)</title><rect x="334.5" y="947.0" width="478.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="337.5" y="958.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/5..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (496 samples, 40.59%)</title><rect x="334.5" y="931.0" width="478.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="337.5" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTas..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (496 samples, 40.59%)</title><rect x="334.5" y="915.0" width="478.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="337.5" y="926.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="340.2" y="899.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="343.2" y="910.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="340.2" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="343.2" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="341.2" y="899.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="344.2" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (17 samples, 1.39%)</title><rect x="342.2" y="899.0" width="16.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="345.2" y="910.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.74%)</title><rect x="349.9" y="883.0" width="8.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="352.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (471 samples, 38.54%)</title><rect x="358.6" y="899.0" width="454.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="361.6" y="910.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.schedul..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="365.4" y="883.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="368.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.08%)</title><rect x="366.3" y="883.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="369.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.08%)</title><rect x="366.3" y="867.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="369.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/86025050.get (1 samples, 0.08%)</title><rect x="366.3" y="851.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.3" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.08%)</title><rect x="366.3" y="835.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="369.3" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="366.3" y="819.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="369.3" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="366.3" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="369.3" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="366.3" y="787.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="369.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (163 samples, 13.34%)</title><rect x="367.3" y="883.0" width="157.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.3" y="894.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (163 samples, 13.34%)</title><rect x="367.3" y="867.0" width="157.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="370.3" y="878.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (163 samples, 13.34%)</title><rect x="367.3" y="851.0" width="157.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.3" y="862.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (163 samples, 13.34%)</title><rect x="367.3" y="835.0" width="157.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="370.3" y="846.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (163 samples, 13.34%)</title><rect x="367.3" y="819.0" width="157.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="370.3" y="830.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (163 samples, 13.34%)</title><rect x="367.3" y="803.0" width="157.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="370.3" y="814.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (52 samples, 4.26%)</title><rect x="368.2" y="787.0" width="50.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="371.2" y="798.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (18 samples, 1.47%)</title><rect x="368.2" y="771.0" width="17.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="371.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (18 samples, 1.47%)</title><rect x="368.2" y="755.0" width="17.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="371.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (15 samples, 1.23%)</title><rect x="368.2" y="739.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="371.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.25%)</title><rect x="382.7" y="739.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="385.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.25%)</title><rect x="382.7" y="723.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="385.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="383.7" y="707.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="386.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="383.7" y="691.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="386.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (34 samples, 2.78%)</title><rect x="385.6" y="771.0" width="32.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="388.6" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (34 samples, 2.78%)</title><rect x="385.6" y="755.0" width="32.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.6" y="766.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.16%)</title><rect x="385.6" y="739.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="388.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (2 samples, 0.16%)</title><rect x="385.6" y="723.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="388.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (17 samples, 1.39%)</title><rect x="387.6" y="739.0" width="16.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.6" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="396.3" y="723.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="399.3" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="396.3" y="707.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="399.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="396.3" y="691.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="399.3" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="396.3" y="675.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="399.3" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="396.3" y="659.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="399.3" y="670.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="396.3" y="643.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="399.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (2 samples, 0.16%)</title><rect x="397.2" y="723.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="400.2" y="734.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.16%)</title><rect x="397.2" y="707.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="400.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (2 samples, 0.16%)</title><rect x="399.1" y="723.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="402.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (1 samples, 0.08%)</title><rect x="401.1" y="723.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="404.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.16%)</title><rect x="402.0" y="723.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="405.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (8 samples, 0.65%)</title><rect x="404.0" y="739.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="407.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 0.41%)</title><rect x="405.9" y="723.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="408.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.33%)</title><rect x="405.9" y="707.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="408.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="409.8" y="707.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="412.8" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="409.8" y="691.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="412.8" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="409.8" y="675.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="412.8" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="409.8" y="659.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="412.8" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="409.8" y="643.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="412.8" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="409.8" y="627.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="412.8" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="409.8" y="611.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="412.8" y="622.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="409.8" y="595.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="412.8" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="409.8" y="579.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="412.8" y="590.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="409.8" y="563.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="412.8" y="574.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="409.8" y="547.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="412.8" y="558.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="409.8" y="531.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="412.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="410.7" y="723.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (7 samples, 0.57%)</title><rect x="411.7" y="739.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="414.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="417.5" y="723.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="420.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (99 samples, 8.10%)</title><rect x="418.5" y="787.0" width="95.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="421.5" y="798.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (12 samples, 0.98%)</title><rect x="418.5" y="771.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="421.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (12 samples, 0.98%)</title><rect x="418.5" y="755.0" width="11.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="421.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="429.1" y="739.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="432.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.74%)</title><rect x="430.0" y="771.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.74%)</title><rect x="430.0" y="755.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="433.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.57%)</title><rect x="432.0" y="739.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="435.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.41%)</title><rect x="433.9" y="723.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="436.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.33%)</title><rect x="438.7" y="771.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="441.7" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="438.7" y="755.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="441.7" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="438.7" y="739.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="441.7" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="438.7" y="723.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="441.7" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="438.7" y="707.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="441.7" y="718.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="438.7" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="441.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.25%)</title><rect x="439.7" y="755.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="442.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (74 samples, 6.06%)</title><rect x="442.6" y="771.0" width="71.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="445.6" y="782.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.64%)</title><rect x="442.6" y="755.0" width="19.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="445.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.41%)</title><rect x="444.5" y="739.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="447.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.41%)</title><rect x="444.5" y="723.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="447.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.41%)</title><rect x="444.5" y="707.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="447.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (9 samples, 0.74%)</title><rect x="449.4" y="739.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="452.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (4 samples, 0.33%)</title><rect x="458.1" y="739.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="461.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (54 samples, 4.42%)</title><rect x="461.9" y="755.0" width="52.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="464.9" y="766.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (54 samples, 4.42%)</title><rect x="461.9" y="739.0" width="52.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="464.9" y="750.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (53 samples, 4.34%)</title><rect x="462.9" y="723.0" width="51.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="465.9" y="734.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (23 samples, 1.88%)</title><rect x="464.8" y="707.0" width="22.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="467.8" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (11 samples, 0.90%)</title><rect x="469.6" y="691.0" width="10.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="472.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (11 samples, 0.90%)</title><rect x="469.6" y="675.0" width="10.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="472.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (11 samples, 0.90%)</title><rect x="469.6" y="659.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="472.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (8 samples, 0.65%)</title><rect x="472.5" y="643.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="475.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (7 samples, 0.57%)</title><rect x="473.5" y="627.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="476.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.25%)</title><rect x="477.4" y="611.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="480.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (3 samples, 0.25%)</title><rect x="477.4" y="595.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="480.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.25%)</title><rect x="480.3" y="691.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="483.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.25%)</title><rect x="483.2" y="691.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="486.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.25%)</title><rect x="483.2" y="675.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="486.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="485.1" y="659.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="488.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="486.1" y="691.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="489.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.49%)</title><rect x="487.0" y="707.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="490.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.25%)</title><rect x="489.9" y="691.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="492.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.25%)</title><rect x="489.9" y="675.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="492.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.25%)</title><rect x="489.9" y="659.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="492.9" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.25%)</title><rect x="489.9" y="643.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="492.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="492.8" y="707.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="495.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.65%)</title><rect x="493.8" y="707.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="496.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.65%)</title><rect x="493.8" y="691.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="496.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.65%)</title><rect x="493.8" y="675.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="496.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.65%)</title><rect x="493.8" y="659.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="496.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="494.7" y="643.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="497.7" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.49%)</title><rect x="495.7" y="643.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="498.7" y="654.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.49%)</title><rect x="495.7" y="627.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="498.7" y="638.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (6 samples, 0.49%)</title><rect x="495.7" y="611.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="498.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.41%)</title><rect x="501.5" y="707.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.41%)</title><rect x="501.5" y="691.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="504.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.41%)</title><rect x="501.5" y="675.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="504.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="505.4" y="659.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="508.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (8 samples, 0.65%)</title><rect x="506.3" y="707.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="509.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="513.1" y="691.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="516.1" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="513.1" y="675.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="516.1" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.08%)</title><rect x="513.1" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="516.1" y="670.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.08%)</title><rect x="513.1" y="643.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="516.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.74%)</title><rect x="514.1" y="787.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="517.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.74%)</title><rect x="514.1" y="771.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="517.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.74%)</title><rect x="514.1" y="755.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="517.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.74%)</title><rect x="514.1" y="739.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="517.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.49%)</title><rect x="517.0" y="723.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="520.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.16%)</title><rect x="522.7" y="787.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="525.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (282 samples, 23.08%)</title><rect x="524.7" y="883.0" width="272.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="527.7" y="894.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (63 samples, 5.16%)</title><rect x="524.7" y="867.0" width="60.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="527.7" y="878.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (4 samples, 0.33%)</title><rect x="527.6" y="851.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="530.6" y="862.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (56 samples, 4.58%)</title><rect x="531.4" y="851.0" width="54.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="534.4" y="862.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (53 samples, 4.34%)</title><rect x="534.3" y="835.0" width="51.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="537.3" y="846.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.65%)</title><rect x="536.3" y="819.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="539.3" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.65%)</title><rect x="536.3" y="803.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="539.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.65%)</title><rect x="536.3" y="787.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="539.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.65%)</title><rect x="536.3" y="771.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="539.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (6 samples, 0.49%)</title><rect x="538.2" y="755.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="541.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 0.41%)</title><rect x="539.2" y="739.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="542.2" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (43 samples, 3.52%)</title><rect x="544.0" y="819.0" width="41.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="547.0" y="830.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (20 samples, 1.64%)</title><rect x="566.2" y="803.0" width="19.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="569.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="566.2" y="787.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="569.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (19 samples, 1.55%)</title><rect x="567.2" y="787.0" width="18.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="570.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.41%)</title><rect x="579.7" y="771.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="582.7" y="782.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="584.5" y="771.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="587.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.49%)</title><rect x="585.5" y="867.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="588.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.49%)</title><rect x="585.5" y="851.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="588.5" y="862.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.49%)</title><rect x="585.5" y="835.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="588.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (154 samples, 12.60%)</title><rect x="591.3" y="867.0" width="148.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="594.3" y="878.0">com/linecorp/decato..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="592.3" y="851.0" width="2.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="595.3" y="862.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="593.2" y="835.0" width="2.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="596.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (149 samples, 12.19%)</title><rect x="595.2" y="851.0" width="143.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="598.2" y="862.0">com/linecorp/decat..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="599.0" y="835.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="602.0" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="599.0" y="819.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="602.0" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="599.0" y="803.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="602.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (68 samples, 5.56%)</title><rect x="600.0" y="835.0" width="65.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="603.0" y="846.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (53 samples, 4.34%)</title><rect x="611.6" y="819.0" width="51.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="614.6" y="830.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (53 samples, 4.34%)</title><rect x="611.6" y="803.0" width="51.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="614.6" y="814.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (38 samples, 3.11%)</title><rect x="618.3" y="787.0" width="36.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="621.3" y="798.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (38 samples, 3.11%)</title><rect x="618.3" y="771.0" width="36.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="621.3" y="782.0">jav..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (38 samples, 3.11%)</title><rect x="618.3" y="755.0" width="36.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="621.3" y="766.0">jav..</text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="628.0" y="739.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="631.0" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (16 samples, 1.31%)</title><rect x="629.0" y="739.0" width="15.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="632.0" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="629.0" y="723.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="632.0" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.25%)</title><rect x="629.9" y="723.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="632.9" y="734.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="629.9" y="707.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="632.9" y="718.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.16%)</title><rect x="630.9" y="707.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="633.9" y="718.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.16%)</title><rect x="630.9" y="691.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="633.9" y="702.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="630.9" y="675.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="633.9" y="686.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="631.9" y="675.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="634.9" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (12 samples, 0.98%)</title><rect x="632.8" y="723.0" width="11.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="635.8" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (7 samples, 0.57%)</title><rect x="636.7" y="707.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="639.7" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (3 samples, 0.25%)</title><rect x="637.7" y="691.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="640.7" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="639.6" y="675.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="642.6" y="686.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.08%)</title><rect x="639.6" y="659.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="642.6" y="670.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (2 samples, 0.16%)</title><rect x="640.6" y="691.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="643.6" y="702.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="642.5" y="691.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="645.5" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="642.5" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="645.5" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="643.5" y="707.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="646.5" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="644.4" y="739.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="647.4" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (10 samples, 0.82%)</title><rect x="645.4" y="739.0" width="9.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="648.4" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.16%)</title><rect x="655.0" y="787.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.0" y="798.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="657.0" y="787.0" width="2.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="660.0" y="798.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.16%)</title><rect x="659.9" y="787.0" width="1.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="662.9" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="661.8" y="787.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="664.8" y="798.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="662.8" y="819.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="665.8" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="663.7" y="819.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="666.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (10 samples, 0.82%)</title><rect x="665.7" y="835.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.7" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.toString (10 samples, 0.82%)</title><rect x="665.7" y="819.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="668.7" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.16%)</title><rect x="665.7" y="803.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="668.7" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="665.7" y="787.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="668.7" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="665.7" y="771.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="668.7" y="782.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (2 samples, 0.16%)</title><rect x="665.7" y="755.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="668.7" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.65%)</title><rect x="667.6" y="803.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="670.6" y="814.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (66 samples, 5.40%)</title><rect x="675.3" y="835.0" width="63.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="678.3" y="846.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (64 samples, 5.24%)</title><rect x="677.3" y="819.0" width="61.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="680.3" y="830.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.49%)</title><rect x="677.3" y="803.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="680.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.49%)</title><rect x="677.3" y="787.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="680.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.49%)</title><rect x="677.3" y="771.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="680.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.49%)</title><rect x="677.3" y="755.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="680.3" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (58 samples, 4.75%)</title><rect x="683.0" y="803.0" width="56.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="686.0" y="814.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (55 samples, 4.50%)</title><rect x="685.9" y="787.0" width="53.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="688.9" y="798.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (25 samples, 2.05%)</title><rect x="714.9" y="771.0" width="24.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="717.9" y="782.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.08%)</title><rect x="725.5" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="728.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.82%)</title><rect x="726.5" y="755.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="729.5" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="734.2" y="739.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="737.2" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="734.2" y="723.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="737.2" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="734.2" y="707.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="737.2" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="734.2" y="691.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="737.2" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="734.2" y="675.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="737.2" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="734.2" y="659.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="737.2" y="670.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="734.2" y="643.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="737.2" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="734.2" y="627.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="737.2" y="638.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="734.2" y="611.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="737.2" y="622.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="734.2" y="595.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="737.2" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="735.2" y="691.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="738.2" y="702.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.25%)</title><rect x="736.2" y="755.0" width="2.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="739.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="739.1" y="851.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="742.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (44 samples, 3.60%)</title><rect x="740.0" y="867.0" width="42.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="743.0" y="878.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (44 samples, 3.60%)</title><rect x="740.0" y="851.0" width="42.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="743.0" y="862.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1713460839.process (21 samples, 1.72%)</title><rect x="740.0" y="835.0" width="20.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="743.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (21 samples, 1.72%)</title><rect x="740.0" y="819.0" width="20.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="743.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (15 samples, 1.23%)</title><rect x="744.8" y="803.0" width="14.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="747.8" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="744.8" y="787.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="747.8" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="744.8" y="771.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="747.8" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.08%)</title><rect x="744.8" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="747.8" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="744.8" y="739.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="747.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.49%)</title><rect x="745.8" y="787.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="748.8" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="745.8" y="771.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="748.8" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.41%)</title><rect x="746.8" y="771.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="749.8" y="782.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="746.8" y="755.0" width="4.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="749.8" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.65%)</title><rect x="751.6" y="787.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="754.6" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.08%)</title><rect x="758.4" y="771.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="761.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="759.3" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="762.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="759.3" y="787.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="762.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.08%)</title><rect x="759.3" y="771.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="762.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.08%)</title><rect x="759.3" y="755.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="762.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.08%)</title><rect x="759.3" y="739.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="762.3" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.08%)</title><rect x="759.3" y="723.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="762.3" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="759.3" y="707.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="762.3" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="759.3" y="691.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="762.3" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="759.3" y="675.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="762.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.16%)</title><rect x="760.3" y="835.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="763.3" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="760.3" y="819.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="763.3" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="760.3" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="763.3" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="760.3" y="787.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="763.3" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="760.3" y="771.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="763.3" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="760.3" y="755.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="763.3" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="760.3" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="763.3" y="750.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="760.3" y="723.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="763.3" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="760.3" y="707.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="763.3" y="718.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.08%)</title><rect x="760.3" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="763.3" y="702.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.08%)</title><rect x="761.3" y="819.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="764.3" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="762.2" y="835.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="765.2" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="762.2" y="819.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="765.2" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.74%)</title><rect x="763.2" y="835.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="766.2" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.49%)</title><rect x="766.1" y="819.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="769.1" y="830.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.33%)</title><rect x="766.1" y="803.0" width="3.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="769.1" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.16%)</title><rect x="770.0" y="803.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="773.0" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 0.33%)</title><rect x="771.9" y="835.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="774.9" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 0.33%)</title><rect x="771.9" y="819.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="774.9" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.57%)</title><rect x="775.7" y="835.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="778.7" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="781.5" y="819.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="784.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.23%)</title><rect x="782.5" y="867.0" width="14.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.5" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="785.4" y="851.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="788.4" y="862.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="786.4" y="835.0" width="2.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="789.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.65%)</title><rect x="789.3" y="851.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="792.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.65%)</title><rect x="789.3" y="835.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="792.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/355728788.accept (8 samples, 0.65%)</title><rect x="789.3" y="819.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="792.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (8 samples, 0.65%)</title><rect x="789.3" y="803.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="792.3" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (8 samples, 0.65%)</title><rect x="789.3" y="787.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="792.3" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (8 samples, 0.65%)</title><rect x="789.3" y="771.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="792.3" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="793.1" y="755.0" width="2.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="796.1" y="766.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="793.1" y="739.0" width="2.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="796.1" y="750.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="796.0" y="755.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="799.0" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1344199921.linkToTargetMethod (1 samples, 0.08%)</title><rect x="797.0" y="883.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="800.0" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.08%)</title><rect x="797.0" y="867.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="800.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/133955718.get$Lambda (1 samples, 0.08%)</title><rect x="797.0" y="851.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="800.0" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="797.0" y="835.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="800.0" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="797.0" y="819.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="800.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.15%)</title><rect x="798.0" y="883.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.15%)</title><rect x="798.0" y="867.0" width="13.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="801.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.06%)</title><rect x="798.9" y="851.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="801.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/355728788.accept (2 samples, 0.16%)</title><rect x="798.9" y="835.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="801.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (2 samples, 0.16%)</title><rect x="798.9" y="819.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="801.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="798.9" y="803.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="801.9" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="798.9" y="787.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="801.9" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="798.9" y="771.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="801.9" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="798.9" y="755.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="801.9" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.08%)</title><rect x="799.9" y="803.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="802.9" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.08%)</title><rect x="799.9" y="787.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="802.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/133955718.accept (11 samples, 0.90%)</title><rect x="800.9" y="835.0" width="10.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="803.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$44 (11 samples, 0.90%)</title><rect x="800.9" y="819.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="803.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1810346342.complete (11 samples, 0.90%)</title><rect x="800.9" y="803.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="803.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$54 (11 samples, 0.90%)</title><rect x="800.9" y="787.0" width="10.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="803.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (11 samples, 0.90%)</title><rect x="800.9" y="771.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="803.9" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 0.90%)</title><rect x="800.9" y="755.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="803.9" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 0.90%)</title><rect x="800.9" y="739.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="803.9" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (11 samples, 0.90%)</title><rect x="800.9" y="723.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="803.9" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (11 samples, 0.90%)</title><rect x="800.9" y="707.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="803.9" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.16%)</title><rect x="811.5" y="883.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="814.5" y="894.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="811.5" y="867.0" width="1.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="814.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.41%)</title><rect x="813.4" y="947.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="816.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.41%)</title><rect x="813.4" y="931.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="816.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.41%)</title><rect x="813.4" y="915.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="816.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.41%)</title><rect x="813.4" y="899.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="816.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.08%)</title><rect x="817.3" y="883.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="820.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (231 samples, 18.90%)</title><rect x="818.2" y="947.0" width="223.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="821.2" y="958.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (231 samples, 18.90%)</title><rect x="818.2" y="931.0" width="223.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="821.2" y="942.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (188 samples, 15.38%)</title><rect x="849.1" y="915.0" width="181.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="852.1" y="926.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.41%)</title><rect x="854.9" y="899.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="857.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.41%)</title><rect x="854.9" y="883.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="857.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.41%)</title><rect x="854.9" y="867.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="857.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.41%)</title><rect x="854.9" y="851.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="857.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (177 samples, 14.48%)</title><rect x="859.8" y="899.0" width="170.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="862.8" y="910.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (177 samples, 14.48%)</title><rect x="859.8" y="883.0" width="170.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="862.8" y="894.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="869.4" y="867.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="872.4" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="870.4" y="867.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="873.4" y="878.0"></text>
</g>
<g>
<title>Unsafe_Park (162 samples, 13.26%)</title><rect x="871.3" y="867.0" width="156.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="874.3" y="878.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.41%)</title><rect x="873.3" y="851.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="876.3" y="862.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (31 samples, 2.54%)</title><rect x="878.1" y="851.0" width="29.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="881.1" y="862.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.65%)</title><rect x="891.6" y="835.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="894.6" y="846.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.33%)</title><rect x="892.6" y="819.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="895.6" y="830.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.33%)</title><rect x="892.6" y="803.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="895.6" y="814.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.25%)</title><rect x="896.4" y="819.0" width="2.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="899.4" y="830.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.25%)</title><rect x="899.3" y="835.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="902.3" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.49%)</title><rect x="902.2" y="835.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="905.2" y="846.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="908.0" y="851.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="911.0" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.16%)</title><rect x="909.0" y="851.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="912.0" y="862.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.74%)</title><rect x="910.9" y="851.0" width="8.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="913.9" y="862.0"></text>
</g>
<g>
<title>__lll_unlock_wake (28 samples, 2.29%)</title><rect x="919.6" y="851.0" width="27.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="922.6" y="862.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (61 samples, 4.99%)</title><rect x="946.7" y="851.0" width="58.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="949.7" y="862.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.08%)</title><rect x="1005.6" y="851.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1008.6" y="862.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.16%)</title><rect x="1006.5" y="851.0" width="2.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1009.5" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.16%)</title><rect x="1008.5" y="851.0" width="1.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1011.5" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="1010.4" y="851.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1013.4" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.33%)</title><rect x="1011.4" y="851.0" width="3.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1014.4" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (5 samples, 0.41%)</title><rect x="1015.2" y="851.0" width="4.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1018.2" y="862.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="1020.0" y="851.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1023.0" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="1021.0" y="851.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1024.0" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.25%)</title><rect x="1022.0" y="851.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1025.0" y="862.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.16%)</title><rect x="1024.9" y="851.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1027.9" y="862.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1026.8" y="851.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1029.8" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="1027.8" y="867.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1030.8" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.16%)</title><rect x="1028.7" y="867.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1031.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 0.90%)</title><rect x="1030.7" y="915.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1033.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.90%)</title><rect x="1030.7" y="899.0" width="10.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1033.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.90%)</title><rect x="1030.7" y="883.0" width="10.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1033.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.90%)</title><rect x="1030.7" y="867.0" width="10.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1033.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.16%)</title><rect x="1041.3" y="995.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1044.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.08%)</title><rect x="1041.3" y="979.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1044.3" y="990.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.08%)</title><rect x="1041.3" y="963.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1044.3" y="974.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.08%)</title><rect x="1041.3" y="947.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1044.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1042.3" y="979.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1045.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1042.3" y="963.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1045.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="1042.3" y="947.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1045.3" y="958.0"></text>
</g>
<g>
<title>start_thread (152 samples, 12.44%)</title><rect x="1043.2" y="995.0" width="146.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1046.2" y="1006.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (152 samples, 12.44%)</title><rect x="1043.2" y="979.0" width="146.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1046.2" y="990.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 1.88%)</title><rect x="1043.2" y="963.0" width="22.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1046.2" y="974.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.57%)</title><rect x="1043.2" y="947.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1046.2" y="958.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.57%)</title><rect x="1043.2" y="931.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1046.2" y="942.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.25%)</title><rect x="1043.2" y="915.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1046.2" y="926.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.33%)</title><rect x="1046.1" y="915.0" width="3.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1049.1" y="926.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.31%)</title><rect x="1050.0" y="947.0" width="15.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1053.0" y="958.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.25%)</title><rect x="1050.0" y="931.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1053.0" y="942.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="1050.0" y="915.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1053.0" y="926.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="1050.0" y="899.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.0" y="910.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.08%)</title><rect x="1050.0" y="883.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1053.0" y="894.0"></text>
</g>
<g>
<title>ReferenceProcessor::discover_reference(oopDesc*, ReferenceType) (1 samples, 0.08%)</title><rect x="1050.0" y="867.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.0" y="878.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.16%)</title><rect x="1050.9" y="915.0" width="2.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1053.9" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.33%)</title><rect x="1052.9" y="931.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1055.9" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="1052.9" y="915.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1055.9" y="926.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="1052.9" y="899.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1055.9" y="910.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="1052.9" y="883.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1055.9" y="894.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="1052.9" y="867.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.9" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.25%)</title><rect x="1053.8" y="915.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1056.8" y="926.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.25%)</title><rect x="1053.8" y="899.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1056.8" y="910.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1055.8" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1058.8" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (9 samples, 0.74%)</title><rect x="1056.7" y="931.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.7" y="942.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (9 samples, 0.74%)</title><rect x="1056.7" y="915.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1059.7" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (9 samples, 0.74%)</title><rect x="1056.7" y="899.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.7" y="910.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (9 samples, 0.74%)</title><rect x="1056.7" y="883.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1059.7" y="894.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (9 samples, 0.74%)</title><rect x="1056.7" y="867.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1059.7" y="878.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (9 samples, 0.74%)</title><rect x="1056.7" y="851.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.7" y="862.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (6 samples, 0.49%)</title><rect x="1059.6" y="835.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1062.6" y="846.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.16%)</title><rect x="1062.5" y="819.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1065.5" y="830.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1064.5" y="819.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1067.5" y="830.0"></text>
</g>
<g>
<title>JavaThread::run() (125 samples, 10.23%)</title><rect x="1065.4" y="963.0" width="120.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1068.4" y="974.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (125 samples, 10.23%)</title><rect x="1065.4" y="947.0" width="120.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1068.4" y="958.0">JavaThread::thr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (125 samples, 10.23%)</title><rect x="1065.4" y="931.0" width="120.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1068.4" y="942.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (124 samples, 10.15%)</title><rect x="1065.4" y="915.0" width="119.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1068.4" y="926.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (124 samples, 10.15%)</title><rect x="1065.4" y="899.0" width="119.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1068.4" y="910.0">C2Compiler::com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (124 samples, 10.15%)</title><rect x="1065.4" y="883.0" width="119.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.4" y="894.0">Compile::Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (50 samples, 4.09%)</title><rect x="1065.4" y="867.0" width="48.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1068.4" y="878.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.25%)</title><rect x="1065.4" y="851.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.4" y="862.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.25%)</title><rect x="1065.4" y="835.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1068.4" y="846.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="1067.4" y="819.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1070.4" y="830.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.08%)</title><rect x="1067.4" y="803.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.4" y="814.0"></text>
</g>
<g>
<title>OopMap::set_oop(VMRegImpl*) (1 samples, 0.08%)</title><rect x="1067.4" y="787.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.4" y="798.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.08%)</title><rect x="1067.4" y="771.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.4" y="782.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.16%)</title><rect x="1068.3" y="851.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1071.3" y="862.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.08%)</title><rect x="1069.3" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.3" y="846.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="1069.3" y="819.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1072.3" y="830.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1069.3" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1072.3" y="814.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.33%)</title><rect x="1070.3" y="851.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.3" y="862.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.33%)</title><rect x="1070.3" y="835.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1073.3" y="846.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1071.2" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1074.2" y="830.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.16%)</title><rect x="1072.2" y="819.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.2" y="830.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1073.2" y="803.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.2" y="814.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.08%)</title><rect x="1073.2" y="787.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1076.2" y="798.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1073.2" y="771.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1076.2" y="782.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.08%)</title><rect x="1073.2" y="755.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.2" y="766.0"></text>
</g>
<g>
<title>MachNode::MachNode() (1 samples, 0.08%)</title><rect x="1073.2" y="739.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1076.2" y="750.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.08%)</title><rect x="1073.2" y="723.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1076.2" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.08%)</title><rect x="1074.1" y="851.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.1" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.08%)</title><rect x="1074.1" y="835.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.1" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1074.1" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1077.1" y="830.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="1074.1" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.1" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (39 samples, 3.19%)</title><rect x="1075.1" y="851.0" width="37.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.1" y="862.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1075.1" y="835.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.1" y="846.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.08%)</title><rect x="1076.1" y="835.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.1" y="846.0"></text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.08%)</title><rect x="1077.0" y="835.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.0" y="846.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="1078.0" y="835.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.0" y="846.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="1079.0" y="835.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1082.0" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.08%)</title><rect x="1079.9" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1082.9" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1079.9" y="819.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1082.9" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.16%)</title><rect x="1080.9" y="835.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.9" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.16%)</title><rect x="1080.9" y="819.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1083.9" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1081.8" y="803.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1084.8" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.33%)</title><rect x="1082.8" y="835.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1085.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 0.98%)</title><rect x="1086.7" y="835.0" width="11.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.7" y="846.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.08%)</title><rect x="1093.4" y="819.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.4" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.25%)</title><rect x="1094.4" y="819.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.4" y="830.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.08%)</title><rect x="1097.3" y="819.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1100.3" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="1098.3" y="835.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.3" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.08%)</title><rect x="1099.2" y="835.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="1100.2" y="835.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.25%)</title><rect x="1101.2" y="835.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1103.1" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.1" y="830.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.08%)</title><rect x="1104.1" y="835.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.1" y="846.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="1104.1" y="819.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.1" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.16%)</title><rect x="1105.0" y="835.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.0" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1106.0" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.0" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="1107.0" y="835.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.0" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1107.0" y="819.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.0" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1107.9" y="835.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.9" y="846.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1107.9" y="819.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.9" y="830.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.33%)</title><rect x="1108.9" y="835.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.9" y="846.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.16%)</title><rect x="1110.8" y="819.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.8" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1111.8" y="803.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.8" y="814.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.08%)</title><rect x="1112.7" y="851.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.7" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (66 samples, 5.40%)</title><rect x="1113.7" y="867.0" width="63.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.7" y="878.0">Compile..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.16%)</title><rect x="1113.7" y="851.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.16%)</title><rect x="1113.7" y="835.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1113.7" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.7" y="819.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.7" y="803.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1114.7" y="787.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.7" y="798.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_java_lang_Object() const (1 samples, 0.08%)</title><rect x="1114.7" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.7" y="782.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1115.6" y="851.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.6" y="862.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1115.6" y="835.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1118.6" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.08%)</title><rect x="1116.6" y="851.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.6" y="862.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1116.6" y="835.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1119.6" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (48 samples, 3.93%)</title><rect x="1117.6" y="851.0" width="46.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.6" y="862.0">Phas..</text>
</g>
<g>
<title>Node::is_CFG() const (2 samples, 0.16%)</title><rect x="1117.6" y="835.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.6" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.08%)</title><rect x="1119.5" y="835.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.5" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.25%)</title><rect x="1120.5" y="835.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.5" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (39 samples, 3.19%)</title><rect x="1123.4" y="835.0" width="37.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.4" y="846.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (36 samples, 2.95%)</title><rect x="1125.3" y="819.0" width="34.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.3" y="830.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (33 samples, 2.70%)</title><rect x="1127.2" y="803.0" width="31.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.2" y="814.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (9 samples, 0.74%)</title><rect x="1149.4" y="787.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.4" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1158.1" y="787.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.1" y="798.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1159.1" y="803.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.1" y="814.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1160.1" y="819.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1163.1" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1161.0" y="835.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.08%)</title><rect x="1161.0" y="819.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1162.0" y="835.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.0" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1163.0" y="835.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.0" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1163.0" y="819.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.0" y="830.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1163.0" y="803.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.0" y="814.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1163.0" y="787.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.0" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (13 samples, 1.06%)</title><rect x="1163.9" y="851.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.9" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (12 samples, 0.98%)</title><rect x="1164.9" y="835.0" width="11.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.9" y="846.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1165.9" y="819.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.9" y="830.0"></text>
</g>
<g>
<title>IfNode::dominated_by(Node*, PhaseIterGVN*) (1 samples, 0.08%)</title><rect x="1165.9" y="803.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.9" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1165.9" y="787.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.9" y="798.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1165.9" y="771.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.9" y="782.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1166.8" y="819.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.8" y="830.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1166.8" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.8" y="814.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1166.8" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.8" y="798.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1166.8" y="771.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1169.8" y="782.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1167.8" y="803.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.8" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.8" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.8" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1167.8" y="771.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.8" y="782.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1168.8" y="819.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.8" y="830.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1168.8" y="803.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.8" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1168.8" y="787.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.8" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1168.8" y="771.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.8" y="782.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1168.8" y="755.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.8" y="766.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="1168.8" y="739.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.8" y="750.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1169.7" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="830.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.08%)</title><rect x="1170.7" y="819.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.7" y="830.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1171.7" y="819.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.7" y="830.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1172.6" y="819.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.6" y="830.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.16%)</title><rect x="1172.6" y="803.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.6" y="814.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1174.5" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="830.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1174.5" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="814.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.08%)</title><rect x="1174.5" y="787.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="798.0"></text>
</g>
<g>
<title>TypePtr::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1174.5" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="782.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.08%)</title><rect x="1175.5" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="830.0"></text>
</g>
<g>
<title>TypeKlassPtr::hash() const (1 samples, 0.08%)</title><rect x="1175.5" y="803.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.5" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1176.5" y="851.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.5" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1176.5" y="835.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.5" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1176.5" y="819.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.5" y="830.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.08%)</title><rect x="1176.5" y="803.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.5" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1176.5" y="787.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.5" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1176.5" y="771.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.57%)</title><rect x="1177.4" y="867.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.57%)</title><rect x="1177.4" y="851.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.57%)</title><rect x="1177.4" y="835.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.57%)</title><rect x="1177.4" y="819.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.57%)</title><rect x="1177.4" y="803.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.57%)</title><rect x="1177.4" y="787.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.41%)</title><rect x="1177.4" y="771.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.4" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.41%)</title><rect x="1177.4" y="755.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.41%)</title><rect x="1177.4" y="739.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.41%)</title><rect x="1177.4" y="723.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.41%)</title><rect x="1177.4" y="707.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.41%)</title><rect x="1177.4" y="691.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.4" y="675.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.4" y="659.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.4" y="643.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.4" y="627.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.4" y="611.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.4" y="595.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.4" y="579.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.4" y="563.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.4" y="547.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.4" y="531.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.4" y="515.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.4" y="499.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.4" y="483.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.4" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.4" y="467.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.4" y="451.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.4" y="435.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.4" y="419.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.4" y="403.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.4" y="414.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.08%)</title><rect x="1177.4" y="387.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="398.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.08%)</title><rect x="1177.4" y="371.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="382.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.08%)</title><rect x="1177.4" y="355.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="366.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.08%)</title><rect x="1177.4" y="339.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.4" y="387.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.4" y="371.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="382.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.08%)</title><rect x="1178.4" y="355.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="366.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.08%)</title><rect x="1178.4" y="339.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1179.4" y="675.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="686.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.08%)</title><rect x="1179.4" y="659.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1180.3" y="659.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1180.3" y="643.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1180.3" y="627.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1180.3" y="611.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1180.3" y="595.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1180.3" y="579.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1180.3" y="563.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1180.3" y="547.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1180.3" y="531.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1180.3" y="515.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1180.3" y="499.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1180.3" y="483.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.3" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1180.3" y="467.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1180.3" y="451.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1180.3" y="435.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1180.3" y="419.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1180.3" y="403.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1180.3" y="387.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.3" y="398.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.3" y="371.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="382.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.08%)</title><rect x="1180.3" y="355.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="366.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.3" y="339.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.3" y="323.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.3" y="307.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="318.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.3" y="291.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="302.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.08%)</title><rect x="1180.3" y="275.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="286.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.08%)</title><rect x="1180.3" y="259.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="270.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.08%)</title><rect x="1180.3" y="243.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="254.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.08%)</title><rect x="1180.3" y="227.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="238.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.08%)</title><rect x="1180.3" y="211.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="222.0"></text>
</g>
<g>
<title>java_lang_Class::protection_domain(oopDesc*) (1 samples, 0.08%)</title><rect x="1180.3" y="195.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="371.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.3" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.3" y="339.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.3" y="323.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.3" y="307.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.3" y="291.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="275.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.3" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="259.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.3" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.3" y="227.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.3" y="211.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.3" y="195.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.3" y="179.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.3" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.3" y="163.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.3" y="147.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.3" y="131.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.3" y="115.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="126.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1181.3" y="99.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="110.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1181.3" y="83.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="94.0"></text>
</g>
<g>
<title>OptoRuntime::uncommon_trap_Type() (1 samples, 0.08%)</title><rect x="1181.3" y="67.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1181.3" y="51.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1181.3" y="35.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1182.3" y="771.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1182.3" y="755.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1182.3" y="739.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1182.3" y="723.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1182.3" y="707.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1182.3" y="691.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1182.3" y="675.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1182.3" y="659.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1182.3" y="643.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1182.3" y="627.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1182.3" y="611.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1182.3" y="595.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1182.3" y="579.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1182.3" y="563.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="574.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1182.3" y="547.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="558.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1182.3" y="531.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.3" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1182.3" y="515.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1182.3" y="499.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1182.3" y="483.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1182.3" y="467.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.3" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1182.3" y="451.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.08%)</title><rect x="1182.3" y="435.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1182.3" y="419.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="547.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="531.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="515.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="499.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.2" y="483.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="467.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="451.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="435.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="419.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="403.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="387.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="371.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="382.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1183.2" y="355.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="366.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="339.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.2" y="350.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.08%)</title><rect x="1183.2" y="323.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.2" y="334.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.08%)</title><rect x="1184.2" y="867.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="878.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.08%)</title><rect x="1184.2" y="851.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="862.0"></text>
</g>
<g>
<title>Metadata::is_methodData() const volatile (1 samples, 0.08%)</title><rect x="1184.2" y="835.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="846.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.08%)</title><rect x="1185.2" y="915.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.2" y="926.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.08%)</title><rect x="1185.2" y="899.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.2" y="910.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.08%)</title><rect x="1185.2" y="883.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.2" y="894.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1185.2" y="867.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.2" y="878.0"></text>
</g>
<g>
<title>VMThread::run() (4 samples, 0.33%)</title><rect x="1186.1" y="963.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.1" y="974.0"></text>
</g>
<g>
<title>VMThread::loop() (4 samples, 0.33%)</title><rect x="1186.1" y="947.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.1" y="958.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (3 samples, 0.25%)</title><rect x="1186.1" y="931.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="942.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.16%)</title><rect x="1187.1" y="915.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="926.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (2 samples, 0.16%)</title><rect x="1187.1" y="899.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="910.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (2 samples, 0.16%)</title><rect x="1187.1" y="883.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="894.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (2 samples, 0.16%)</title><rect x="1187.1" y="867.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.1" y="878.0"></text>
</g>
<g>
<title>frame::entry_frame_is_first() const (1 samples, 0.08%)</title><rect x="1187.1" y="851.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.1" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1188.1" y="851.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.1" y="862.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1188.1" y="835.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.1" y="846.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.0" y="931.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="942.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.0" y="915.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.0" y="926.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.0" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="910.0"></text>
</g>
<g>
<title>CMMarkStack::note_end_of_gc() (1 samples, 0.08%)</title><rect x="1189.0" y="883.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.0" y="894.0"></text>
</g>
</g>
</svg>
