<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,425 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="10.8" y="2035.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.8" y="2046.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.07%)</title><rect x="10.8" y="2019.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.8" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (281 samples, 19.72%)</title><rect x="11.7" y="2035.0" width="232.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.7" y="2046.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (280 samples, 19.65%)</title><rect x="12.5" y="2019.0" width="231.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.5" y="2030.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (6 samples, 0.42%)</title><rect x="13.3" y="2003.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.3" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.35%)</title><rect x="14.1" y="1987.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.1" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/876488029.accept (5 samples, 0.35%)</title><rect x="14.1" y="1971.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.1" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.35%)</title><rect x="14.1" y="1955.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.1" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.35%)</title><rect x="14.1" y="1939.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.1" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.35%)</title><rect x="14.1" y="1923.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.1" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.28%)</title><rect x="18.3" y="2003.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.3" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.28%)</title><rect x="18.3" y="1987.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.3" y="1998.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="18.3" y="1971.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.3" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="18.3" y="1955.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.3" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="18.3" y="1939.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.3" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.21%)</title><rect x="19.1" y="1971.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="22.1" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.21%)</title><rect x="19.1" y="1955.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.07%)</title><rect x="19.1" y="1939.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="22.1" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="19.9" y="1939.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.9" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="19.9" y="1923.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.9" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="19.9" y="1907.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.9" y="1918.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="19.9" y="1891.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.9" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.07%)</title><rect x="19.9" y="1875.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.9" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="20.8" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.8" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (3 samples, 0.21%)</title><rect x="21.6" y="2003.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.6" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (3 samples, 0.21%)</title><rect x="21.6" y="1987.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.6" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="23.2" y="1971.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.2" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="23.2" y="1955.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.2" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="23.2" y="1939.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="23.2" y="1923.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="23.2" y="1907.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.2" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="24.1" y="2003.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.1" y="2014.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (209 samples, 14.67%)</title><rect x="24.9" y="2003.0" width="173.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.9" y="2014.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/976983451.accept (198 samples, 13.89%)</title><rect x="25.7" y="1987.0" width="164.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.7" y="1998.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.14%)</title><rect x="27.4" y="1971.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="30.4" y="1982.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.07%)</title><rect x="27.4" y="1955.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="30.4" y="1966.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="27.4" y="1939.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="30.4" y="1950.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="27.4" y="1923.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="30.4" y="1934.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="28.2" y="1955.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="31.2" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$67 (194 samples, 13.61%)</title><rect x="29.0" y="1971.0" width="160.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.0" y="1982.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.07%)</title><rect x="31.5" y="1955.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.5" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (145 samples, 10.18%)</title><rect x="32.4" y="1955.0" width="120.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.4" y="1966.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (145 samples, 10.18%)</title><rect x="32.4" y="1939.0" width="120.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.4" y="1950.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (145 samples, 10.18%)</title><rect x="32.4" y="1923.0" width="120.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.4" y="1934.0">com/linecorp/de..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (127 samples, 8.91%)</title><rect x="44.8" y="1907.0" width="105.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.8" y="1918.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (127 samples, 8.91%)</title><rect x="44.8" y="1891.0" width="105.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="47.8" y="1902.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (127 samples, 8.91%)</title><rect x="44.8" y="1875.0" width="105.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.8" y="1886.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (125 samples, 8.77%)</title><rect x="44.8" y="1859.0" width="103.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.8" y="1870.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (46 samples, 3.23%)</title><rect x="44.8" y="1843.0" width="38.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="47.8" y="1854.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (46 samples, 3.23%)</title><rect x="44.8" y="1827.0" width="38.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.8" y="1838.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (46 samples, 3.23%)</title><rect x="44.8" y="1811.0" width="38.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="47.8" y="1822.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (79 samples, 5.54%)</title><rect x="82.9" y="1843.0" width="65.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.9" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (79 samples, 5.54%)</title><rect x="82.9" y="1827.0" width="65.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="85.9" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (79 samples, 5.54%)</title><rect x="82.9" y="1811.0" width="65.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="85.9" y="1822.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (79 samples, 5.54%)</title><rect x="82.9" y="1795.0" width="65.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="85.9" y="1806.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (79 samples, 5.54%)</title><rect x="82.9" y="1779.0" width="65.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="85.9" y="1790.0">sun/mis..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="82.9" y="1763.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="85.9" y="1774.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="83.7" y="1763.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="86.7" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (73 samples, 5.12%)</title><rect x="84.5" y="1763.0" width="60.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="87.5" y="1774.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.21%)</title><rect x="85.4" y="1747.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="88.4" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="87.8" y="1747.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="90.8" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.14%)</title><rect x="88.7" y="1747.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="91.7" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (41 samples, 2.88%)</title><rect x="90.3" y="1747.0" width="34.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="93.3" y="1758.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.14%)</title><rect x="124.3" y="1747.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="127.3" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (23 samples, 1.61%)</title><rect x="125.9" y="1747.0" width="19.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="128.9" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.14%)</title><rect x="145.0" y="1763.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="148.0" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.14%)</title><rect x="146.6" y="1763.0" width="1.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="149.6" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.14%)</title><rect x="148.3" y="1859.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="151.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.14%)</title><rect x="148.3" y="1843.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.14%)</title><rect x="148.3" y="1827.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="151.3" y="1838.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.07%)</title><rect x="149.1" y="1811.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.1" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.21%)</title><rect x="149.9" y="1907.0" width="2.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="152.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (7 samples, 0.49%)</title><rect x="152.4" y="1955.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="155.4" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (7 samples, 0.49%)</title><rect x="152.4" y="1939.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="155.4" y="1950.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1344199921.linkToTargetMethod (1 samples, 0.07%)</title><rect x="157.4" y="1923.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="160.4" y="1934.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.07%)</title><rect x="157.4" y="1907.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.4" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1296979927.get$Lambda (1 samples, 0.07%)</title><rect x="157.4" y="1891.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="160.4" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="157.4" y="1875.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="160.4" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="157.4" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="160.4" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.07%)</title><rect x="157.4" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="160.4" y="1854.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.07%)</title><rect x="157.4" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="160.4" y="1838.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.07%)</title><rect x="157.4" y="1811.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="160.4" y="1822.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.07%)</title><rect x="157.4" y="1795.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="160.4" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (10 samples, 0.70%)</title><rect x="158.2" y="1955.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.2" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.70%)</title><rect x="158.2" y="1939.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="161.2" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.70%)</title><rect x="158.2" y="1923.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="161.2" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (28 samples, 1.96%)</title><rect x="166.5" y="1955.0" width="23.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="169.5" y="1966.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (28 samples, 1.96%)</title><rect x="166.5" y="1939.0" width="23.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="169.5" y="1950.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="186.4" y="1923.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="189.4" y="1934.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="186.4" y="1907.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="189.4" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.21%)</title><rect x="187.2" y="1923.0" width="2.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="190.2" y="1934.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.21%)</title><rect x="189.7" y="1987.0" width="2.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="192.7" y="1998.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="192.2" y="1987.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.2" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.07%)</title><rect x="192.2" y="1971.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.2" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="192.2" y="1955.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.2" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="192.2" y="1939.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.2" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.07%)</title><rect x="192.2" y="1923.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="195.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.28%)</title><rect x="193.0" y="1987.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.0" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.28%)</title><rect x="193.0" y="1971.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="196.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.28%)</title><rect x="193.0" y="1955.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.28%)</title><rect x="193.0" y="1939.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="196.0" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.28%)</title><rect x="193.0" y="1923.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="196.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.14%)</title><rect x="196.3" y="1987.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="199.3" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.14%)</title><rect x="196.3" y="1971.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.07%)</title><rect x="197.1" y="1955.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="200.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="197.1" y="1939.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="197.1" y="1923.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="200.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 3.86%)</title><rect x="198.0" y="2003.0" width="45.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.0" y="2014.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 3.86%)</title><rect x="198.0" y="1987.0" width="45.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="201.0" y="1998.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 2.53%)</title><rect x="198.0" y="1971.0" width="29.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="201.0" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (36 samples, 2.53%)</title><rect x="198.0" y="1955.0" width="29.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="201.0" y="1966.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (36 samples, 2.53%)</title><rect x="198.0" y="1939.0" width="29.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.0" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (33 samples, 2.32%)</title><rect x="198.0" y="1923.0" width="27.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="201.0" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (33 samples, 2.32%)</title><rect x="198.0" y="1907.0" width="27.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.0" y="1918.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.07%)</title><rect x="201.3" y="1891.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.3" y="1902.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.07%)</title><rect x="201.3" y="1875.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.3" y="1886.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.07%)</title><rect x="201.3" y="1859.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.3" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.07%)</title><rect x="201.3" y="1843.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.3" y="1854.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="201.3" y="1827.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 0.84%)</title><rect x="202.1" y="1891.0" width="9.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="205.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.28%)</title><rect x="208.7" y="1875.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="211.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.28%)</title><rect x="208.7" y="1859.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="211.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.28%)</title><rect x="208.7" y="1843.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.28%)</title><rect x="208.7" y="1827.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.28%)</title><rect x="208.7" y="1811.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.28%)</title><rect x="208.7" y="1795.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.28%)</title><rect x="208.7" y="1779.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.7" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (16 samples, 1.12%)</title><rect x="212.0" y="1891.0" width="13.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.07%)</title><rect x="212.0" y="1875.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 1.05%)</title><rect x="212.9" y="1875.0" width="12.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="215.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (15 samples, 1.05%)</title><rect x="212.9" y="1859.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="215.9" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (15 samples, 1.05%)</title><rect x="212.9" y="1843.0" width="12.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.9" y="1854.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (10 samples, 0.70%)</title><rect x="217.0" y="1827.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.0" y="1838.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.14%)</title><rect x="222.0" y="1811.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="225.0" y="1822.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="223.6" y="1811.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="226.6" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.14%)</title><rect x="225.3" y="1923.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.14%)</title><rect x="225.3" y="1907.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="225.3" y="1891.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="225.3" y="1875.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="225.3" y="1859.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="226.1" y="1843.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.1" y="1854.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValues.iterator (1 samples, 0.07%)</title><rect x="226.1" y="1827.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.07%)</title><rect x="227.0" y="1923.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="227.0" y="1907.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="227.0" y="1891.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="227.0" y="1875.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="227.0" y="1859.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="227.0" y="1843.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.07%)</title><rect x="227.0" y="1827.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.07%)</title><rect x="227.0" y="1811.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 0.35%)</title><rect x="227.8" y="1971.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 0.28%)</title><rect x="227.8" y="1955.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.21%)</title><rect x="227.8" y="1939.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.14%)</title><rect x="227.8" y="1923.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.8" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.14%)</title><rect x="227.8" y="1907.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="230.8" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.14%)</title><rect x="227.8" y="1891.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.8" y="1902.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.14%)</title><rect x="227.8" y="1875.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.8" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.14%)</title><rect x="227.8" y="1859.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.8" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="228.6" y="1843.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.6" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.07%)</title><rect x="228.6" y="1827.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.07%)</title><rect x="229.4" y="1923.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.07%)</title><rect x="229.4" y="1907.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="229.4" y="1891.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="229.4" y="1875.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="232.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="229.4" y="1859.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.4" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="229.4" y="1843.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.4" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="229.4" y="1827.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.4" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="229.4" y="1811.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.4" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="229.4" y="1795.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.4" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="229.4" y="1779.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.4" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="229.4" y="1763.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.4" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="229.4" y="1747.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.4" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$230/2114126045.test (1 samples, 0.07%)</title><rect x="229.4" y="1731.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="232.4" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.07%)</title><rect x="230.3" y="1939.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.3" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="230.3" y="1923.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="230.3" y="1907.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="230.3" y="1891.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="230.3" y="1875.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="230.3" y="1859.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="230.3" y="1843.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.3" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="230.3" y="1827.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.3" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="230.3" y="1811.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="233.3" y="1822.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="230.3" y="1795.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="233.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="231.1" y="1955.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="231.1" y="1939.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="231.1" y="1923.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.07%)</title><rect x="231.1" y="1907.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.07%)</title><rect x="231.1" y="1891.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.07%)</title><rect x="231.1" y="1875.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.1" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="231.1" y="1859.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="234.1" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="231.1" y="1843.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.07%)</title><rect x="231.9" y="1971.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="234.9" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.07%)</title><rect x="231.9" y="1955.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.28%)</title><rect x="232.8" y="1971.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="235.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.21%)</title><rect x="232.8" y="1955.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="235.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="232.8" y="1939.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.07%)</title><rect x="232.8" y="1923.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.07%)</title><rect x="232.8" y="1907.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getOrElse (1 samples, 0.07%)</title><rect x="232.8" y="1891.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.14%)</title><rect x="233.6" y="1939.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.14%)</title><rect x="233.6" y="1923.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.07%)</title><rect x="233.6" y="1907.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.07%)</title><rect x="233.6" y="1891.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.07%)</title><rect x="233.6" y="1875.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.07%)</title><rect x="233.6" y="1859.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.07%)</title><rect x="233.6" y="1843.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.6" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="233.6" y="1827.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.07%)</title><rect x="234.4" y="1907.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.4" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="234.4" y="1891.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="237.4" y="1902.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="234.4" y="1875.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="237.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="235.2" y="1955.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="235.2" y="1939.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="238.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="235.2" y="1923.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="235.2" y="1907.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="235.2" y="1891.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.07%)</title><rect x="235.2" y="1875.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.07%)</title><rect x="235.2" y="1859.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.07%)</title><rect x="235.2" y="1843.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.07%)</title><rect x="235.2" y="1827.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="238.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.07%)</title><rect x="235.2" y="1811.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.2" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="235.2" y="1795.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.2" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="235.2" y="1779.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.2" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.56%)</title><rect x="236.1" y="1971.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="239.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (8 samples, 0.56%)</title><rect x="236.1" y="1955.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.1" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.21%)</title><rect x="236.1" y="1939.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="239.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/531707592.accept (2 samples, 0.14%)</title><rect x="236.9" y="1923.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.14%)</title><rect x="236.9" y="1907.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="236.9" y="1891.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.07%)</title><rect x="236.9" y="1875.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.07%)</title><rect x="237.7" y="1891.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="237.7" y="1875.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/558187323.linkToTargetMethod (1 samples, 0.07%)</title><rect x="238.5" y="1939.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="241.5" y="1950.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.07%)</title><rect x="238.5" y="1923.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/531707592.get$Lambda (1 samples, 0.07%)</title><rect x="238.5" y="1907.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="241.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.21%)</title><rect x="239.4" y="1939.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="242.4" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="239.4" y="1923.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (2 samples, 0.14%)</title><rect x="240.2" y="1923.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (2 samples, 0.14%)</title><rect x="240.2" y="1907.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.2" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="240.2" y="1891.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.2" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.07%)</title><rect x="241.0" y="1891.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.07%)</title><rect x="241.0" y="1875.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.07%)</title><rect x="241.9" y="1939.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.9" y="1950.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="241.9" y="1923.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="244.9" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="241.9" y="1907.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="244.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="242.7" y="1971.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="242.7" y="1955.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="245.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="242.7" y="1939.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="245.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="242.7" y="1923.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="242.7" y="1907.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="242.7" y="1891.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.07%)</title><rect x="243.5" y="2003.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.5" y="2014.0"></text>
</g>
<g>
<title>java/lang/Thread.run (696 samples, 48.84%)</title><rect x="244.3" y="2035.0" width="576.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="247.3" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (696 samples, 48.84%)</title><rect x="244.3" y="2019.0" width="576.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.3" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (696 samples, 48.84%)</title><rect x="244.3" y="2003.0" width="576.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.3" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1724831405.run (467 samples, 32.77%)</title><rect x="251.8" y="1987.0" width="386.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.8" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (464 samples, 32.56%)</title><rect x="254.3" y="1971.0" width="384.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.3" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (464 samples, 32.56%)</title><rect x="254.3" y="1955.0" width="384.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="257.3" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (457 samples, 32.07%)</title><rect x="254.3" y="1939.0" width="378.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.3" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeli..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.14%)</title><rect x="262.6" y="1923.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.6" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (157 samples, 11.02%)</title><rect x="264.2" y="1923.0" width="130.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="267.2" y="1934.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (157 samples, 11.02%)</title><rect x="264.2" y="1907.0" width="130.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.2" y="1918.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (157 samples, 11.02%)</title><rect x="264.2" y="1891.0" width="130.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.2" y="1902.0">com/linecorp/dec..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="264.2" y="1875.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="267.2" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="264.2" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="267.2" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="264.2" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="267.2" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="264.2" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="267.2" y="1838.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="264.2" y="1811.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="267.2" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (156 samples, 10.95%)</title><rect x="265.0" y="1875.0" width="129.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.0" y="1886.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (156 samples, 10.95%)</title><rect x="265.0" y="1859.0" width="129.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.0" y="1870.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (156 samples, 10.95%)</title><rect x="265.0" y="1843.0" width="129.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.0" y="1854.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (50 samples, 3.51%)</title><rect x="265.0" y="1827.0" width="41.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.0" y="1838.0">com..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="278.3" y="1811.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="281.3" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.56%)</title><rect x="279.1" y="1811.0" width="6.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="282.1" y="1822.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.42%)</title><rect x="280.8" y="1795.0" width="4.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="283.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.14%)</title><rect x="285.7" y="1811.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.14%)</title><rect x="285.7" y="1795.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.14%)</title><rect x="285.7" y="1779.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.7" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="285.7" y="1763.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.7" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="285.7" y="1747.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.7" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="285.7" y="1731.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="288.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (22 samples, 1.54%)</title><rect x="287.4" y="1811.0" width="18.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 0.28%)</title><rect x="302.3" y="1795.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.28%)</title><rect x="302.3" y="1779.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="305.3" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="302.3" y="1763.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="305.3" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="302.3" y="1747.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="305.3" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.07%)</title><rect x="302.3" y="1731.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="305.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.21%)</title><rect x="303.1" y="1763.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="306.1" y="1774.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="305.6" y="1811.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="308.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (95 samples, 6.67%)</title><rect x="306.4" y="1827.0" width="78.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.4" y="1838.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.14%)</title><rect x="306.4" y="1811.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.07%)</title><rect x="308.1" y="1811.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.21%)</title><rect x="308.9" y="1811.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.9" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.21%)</title><rect x="308.9" y="1795.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.63%)</title><rect x="311.4" y="1811.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.63%)</title><rect x="311.4" y="1795.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.35%)</title><rect x="312.2" y="1779.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="315.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.21%)</title><rect x="313.9" y="1763.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="316.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (3 samples, 0.21%)</title><rect x="316.4" y="1779.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.28%)</title><rect x="318.9" y="1811.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.9" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="319.7" y="1795.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="322.7" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="319.7" y="1779.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="322.7" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="319.7" y="1763.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="322.7" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="319.7" y="1747.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="322.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.14%)</title><rect x="320.5" y="1795.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (73 samples, 5.12%)</title><rect x="322.2" y="1811.0" width="60.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="325.2" y="1822.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.05%)</title><rect x="324.7" y="1795.0" width="12.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="324.7" y="1779.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="327.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.28%)</title><rect x="325.5" y="1779.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="328.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.28%)</title><rect x="325.5" y="1763.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="328.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.28%)</title><rect x="325.5" y="1747.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="328.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.28%)</title><rect x="325.5" y="1731.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.07%)</title><rect x="328.0" y="1715.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="331.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.56%)</title><rect x="328.8" y="1779.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (5 samples, 0.35%)</title><rect x="328.8" y="1763.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="331.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.21%)</title><rect x="330.5" y="1747.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="333.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.21%)</title><rect x="332.9" y="1763.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="335.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.21%)</title><rect x="332.9" y="1747.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="335.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.07%)</title><rect x="334.6" y="1731.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.07%)</title><rect x="334.6" y="1715.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="337.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.14%)</title><rect x="335.4" y="1779.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="338.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.14%)</title><rect x="335.4" y="1763.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="338.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.14%)</title><rect x="337.1" y="1795.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="340.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (53 samples, 3.72%)</title><rect x="338.7" y="1795.0" width="43.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="341.7" y="1806.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (53 samples, 3.72%)</title><rect x="338.7" y="1779.0" width="43.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="341.7" y="1790.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="338.7" y="1763.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="341.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (52 samples, 3.65%)</title><rect x="339.6" y="1763.0" width="43.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="342.6" y="1774.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 0.91%)</title><rect x="343.7" y="1747.0" width="10.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="346.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (3 samples, 0.21%)</title><rect x="343.7" y="1731.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="346.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="346.2" y="1731.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="349.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.49%)</title><rect x="347.0" y="1731.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.49%)</title><rect x="347.0" y="1715.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.49%)</title><rect x="347.0" y="1699.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="350.0" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.28%)</title><rect x="347.0" y="1683.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="350.0" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.21%)</title><rect x="350.3" y="1683.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.3" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.14%)</title><rect x="352.8" y="1731.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="355.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.14%)</title><rect x="352.8" y="1715.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="355.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="353.6" y="1699.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="356.6" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (14 samples, 0.98%)</title><rect x="354.5" y="1747.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="357.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (10 samples, 0.70%)</title><rect x="357.8" y="1731.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="360.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.70%)</title><rect x="357.8" y="1715.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="360.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.70%)</title><rect x="357.8" y="1699.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="360.8" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (10 samples, 0.70%)</title><rect x="357.8" y="1683.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="360.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (16 samples, 1.12%)</title><rect x="366.1" y="1747.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="369.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (16 samples, 1.12%)</title><rect x="366.1" y="1731.0" width="13.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="369.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (16 samples, 1.12%)</title><rect x="366.1" y="1715.0" width="13.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="369.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (16 samples, 1.12%)</title><rect x="366.1" y="1699.0" width="13.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="369.1" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (16 samples, 1.12%)</title><rect x="366.1" y="1683.0" width="13.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="369.1" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.49%)</title><rect x="371.0" y="1667.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="374.0" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor12.newInstance (2 samples, 0.14%)</title><rect x="375.2" y="1651.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.2" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor12.newInstance (3 samples, 0.21%)</title><rect x="376.8" y="1667.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="379.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.28%)</title><rect x="379.3" y="1747.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="382.3" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.28%)</title><rect x="379.3" y="1731.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="382.3" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.28%)</title><rect x="379.3" y="1715.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="382.3" y="1726.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="381.8" y="1699.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="384.8" y="1710.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.07%)</title><rect x="381.8" y="1683.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="384.8" y="1694.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.07%)</title><rect x="381.8" y="1667.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="384.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.07%)</title><rect x="382.6" y="1811.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="385.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.14%)</title><rect x="383.5" y="1811.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="386.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.77%)</title><rect x="385.1" y="1827.0" width="9.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="388.1" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.07%)</title><rect x="385.1" y="1811.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (10 samples, 0.70%)</title><rect x="385.9" y="1811.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="388.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (10 samples, 0.70%)</title><rect x="385.9" y="1795.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="388.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (10 samples, 0.70%)</title><rect x="385.9" y="1779.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.9" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.70%)</title><rect x="385.9" y="1763.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.9" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (266 samples, 18.67%)</title><rect x="394.2" y="1923.0" width="220.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="397.2" y="1934.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (42 samples, 2.95%)</title><rect x="394.2" y="1907.0" width="34.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="397.2" y="1918.0">co..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="394.2" y="1891.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="397.2" y="1902.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="394.2" y="1875.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.2" y="1886.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="394.2" y="1859.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="397.2" y="1870.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (41 samples, 2.88%)</title><rect x="395.1" y="1891.0" width="33.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="398.1" y="1902.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (41 samples, 2.88%)</title><rect x="395.1" y="1875.0" width="33.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="398.1" y="1886.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (14 samples, 0.98%)</title><rect x="395.1" y="1859.0" width="11.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="398.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="395.9" y="1843.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="398.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="395.9" y="1827.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="398.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="395.9" y="1811.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="398.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (11 samples, 0.77%)</title><rect x="397.5" y="1843.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (11 samples, 0.77%)</title><rect x="397.5" y="1827.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="400.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 0.77%)</title><rect x="397.5" y="1811.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="400.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (11 samples, 0.77%)</title><rect x="397.5" y="1795.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="400.5" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.07%)</title><rect x="406.6" y="1859.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="409.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="406.6" y="1843.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="409.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.35%)</title><rect x="407.5" y="1859.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="410.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="410.8" y="1843.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="413.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="410.8" y="1827.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="413.8" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (19 samples, 1.33%)</title><rect x="411.6" y="1859.0" width="15.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="414.6" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (13 samples, 0.91%)</title><rect x="416.6" y="1843.0" width="10.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="419.6" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="416.6" y="1827.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="419.6" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (12 samples, 0.84%)</title><rect x="417.4" y="1827.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="425.7" y="1811.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="428.7" y="1822.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.07%)</title><rect x="426.5" y="1811.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="429.5" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.14%)</title><rect x="427.3" y="1859.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="430.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.49%)</title><rect x="429.0" y="1907.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="432.0" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.49%)</title><rect x="429.0" y="1891.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="432.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.49%)</title><rect x="429.0" y="1875.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (149 samples, 10.46%)</title><rect x="434.8" y="1907.0" width="123.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="437.8" y="1918.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (149 samples, 10.46%)</title><rect x="434.8" y="1891.0" width="123.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="437.8" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.42%)</title><rect x="440.6" y="1875.0" width="5.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="443.6" y="1886.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="441.4" y="1859.0" width="4.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="444.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (45 samples, 3.16%)</title><rect x="445.6" y="1875.0" width="37.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="448.6" y="1886.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (17 samples, 1.19%)</title><rect x="459.6" y="1859.0" width="14.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="462.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (15 samples, 1.05%)</title><rect x="461.3" y="1843.0" width="12.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="464.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.21%)</title><rect x="464.6" y="1827.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="467.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.21%)</title><rect x="464.6" y="1811.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="467.6" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.21%)</title><rect x="464.6" y="1795.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="467.6" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.14%)</title><rect x="464.6" y="1779.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="467.6" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="464.6" y="1763.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="467.6" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="464.6" y="1747.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="467.6" y="1758.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="465.4" y="1763.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="468.4" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="465.4" y="1747.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="468.4" y="1758.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="465.4" y="1731.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="468.4" y="1742.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.07%)</title><rect x="466.3" y="1779.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="469.3" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.35%)</title><rect x="467.1" y="1827.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="470.1" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="471.2" y="1827.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="474.2" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="472.1" y="1827.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="475.1" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="472.9" y="1827.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="475.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.07%)</title><rect x="473.7" y="1859.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="476.7" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="473.7" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="476.7" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="473.7" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="476.7" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="473.7" y="1811.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="476.7" y="1822.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="473.7" y="1795.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="476.7" y="1806.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.14%)</title><rect x="474.5" y="1859.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="477.5" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.56%)</title><rect x="476.2" y="1859.0" width="6.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="479.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="482.8" y="1875.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="485.8" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.56%)</title><rect x="483.7" y="1875.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="486.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.56%)</title><rect x="483.7" y="1859.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="486.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.56%)</title><rect x="483.7" y="1843.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="486.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="490.3" y="1875.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="493.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="490.3" y="1859.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="493.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.07%)</title><rect x="490.3" y="1843.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="493.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.07%)</title><rect x="490.3" y="1827.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.3" y="1838.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="490.3" y="1811.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="493.3" y="1822.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (81 samples, 5.68%)</title><rect x="491.1" y="1875.0" width="67.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="494.1" y="1886.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (79 samples, 5.54%)</title><rect x="492.8" y="1859.0" width="65.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="495.8" y="1870.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (32 samples, 2.25%)</title><rect x="492.8" y="1843.0" width="26.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="495.8" y="1854.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (32 samples, 2.25%)</title><rect x="492.8" y="1827.0" width="26.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="495.8" y="1838.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (16 samples, 1.12%)</title><rect x="506.0" y="1811.0" width="13.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="509.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (16 samples, 1.12%)</title><rect x="506.0" y="1795.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="509.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (16 samples, 1.12%)</title><rect x="506.0" y="1779.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="509.0" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.21%)</title><rect x="519.3" y="1843.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="522.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.21%)</title><rect x="519.3" y="1827.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.21%)</title><rect x="519.3" y="1811.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="522.3" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.14%)</title><rect x="520.1" y="1795.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="523.1" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (44 samples, 3.09%)</title><rect x="521.7" y="1843.0" width="36.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="524.7" y="1854.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (38 samples, 2.67%)</title><rect x="526.7" y="1827.0" width="31.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="529.7" y="1838.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="527.5" y="1811.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="530.5" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.35%)</title><rect x="528.4" y="1811.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="531.4" y="1822.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.35%)</title><rect x="528.4" y="1795.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="531.4" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (31 samples, 2.18%)</title><rect x="532.5" y="1811.0" width="25.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="535.5" y="1822.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.21%)</title><rect x="549.1" y="1795.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="552.1" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.42%)</title><rect x="551.6" y="1795.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="554.6" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="555.7" y="1779.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="558.7" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="555.7" y="1763.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="558.7" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="555.7" y="1747.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="558.7" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="555.7" y="1731.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="558.7" y="1742.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="555.7" y="1715.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="558.7" y="1726.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.14%)</title><rect x="556.5" y="1795.0" width="1.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="559.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (50 samples, 3.51%)</title><rect x="558.2" y="1907.0" width="41.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="561.2" y="1918.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (49 samples, 3.44%)</title><rect x="559.0" y="1891.0" width="40.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="562.0" y="1902.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/843490530.process (23 samples, 1.61%)</title><rect x="559.8" y="1875.0" width="19.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="562.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (20 samples, 1.40%)</title><rect x="559.8" y="1859.0" width="16.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="562.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (17 samples, 1.19%)</title><rect x="559.8" y="1843.0" width="14.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="562.8" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.21%)</title><rect x="561.5" y="1827.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="564.5" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.21%)</title><rect x="561.5" y="1811.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="564.5" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.21%)</title><rect x="561.5" y="1795.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="564.5" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.21%)</title><rect x="561.5" y="1779.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="564.5" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="563.2" y="1763.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="566.2" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.35%)</title><rect x="564.0" y="1827.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="567.0" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.14%)</title><rect x="566.5" y="1811.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="569.5" y="1822.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="566.5" y="1795.0" width="1.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="569.5" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.49%)</title><rect x="568.1" y="1827.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="571.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="573.1" y="1811.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="576.1" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="573.1" y="1795.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="576.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.21%)</title><rect x="573.9" y="1843.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="576.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.21%)</title><rect x="573.9" y="1827.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="576.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.21%)</title><rect x="573.9" y="1811.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="576.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.21%)</title><rect x="573.9" y="1795.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="576.9" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.21%)</title><rect x="576.4" y="1859.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="579.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.35%)</title><rect x="578.9" y="1875.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="581.9" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.35%)</title><rect x="578.9" y="1859.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="581.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/558187323.linkToTargetMethod (4 samples, 0.28%)</title><rect x="583.0" y="1875.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="586.0" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (4 samples, 0.28%)</title><rect x="583.0" y="1859.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="586.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1329663268.get$Lambda (4 samples, 0.28%)</title><rect x="583.0" y="1843.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="586.0" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1329663268.&lt;init&gt; (2 samples, 0.14%)</title><rect x="584.7" y="1827.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="587.7" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.07%)</title><rect x="586.3" y="1875.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="589.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.07%)</title><rect x="586.3" y="1859.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="589.3" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.49%)</title><rect x="587.2" y="1875.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.35%)</title><rect x="588.8" y="1859.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="591.8" y="1870.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.35%)</title><rect x="588.8" y="1843.0" width="4.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="591.8" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="593.0" y="1875.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="596.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.49%)</title><rect x="593.8" y="1875.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="596.8" y="1886.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.07%)</title><rect x="597.1" y="1859.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="600.1" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="597.1" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="600.1" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.14%)</title><rect x="597.9" y="1859.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="600.9" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.07%)</title><rect x="598.8" y="1843.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="601.8" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="598.8" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="601.8" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="598.8" y="1811.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="601.8" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.07%)</title><rect x="599.6" y="1907.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="602.6" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="599.6" y="1891.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="602.6" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="599.6" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="602.6" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="599.6" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="602.6" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="599.6" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="602.6" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="599.6" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="602.6" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="599.6" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="602.6" y="1822.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::used() const (1 samples, 0.07%)</title><rect x="599.6" y="1795.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="602.6" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.19%)</title><rect x="600.4" y="1907.0" width="14.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="603.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.19%)</title><rect x="600.4" y="1891.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="603.4" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.21%)</title><rect x="602.9" y="1875.0" width="2.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="605.9" y="1886.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="602.9" y="1859.0" width="2.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="605.9" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.77%)</title><rect x="605.4" y="1875.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="608.4" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/1890257531.accept (10 samples, 0.70%)</title><rect x="605.4" y="1859.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="608.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (10 samples, 0.70%)</title><rect x="605.4" y="1843.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="608.4" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (10 samples, 0.70%)</title><rect x="605.4" y="1827.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="608.4" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (10 samples, 0.70%)</title><rect x="605.4" y="1811.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="608.4" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (10 samples, 0.70%)</title><rect x="605.4" y="1795.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="608.4" y="1806.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.28%)</title><rect x="610.4" y="1779.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="613.4" y="1790.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="610.4" y="1763.0" width="3.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="613.4" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1686951202.accept (1 samples, 0.07%)</title><rect x="613.7" y="1859.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="616.7" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="613.7" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="616.7" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="613.7" y="1827.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="616.7" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="613.7" y="1811.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="616.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.19%)</title><rect x="614.5" y="1923.0" width="14.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="617.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.19%)</title><rect x="614.5" y="1907.0" width="14.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="617.5" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="616.1" y="1891.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="619.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 0.98%)</title><rect x="617.0" y="1891.0" width="11.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="620.0" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/1890257531.accept (14 samples, 0.98%)</title><rect x="617.0" y="1875.0" width="11.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="620.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (14 samples, 0.98%)</title><rect x="617.0" y="1859.0" width="11.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="620.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (14 samples, 0.98%)</title><rect x="617.0" y="1843.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="620.0" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (14 samples, 0.98%)</title><rect x="617.0" y="1827.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="620.0" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (14 samples, 0.98%)</title><rect x="617.0" y="1811.0" width="11.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="620.0" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.35%)</title><rect x="628.6" y="1923.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="631.6" y="1934.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="628.6" y="1907.0" width="4.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="631.6" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 0.49%)</title><rect x="632.7" y="1939.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="635.7" y="1950.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="633.5" y="1923.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="636.5" y="1934.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.35%)</title><rect x="634.4" y="1923.0" width="4.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="637.4" y="1934.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="634.4" y="1907.0" width="4.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="637.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (220 samples, 15.44%)</title><rect x="638.5" y="1987.0" width="182.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="641.5" y="1998.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (218 samples, 15.30%)</title><rect x="640.2" y="1971.0" width="180.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="643.2" y="1982.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (179 samples, 12.56%)</title><rect x="657.6" y="1955.0" width="148.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="660.6" y="1966.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (14 samples, 0.98%)</title><rect x="667.5" y="1939.0" width="11.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="670.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.98%)</title><rect x="667.5" y="1923.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="670.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.98%)</title><rect x="667.5" y="1907.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="670.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.98%)</title><rect x="667.5" y="1891.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="670.5" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (152 samples, 10.67%)</title><rect x="679.1" y="1939.0" width="125.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="682.1" y="1950.0">java/util/concu..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (152 samples, 10.67%)</title><rect x="679.1" y="1923.0" width="125.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="682.1" y="1934.0">sun/misc/Unsafe..</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="683.2" y="1907.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="686.2" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.14%)</title><rect x="684.0" y="1907.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="687.0" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (139 samples, 9.75%)</title><rect x="685.7" y="1907.0" width="115.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="688.7" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="689.8" y="1891.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="692.8" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.14%)</title><rect x="690.7" y="1891.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="693.7" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (26 samples, 1.82%)</title><rect x="692.3" y="1891.0" width="21.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="695.3" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (12 samples, 0.84%)</title><rect x="701.4" y="1875.0" width="10.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="704.4" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.28%)</title><rect x="704.8" y="1859.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="707.8" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="707.2" y="1843.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="710.2" y="1854.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.28%)</title><rect x="708.1" y="1859.0" width="3.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="711.1" y="1870.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.21%)</title><rect x="711.4" y="1875.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="714.4" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="713.9" y="1891.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="716.9" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (5 samples, 0.35%)</title><rect x="714.7" y="1891.0" width="4.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="717.7" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (33 samples, 2.32%)</title><rect x="718.8" y="1891.0" width="27.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="721.8" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (42 samples, 2.95%)</title><rect x="746.2" y="1891.0" width="34.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="749.2" y="1902.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.49%)</title><rect x="780.9" y="1891.0" width="5.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="783.9" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.14%)</title><rect x="786.7" y="1891.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="789.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.21%)</title><rect x="788.4" y="1891.0" width="2.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="791.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="790.9" y="1891.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="793.9" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.21%)</title><rect x="791.7" y="1891.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="794.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="794.2" y="1891.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="797.2" y="1902.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="795.0" y="1891.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="798.0" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="795.8" y="1891.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="798.8" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.21%)</title><rect x="796.7" y="1891.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="799.7" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="799.2" y="1891.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="802.2" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="800.0" y="1891.0" width="0.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="803.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="800.8" y="1907.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="803.8" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="801.6" y="1907.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="804.6" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.21%)</title><rect x="802.5" y="1907.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="805.5" y="1918.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.07%)</title><rect x="804.9" y="1939.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="807.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.07%)</title><rect x="805.8" y="1955.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="808.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.07%)</title><rect x="805.8" y="1939.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="808.8" y="1950.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="805.8" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="808.8" y="1934.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="805.8" y="1907.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="808.8" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="805.8" y="1891.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="808.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 1.19%)</title><rect x="806.6" y="1955.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="809.6" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.19%)</title><rect x="806.6" y="1939.0" width="14.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="809.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.19%)</title><rect x="806.6" y="1923.0" width="14.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="809.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.19%)</title><rect x="806.6" y="1907.0" width="14.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="809.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="820.7" y="2035.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="823.7" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.pollTimeoutExpired (1 samples, 0.07%)</title><rect x="820.7" y="2019.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="823.7" y="2030.0"></text>
</g>
<g>
<title>start_thread (445 samples, 31.23%)</title><rect x="821.5" y="2035.0" width="368.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="824.5" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (445 samples, 31.23%)</title><rect x="821.5" y="2019.0" width="368.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="824.5" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.40%)</title><rect x="821.5" y="2003.0" width="16.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="824.5" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.49%)</title><rect x="821.5" y="1987.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="824.5" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.49%)</title><rect x="821.5" y="1971.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="824.5" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.28%)</title><rect x="821.5" y="1955.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="824.5" y="1966.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.21%)</title><rect x="824.8" y="1955.0" width="2.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="827.8" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 0.91%)</title><rect x="827.3" y="1987.0" width="10.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="830.3" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.35%)</title><rect x="827.3" y="1971.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="830.3" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="827.3" y="1955.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="830.3" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="827.3" y="1939.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="830.3" y="1950.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="828.1" y="1955.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="831.1" y="1966.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.21%)</title><rect x="829.0" y="1955.0" width="2.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="832.0" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.21%)</title><rect x="831.4" y="1971.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="834.4" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="831.4" y="1955.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="834.4" y="1966.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="831.4" y="1939.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="834.4" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="831.4" y="1923.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="834.4" y="1934.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.07%)</title><rect x="831.4" y="1907.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="834.4" y="1918.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.07%)</title><rect x="831.4" y="1891.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="834.4" y="1902.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.14%)</title><rect x="832.3" y="1955.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="835.3" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.14%)</title><rect x="832.3" y="1939.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="835.3" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.35%)</title><rect x="833.9" y="1971.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="836.9" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.35%)</title><rect x="833.9" y="1955.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="836.9" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.35%)</title><rect x="833.9" y="1939.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="836.9" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.35%)</title><rect x="833.9" y="1923.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="836.9" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.35%)</title><rect x="833.9" y="1907.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="836.9" y="1918.0"></text>
</g>
<g>
<title>FilterOutOfRegionClosure::FilterOutOfRegionClosure(HeapRegion*, OopClosure*) (1 samples, 0.07%)</title><rect x="833.9" y="1891.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="836.9" y="1902.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.28%)</title><rect x="834.8" y="1891.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="837.8" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.28%)</title><rect x="834.8" y="1875.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="837.8" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="835.6" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="838.6" y="1870.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="836.4" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="839.4" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="836.4" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="839.4" y="1854.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.07%)</title><rect x="836.4" y="1827.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="839.4" y="1838.0"></text>
</g>
<g>
<title>MemRegion::intersection(MemRegion) const (1 samples, 0.07%)</title><rect x="837.2" y="1859.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="840.2" y="1870.0"></text>
</g>
<g>
<title>JavaThread::run() (423 samples, 29.68%)</title><rect x="838.1" y="2003.0" width="350.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="841.1" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (423 samples, 29.68%)</title><rect x="838.1" y="1987.0" width="350.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="841.1" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (423 samples, 29.68%)</title><rect x="838.1" y="1971.0" width="350.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="841.1" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (423 samples, 29.68%)</title><rect x="838.1" y="1955.0" width="350.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="841.1" y="1966.0">CompileBroker::invoke_compiler_on_method(Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (421 samples, 29.54%)</title><rect x="838.1" y="1939.0" width="348.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="841.1" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, i..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (421 samples, 29.54%)</title><rect x="838.1" y="1923.0" width="348.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="841.1" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*..</text>
</g>
<g>
<title>Compile::Code_Gen() (163 samples, 11.44%)</title><rect x="838.1" y="1907.0" width="134.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="841.1" y="1918.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.35%)</title><rect x="838.1" y="1891.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="841.1" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.21%)</title><rect x="838.1" y="1875.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="841.1" y="1886.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.07%)</title><rect x="839.7" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="842.7" y="1870.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.07%)</title><rect x="839.7" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="842.7" y="1854.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.14%)</title><rect x="840.6" y="1875.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="843.6" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="840.6" y="1859.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="843.6" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.07%)</title><rect x="840.6" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="843.6" y="1854.0"></text>
</g>
<g>
<title>jmpConNode::rule() const (1 samples, 0.07%)</title><rect x="841.4" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="844.4" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (9 samples, 0.63%)</title><rect x="842.2" y="1891.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="845.2" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.28%)</title><rect x="843.0" y="1875.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="846.0" y="1886.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="843.0" y="1859.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="846.0" y="1870.0"></text>
</g>
<g>
<title>new_loc_value(PhaseRegAlloc*, int, Location::Type) (1 samples, 0.07%)</title><rect x="843.0" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="846.0" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_safepoint(int, OopMap*) (1 samples, 0.07%)</title><rect x="843.9" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="846.9" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="844.7" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="847.7" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="844.7" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="847.7" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="845.5" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="848.5" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="845.5" y="1843.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="848.5" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.21%)</title><rect x="846.4" y="1875.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="849.4" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.14%)</title><rect x="846.4" y="1859.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="849.4" y="1870.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.07%)</title><rect x="848.0" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="851.0" y="1870.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.07%)</title><rect x="848.8" y="1875.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="851.8" y="1886.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.07%)</title><rect x="849.7" y="1891.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="852.7" y="1902.0"></text>
</g>
<g>
<title>Matcher::match() (18 samples, 1.26%)</title><rect x="850.5" y="1891.0" width="14.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="853.5" y="1902.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.07%)</title><rect x="850.5" y="1875.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="853.5" y="1886.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.07%)</title><rect x="851.3" y="1875.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="854.3" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (16 samples, 1.12%)</title><rect x="852.1" y="1875.0" width="13.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="855.1" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (11 samples, 0.77%)</title><rect x="852.1" y="1859.0" width="9.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="855.1" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.07%)</title><rect x="861.3" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="864.3" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.28%)</title><rect x="862.1" y="1859.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="865.1" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="862.1" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="865.1" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="862.1" y="1827.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="865.1" y="1838.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="862.1" y="1811.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="865.1" y="1822.0"></text>
</g>
<g>
<title>State::_sub_Op_LoadNKlass(Node const*) (1 samples, 0.07%)</title><rect x="862.1" y="1795.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="865.1" y="1806.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.21%)</title><rect x="862.9" y="1843.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="865.9" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.14%)</title><rect x="862.9" y="1827.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="865.9" y="1838.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.14%)</title><rect x="862.9" y="1811.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="865.9" y="1822.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.07%)</title><rect x="862.9" y="1795.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="865.9" y="1806.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.07%)</title><rect x="862.9" y="1779.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="865.9" y="1790.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.07%)</title><rect x="863.7" y="1795.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="866.7" y="1806.0"></text>
</g>
<g>
<title>MachNode::MachNode() (1 samples, 0.07%)</title><rect x="863.7" y="1779.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="866.7" y="1790.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="863.7" y="1763.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="866.7" y="1774.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="864.6" y="1827.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="867.6" y="1838.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="864.6" y="1811.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="867.6" y="1822.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="864.6" y="1795.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="867.6" y="1806.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="864.6" y="1779.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="867.6" y="1790.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.56%)</title><rect x="865.4" y="1891.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="868.4" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (8 samples, 0.56%)</title><rect x="865.4" y="1875.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="868.4" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="865.4" y="1859.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.4" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (5 samples, 0.35%)</title><rect x="867.1" y="1859.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="870.1" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (4 samples, 0.28%)</title><rect x="867.1" y="1843.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="870.1" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="870.4" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="873.4" y="1854.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.07%)</title><rect x="870.4" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="873.4" y="1838.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.07%)</title><rect x="870.4" y="1811.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="873.4" y="1822.0"></text>
</g>
<g>
<title>MachNode::memory_inputs(Node*&amp;, Node*&amp;) const (1 samples, 0.07%)</title><rect x="870.4" y="1795.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="873.4" y="1806.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="871.2" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="874.2" y="1870.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="871.2" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="874.2" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.07%)</title><rect x="872.0" y="1891.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="875.0" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (119 samples, 8.35%)</title><rect x="872.8" y="1891.0" width="98.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="875.8" y="1902.0">PhaseChaitin..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="873.7" y="1875.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="876.7" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.14%)</title><rect x="874.5" y="1875.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="877.5" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.14%)</title><rect x="876.2" y="1875.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="879.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.28%)</title><rect x="877.8" y="1875.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="880.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.07%)</title><rect x="879.5" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="882.5" y="1870.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.07%)</title><rect x="879.5" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="882.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.07%)</title><rect x="880.3" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="883.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="880.3" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="883.3" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (6 samples, 0.42%)</title><rect x="881.1" y="1875.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="884.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="882.0" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="885.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="882.8" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="885.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.21%)</title><rect x="883.6" y="1859.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="886.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="885.3" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="888.3" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (18 samples, 1.26%)</title><rect x="886.1" y="1875.0" width="14.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="889.1" y="1886.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="895.2" y="1859.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="898.2" y="1870.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="896.0" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="899.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (2 samples, 0.14%)</title><rect x="896.9" y="1859.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="899.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (2 samples, 0.14%)</title><rect x="896.9" y="1843.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="899.9" y="1854.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (2 samples, 0.14%)</title><rect x="896.9" y="1827.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="899.9" y="1838.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="898.5" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="901.5" y="1870.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.07%)</title><rect x="899.3" y="1859.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="902.3" y="1870.0"></text>
</g>
<g>
<title>tlsLoadPNode::rule() const (1 samples, 0.07%)</title><rect x="900.2" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="903.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (22 samples, 1.54%)</title><rect x="901.0" y="1875.0" width="18.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="904.0" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.07%)</title><rect x="906.8" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="909.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="907.6" y="1859.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="910.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (11 samples, 0.77%)</title><rect x="908.5" y="1859.0" width="9.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="911.5" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="911.8" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="914.8" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="912.6" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="915.6" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.35%)</title><rect x="913.4" y="1843.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="916.4" y="1854.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.14%)</title><rect x="917.6" y="1859.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="920.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="919.2" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="922.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (12 samples, 0.84%)</title><rect x="920.0" y="1875.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="923.0" y="1886.0"></text>
</g>
<g>
<title>MachNode::operand_index(unsigned int) const (1 samples, 0.07%)</title><rect x="927.5" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="930.5" y="1870.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="928.3" y="1859.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="931.3" y="1870.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.07%)</title><rect x="929.2" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="932.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (3 samples, 0.21%)</title><rect x="930.0" y="1875.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="933.0" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.07%)</title><rect x="931.6" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (11 samples, 0.77%)</title><rect x="932.5" y="1875.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="935.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.28%)</title><rect x="936.6" y="1859.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="939.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.07%)</title><rect x="939.1" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="942.1" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.07%)</title><rect x="939.1" y="1827.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.1" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.07%)</title><rect x="939.9" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.9" y="1870.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.07%)</title><rect x="940.8" y="1859.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="943.8" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (22 samples, 1.54%)</title><rect x="941.6" y="1875.0" width="18.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="944.6" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (3 samples, 0.21%)</title><rect x="941.6" y="1859.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="944.6" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.07%)</title><rect x="943.2" y="1843.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="946.2" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (19 samples, 1.33%)</title><rect x="944.1" y="1859.0" width="15.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="947.1" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (19 samples, 1.33%)</title><rect x="944.1" y="1843.0" width="15.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="947.1" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.14%)</title><rect x="944.1" y="1827.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="947.1" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (14 samples, 0.98%)</title><rect x="945.7" y="1827.0" width="11.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.7" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="955.7" y="1811.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="958.7" y="1822.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="956.5" y="1811.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="959.5" y="1822.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.14%)</title><rect x="957.3" y="1827.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.07%)</title><rect x="959.0" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="962.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.07%)</title><rect x="959.8" y="1875.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="962.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="959.8" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="962.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.14%)</title><rect x="960.6" y="1875.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="963.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="960.6" y="1859.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="963.6" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (11 samples, 0.77%)</title><rect x="962.3" y="1875.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="965.3" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="965.6" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="968.6" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (6 samples, 0.42%)</title><rect x="966.4" y="1859.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="969.4" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.14%)</title><rect x="968.1" y="1843.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="971.1" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="969.7" y="1843.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="972.7" y="1854.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.07%)</title><rect x="970.6" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="973.6" y="1854.0"></text>
</g>
<g>
<title>string_equalsNode::out_RegMask() const (1 samples, 0.07%)</title><rect x="971.4" y="1891.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.4" y="1902.0"></text>
</g>
<g>
<title>tlsLoadPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="972.2" y="1891.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="975.2" y="1902.0"></text>
</g>
<g>
<title>Compile::Optimize() (239 samples, 16.77%)</title><rect x="973.0" y="1907.0" width="198.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="976.0" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="973.0" y="1891.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="976.0" y="1902.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="973.0" y="1875.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="976.0" y="1886.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="973.0" y="1859.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="976.0" y="1870.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="973.0" y="1843.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="976.0" y="1854.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="973.9" y="1891.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.9" y="1902.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.07%)</title><rect x="973.9" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="976.9" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (7 samples, 0.49%)</title><rect x="974.7" y="1891.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="977.7" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (7 samples, 0.49%)</title><rect x="974.7" y="1875.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="977.7" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="974.7" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="977.7" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.07%)</title><rect x="974.7" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="977.7" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.07%)</title><rect x="974.7" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="977.7" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="974.7" y="1811.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="977.7" y="1822.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="974.7" y="1795.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="977.7" y="1806.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="974.7" y="1779.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="977.7" y="1790.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="974.7" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="977.7" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (5 samples, 0.35%)</title><rect x="975.5" y="1859.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="978.5" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.35%)</title><rect x="975.5" y="1843.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.5" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="975.5" y="1827.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="978.5" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="975.5" y="1811.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="978.5" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="975.5" y="1795.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="978.5" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="975.5" y="1779.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.5" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="975.5" y="1763.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="978.5" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="975.5" y="1747.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="978.5" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="975.5" y="1731.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.5" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="975.5" y="1715.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="978.5" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="975.5" y="1699.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.5" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="975.5" y="1683.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="978.5" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="975.5" y="1667.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="978.5" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="975.5" y="1651.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.5" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="975.5" y="1635.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="978.5" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="975.5" y="1619.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="978.5" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="975.5" y="1603.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="978.5" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1587.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="978.5" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1571.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="978.5" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1555.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="978.5" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1539.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="978.5" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1523.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="978.5" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1507.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="978.5" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1491.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="978.5" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1475.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="978.5" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1459.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="978.5" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1443.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="978.5" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1427.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="978.5" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1411.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="978.5" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1395.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="978.5" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1379.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="978.5" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1363.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="978.5" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1347.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="978.5" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1331.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="978.5" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1315.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="978.5" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1299.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="978.5" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1283.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="978.5" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1267.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="978.5" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1251.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="978.5" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1235.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="978.5" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.5" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1203.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.5" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1187.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="978.5" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1171.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="978.5" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1155.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="978.5" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1139.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="978.5" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.5" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1107.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="978.5" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1091.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="978.5" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1075.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="978.5" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.5" y="1059.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.5" y="1070.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.07%)</title><rect x="975.5" y="1043.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="978.5" y="1054.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="975.5" y="1027.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="978.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1587.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.4" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1571.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.4" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1555.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.4" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1539.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.4" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1523.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.4" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1507.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="979.4" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1491.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="979.4" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1475.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="979.4" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1459.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.4" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1443.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.4" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1427.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="979.4" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1411.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="979.4" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1395.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.4" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1379.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.4" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1363.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="979.4" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1347.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.4" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1331.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="979.4" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1315.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.4" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1299.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="979.4" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1283.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="979.4" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1267.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="979.4" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1251.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.4" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1235.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="979.4" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1219.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="979.4" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1203.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.4" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1187.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.4" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1171.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="979.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1155.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="979.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1139.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1123.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1107.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1091.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1075.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1059.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="979.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1043.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="979.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1027.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1011.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="995.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="979.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="979.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="963.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="979.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="947.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="979.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="931.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="915.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="979.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="899.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="883.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="867.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="979.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="851.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="979.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="835.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="819.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="979.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="803.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="979.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="787.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="771.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="979.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="755.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="739.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="979.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="723.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="979.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="707.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="691.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="979.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="675.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="979.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="659.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="979.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="643.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="979.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="627.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="611.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="595.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="579.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="979.4" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="563.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="979.4" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="547.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.4" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="531.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.4" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="515.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.4" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="499.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="979.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="483.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="979.4" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="467.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.4" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="451.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="979.4" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="435.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="979.4" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="419.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.4" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="403.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.4" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="387.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="979.4" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="371.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="979.4" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="355.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.4" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="339.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.4" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="323.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.4" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="307.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="979.4" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="291.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="979.4" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="275.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.4" y="286.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="976.4" y="259.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.4" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="977.2" y="1827.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.2" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="977.2" y="1811.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.2" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="977.2" y="1795.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="980.2" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="977.2" y="1779.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="980.2" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="977.2" y="1763.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="980.2" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="977.2" y="1747.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="980.2" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1731.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="980.2" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1715.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.2" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.2" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="980.2" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1667.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="980.2" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1651.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1635.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.2" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1619.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.2" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1603.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="980.2" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1587.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="980.2" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1571.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="980.2" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1555.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="980.2" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1539.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="980.2" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1523.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.2" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1507.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.2" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1491.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.2" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1475.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.2" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1459.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="980.2" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1443.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.2" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1427.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.2" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1411.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="980.2" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1395.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="980.2" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1379.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="980.2" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1363.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.2" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1347.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="980.2" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1331.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.2" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1315.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="980.2" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1299.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="980.2" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1283.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="980.2" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1267.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.2" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="978.0" y="1731.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.14%)</title><rect x="978.0" y="1715.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.0" y="1726.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="978.0" y="1699.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="981.0" y="1710.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.07%)</title><rect x="978.8" y="1699.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.8" y="1710.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_java_lang_Object() const (1 samples, 0.07%)</title><rect x="979.7" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="982.7" y="1870.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.14%)</title><rect x="980.5" y="1891.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="983.5" y="1902.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="981.3" y="1875.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="984.3" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.14%)</title><rect x="982.2" y="1891.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.2" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.14%)</title><rect x="982.2" y="1875.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.2" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (2 samples, 0.14%)</title><rect x="982.2" y="1859.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="985.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="983.0" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="986.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (199 samples, 13.96%)</title><rect x="983.8" y="1891.0" width="164.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="986.8" y="1902.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.14%)</title><rect x="983.8" y="1875.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.8" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.8" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="986.8" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.8" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="986.8" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.8" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="986.8" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.8" y="1811.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="986.8" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.8" y="1795.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="986.8" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.8" y="1779.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="986.8" y="1790.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.8" y="1763.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="986.8" y="1774.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.8" y="1747.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.8" y="1758.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.8" y="1731.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.8" y="1742.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.8" y="1715.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="986.8" y="1726.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.8" y="1699.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="986.8" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.8" y="1683.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="986.8" y="1694.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.07%)</title><rect x="983.8" y="1667.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="986.8" y="1678.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="984.6" y="1859.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="987.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="984.6" y="1843.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="987.6" y="1854.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="984.6" y="1827.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="987.6" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="985.5" y="1875.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="988.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.07%)</title><rect x="985.5" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.35%)</title><rect x="986.3" y="1875.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="989.3" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.07%)</title><rect x="988.8" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="991.8" y="1870.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="989.6" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 0.63%)</title><rect x="990.4" y="1875.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="993.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.14%)</title><rect x="996.2" y="1859.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="999.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.14%)</title><rect x="996.2" y="1843.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="999.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (170 samples, 11.93%)</title><rect x="997.9" y="1875.0" width="140.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1000.9" y="1886.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (162 samples, 11.37%)</title><rect x="1004.5" y="1859.0" width="134.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1007.5" y="1870.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.28%)</title><rect x="1007.8" y="1843.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1010.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1011.1" y="1843.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1014.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (152 samples, 10.67%)</title><rect x="1012.0" y="1843.0" width="125.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1015.0" y="1854.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.07%)</title><rect x="1111.3" y="1827.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (29 samples, 2.04%)</title><rect x="1112.2" y="1827.0" width="24.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.2" y="1838.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.14%)</title><rect x="1136.2" y="1827.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.14%)</title><rect x="1136.2" y="1811.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.2" y="1822.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1137.8" y="1843.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1140.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.21%)</title><rect x="1138.7" y="1875.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.14%)</title><rect x="1139.5" y="1859.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.21%)</title><rect x="1141.1" y="1875.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.14%)</title><rect x="1142.0" y="1859.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.07%)</title><rect x="1142.0" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.07%)</title><rect x="1142.8" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1142.8" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.42%)</title><rect x="1143.6" y="1875.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.42%)</title><rect x="1143.6" y="1859.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.6" y="1870.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1144.5" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.5" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1144.5" y="1827.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.5" y="1838.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1145.3" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.3" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.21%)</title><rect x="1146.1" y="1843.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.1" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.14%)</title><rect x="1146.9" y="1827.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (22 samples, 1.54%)</title><rect x="1148.6" y="1891.0" width="18.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.6" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (21 samples, 1.47%)</title><rect x="1148.6" y="1875.0" width="17.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.6" y="1886.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1148.6" y="1859.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.6" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1149.4" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.4" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1150.3" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.3" y="1870.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1150.3" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.3" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1151.1" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.1" y="1870.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1151.1" y="1843.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.1" y="1854.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1151.1" y="1827.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.1" y="1838.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="1151.1" y="1811.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.1" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1151.1" y="1795.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.1" y="1806.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1151.1" y="1779.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.1" y="1790.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="1151.1" y="1763.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.1" y="1774.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1151.9" y="1859.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.9" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1151.9" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.9" y="1854.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1152.7" y="1859.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.7" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1153.6" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.6" y="1870.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1153.6" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.6" y="1854.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1153.6" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (5 samples, 0.35%)</title><rect x="1154.4" y="1859.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.14%)</title><rect x="1156.9" y="1843.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.9" y="1854.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (2 samples, 0.14%)</title><rect x="1156.9" y="1827.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.9" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (4 samples, 0.28%)</title><rect x="1158.5" y="1859.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.5" y="1870.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.07%)</title><rect x="1159.4" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.4" y="1854.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (1 samples, 0.07%)</title><rect x="1159.4" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.4" y="1838.0"></text>
</g>
<g>
<title>Compile::start() const (1 samples, 0.07%)</title><rect x="1159.4" y="1811.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.4" y="1822.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.14%)</title><rect x="1160.2" y="1843.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.2" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1161.8" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.8" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.21%)</title><rect x="1162.7" y="1859.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.14%)</title><rect x="1162.7" y="1843.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1163.5" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.5" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1163.5" y="1811.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.5" y="1822.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1164.3" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.3" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1165.2" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.2" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1165.2" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.2" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.2" y="1827.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.2" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1165.2" y="1811.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.2" y="1822.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1165.2" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.2" y="1806.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1165.2" y="1779.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.2" y="1790.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.07%)</title><rect x="1166.0" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.0" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.14%)</title><rect x="1166.8" y="1891.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.8" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.14%)</title><rect x="1166.8" y="1875.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.8" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.07%)</title><rect x="1166.8" y="1859.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1166.8" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.8" y="1854.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1166.8" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.8" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1167.6" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.6" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.07%)</title><rect x="1167.6" y="1843.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.6" y="1854.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1167.6" y="1827.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1170.6" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.14%)</title><rect x="1168.5" y="1891.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.5" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1168.5" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1168.5" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.5" y="1870.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1168.5" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.5" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_lock_node(LockNode*) (1 samples, 0.07%)</title><rect x="1169.3" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.3" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::opt_bits_test(Node*, Node*, int, Node*, int, int, bool) (1 samples, 0.07%)</title><rect x="1169.3" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.3" y="1870.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.07%)</title><rect x="1169.3" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.3" y="1854.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1170.1" y="1891.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1173.1" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 1.05%)</title><rect x="1171.0" y="1907.0" width="12.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.0" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 1.05%)</title><rect x="1171.0" y="1891.0" width="12.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.0" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 1.05%)</title><rect x="1171.0" y="1875.0" width="12.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.0" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 1.05%)</title><rect x="1171.0" y="1859.0" width="12.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.0" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (15 samples, 1.05%)</title><rect x="1171.0" y="1843.0" width="12.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.0" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.91%)</title><rect x="1171.0" y="1827.0" width="10.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.0" y="1838.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.07%)</title><rect x="1171.0" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.0" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::with_inline_depth(int) const (1 samples, 0.07%)</title><rect x="1171.0" y="1795.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.0" y="1806.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1171.0" y="1779.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.0" y="1790.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1171.0" y="1763.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.0" y="1774.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.63%)</title><rect x="1171.8" y="1811.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.8" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.63%)</title><rect x="1171.8" y="1795.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.8" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.63%)</title><rect x="1171.8" y="1779.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.8" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.63%)</title><rect x="1171.8" y="1763.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.63%)</title><rect x="1171.8" y="1747.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.63%)</title><rect x="1171.8" y="1731.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.8" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.49%)</title><rect x="1171.8" y="1715.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.49%)</title><rect x="1171.8" y="1699.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.8" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.49%)</title><rect x="1171.8" y="1683.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.49%)</title><rect x="1171.8" y="1667.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.8" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.49%)</title><rect x="1171.8" y="1651.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.8" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.49%)</title><rect x="1171.8" y="1635.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.8" y="1646.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.14%)</title><rect x="1171.8" y="1619.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.8" y="1630.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.14%)</title><rect x="1171.8" y="1603.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.8" y="1614.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.14%)</title><rect x="1171.8" y="1587.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.8" y="1598.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.14%)</title><rect x="1171.8" y="1571.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="1582.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.14%)</title><rect x="1171.8" y="1555.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.8" y="1566.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1171.8" y="1539.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.8" y="1550.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1171.8" y="1523.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.8" y="1534.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1171.8" y="1507.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.8" y="1518.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1171.8" y="1491.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.8" y="1502.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1171.8" y="1475.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="1486.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1171.8" y="1459.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.8" y="1470.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1171.8" y="1443.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.8" y="1454.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1171.8" y="1427.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.8" y="1438.0"></text>
</g>
<g>
<title>LinkResolver::check_klass_accessability(KlassHandle, KlassHandle, Thread*) (1 samples, 0.07%)</title><rect x="1171.8" y="1411.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="1422.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass*, Klass*, bool) (1 samples, 0.07%)</title><rect x="1171.8" y="1395.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.8" y="1406.0"></text>
</g>
<g>
<title>ciTypeFlow::get_start_state() (1 samples, 0.07%)</title><rect x="1172.6" y="1539.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.6" y="1550.0"></text>
</g>
<g>
<title>ciSignature::type_at(int) const (1 samples, 0.07%)</title><rect x="1172.6" y="1523.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.35%)</title><rect x="1173.4" y="1619.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.4" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.35%)</title><rect x="1173.4" y="1603.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.4" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.35%)</title><rect x="1173.4" y="1587.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.4" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.35%)</title><rect x="1173.4" y="1571.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.4" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.35%)</title><rect x="1173.4" y="1555.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.4" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.35%)</title><rect x="1173.4" y="1539.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.4" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.35%)</title><rect x="1173.4" y="1523.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.4" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.35%)</title><rect x="1173.4" y="1507.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.4" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1173.4" y="1491.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1173.4" y="1475.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1173.4" y="1459.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1173.4" y="1443.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.4" y="1454.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1173.4" y="1427.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.4" y="1438.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1173.4" y="1411.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.4" y="1422.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1173.4" y="1395.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.4" y="1406.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1173.4" y="1379.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.4" y="1390.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1173.4" y="1363.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.4" y="1374.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.4" y="1347.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.4" y="1358.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.4" y="1331.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.4" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1173.4" y="1315.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.4" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.3" y="1427.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.3" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.3" y="1411.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.3" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.3" y="1395.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.3" y="1379.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.3" y="1363.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.3" y="1347.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.3" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.3" y="1331.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.3" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.3" y="1315.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.3" y="1299.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.3" y="1283.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.3" y="1267.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.3" y="1251.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.3" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.3" y="1235.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.3" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.3" y="1219.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.3" y="1203.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.3" y="1187.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.3" y="1171.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.3" y="1155.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.3" y="1166.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.3" y="1139.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.3" y="1150.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.07%)</title><rect x="1174.3" y="1123.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.3" y="1134.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1174.3" y="1107.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.3" y="1118.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1174.3" y="1091.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.3" y="1102.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1174.3" y="1075.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.3" y="1086.0"></text>
</g>
<g>
<title>IdealKit::make_leaf_call(TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1174.3" y="1059.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.3" y="1070.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1174.3" y="1043.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.3" y="1054.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1174.3" y="1027.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.3" y="1038.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (2 samples, 0.14%)</title><rect x="1175.1" y="1475.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.1" y="1486.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.07%)</title><rect x="1175.1" y="1459.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.1" y="1470.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.07%)</title><rect x="1175.1" y="1443.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.1" y="1454.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.07%)</title><rect x="1175.9" y="1459.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.9" y="1470.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1175.9" y="1443.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.9" y="1454.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.07%)</title><rect x="1176.8" y="1491.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.8" y="1502.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.6" y="1715.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.6" y="1699.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.6" y="1683.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.6" y="1667.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.6" y="1651.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.6" y="1635.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.6" y="1619.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.6" y="1603.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.6" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.6" y="1587.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.6" y="1571.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.6" y="1555.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.6" y="1539.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.6" y="1523.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.6" y="1507.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.6" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.6" y="1491.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.6" y="1475.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.6" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.6" y="1459.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.6" y="1443.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.6" y="1427.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.6" y="1411.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.6" y="1395.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.6" y="1379.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.6" y="1363.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.6" y="1347.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.6" y="1331.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.6" y="1315.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.6" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.6" y="1299.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.6" y="1283.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.6" y="1267.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.6" y="1251.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.6" y="1235.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.6" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1177.6" y="1219.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.6" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1177.6" y="1203.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.6" y="1187.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.6" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.6" y="1171.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.6" y="1155.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.6" y="1139.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="1150.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1177.6" y="1123.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="1134.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1177.6" y="1107.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="1118.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1177.6" y="1091.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.6" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1177.6" y="1075.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.6" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1177.6" y="1059.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.6" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1177.6" y="1043.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.6" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1177.6" y="1027.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1177.6" y="1011.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.6" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1177.6" y="995.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="1006.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1177.6" y="979.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1177.6" y="963.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1177.6" y="947.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.6" y="958.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1177.6" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.6" y="942.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1177.6" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="926.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1177.6" y="899.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1177.6" y="883.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="894.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1177.6" y="867.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.07%)</title><rect x="1177.6" y="851.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.07%)</title><rect x="1177.6" y="835.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.6" y="846.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="1123.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="1107.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="1091.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="1075.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="1059.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="1043.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="1027.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="1011.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="995.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="979.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="963.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="947.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="931.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="915.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="899.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="883.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="867.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="851.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1178.4" y="835.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1178.4" y="819.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.4" y="830.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1178.4" y="803.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="814.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1178.4" y="787.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.4" y="798.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.07%)</title><rect x="1178.4" y="771.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="782.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.07%)</title><rect x="1178.4" y="755.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="766.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1178.4" y="739.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="750.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1178.4" y="723.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="734.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1178.4" y="707.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.4" y="718.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="1178.4" y="691.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1179.2" y="1811.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.2" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1179.2" y="1795.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.2" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1179.2" y="1779.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.2" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1179.2" y="1763.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.2" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1179.2" y="1747.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.2" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1179.2" y="1731.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.2" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1179.2" y="1715.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.2" y="1699.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.2" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.2" y="1683.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.2" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.2" y="1667.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.2" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.2" y="1651.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.2" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.2" y="1635.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.2" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.2" y="1619.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.2" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.2" y="1603.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.2" y="1587.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.2" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.2" y="1571.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.2" y="1555.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.2" y="1539.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.2" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.2" y="1523.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.2" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.2" y="1507.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.2" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.2" y="1491.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.2" y="1475.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.2" y="1459.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.2" y="1443.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.2" y="1427.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.2" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.2" y="1411.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.2" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.2" y="1395.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.2" y="1379.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.2" y="1363.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.2" y="1347.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.2" y="1331.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.2" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.2" y="1315.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.2" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.2" y="1299.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.2" y="1283.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.2" y="1267.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.2" y="1251.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.2" y="1235.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.2" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.2" y="1219.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.2" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.2" y="1203.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.2" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.2" y="1187.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.2" y="1171.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.2" y="1155.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.2" y="1139.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.2" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.2" y="1123.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.2" y="1107.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.2" y="1091.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.2" y="1075.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.2" y="1059.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1179.2" y="1043.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1179.2" y="1027.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.2" y="1038.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.07%)</title><rect x="1179.2" y="1011.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.2" y="1022.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.07%)</title><rect x="1179.2" y="995.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.2" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1179.2" y="979.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.2" y="990.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1179.2" y="963.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.2" y="974.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1179.2" y="947.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.2" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1179.2" y="931.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.2" y="942.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.07%)</title><rect x="1179.2" y="915.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.2" y="926.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1180.1" y="1075.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.1" y="1086.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.07%)</title><rect x="1180.1" y="1059.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.1" y="1070.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.07%)</title><rect x="1180.1" y="1043.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.1" y="1054.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.9" y="1699.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="1710.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.9" y="1683.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="1694.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.9" y="1667.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="1678.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1180.9" y="1651.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="1662.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.07%)</title><rect x="1180.9" y="1635.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="1646.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1181.7" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="1838.0"></text>
</g>
<g>
<title>IfFalseNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1181.7" y="1811.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="1822.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.07%)</title><rect x="1182.5" y="1827.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="1838.0"></text>
</g>
<g>
<title>PhiNode::slice_memory(TypePtr const*) const (1 samples, 0.07%)</title><rect x="1182.5" y="1811.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.5" y="1822.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="1182.5" y="1795.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="1806.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (4 samples, 0.28%)</title><rect x="1183.4" y="1907.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1183.4" y="1891.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.4" y="1902.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (3 samples, 0.21%)</title><rect x="1184.2" y="1891.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="1902.0"></text>
</g>
<g>
<title>Node::has_special_unique_user() const (1 samples, 0.07%)</title><rect x="1185.9" y="1875.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="1886.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.14%)</title><rect x="1186.7" y="1939.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.14%)</title><rect x="1186.7" y="1923.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.7" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.14%)</title><rect x="1186.7" y="1907.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.07%)</title><rect x="1186.7" y="1891.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="1902.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.07%)</title><rect x="1186.7" y="1875.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.7" y="1886.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.07%)</title><rect x="1186.7" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.7" y="1870.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.07%)</title><rect x="1186.7" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.7" y="1854.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.07%)</title><rect x="1186.7" y="1827.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.7" y="1838.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.07%)</title><rect x="1186.7" y="1811.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.7" y="1822.0"></text>
</g>
<g>
<title>LinearScanWalker::insert_move(int, Interval*, Interval*) (1 samples, 0.07%)</title><rect x="1186.7" y="1795.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.7" y="1806.0"></text>
</g>
<g>
<title>LIR_List::append(LIR_InsertionBuffer*) (1 samples, 0.07%)</title><rect x="1186.7" y="1779.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.7" y="1790.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.07%)</title><rect x="1187.5" y="1891.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.5" y="1902.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1187.5" y="1875.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.5" y="1886.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.07%)</title><rect x="1187.5" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.5" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="1187.5" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="1854.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="1187.5" y="1827.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.5" y="1838.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.14%)</title><rect x="1188.3" y="2003.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.3" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.14%)</title><rect x="1188.3" y="1987.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.3" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.07%)</title><rect x="1188.3" y="1971.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.3" y="1982.0"></text>
</g>
<g>
<title>TemplateInterpreter::ignore_safepoints() (1 samples, 0.07%)</title><rect x="1188.3" y="1955.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.3" y="1966.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.07%)</title><rect x="1189.2" y="1971.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.2" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.07%)</title><rect x="1189.2" y="1955.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.2" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.07%)</title><rect x="1189.2" y="1939.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.2" y="1950.0"></text>
</g>
<g>
<title>ReferenceProcessor::enable_discovery(bool, bool) (1 samples, 0.07%)</title><rect x="1189.2" y="1923.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.2" y="1934.0"></text>
</g>
</g>
</svg>
