<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1349"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1349"> </text>
<g id="frames">
<g>
<title>all (388 samples, 100.00%)</title><rect x="10.0" y="1315.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (31 samples, 7.99%)</title><rect x="10.0" y="1299.0" width="94.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1310.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (31 samples, 7.99%)</title><rect x="10.0" y="1283.0" width="94.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1294.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.26%)</title><rect x="10.0" y="1267.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.26%)</title><rect x="10.0" y="1251.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.26%)</title><rect x="13.0" y="1267.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.26%)</title><rect x="13.0" y="1251.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.26%)</title><rect x="13.0" y="1235.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.0" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.26%)</title><rect x="13.0" y="1219.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.0" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.26%)</title><rect x="13.0" y="1203.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.0" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.26%)</title><rect x="13.0" y="1187.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.0" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.26%)</title><rect x="13.0" y="1171.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.0" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.26%)</title><rect x="13.0" y="1155.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.26%)</title><rect x="13.0" y="1139.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.0" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.26%)</title><rect x="13.0" y="1123.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.26%)</title><rect x="13.0" y="1107.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$267/519180635.apply (1 samples, 0.26%)</title><rect x="13.0" y="1091.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.26%)</title><rect x="16.1" y="1267.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.1" y="1278.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.26%)</title><rect x="16.1" y="1251.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.1" y="1262.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.26%)</title><rect x="16.1" y="1235.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="19.1" y="1246.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.26%)</title><rect x="16.1" y="1219.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="19.1" y="1230.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.26%)</title><rect x="16.1" y="1203.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="19.1" y="1214.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.26%)</title><rect x="16.1" y="1187.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.1" y="1198.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.26%)</title><rect x="16.1" y="1171.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="19.1" y="1182.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.26%)</title><rect x="16.1" y="1155.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.1" y="1166.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.26%)</title><rect x="16.1" y="1139.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="19.1" y="1150.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::loader_data(oopDesc*) (1 samples, 0.26%)</title><rect x="16.1" y="1123.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.26%)</title><rect x="19.1" y="1267.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.1" y="1278.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.26%)</title><rect x="19.1" y="1251.0" width="3.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="22.1" y="1262.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="19.1" y="1235.0" width="3.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="22.1" y="1246.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (11 samples, 2.84%)</title><rect x="22.2" y="1267.0" width="33.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.2" y="1278.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/2001377131.accept (10 samples, 2.58%)</title><rect x="22.2" y="1251.0" width="30.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.2" y="1262.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$68 (10 samples, 2.58%)</title><rect x="22.2" y="1235.0" width="30.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.2" y="1246.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (4 samples, 1.03%)</title><rect x="25.2" y="1219.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.2" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (4 samples, 1.03%)</title><rect x="25.2" y="1203.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (4 samples, 1.03%)</title><rect x="25.2" y="1187.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.03%)</title><rect x="25.2" y="1171.0" width="12.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.03%)</title><rect x="25.2" y="1155.0" width="12.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.03%)</title><rect x="25.2" y="1139.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.77%)</title><rect x="25.2" y="1123.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.77%)</title><rect x="25.2" y="1107.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.77%)</title><rect x="25.2" y="1091.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.26%)</title><rect x="34.3" y="1123.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="37.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.26%)</title><rect x="34.3" y="1107.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="37.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.26%)</title><rect x="34.3" y="1091.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.26%)</title><rect x="34.3" y="1075.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="37.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.26%)</title><rect x="37.4" y="1219.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.4" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.26%)</title><rect x="37.4" y="1203.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.4" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="37.4" y="1187.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.03%)</title><rect x="40.4" y="1219.0" width="12.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.03%)</title><rect x="40.4" y="1203.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.26%)</title><rect x="49.5" y="1187.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.26%)</title><rect x="49.5" y="1171.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="52.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.26%)</title><rect x="49.5" y="1155.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.26%)</title><rect x="49.5" y="1139.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="52.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.26%)</title><rect x="52.6" y="1251.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.26%)</title><rect x="52.6" y="1235.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.26%)</title><rect x="52.6" y="1219.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.26%)</title><rect x="52.6" y="1203.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.26%)</title><rect x="52.6" y="1187.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.6" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.26%)</title><rect x="52.6" y="1171.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.6" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.26%)</title><rect x="52.6" y="1155.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 4.12%)</title><rect x="55.6" y="1267.0" width="48.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.6" y="1278.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 4.12%)</title><rect x="55.6" y="1251.0" width="48.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.6" y="1262.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (10 samples, 2.58%)</title><rect x="55.6" y="1235.0" width="30.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="58.6" y="1246.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 1.55%)</title><rect x="55.6" y="1219.0" width="18.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="58.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 1.55%)</title><rect x="55.6" y="1203.0" width="18.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.77%)</title><rect x="55.6" y="1187.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="58.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.26%)</title><rect x="55.6" y="1171.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.26%)</title><rect x="55.6" y="1155.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.26%)</title><rect x="55.6" y="1139.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.26%)</title><rect x="55.6" y="1123.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.26%)</title><rect x="55.6" y="1107.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.26%)</title><rect x="55.6" y="1091.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.26%)</title><rect x="55.6" y="1075.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.6" y="1086.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.26%)</title><rect x="55.6" y="1059.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="58.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.52%)</title><rect x="58.7" y="1171.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="58.7" y="1155.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="61.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="58.7" y="1139.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.26%)</title><rect x="58.7" y="1123.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.26%)</title><rect x="58.7" y="1107.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="61.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.26%)</title><rect x="61.7" y="1155.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.26%)</title><rect x="61.7" y="1139.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.26%)</title><rect x="61.7" y="1123.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="61.7" y="1107.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="61.7" y="1091.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="64.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.26%)</title><rect x="61.7" y="1075.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="64.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$260/1221069564.shouldBlock (1 samples, 0.26%)</title><rect x="64.7" y="1187.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.26%)</title><rect x="64.7" y="1171.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.26%)</title><rect x="64.7" y="1155.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.26%)</title><rect x="64.7" y="1139.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.7" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.26%)</title><rect x="64.7" y="1123.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="67.7" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.26%)</title><rect x="64.7" y="1107.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.7" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.26%)</title><rect x="64.7" y="1091.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.7" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.26%)</title><rect x="64.7" y="1075.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.7" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.26%)</title><rect x="64.7" y="1059.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.7" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.26%)</title><rect x="64.7" y="1043.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.26%)</title><rect x="64.7" y="1027.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.26%)</title><rect x="64.7" y="1011.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.7" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.26%)</title><rect x="64.7" y="995.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$261/1313151483.test (1 samples, 0.26%)</title><rect x="64.7" y="979.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="67.7" y="990.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.26%)</title><rect x="64.7" y="963.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="67.7" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.26%)</title><rect x="64.7" y="947.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="67.7" y="958.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.26%)</title><rect x="64.7" y="931.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="67.7" y="942.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.26%)</title><rect x="64.7" y="915.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="67.7" y="926.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::call_event(Method*, CompLevel) (1 samples, 0.26%)</title><rect x="64.7" y="899.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="67.7" y="910.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::common(bool (AdvancedThresholdPolicy::*)(int, int, CompLevel), Method*, CompLevel, bool) (1 samples, 0.26%)</title><rect x="64.7" y="883.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="67.7" y="894.0"></text>
</g>
<g>
<title>Method::compute_has_loops_flag() (1 samples, 0.26%)</title><rect x="64.7" y="867.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="67.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.26%)</title><rect x="67.8" y="1187.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="70.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.26%)</title><rect x="67.8" y="1171.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.26%)</title><rect x="67.8" y="1155.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="70.8" y="1166.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.26%)</title><rect x="67.8" y="1139.0" width="3.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="70.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 0.26%)</title><rect x="70.8" y="1187.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.26%)</title><rect x="70.8" y="1171.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="73.8" y="1182.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.26%)</title><rect x="70.8" y="1155.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="73.8" y="1166.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.26%)</title><rect x="70.8" y="1139.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="73.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.03%)</title><rect x="73.9" y="1219.0" width="12.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="76.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.77%)</title><rect x="76.9" y="1203.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.77%)</title><rect x="76.9" y="1187.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.77%)</title><rect x="76.9" y="1171.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.26%)</title><rect x="76.9" y="1155.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="79.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.26%)</title><rect x="76.9" y="1139.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="79.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.26%)</title><rect x="76.9" y="1123.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="79.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.52%)</title><rect x="79.9" y="1155.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.52%)</title><rect x="79.9" y="1139.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.26%)</title><rect x="79.9" y="1123.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.9" y="1134.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.26%)</title><rect x="79.9" y="1107.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.26%)</title><rect x="83.0" y="1123.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="86.0" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.26%)</title><rect x="83.0" y="1107.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="86.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 1.03%)</title><rect x="86.0" y="1235.0" width="12.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (4 samples, 1.03%)</title><rect x="86.0" y="1219.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.ready (1 samples, 0.26%)</title><rect x="86.0" y="1203.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.isReady (1 samples, 0.26%)</title><rect x="86.0" y="1187.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="89.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient$DefaultMetadataUpdater.isUpdateDue (1 samples, 0.26%)</title><rect x="86.0" y="1171.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.timeToNextUpdate (1 samples, 0.26%)</title><rect x="86.0" y="1155.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (3 samples, 0.77%)</title><rect x="89.1" y="1203.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (3 samples, 0.77%)</title><rect x="89.1" y="1187.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.52%)</title><rect x="92.1" y="1171.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="95.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.52%)</title><rect x="92.1" y="1155.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="95.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.52%)</title><rect x="92.1" y="1139.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.26%)</title><rect x="92.1" y="1123.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="95.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.26%)</title><rect x="95.2" y="1123.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.26%)</title><rect x="95.2" y="1107.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.26%)</title><rect x="95.2" y="1091.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.26%)</title><rect x="95.2" y="1075.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="98.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.26%)</title><rect x="98.2" y="1235.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="101.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.26%)</title><rect x="98.2" y="1219.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="101.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.26%)</title><rect x="98.2" y="1203.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="101.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.preferredReadReplica (1 samples, 0.26%)</title><rect x="98.2" y="1187.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="101.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasNoSubscriptionOrUserAssignment (1 samples, 0.26%)</title><rect x="101.2" y="1235.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="104.2" y="1246.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.26%)</title><rect x="101.2" y="1219.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="104.2" y="1230.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.26%)</title><rect x="101.2" y="1203.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="104.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.run (232 samples, 59.79%)</title><rect x="104.3" y="1299.0" width="705.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="107.3" y="1310.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (232 samples, 59.79%)</title><rect x="104.3" y="1283.0" width="705.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="107.3" y="1294.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (232 samples, 59.79%)</title><rect x="104.3" y="1267.0" width="705.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.3" y="1278.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1536383163.run (218 samples, 56.19%)</title><rect x="104.3" y="1251.0" width="663.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="107.3" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1536383163.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (218 samples, 56.19%)</title><rect x="104.3" y="1235.0" width="663.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="107.3" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (218 samples, 56.19%)</title><rect x="104.3" y="1219.0" width="663.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="107.3" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (213 samples, 54.90%)</title><rect x="104.3" y="1203.0" width="647.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.3" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (45 samples, 11.60%)</title><rect x="110.4" y="1187.0" width="136.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.4" y="1198.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/580718781.extract (45 samples, 11.60%)</title><rect x="110.4" y="1171.0" width="136.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.4" y="1182.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (45 samples, 11.60%)</title><rect x="110.4" y="1155.0" width="136.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.4" y="1166.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (45 samples, 11.60%)</title><rect x="110.4" y="1139.0" width="136.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="113.4" y="1150.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (45 samples, 11.60%)</title><rect x="110.4" y="1123.0" width="136.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.4" y="1134.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (45 samples, 11.60%)</title><rect x="110.4" y="1107.0" width="136.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.4" y="1118.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (21 samples, 5.41%)</title><rect x="110.4" y="1091.0" width="63.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.4" y="1102.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (13 samples, 3.35%)</title><rect x="110.4" y="1075.0" width="39.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="113.4" y="1086.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="110.4" y="1059.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="113.4" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="110.4" y="1043.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="113.4" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="110.4" y="1027.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="113.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (12 samples, 3.09%)</title><rect x="113.4" y="1059.0" width="36.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="116.4" y="1070.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.77%)</title><rect x="140.8" y="1043.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.77%)</title><rect x="140.8" y="1027.0" width="9.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="143.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.77%)</title><rect x="140.8" y="1011.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="143.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.77%)</title><rect x="140.8" y="995.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="143.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.77%)</title><rect x="140.8" y="979.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="143.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (8 samples, 2.06%)</title><rect x="149.9" y="1075.0" width="24.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.9" y="1086.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (2 samples, 0.52%)</title><rect x="149.9" y="1059.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="152.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.26%)</title><rect x="152.9" y="1043.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="155.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 1.55%)</title><rect x="156.0" y="1059.0" width="18.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="159.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.52%)</title><rect x="156.0" y="1043.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="159.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.52%)</title><rect x="156.0" y="1027.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="159.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.52%)</title><rect x="156.0" y="1011.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="159.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (4 samples, 1.03%)</title><rect x="162.1" y="1043.0" width="12.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (19 samples, 4.90%)</title><rect x="174.2" y="1091.0" width="57.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="177.2" y="1102.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.26%)</title><rect x="174.2" y="1075.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.26%)</title><rect x="174.2" y="1059.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="177.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.26%)</title><rect x="174.2" y="1043.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.26%)</title><rect x="174.2" y="1027.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="177.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 1.29%)</title><rect x="177.3" y="1075.0" width="15.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="180.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 1.29%)</title><rect x="177.3" y="1059.0" width="15.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="180.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.52%)</title><rect x="183.4" y="1043.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.26%)</title><rect x="189.4" y="1043.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="192.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.52%)</title><rect x="192.5" y="1075.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.52%)</title><rect x="192.5" y="1059.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="195.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.52%)</title><rect x="192.5" y="1043.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.52%)</title><rect x="192.5" y="1027.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.52%)</title><rect x="192.5" y="1011.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.52%)</title><rect x="198.6" y="1075.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="201.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.52%)</title><rect x="198.6" y="1059.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.26%)</title><rect x="201.6" y="1043.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.26%)</title><rect x="201.6" y="1027.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.26%)</title><rect x="201.6" y="1011.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (9 samples, 2.32%)</title><rect x="204.6" y="1075.0" width="27.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.6" y="1086.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.77%)</title><rect x="210.7" y="1059.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.77%)</title><rect x="210.7" y="1043.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="213.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 1.03%)</title><rect x="219.8" y="1059.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 1.03%)</title><rect x="219.8" y="1043.0" width="12.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 1.03%)</title><rect x="219.8" y="1027.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.52%)</title><rect x="222.9" y="1011.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.26%)</title><rect x="222.9" y="995.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.26%)</title><rect x="222.9" y="979.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="225.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.26%)</title><rect x="222.9" y="963.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.26%)</title><rect x="222.9" y="947.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.26%)</title><rect x="222.9" y="931.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="225.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.26%)</title><rect x="225.9" y="995.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.26%)</title><rect x="229.0" y="1011.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.26%)</title><rect x="229.0" y="995.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.0" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="229.0" y="979.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 1.29%)</title><rect x="232.0" y="1091.0" width="15.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 1.29%)</title><rect x="232.0" y="1075.0" width="15.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 1.29%)</title><rect x="232.0" y="1059.0" width="15.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="235.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.26%)</title><rect x="232.0" y="1043.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="235.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (4 samples, 1.03%)</title><rect x="235.1" y="1043.0" width="12.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (152 samples, 39.18%)</title><rect x="247.2" y="1187.0" width="462.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.2" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (24 samples, 6.19%)</title><rect x="247.2" y="1171.0" width="73.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.2" y="1182.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (20 samples, 5.15%)</title><rect x="259.4" y="1155.0" width="60.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="262.4" y="1166.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (17 samples, 4.38%)</title><rect x="268.5" y="1139.0" width="51.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="271.5" y="1150.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.77%)</title><rect x="274.6" y="1123.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.77%)</title><rect x="274.6" y="1107.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.77%)</title><rect x="274.6" y="1091.0" width="9.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="277.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.77%)</title><rect x="274.6" y="1075.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.26%)</title><rect x="280.7" y="1059.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.7" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (12 samples, 3.09%)</title><rect x="283.7" y="1123.0" width="36.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.7" y="1134.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 1.29%)</title><rect x="305.0" y="1107.0" width="15.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="308.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 1.29%)</title><rect x="305.0" y="1091.0" width="15.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="308.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.26%)</title><rect x="317.2" y="1075.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="320.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.26%)</title><rect x="320.2" y="1171.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="323.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.26%)</title><rect x="320.2" y="1155.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.2" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.26%)</title><rect x="320.2" y="1139.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (21 samples, 5.41%)</title><rect x="323.2" y="1171.0" width="63.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="326.2" y="1182.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (21 samples, 5.41%)</title><rect x="323.2" y="1155.0" width="63.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="326.2" y="1166.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 1.55%)</title><rect x="332.4" y="1139.0" width="18.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="335.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.29%)</title><rect x="332.4" y="1123.0" width="15.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="335.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.77%)</title><rect x="335.4" y="1107.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="338.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.77%)</title><rect x="335.4" y="1091.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="338.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.77%)</title><rect x="335.4" y="1075.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.4" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.77%)</title><rect x="335.4" y="1059.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="338.4" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.77%)</title><rect x="335.4" y="1043.0" width="9.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="338.4" y="1054.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.77%)</title><rect x="335.4" y="1027.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="338.4" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.77%)</title><rect x="335.4" y="1011.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="338.4" y="1022.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.26%)</title><rect x="338.5" y="995.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="341.5" y="1006.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.26%)</title><rect x="341.5" y="995.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="344.5" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="344.5" y="1107.0" width="3.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="347.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.26%)</title><rect x="347.6" y="1123.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="350.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.26%)</title><rect x="347.6" y="1107.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="350.6" y="1118.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.26%)</title><rect x="347.6" y="1091.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="350.6" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="347.6" y="1075.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="350.6" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="347.6" y="1059.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="350.6" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="347.6" y="1043.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="350.6" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.26%)</title><rect x="347.6" y="1027.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="350.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.77%)</title><rect x="350.6" y="1139.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (3 samples, 0.77%)</title><rect x="350.6" y="1123.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="353.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.77%)</title><rect x="350.6" y="1107.0" width="9.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="353.6" y="1118.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 2.32%)</title><rect x="359.7" y="1139.0" width="27.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="362.7" y="1150.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 2.06%)</title><rect x="362.8" y="1123.0" width="24.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.8" y="1134.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (8 samples, 2.06%)</title><rect x="362.8" y="1107.0" width="24.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="365.8" y="1118.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 1.80%)</title><rect x="365.8" y="1091.0" width="21.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.8" y="1102.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 1.80%)</title><rect x="365.8" y="1075.0" width="21.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="368.8" y="1086.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.26%)</title><rect x="371.9" y="1059.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="374.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.52%)</title><rect x="374.9" y="1059.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="377.9" y="1070.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.52%)</title><rect x="381.0" y="1059.0" width="6.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="384.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (84 samples, 21.65%)</title><rect x="387.1" y="1171.0" width="255.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="390.1" y="1182.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (84 samples, 21.65%)</title><rect x="387.1" y="1155.0" width="255.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="390.1" y="1166.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1338907150.process (66 samples, 17.01%)</title><rect x="405.4" y="1139.0" width="200.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="408.4" y="1150.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (66 samples, 17.01%)</title><rect x="405.4" y="1123.0" width="200.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="408.4" y="1134.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="405.4" y="1107.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="408.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (64 samples, 16.49%)</title><rect x="408.4" y="1107.0" width="194.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="411.4" y="1118.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 1.03%)</title><rect x="411.4" y="1091.0" width="12.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="414.4" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 1.03%)</title><rect x="411.4" y="1075.0" width="12.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="414.4" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.03%)</title><rect x="411.4" y="1059.0" width="12.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="414.4" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.77%)</title><rect x="414.5" y="1043.0" width="9.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="417.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.52%)</title><rect x="417.5" y="1027.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="420.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (57 samples, 14.69%)</title><rect x="423.6" y="1091.0" width="173.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="426.6" y="1102.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>java/lang/Thread.sleep (56 samples, 14.43%)</title><rect x="423.6" y="1075.0" width="170.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="426.6" y="1086.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (50 samples, 12.89%)</title><rect x="438.8" y="1059.0" width="152.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="441.8" y="1070.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.52%)</title><rect x="454.0" y="1043.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="457.0" y="1054.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 1.03%)</title><rect x="460.1" y="1043.0" width="12.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="463.1" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.77%)</title><rect x="472.3" y="1043.0" width="9.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="475.3" y="1054.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.52%)</title><rect x="475.3" y="1027.0" width="6.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="478.3" y="1038.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.26%)</title><rect x="481.4" y="1043.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="484.4" y="1054.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (35 samples, 9.02%)</title><rect x="484.4" y="1043.0" width="106.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="487.4" y="1054.0">os::sleep(Thr..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.52%)</title><rect x="502.7" y="1027.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="505.7" y="1038.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.52%)</title><rect x="502.7" y="1011.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="505.7" y="1022.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.52%)</title><rect x="508.8" y="1027.0" width="6.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="511.8" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.52%)</title><rect x="514.8" y="1027.0" width="6.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="517.8" y="1038.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (10 samples, 2.58%)</title><rect x="520.9" y="1027.0" width="30.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="523.9" y="1038.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.52%)</title><rect x="551.3" y="1027.0" width="6.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="554.3" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.26%)</title><rect x="557.4" y="1027.0" width="3.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="560.4" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.26%)</title><rect x="560.5" y="1027.0" width="3.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="563.5" y="1038.0"></text>
</g>
<g>
<title>_init (2 samples, 0.52%)</title><rect x="563.5" y="1027.0" width="6.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="566.5" y="1038.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (6 samples, 1.55%)</title><rect x="569.6" y="1027.0" width="18.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="572.6" y="1038.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.26%)</title><rect x="587.8" y="1027.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="590.8" y="1038.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.26%)</title><rect x="590.9" y="1059.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="593.9" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.26%)</title><rect x="593.9" y="1075.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="596.9" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="593.9" y="1059.0" width="3.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="596.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.52%)</title><rect x="597.0" y="1091.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="600.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.52%)</title><rect x="597.0" y="1075.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="600.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.52%)</title><rect x="597.0" y="1059.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="600.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.26%)</title><rect x="603.0" y="1107.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="606.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.26%)</title><rect x="603.0" y="1091.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="606.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.26%)</title><rect x="603.0" y="1075.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="606.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.26%)</title><rect x="603.0" y="1059.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="606.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.26%)</title><rect x="603.0" y="1043.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="606.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.52%)</title><rect x="606.1" y="1139.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="609.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.52%)</title><rect x="606.1" y="1123.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="609.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1172131546.linkToTargetMethod (3 samples, 0.77%)</title><rect x="612.2" y="1139.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="615.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (3 samples, 0.77%)</title><rect x="612.2" y="1123.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="615.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/268831562.get$Lambda (3 samples, 0.77%)</title><rect x="612.2" y="1107.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="615.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/268831562.&lt;init&gt; (3 samples, 0.77%)</title><rect x="612.2" y="1091.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="615.2" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.52%)</title><rect x="621.3" y="1139.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="624.3" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.52%)</title><rect x="621.3" y="1123.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="624.3" y="1134.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.52%)</title><rect x="621.3" y="1107.0" width="6.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="624.3" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.52%)</title><rect x="627.4" y="1139.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="630.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (3 samples, 0.77%)</title><rect x="633.5" y="1139.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="636.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 5.67%)</title><rect x="642.6" y="1171.0" width="66.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="645.6" y="1182.0">java/ut..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.26%)</title><rect x="700.4" y="1155.0" width="3.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="703.4" y="1166.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="700.4" y="1139.0" width="3.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="703.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.26%)</title><rect x="703.4" y="1155.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="706.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.26%)</title><rect x="703.4" y="1139.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="706.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/189455463.accept (1 samples, 0.26%)</title><rect x="703.4" y="1123.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="706.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (1 samples, 0.26%)</title><rect x="703.4" y="1107.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="706.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/2123515201.complete (1 samples, 0.26%)</title><rect x="703.4" y="1091.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="706.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (1 samples, 0.26%)</title><rect x="703.4" y="1075.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="706.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/999352093.complete (1 samples, 0.26%)</title><rect x="703.4" y="1059.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="706.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$67 (1 samples, 0.26%)</title><rect x="703.4" y="1043.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="706.4" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.26%)</title><rect x="706.4" y="1155.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="709.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 3.35%)</title><rect x="709.5" y="1187.0" width="39.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="712.5" y="1198.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 3.35%)</title><rect x="709.5" y="1171.0" width="39.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="712.5" y="1182.0">jav..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.52%)</title><rect x="712.5" y="1155.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="715.5" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.52%)</title><rect x="712.5" y="1139.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="715.5" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.52%)</title><rect x="712.5" y="1123.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="715.5" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.52%)</title><rect x="712.5" y="1107.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="715.5" y="1118.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.26%)</title><rect x="715.6" y="1091.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="718.6" y="1102.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.26%)</title><rect x="715.6" y="1075.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="718.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 2.58%)</title><rect x="718.6" y="1155.0" width="30.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="721.6" y="1166.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/189455463.accept (10 samples, 2.58%)</title><rect x="718.6" y="1139.0" width="30.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="721.6" y="1150.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (10 samples, 2.58%)</title><rect x="718.6" y="1123.0" width="30.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="721.6" y="1134.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/2123515201.complete (10 samples, 2.58%)</title><rect x="718.6" y="1107.0" width="30.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="721.6" y="1118.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (10 samples, 2.58%)</title><rect x="718.6" y="1091.0" width="30.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="721.6" y="1102.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1801720742.complete (6 samples, 1.55%)</title><rect x="718.6" y="1075.0" width="18.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="721.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (6 samples, 1.55%)</title><rect x="718.6" y="1059.0" width="18.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="721.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (6 samples, 1.55%)</title><rect x="718.6" y="1043.0" width="18.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="721.6" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 1.55%)</title><rect x="718.6" y="1027.0" width="18.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="721.6" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 1.55%)</title><rect x="718.6" y="1011.0" width="18.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="721.6" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (6 samples, 1.55%)</title><rect x="718.6" y="995.0" width="18.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="721.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/999352093.complete (4 samples, 1.03%)</title><rect x="736.9" y="1075.0" width="12.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="739.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$67 (4 samples, 1.03%)</title><rect x="736.9" y="1059.0" width="12.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="739.9" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.26%)</title><rect x="749.0" y="1187.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="752.0" y="1198.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="749.0" y="1171.0" width="3.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="752.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 1.29%)</title><rect x="752.1" y="1203.0" width="15.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="755.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.77%)</title><rect x="767.3" y="1251.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="770.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.77%)</title><rect x="767.3" y="1235.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="770.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.77%)</title><rect x="767.3" y="1219.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="770.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.77%)</title><rect x="767.3" y="1203.0" width="9.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="770.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 2.84%)</title><rect x="776.4" y="1251.0" width="33.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="779.4" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 1.80%)</title><rect x="788.6" y="1235.0" width="21.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="791.6" y="1246.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.52%)</title><rect x="788.6" y="1219.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.52%)</title><rect x="788.6" y="1203.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="791.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.52%)</title><rect x="788.6" y="1187.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="791.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.52%)</title><rect x="788.6" y="1171.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="791.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.52%)</title><rect x="788.6" y="1155.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="791.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 1.29%)</title><rect x="794.6" y="1219.0" width="15.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="797.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.29%)</title><rect x="794.6" y="1203.0" width="15.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="797.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.29%)</title><rect x="794.6" y="1187.0" width="15.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="797.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.29%)</title><rect x="794.6" y="1171.0" width="15.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="797.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.52%)</title><rect x="809.8" y="1299.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="812.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.26%)</title><rect x="812.9" y="1283.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="815.9" y="1294.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.26%)</title><rect x="812.9" y="1267.0" width="3.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="815.9" y="1278.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.26%)</title><rect x="812.9" y="1251.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="815.9" y="1262.0"></text>
</g>
<g>
<title>start_thread (123 samples, 31.70%)</title><rect x="815.9" y="1299.0" width="374.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="818.9" y="1310.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (123 samples, 31.70%)</title><rect x="815.9" y="1283.0" width="374.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="818.9" y="1294.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 6.19%)</title><rect x="815.9" y="1267.0" width="73.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="818.9" y="1278.0">GangWork..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.77%)</title><rect x="815.9" y="1251.0" width="9.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="818.9" y="1262.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.77%)</title><rect x="815.9" y="1235.0" width="9.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="818.9" y="1246.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.26%)</title><rect x="815.9" y="1219.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="818.9" y="1230.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.52%)</title><rect x="819.0" y="1219.0" width="6.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="822.0" y="1230.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 5.15%)</title><rect x="825.1" y="1251.0" width="60.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="828.1" y="1262.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (17 samples, 4.38%)</title><rect x="825.1" y="1235.0" width="51.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="828.1" y="1246.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (15 samples, 3.87%)</title><rect x="825.1" y="1219.0" width="45.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="828.1" y="1230.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (9 samples, 2.32%)</title><rect x="840.3" y="1203.0" width="27.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="843.3" y="1214.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 0.77%)</title><rect x="858.5" y="1187.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="861.5" y="1198.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.26%)</title><rect x="864.6" y="1171.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="867.6" y="1182.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.26%)</title><rect x="867.6" y="1203.0" width="3.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="870.6" y="1214.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.26%)</title><rect x="870.7" y="1219.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="873.7" y="1230.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.26%)</title><rect x="873.7" y="1219.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="876.7" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.26%)</title><rect x="876.8" y="1235.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="879.8" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.26%)</title><rect x="876.8" y="1219.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="879.8" y="1230.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.26%)</title><rect x="876.8" y="1203.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="879.8" y="1214.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.26%)</title><rect x="876.8" y="1187.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="879.8" y="1198.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.26%)</title><rect x="876.8" y="1171.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="879.8" y="1182.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.26%)</title><rect x="876.8" y="1155.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="879.8" y="1166.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.52%)</title><rect x="879.8" y="1235.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="882.8" y="1246.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.52%)</title><rect x="879.8" y="1219.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="882.8" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.52%)</title><rect x="879.8" y="1203.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="882.8" y="1214.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.52%)</title><rect x="879.8" y="1187.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="882.8" y="1198.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.52%)</title><rect x="879.8" y="1171.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="882.8" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.52%)</title><rect x="879.8" y="1155.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="882.8" y="1166.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.52%)</title><rect x="879.8" y="1139.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="882.8" y="1150.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.26%)</title><rect x="879.8" y="1123.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="882.8" y="1134.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.26%)</title><rect x="882.8" y="1123.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="885.8" y="1134.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.26%)</title><rect x="885.9" y="1251.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="888.9" y="1262.0"></text>
</g>
<g>
<title>JavaThread::run() (99 samples, 25.52%)</title><rect x="888.9" y="1267.0" width="301.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="891.9" y="1278.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (99 samples, 25.52%)</title><rect x="888.9" y="1251.0" width="301.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="891.9" y="1262.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (99 samples, 25.52%)</title><rect x="888.9" y="1235.0" width="301.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="891.9" y="1246.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (99 samples, 25.52%)</title><rect x="888.9" y="1219.0" width="301.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="891.9" y="1230.0">CompileBroker::invoke_compiler_on_method(..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (95 samples, 24.48%)</title><rect x="888.9" y="1203.0" width="288.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="891.9" y="1214.0">C2Compiler::compile_method(ciEnv*, ciMe..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (95 samples, 24.48%)</title><rect x="888.9" y="1187.0" width="288.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="891.9" y="1198.0">Compile::Compile(ciEnv*, C2Compiler*, c..</text>
</g>
<g>
<title>Compile::Code_Gen() (27 samples, 6.96%)</title><rect x="888.9" y="1171.0" width="82.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="891.9" y="1182.0">Compile::..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.26%)</title><rect x="888.9" y="1155.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="891.9" y="1166.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.26%)</title><rect x="888.9" y="1139.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="891.9" y="1150.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.26%)</title><rect x="892.0" y="1155.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="895.0" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.26%)</title><rect x="892.0" y="1139.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="895.0" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.26%)</title><rect x="892.0" y="1123.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="895.0" y="1134.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.77%)</title><rect x="895.0" y="1155.0" width="9.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="898.0" y="1166.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.77%)</title><rect x="895.0" y="1139.0" width="9.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="898.0" y="1150.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.26%)</title><rect x="895.0" y="1123.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="898.0" y="1134.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.52%)</title><rect x="898.0" y="1123.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="901.0" y="1134.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.26%)</title><rect x="901.1" y="1107.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="904.1" y="1118.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.26%)</title><rect x="901.1" y="1091.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="904.1" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.26%)</title><rect x="904.1" y="1155.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="907.1" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.26%)</title><rect x="904.1" y="1139.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="907.1" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.26%)</title><rect x="904.1" y="1123.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="907.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (21 samples, 5.41%)</title><rect x="907.2" y="1155.0" width="63.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="910.2" y="1166.0">PhaseCh..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.26%)</title><rect x="907.2" y="1139.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="910.2" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.52%)</title><rect x="910.2" y="1139.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="913.2" y="1150.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.26%)</title><rect x="913.2" y="1123.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="916.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.03%)</title><rect x="916.3" y="1139.0" width="12.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="919.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.77%)</title><rect x="928.5" y="1139.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="931.5" y="1150.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.26%)</title><rect x="934.5" y="1123.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="937.5" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.77%)</title><rect x="937.6" y="1139.0" width="9.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="940.6" y="1150.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.52%)</title><rect x="940.6" y="1123.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="943.6" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.52%)</title><rect x="946.7" y="1139.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="949.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.26%)</title><rect x="949.7" y="1123.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="952.7" y="1134.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.26%)</title><rect x="952.8" y="1139.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="955.8" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.26%)</title><rect x="952.8" y="1123.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="955.8" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.26%)</title><rect x="952.8" y="1107.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="955.8" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.26%)</title><rect x="952.8" y="1091.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="955.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.52%)</title><rect x="955.8" y="1139.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="958.8" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.26%)</title><rect x="955.8" y="1123.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="958.8" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="958.9" y="1123.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="961.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.26%)</title><rect x="961.9" y="1139.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="964.9" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.52%)</title><rect x="964.9" y="1139.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="967.9" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.26%)</title><rect x="968.0" y="1123.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="971.0" y="1134.0"></text>
</g>
<g>
<title>Compile::Optimize() (62 samples, 15.98%)</title><rect x="971.0" y="1171.0" width="188.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="974.0" y="1182.0">Compile::Optimize()</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (55 samples, 14.18%)</title><rect x="971.0" y="1155.0" width="167.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="974.0" y="1166.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.26%)</title><rect x="971.0" y="1139.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="974.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (52 samples, 13.40%)</title><rect x="974.1" y="1139.0" width="158.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="977.1" y="1150.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (51 samples, 13.14%)</title><rect x="977.1" y="1123.0" width="155.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="980.1" y="1134.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 1.55%)</title><rect x="977.1" y="1107.0" width="18.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (45 samples, 11.60%)</title><rect x="995.4" y="1107.0" width="136.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="998.4" y="1118.0">PhaseIdealLoop::g..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (10 samples, 2.58%)</title><rect x="1101.8" y="1091.0" width="30.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.8" y="1102.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.52%)</title><rect x="1132.2" y="1139.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.26%)</title><rect x="1135.3" y="1123.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_region(Node*, Node*) (1 samples, 0.26%)</title><rect x="1135.3" y="1107.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.3" y="1118.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.26%)</title><rect x="1135.3" y="1091.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.29%)</title><rect x="1138.3" y="1155.0" width="15.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.29%)</title><rect x="1138.3" y="1139.0" width="15.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.3" y="1150.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.52%)</title><rect x="1138.3" y="1123.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.3" y="1134.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.52%)</title><rect x="1138.3" y="1107.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.3" y="1118.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.52%)</title><rect x="1138.3" y="1091.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.3" y="1102.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.52%)</title><rect x="1138.3" y="1075.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.26%)</title><rect x="1144.4" y="1123.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.26%)</title><rect x="1144.4" y="1107.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.4" y="1118.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.26%)</title><rect x="1144.4" y="1091.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.4" y="1102.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1147.4" y="1123.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.4" y="1134.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.26%)</title><rect x="1147.4" y="1107.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.4" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.26%)</title><rect x="1150.5" y="1123.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.5" y="1134.0"></text>
</g>
<g>
<title>PhiNode::is_diamond_phi(bool) const (1 samples, 0.26%)</title><rect x="1150.5" y="1107.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.5" y="1118.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.26%)</title><rect x="1153.5" y="1155.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.26%)</title><rect x="1153.5" y="1139.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.26%)</title><rect x="1153.5" y="1123.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.5" y="1134.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.26%)</title><rect x="1153.5" y="1107.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.5" y="1118.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.26%)</title><rect x="1156.5" y="1155.0" width="3.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1159.5" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.29%)</title><rect x="1159.6" y="1171.0" width="15.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.6" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.29%)</title><rect x="1159.6" y="1155.0" width="15.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.29%)</title><rect x="1159.6" y="1139.0" width="15.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.29%)</title><rect x="1159.6" y="1123.0" width="15.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.29%)</title><rect x="1159.6" y="1107.0" width="15.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.29%)</title><rect x="1159.6" y="1091.0" width="15.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.6" y="1102.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1159.6" y="1075.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.6" y="1086.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.26%)</title><rect x="1159.6" y="1059.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.6" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.03%)</title><rect x="1162.6" y="1075.0" width="12.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.6" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.03%)</title><rect x="1162.6" y="1059.0" width="12.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.03%)</title><rect x="1162.6" y="1043.0" width="12.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.03%)</title><rect x="1162.6" y="1027.0" width="12.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.03%)</title><rect x="1162.6" y="1011.0" width="12.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.03%)</title><rect x="1162.6" y="995.0" width="12.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.77%)</title><rect x="1162.6" y="979.0" width="9.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.6" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.77%)</title><rect x="1162.6" y="963.0" width="9.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.77%)</title><rect x="1162.6" y="947.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.77%)</title><rect x="1162.6" y="931.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.77%)</title><rect x="1162.6" y="915.0" width="9.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.77%)</title><rect x="1162.6" y="899.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="910.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1162.6" y="883.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.6" y="894.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.26%)</title><rect x="1162.6" y="867.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.6" y="878.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.26%)</title><rect x="1162.6" y="851.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.26%)</title><rect x="1162.6" y="835.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.6" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.26%)</title><rect x="1162.6" y="819.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.6" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1162.6" y="803.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1162.6" y="787.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.6" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.26%)</title><rect x="1162.6" y="771.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.26%)</title><rect x="1162.6" y="755.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.6" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.26%)</title><rect x="1162.6" y="739.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1162.6" y="723.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1162.6" y="707.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.6" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.26%)</title><rect x="1162.6" y="691.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.7" y="883.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.7" y="867.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1165.7" y="851.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1165.7" y="835.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1165.7" y="819.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1165.7" y="803.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.7" y="787.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.7" y="771.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1165.7" y="755.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.7" y="766.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.26%)</title><rect x="1165.7" y="739.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="750.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.26%)</title><rect x="1165.7" y="723.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.7" y="734.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.26%)</title><rect x="1165.7" y="707.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.7" y="718.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.26%)</title><rect x="1165.7" y="691.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.7" y="702.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.26%)</title><rect x="1165.7" y="675.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.7" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.7" y="883.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.7" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.7" y="867.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.7" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1168.7" y="851.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1168.7" y="835.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1168.7" y="819.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1168.7" y="803.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.26%)</title><rect x="1168.7" y="787.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.26%)</title><rect x="1168.7" y="771.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.7" y="782.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.26%)</title><rect x="1168.7" y="755.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.7" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::g1_wb_pre_Type() (1 samples, 0.26%)</title><rect x="1168.7" y="739.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.7" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1171.8" y="979.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.8" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1171.8" y="963.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.8" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1171.8" y="947.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1171.8" y="931.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1171.8" y="915.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1171.8" y="899.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1171.8" y="883.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1171.8" y="867.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.8" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1171.8" y="851.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1171.8" y="835.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1171.8" y="819.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1171.8" y="803.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1171.8" y="787.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.8" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1171.8" y="771.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1171.8" y="755.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1171.8" y="739.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1171.8" y="723.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1171.8" y="707.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1171.8" y="691.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1171.8" y="675.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.8" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1171.8" y="659.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1171.8" y="643.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1171.8" y="627.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1171.8" y="611.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1171.8" y="595.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.8" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1171.8" y="579.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1171.8" y="563.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1171.8" y="547.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1171.8" y="531.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1171.8" y="515.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1171.8" y="499.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1171.8" y="483.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1171.8" y="467.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1171.8" y="451.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1171.8" y="435.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1171.8" y="419.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1171.8" y="403.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1171.8" y="387.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1171.8" y="371.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1171.8" y="355.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1171.8" y="339.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1171.8" y="323.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1171.8" y="307.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1171.8" y="291.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1171.8" y="275.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.8" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1171.8" y="259.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.8" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1171.8" y="243.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1171.8" y="227.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1171.8" y="211.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1171.8" y="195.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.26%)</title><rect x="1171.8" y="179.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.26%)</title><rect x="1171.8" y="163.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.8" y="174.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.26%)</title><rect x="1171.8" y="147.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.8" y="158.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.26%)</title><rect x="1171.8" y="131.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.8" y="142.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.26%)</title><rect x="1171.8" y="115.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="126.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.26%)</title><rect x="1171.8" y="99.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.8" y="110.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.26%)</title><rect x="1171.8" y="83.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.8" y="94.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.26%)</title><rect x="1171.8" y="67.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.8" y="78.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.26%)</title><rect x="1171.8" y="51.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.8" y="62.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.26%)</title><rect x="1171.8" y="35.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.8" y="46.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.26%)</title><rect x="1174.8" y="1171.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.8" y="1182.0"></text>
</g>
<g>
<title>Dependencies::encode_content_bytes() (1 samples, 0.26%)</title><rect x="1174.8" y="1155.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.8" y="1166.0"></text>
</g>
<g>
<title>Dependencies::sort_all_deps() (1 samples, 0.26%)</title><rect x="1174.8" y="1139.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.8" y="1150.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.77%)</title><rect x="1177.8" y="1203.0" width="9.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.8" y="1214.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.77%)</title><rect x="1177.8" y="1187.0" width="9.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.8" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.77%)</title><rect x="1177.8" y="1171.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.8" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.77%)</title><rect x="1177.8" y="1155.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="1166.0"></text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 0.77%)</title><rect x="1177.8" y="1139.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.8" y="1150.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 0.77%)</title><rect x="1177.8" y="1123.0" width="9.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.8" y="1134.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 0.77%)</title><rect x="1177.8" y="1107.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.52%)</title><rect x="1177.8" y="1091.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.52%)</title><rect x="1177.8" y="1075.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.52%)</title><rect x="1177.8" y="1059.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.8" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.26%)</title><rect x="1177.8" y="1043.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.8" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.26%)</title><rect x="1177.8" y="1027.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1180.8" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.26%)</title><rect x="1180.9" y="1043.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.26%)</title><rect x="1180.9" y="1027.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.26%)</title><rect x="1180.9" y="1011.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.26%)</title><rect x="1180.9" y="995.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.26%)</title><rect x="1180.9" y="979.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.26%)</title><rect x="1180.9" y="963.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="974.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.26%)</title><rect x="1180.9" y="947.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1180.9" y="931.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1180.9" y="915.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="926.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1180.9" y="899.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1180.9" y="883.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1180.9" y="867.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.26%)</title><rect x="1180.9" y="851.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.26%)</title><rect x="1180.9" y="835.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="846.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.26%)</title><rect x="1180.9" y="819.0" width="3.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1183.9" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::eliminate_redundant_phis(BlockBegin*) (1 samples, 0.26%)</title><rect x="1183.9" y="1091.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.9" y="1102.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.26%)</title><rect x="1187.0" y="1203.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.0" y="1214.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.26%)</title><rect x="1187.0" y="1187.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="1198.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.26%)</title><rect x="1187.0" y="1171.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.0" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_scavengable(void const*) (1 samples, 0.26%)</title><rect x="1187.0" y="1155.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.0" y="1166.0"></text>
</g>
</g>
</svg>
