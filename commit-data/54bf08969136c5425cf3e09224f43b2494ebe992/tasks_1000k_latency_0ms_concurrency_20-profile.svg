<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1109"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1109"> </text>
<g id="frames">
<g>
<title>all (1,263 samples, 100.00%)</title><rect x="10.0" y="1075.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1086.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.08%)</title><rect x="10.0" y="1059.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap(JavaThread*, int) (1 samples, 0.08%)</title><rect x="10.0" y="1043.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap_inner(JavaThread*, int) (1 samples, 0.08%)</title><rect x="10.0" y="1027.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>BiasedLocking::revoke(GrowableArray&lt;Handle&gt;*) (1 samples, 0.08%)</title><rect x="10.0" y="1011.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="10.9" y="1059.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.9" y="1070.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="10.9" y="1043.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (294 samples, 23.28%)</title><rect x="11.9" y="1059.0" width="274.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.9" y="1070.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.08%)</title><rect x="11.9" y="1043.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.08%)</title><rect x="11.9" y="1027.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.08%)</title><rect x="11.9" y="1011.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.08%)</title><rect x="11.9" y="995.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="11.9" y="979.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="11.9" y="963.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 0.08%)</title><rect x="11.9" y="947.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.9" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.08%)</title><rect x="11.9" y="931.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (293 samples, 23.20%)</title><rect x="12.8" y="1043.0" width="273.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.8" y="1054.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.32%)</title><rect x="12.8" y="1027.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.8" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.32%)</title><rect x="12.8" y="1011.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1307959399.accept (4 samples, 0.32%)</title><rect x="12.8" y="995.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.32%)</title><rect x="12.8" y="979.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.32%)</title><rect x="12.8" y="963.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.8" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.24%)</title><rect x="13.7" y="947.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (5 samples, 0.40%)</title><rect x="16.5" y="1027.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (5 samples, 0.40%)</title><rect x="16.5" y="1011.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (5 samples, 0.40%)</title><rect x="16.5" y="995.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (5 samples, 0.40%)</title><rect x="16.5" y="979.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (5 samples, 0.40%)</title><rect x="16.5" y="963.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.32%)</title><rect x="16.5" y="947.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.32%)</title><rect x="16.5" y="931.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="16.5" y="915.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.5" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="16.5" y="899.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.5" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="16.5" y="883.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$266/249910898.test (1 samples, 0.08%)</title><rect x="16.5" y="867.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.5" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="17.5" y="915.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.5" y="926.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="17.5" y="899.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.5" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="18.4" y="915.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="18.4" y="899.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="18.4" y="883.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.4" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="18.4" y="867.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/1857032251.get (1 samples, 0.08%)</title><rect x="18.4" y="851.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="19.3" y="915.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.3" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.08%)</title><rect x="20.3" y="947.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.3" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.08%)</title><rect x="20.3" y="931.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.3" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="20.3" y="915.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.3" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (220 samples, 17.42%)</title><rect x="21.2" y="1027.0" width="205.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.2" y="1038.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/2001377131.accept (212 samples, 16.79%)</title><rect x="21.2" y="1011.0" width="198.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.2" y="1022.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$68 (212 samples, 16.79%)</title><rect x="21.2" y="995.0" width="198.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.2" y="1006.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (176 samples, 13.94%)</title><rect x="22.1" y="979.0" width="164.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.1" y="990.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (176 samples, 13.94%)</title><rect x="22.1" y="963.0" width="164.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.1" y="974.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (176 samples, 13.94%)</title><rect x="22.1" y="947.0" width="164.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.1" y="958.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (176 samples, 13.94%)</title><rect x="22.1" y="931.0" width="164.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.1" y="942.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (176 samples, 13.94%)</title><rect x="22.1" y="915.0" width="164.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="25.1" y="926.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (176 samples, 13.94%)</title><rect x="22.1" y="899.0" width="164.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.1" y="910.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (115 samples, 9.11%)</title><rect x="22.1" y="883.0" width="107.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.1" y="894.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (29 samples, 2.30%)</title><rect x="22.1" y="867.0" width="27.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.1" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (29 samples, 2.30%)</title><rect x="22.1" y="851.0" width="27.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.1" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (17 samples, 1.35%)</title><rect x="33.4" y="835.0" width="15.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="36.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (17 samples, 1.35%)</title><rect x="33.4" y="819.0" width="15.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="36.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.48%)</title><rect x="49.2" y="867.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.48%)</title><rect x="49.2" y="851.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="51.1" y="835.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.24%)</title><rect x="52.0" y="835.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (80 samples, 6.33%)</title><rect x="54.8" y="867.0" width="74.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="57.8" y="878.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (80 samples, 6.33%)</title><rect x="54.8" y="851.0" width="74.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.8" y="862.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (80 samples, 6.33%)</title><rect x="54.8" y="835.0" width="74.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="57.8" y="846.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (80 samples, 6.33%)</title><rect x="54.8" y="819.0" width="74.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="57.8" y="830.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (79 samples, 6.25%)</title><rect x="55.8" y="803.0" width="73.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="58.8" y="814.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (71 samples, 5.62%)</title><rect x="55.8" y="787.0" width="66.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="58.8" y="798.0">Unsafe_..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="56.7" y="771.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="59.7" y="782.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.08%)</title><rect x="57.6" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="60.6" y="782.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="57.6" y="755.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="60.6" y="766.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="57.6" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="60.6" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.08%)</title><rect x="57.6" y="723.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="60.6" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="58.6" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="61.6" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_signal (39 samples, 3.09%)</title><rect x="59.5" y="771.0" width="36.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="62.5" y="782.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.24%)</title><rect x="96.0" y="771.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="99.0" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_lock (25 samples, 1.98%)</title><rect x="98.8" y="771.0" width="23.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="101.8" y="782.0">p..</text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.40%)</title><rect x="122.1" y="787.0" width="4.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="125.1" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.24%)</title><rect x="126.8" y="787.0" width="2.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="129.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (45 samples, 3.56%)</title><rect x="129.6" y="883.0" width="42.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="132.6" y="894.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (45 samples, 3.56%)</title><rect x="129.6" y="867.0" width="42.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.6" y="878.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (45 samples, 3.56%)</title><rect x="129.6" y="851.0" width="42.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.6" y="862.0">java..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.24%)</title><rect x="167.9" y="835.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="170.9" y="846.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="170.7" y="835.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="173.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (16 samples, 1.27%)</title><rect x="171.6" y="883.0" width="15.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="174.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (10 samples, 0.79%)</title><rect x="171.6" y="867.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="174.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (10 samples, 0.79%)</title><rect x="171.6" y="851.0" width="9.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="174.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="180.0" y="835.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.48%)</title><rect x="181.0" y="867.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.48%)</title><rect x="181.0" y="851.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="184.0" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="185.6" y="835.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="188.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (4 samples, 0.32%)</title><rect x="186.6" y="979.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 0.32%)</title><rect x="186.6" y="963.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="189.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.24%)</title><rect x="190.3" y="979.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.24%)</title><rect x="190.3" y="963.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.3" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.24%)</title><rect x="190.3" y="947.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="193.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (28 samples, 2.22%)</title><rect x="193.1" y="979.0" width="26.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.1" y="990.0">c..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.16%)</title><rect x="193.1" y="963.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.1" y="974.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (26 samples, 2.06%)</title><rect x="195.0" y="963.0" width="24.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.0" y="974.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.24%)</title><rect x="213.7" y="947.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.7" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="213.7" y="931.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.7" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.08%)</title><rect x="213.7" y="915.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.7" y="926.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="213.7" y="899.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.7" y="910.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="214.6" y="931.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.6" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.08%)</title><rect x="215.5" y="931.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.5" y="942.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="216.5" y="947.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="219.5" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="217.4" y="947.0" width="1.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="220.4" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="219.3" y="1011.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="222.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.40%)</title><rect x="220.2" y="1011.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.40%)</title><rect x="220.2" y="995.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.40%)</title><rect x="220.2" y="979.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.40%)</title><rect x="220.2" y="963.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.2" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.24%)</title><rect x="222.1" y="947.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.16%)</title><rect x="224.9" y="1011.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.16%)</title><rect x="224.9" y="995.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (64 samples, 5.07%)</title><rect x="226.8" y="1027.0" width="59.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="229.8" y="1038.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (64 samples, 5.07%)</title><rect x="226.8" y="1011.0" width="59.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="229.8" y="1022.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (42 samples, 3.33%)</title><rect x="226.8" y="995.0" width="39.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.8" y="1006.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="227.7" y="979.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="227.7" y="963.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="227.7" y="947.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.08%)</title><rect x="227.7" y="931.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.08%)</title><rect x="227.7" y="915.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.08%)</title><rect x="227.7" y="899.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.08%)</title><rect x="227.7" y="883.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="227.7" y="867.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="227.7" y="851.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="230.7" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.08%)</title><rect x="227.7" y="835.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (40 samples, 3.17%)</title><rect x="228.6" y="979.0" width="37.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.6" y="990.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (40 samples, 3.17%)</title><rect x="228.6" y="963.0" width="37.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.6" y="974.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (35 samples, 2.77%)</title><rect x="228.6" y="947.0" width="32.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.6" y="958.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (35 samples, 2.77%)</title><rect x="228.6" y="931.0" width="32.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.6" y="942.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (19 samples, 1.50%)</title><rect x="235.2" y="915.0" width="17.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (10 samples, 0.79%)</title><rect x="241.7" y="899.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (10 samples, 0.79%)</title><rect x="241.7" y="883.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (10 samples, 0.79%)</title><rect x="241.7" y="867.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="244.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (10 samples, 0.79%)</title><rect x="241.7" y="851.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="244.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (10 samples, 0.79%)</title><rect x="241.7" y="835.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (10 samples, 0.79%)</title><rect x="241.7" y="819.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (10 samples, 0.79%)</title><rect x="241.7" y="803.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.08%)</title><rect x="251.0" y="899.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="254.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.08%)</title><rect x="251.0" y="883.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="254.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.08%)</title><rect x="252.0" y="899.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.08%)</title><rect x="252.0" y="883.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.08%)</title><rect x="252.0" y="867.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (9 samples, 0.71%)</title><rect x="252.9" y="915.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (9 samples, 0.71%)</title><rect x="252.9" y="899.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="255.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (9 samples, 0.71%)</title><rect x="252.9" y="883.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.9" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (9 samples, 0.71%)</title><rect x="252.9" y="867.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.9" y="878.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (5 samples, 0.40%)</title><rect x="256.7" y="851.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (5 samples, 0.40%)</title><rect x="256.7" y="835.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (5 samples, 0.40%)</title><rect x="256.7" y="819.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.7" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (5 samples, 0.40%)</title><rect x="256.7" y="803.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.7" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="260.4" y="787.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="263.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (4 samples, 0.32%)</title><rect x="261.3" y="947.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (4 samples, 0.32%)</title><rect x="261.3" y="931.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (3 samples, 0.24%)</title><rect x="261.3" y="915.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.24%)</title><rect x="261.3" y="899.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.3" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="263.2" y="883.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="266.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="264.1" y="915.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="264.1" y="899.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="264.1" y="883.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="264.1" y="867.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.1" y="878.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="264.1" y="851.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="267.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.08%)</title><rect x="265.1" y="947.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="265.1" y="931.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.55%)</title><rect x="266.0" y="995.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.48%)</title><rect x="266.0" y="979.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.24%)</title><rect x="266.0" y="963.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.0" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="266.0" y="947.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="266.0" y="931.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.08%)</title><rect x="266.0" y="915.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="269.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="266.0" y="899.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="266.0" y="883.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="266.9" y="947.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="269.9" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.08%)</title><rect x="266.9" y="931.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.9" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="266.9" y="915.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="269.9" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="266.9" y="899.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.9" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="266.9" y="883.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.9" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="266.9" y="867.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="267.9" y="947.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="270.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="267.9" y="931.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.9" y="942.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="267.9" y="915.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.9" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.08%)</title><rect x="267.9" y="899.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.24%)</title><rect x="268.8" y="963.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.8" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (3 samples, 0.24%)</title><rect x="268.8" y="947.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.8" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.24%)</title><rect x="268.8" y="931.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.8" y="942.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="269.7" y="915.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.7" y="926.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="269.7" y="899.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.7" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="269.7" y="883.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="269.7" y="867.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="269.7" y="851.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.08%)</title><rect x="269.7" y="835.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.getOpFlags (1 samples, 0.08%)</title><rect x="270.7" y="915.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="271.6" y="979.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.08%)</title><rect x="271.6" y="963.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.08%)</title><rect x="271.6" y="947.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="272.5" y="995.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.08%)</title><rect x="272.5" y="979.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.48%)</title><rect x="273.5" y="995.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.48%)</title><rect x="273.5" y="979.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.16%)</title><rect x="273.5" y="963.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.16%)</title><rect x="273.5" y="947.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (2 samples, 0.16%)</title><rect x="273.5" y="931.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (2 samples, 0.16%)</title><rect x="273.5" y="915.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="274.4" y="899.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="274.4" y="883.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="274.4" y="867.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="274.4" y="851.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="274.4" y="835.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="274.4" y="819.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.32%)</title><rect x="275.3" y="963.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.24%)</title><rect x="275.3" y="947.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="275.3" y="931.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="278.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="275.3" y="915.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.3" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="275.3" y="899.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="278.3" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="275.3" y="883.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="278.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.16%)</title><rect x="276.3" y="931.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.16%)</title><rect x="276.3" y="915.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="279.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.16%)</title><rect x="276.3" y="899.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.16%)</title><rect x="276.3" y="883.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.16%)</title><rect x="276.3" y="867.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.3" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.16%)</title><rect x="276.3" y="851.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.3" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="276.3" y="835.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="279.3" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="277.2" y="835.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="280.2" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.08%)</title><rect x="277.2" y="819.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.2" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.08%)</title><rect x="277.2" y="803.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.2" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.08%)</title><rect x="277.2" y="787.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.2" y="798.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.08%)</title><rect x="277.2" y="771.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="280.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.08%)</title><rect x="278.1" y="947.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="281.1" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.08%)</title><rect x="278.1" y="931.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.1" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.08%)</title><rect x="278.1" y="915.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="281.1" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.08%)</title><rect x="278.1" y="899.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="281.1" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.08%)</title><rect x="278.1" y="883.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.1" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.08%)</title><rect x="278.1" y="867.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="281.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.40%)</title><rect x="279.1" y="995.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.40%)</title><rect x="279.1" y="979.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.32%)</title><rect x="279.1" y="963.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.16%)</title><rect x="279.1" y="947.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="282.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.16%)</title><rect x="280.9" y="947.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.9" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="281.9" y="931.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="284.9" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="281.9" y="915.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="284.9" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="281.9" y="899.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.9" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="281.9" y="883.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="284.9" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="281.9" y="867.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="284.9" y="878.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="281.9" y="851.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.9" y="862.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="281.9" y="835.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="281.9" y="819.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="284.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="281.9" y="803.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="281.9" y="787.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.08%)</title><rect x="281.9" y="771.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="284.9" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$182/1956871352.accept (1 samples, 0.08%)</title><rect x="281.9" y="755.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="284.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.08%)</title><rect x="282.8" y="963.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (3 samples, 0.24%)</title><rect x="283.7" y="995.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.24%)</title><rect x="283.7" y="979.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.24%)</title><rect x="283.7" y="963.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="284.7" y="947.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="284.7" y="931.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.7" y="942.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="284.7" y="915.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="287.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="285.6" y="931.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.6" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.run (803 samples, 63.58%)</title><rect x="286.5" y="1059.0" width="750.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.5" y="1070.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (803 samples, 63.58%)</title><rect x="286.5" y="1043.0" width="750.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.5" y="1054.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (803 samples, 63.58%)</title><rect x="286.5" y="1027.0" width="750.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="289.5" y="1038.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1536383163.run (577 samples, 45.68%)</title><rect x="287.5" y="1011.0" width="539.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.5" y="1022.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1536383163..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (577 samples, 45.68%)</title><rect x="287.5" y="995.0" width="539.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.5" y="1006.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (577 samples, 45.68%)</title><rect x="287.5" y="979.0" width="539.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="290.5" y="990.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (569 samples, 45.05%)</title><rect x="287.5" y="963.0" width="531.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.5" y="974.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.40%)</title><rect x="296.8" y="947.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (177 samples, 14.01%)</title><rect x="301.5" y="947.0" width="165.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.5" y="958.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/580718781.extract (177 samples, 14.01%)</title><rect x="301.5" y="931.0" width="165.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="304.5" y="942.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (177 samples, 14.01%)</title><rect x="301.5" y="915.0" width="165.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="304.5" y="926.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (177 samples, 14.01%)</title><rect x="301.5" y="899.0" width="165.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.5" y="910.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (177 samples, 14.01%)</title><rect x="301.5" y="883.0" width="165.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.5" y="894.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (177 samples, 14.01%)</title><rect x="301.5" y="867.0" width="165.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="304.5" y="878.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (64 samples, 5.07%)</title><rect x="301.5" y="851.0" width="59.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="304.5" y="862.0">com/fa..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="324.9" y="835.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="327.9" y="846.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="324.9" y="819.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="327.9" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="325.8" y="835.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="328.8" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.48%)</title><rect x="326.7" y="835.0" width="5.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="329.7" y="846.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="328.6" y="819.0" width="3.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="331.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (9 samples, 0.71%)</title><rect x="332.3" y="835.0" width="8.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="335.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (9 samples, 0.71%)</title><rect x="332.3" y="819.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="335.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (9 samples, 0.71%)</title><rect x="332.3" y="803.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="335.3" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="332.3" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="335.3" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="332.3" y="771.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="335.3" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="332.3" y="755.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="335.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.63%)</title><rect x="333.3" y="787.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="336.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (8 samples, 0.63%)</title><rect x="333.3" y="771.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 0.63%)</title><rect x="333.3" y="755.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (8 samples, 0.63%)</title><rect x="333.3" y="739.0" width="7.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="336.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (22 samples, 1.74%)</title><rect x="340.7" y="835.0" width="20.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="343.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (20 samples, 1.58%)</title><rect x="340.7" y="819.0" width="18.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="343.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.16%)</title><rect x="347.3" y="803.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="350.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.16%)</title><rect x="347.3" y="787.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="350.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (10 samples, 0.79%)</title><rect x="349.1" y="803.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="352.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (10 samples, 0.79%)</title><rect x="349.1" y="787.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="352.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.08%)</title><rect x="349.1" y="771.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="352.1" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="349.1" y="755.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="352.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (9 samples, 0.71%)</title><rect x="350.1" y="771.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="353.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.08%)</title><rect x="358.5" y="803.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="361.5" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="358.5" y="787.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="361.5" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="358.5" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="361.5" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="358.5" y="755.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="361.5" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="358.5" y="739.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="361.5" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="358.5" y="723.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="361.5" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="358.5" y="707.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="361.5" y="718.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="358.5" y="691.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="361.5" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="358.5" y="675.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="361.5" y="686.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="358.5" y="659.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="361.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.16%)</title><rect x="359.4" y="819.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="362.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (104 samples, 8.23%)</title><rect x="361.3" y="851.0" width="97.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="364.3" y="862.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="363.2" y="835.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.08%)</title><rect x="364.1" y="835.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="367.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (11 samples, 0.87%)</title><rect x="365.0" y="835.0" width="10.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.79%)</title><rect x="366.0" y="819.0" width="9.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="369.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (14 samples, 1.11%)</title><rect x="375.3" y="835.0" width="13.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="378.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.03%)</title><rect x="376.2" y="819.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="379.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.63%)</title><rect x="380.0" y="803.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="383.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (8 samples, 0.63%)</title><rect x="380.0" y="787.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="383.0" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="383.7" y="771.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="386.7" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="383.7" y="755.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="386.7" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="384.6" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="387.6" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="384.6" y="739.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="387.6" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="384.6" y="723.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="387.6" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="384.6" y="707.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="387.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.16%)</title><rect x="385.6" y="771.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="388.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="387.5" y="803.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (9 samples, 0.71%)</title><rect x="388.4" y="835.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="391.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.48%)</title><rect x="391.2" y="819.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="394.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (64 samples, 5.07%)</title><rect x="396.8" y="835.0" width="59.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="399.8" y="846.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.95%)</title><rect x="397.7" y="819.0" width="11.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.24%)</title><rect x="398.7" y="803.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="401.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.24%)</title><rect x="398.7" y="787.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="401.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.24%)</title><rect x="398.7" y="771.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="401.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.55%)</title><rect x="401.5" y="803.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="408.0" y="803.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="411.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="408.0" y="787.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.08%)</title><rect x="408.9" y="819.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (50 samples, 3.96%)</title><rect x="409.9" y="819.0" width="46.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="412.9" y="830.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (50 samples, 3.96%)</title><rect x="409.9" y="803.0" width="46.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="412.9" y="814.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="410.8" y="787.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="413.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (48 samples, 3.80%)</title><rect x="411.7" y="787.0" width="44.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="414.7" y="798.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.19%)</title><rect x="416.4" y="771.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.55%)</title><rect x="419.2" y="755.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="422.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.55%)</title><rect x="419.2" y="739.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="422.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.55%)</title><rect x="419.2" y="723.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="422.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.48%)</title><rect x="420.2" y="707.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="423.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.48%)</title><rect x="420.2" y="691.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="423.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.16%)</title><rect x="423.9" y="675.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="426.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.16%)</title><rect x="423.9" y="659.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="426.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.16%)</title><rect x="425.8" y="755.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="428.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="427.6" y="755.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="430.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="427.6" y="739.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="430.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.16%)</title><rect x="428.6" y="755.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="431.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.63%)</title><rect x="430.4" y="771.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="433.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.63%)</title><rect x="430.4" y="755.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="433.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.63%)</title><rect x="430.4" y="739.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="433.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.63%)</title><rect x="430.4" y="723.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="433.4" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.63%)</title><rect x="430.4" y="707.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="433.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.16%)</title><rect x="437.9" y="771.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="440.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.79%)</title><rect x="439.8" y="771.0" width="9.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="442.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.79%)</title><rect x="439.8" y="755.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="442.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.79%)</title><rect x="439.8" y="739.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="442.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.79%)</title><rect x="439.8" y="723.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="442.8" y="734.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.79%)</title><rect x="439.8" y="707.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="442.8" y="718.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.48%)</title><rect x="443.5" y="691.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="446.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="445.4" y="675.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="448.4" y="686.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (3 samples, 0.24%)</title><rect x="446.3" y="675.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="449.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.16%)</title><rect x="449.1" y="771.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="452.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.16%)</title><rect x="449.1" y="755.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="452.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.16%)</title><rect x="449.1" y="739.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="452.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (6 samples, 0.48%)</title><rect x="451.0" y="771.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="454.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="455.7" y="755.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="458.7" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="455.7" y="739.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="458.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.08%)</title><rect x="456.6" y="835.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="459.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.08%)</title><rect x="457.5" y="835.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="460.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.71%)</title><rect x="458.5" y="851.0" width="8.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="461.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.71%)</title><rect x="458.5" y="835.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="461.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.71%)</title><rect x="458.5" y="819.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="461.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.71%)</title><rect x="458.5" y="803.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="461.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.71%)</title><rect x="458.5" y="787.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="461.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (343 samples, 27.16%)</title><rect x="466.9" y="947.0" width="320.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="469.9" y="958.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (66 samples, 5.23%)</title><rect x="467.8" y="931.0" width="61.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="470.8" y="942.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="467.8" y="915.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="470.8" y="926.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (65 samples, 5.15%)</title><rect x="468.7" y="915.0" width="60.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="471.7" y="926.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (63 samples, 4.99%)</title><rect x="470.6" y="899.0" width="58.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="473.6" y="910.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.63%)</title><rect x="472.5" y="883.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="475.5" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.63%)</title><rect x="472.5" y="867.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="475.5" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.63%)</title><rect x="472.5" y="851.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="475.5" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.63%)</title><rect x="472.5" y="835.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="475.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.16%)</title><rect x="478.1" y="819.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.1" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.16%)</title><rect x="478.1" y="803.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="481.1" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (53 samples, 4.20%)</title><rect x="479.9" y="883.0" width="49.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="482.9" y="894.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (15 samples, 1.19%)</title><rect x="515.4" y="867.0" width="14.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="518.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.24%)</title><rect x="515.4" y="851.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="518.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (12 samples, 0.95%)</title><rect x="518.3" y="851.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="521.3" y="862.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.16%)</title><rect x="526.7" y="835.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="529.7" y="846.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="528.5" y="835.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="531.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.24%)</title><rect x="529.5" y="931.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="532.5" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.24%)</title><rect x="529.5" y="915.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="532.5" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="529.5" y="899.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="532.5" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="529.5" y="883.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="532.5" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="529.5" y="867.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="532.5" y="878.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.16%)</title><rect x="530.4" y="899.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="533.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (188 samples, 14.89%)</title><rect x="532.3" y="931.0" width="175.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="535.3" y="942.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (188 samples, 14.89%)</title><rect x="532.3" y="915.0" width="175.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="535.3" y="926.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.40%)</title><rect x="542.5" y="899.0" width="4.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="545.5" y="910.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.40%)</title><rect x="542.5" y="883.0" width="4.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="545.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (70 samples, 5.54%)</title><rect x="547.2" y="899.0" width="65.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="550.2" y="910.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (55 samples, 4.35%)</title><rect x="556.6" y="883.0" width="51.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="559.6" y="894.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (54 samples, 4.28%)</title><rect x="557.5" y="867.0" width="50.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="560.5" y="878.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (28 samples, 2.22%)</title><rect x="568.7" y="851.0" width="26.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="571.7" y="862.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (28 samples, 2.22%)</title><rect x="568.7" y="835.0" width="26.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="571.7" y="846.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (28 samples, 2.22%)</title><rect x="568.7" y="819.0" width="26.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="571.7" y="830.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (15 samples, 1.19%)</title><rect x="578.0" y="803.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="581.0" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (8 samples, 0.63%)</title><rect x="578.0" y="787.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="581.0" y="798.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.40%)</title><rect x="578.0" y="771.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="581.0" y="782.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.24%)</title><rect x="579.9" y="755.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="582.9" y="766.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="582.7" y="771.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="585.7" y="782.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.16%)</title><rect x="583.7" y="771.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="586.7" y="782.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="584.6" y="755.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="587.6" y="766.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="584.6" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="587.6" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.55%)</title><rect x="585.5" y="787.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="588.5" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.32%)</title><rect x="586.5" y="771.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="589.5" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.16%)</title><rect x="586.5" y="755.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="589.5" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.16%)</title><rect x="586.5" y="739.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="589.5" y="750.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="586.5" y="723.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="589.5" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="586.5" y="707.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="589.5" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.08%)</title><rect x="586.5" y="691.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="589.5" y="702.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.08%)</title><rect x="586.5" y="675.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="589.5" y="686.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="587.4" y="723.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="590.4" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="587.4" y="707.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="590.4" y="718.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="587.4" y="691.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="590.4" y="702.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="587.4" y="675.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="590.4" y="686.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.08%)</title><rect x="587.4" y="659.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="590.4" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="588.3" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="591.3" y="766.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="589.3" y="755.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="592.3" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="590.2" y="771.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="593.2" y="782.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.08%)</title><rect x="591.1" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="594.1" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="592.1" y="803.0" width="2.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="595.1" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.55%)</title><rect x="594.9" y="851.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="597.9" y="862.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.40%)</title><rect x="601.4" y="851.0" width="4.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="604.4" y="862.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="606.1" y="851.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="609.1" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="607.0" y="851.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="610.0" y="862.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="607.9" y="883.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="610.9" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.32%)</title><rect x="608.9" y="883.0" width="3.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="611.9" y="894.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (12 samples, 0.95%)</title><rect x="612.6" y="899.0" width="11.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="615.6" y="910.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.08%)</title><rect x="612.6" y="883.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="615.6" y="894.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="612.6" y="867.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="615.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="612.6" y="851.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="615.6" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.toString (11 samples, 0.87%)</title><rect x="613.5" y="883.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="616.5" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.08%)</title><rect x="613.5" y="867.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="616.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.16%)</title><rect x="614.5" y="867.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="617.5" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="614.5" y="851.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="617.5" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="614.5" y="835.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="617.5" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="614.5" y="819.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="617.5" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="614.5" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="617.5" y="814.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="614.5" y="787.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="617.5" y="798.0"></text>
</g>
<g>
<title>G1CollectorPolicy::is_young_list_full() (1 samples, 0.08%)</title><rect x="614.5" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="617.5" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="615.4" y="819.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="618.4" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.63%)</title><rect x="616.3" y="867.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="619.3" y="878.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (90 samples, 7.13%)</title><rect x="623.8" y="899.0" width="84.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="626.8" y="910.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (89 samples, 7.05%)</title><rect x="624.8" y="883.0" width="83.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="627.8" y="894.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.48%)</title><rect x="624.8" y="867.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="627.8" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.48%)</title><rect x="624.8" y="851.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="627.8" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.48%)</title><rect x="624.8" y="835.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="627.8" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.48%)</title><rect x="624.8" y="819.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="627.8" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.16%)</title><rect x="628.5" y="803.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="631.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.16%)</title><rect x="628.5" y="787.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="631.5" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (83 samples, 6.57%)</title><rect x="630.4" y="867.0" width="77.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="633.4" y="878.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (81 samples, 6.41%)</title><rect x="632.2" y="851.0" width="75.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="635.2" y="862.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.putVal (46 samples, 3.64%)</title><rect x="664.9" y="835.0" width="43.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="667.9" y="846.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.24%)</title><rect x="683.6" y="819.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="686.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (14 samples, 1.11%)</title><rect x="686.4" y="819.0" width="13.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="689.4" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="697.6" y="803.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="700.6" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="698.6" y="787.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="701.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="698.6" y="771.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="701.6" y="782.0"></text>
</g>
<g>
<title>vtable stub (9 samples, 0.71%)</title><rect x="699.5" y="819.0" width="8.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="702.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (63 samples, 4.99%)</title><rect x="707.9" y="931.0" width="58.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="710.9" y="942.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (61 samples, 4.83%)</title><rect x="709.8" y="915.0" width="57.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.8" y="926.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1338907150.process (33 samples, 2.61%)</title><rect x="714.4" y="899.0" width="30.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="717.4" y="910.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (32 samples, 2.53%)</title><rect x="714.4" y="883.0" width="29.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="717.4" y="894.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (29 samples, 2.30%)</title><rect x="716.3" y="867.0" width="27.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="719.3" y="878.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.24%)</title><rect x="731.3" y="851.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="734.3" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.24%)</title><rect x="731.3" y="835.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="734.3" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.24%)</title><rect x="731.3" y="819.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="734.3" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.24%)</title><rect x="731.3" y="803.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="734.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.16%)</title><rect x="732.2" y="787.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="735.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (10 samples, 0.79%)</title><rect x="734.1" y="851.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="737.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="736.9" y="835.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="739.9" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="736.9" y="819.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="739.9" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.48%)</title><rect x="737.8" y="835.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="740.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.48%)</title><rect x="737.8" y="819.0" width="5.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="740.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="743.4" y="867.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="746.4" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="743.4" y="851.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="746.4" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="743.4" y="835.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="746.4" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="743.4" y="819.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="746.4" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="743.4" y="803.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="746.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="744.3" y="883.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="747.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.24%)</title><rect x="745.3" y="899.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="748.3" y="910.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.24%)</title><rect x="745.3" y="883.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="748.3" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1172131546.linkToTargetMethod (10 samples, 0.79%)</title><rect x="748.1" y="899.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="751.1" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (10 samples, 0.79%)</title><rect x="748.1" y="883.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="751.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/1452480981.get$Lambda (10 samples, 0.79%)</title><rect x="748.1" y="867.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="751.1" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="748.1" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="751.1" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="748.1" y="835.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="751.1" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="748.1" y="819.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="751.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/1452480981.&lt;init&gt; (9 samples, 0.71%)</title><rect x="749.0" y="851.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="752.0" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="757.4" y="899.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="760.4" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="757.4" y="883.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="760.4" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.32%)</title><rect x="758.4" y="899.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="761.4" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.32%)</title><rect x="758.4" y="883.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="761.4" y="894.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="758.4" y="867.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="761.4" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.24%)</title><rect x="759.3" y="867.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="762.3" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="762.1" y="899.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="765.1" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.32%)</title><rect x="763.0" y="899.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="766.0" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="764.0" y="883.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="767.0" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="764.0" y="867.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="767.0" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="764.0" y="851.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="767.0" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="764.0" y="835.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.0" y="846.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="764.0" y="819.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="767.0" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.08%)</title><rect x="764.9" y="883.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="767.9" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="764.9" y="867.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="767.9" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="764.9" y="851.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="767.9" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="764.9" y="835.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="767.9" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="765.8" y="883.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="768.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.16%)</title><rect x="766.8" y="931.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="769.8" y="942.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.16%)</title><rect x="766.8" y="915.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="769.8" y="926.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.16%)</title><rect x="766.8" y="899.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="769.8" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="766.8" y="883.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="769.8" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="767.7" y="867.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="770.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="767.7" y="851.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="770.7" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="767.7" y="835.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="770.7" y="846.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="767.7" y="819.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="770.7" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/684195040.linkToTargetMethod (1 samples, 0.08%)</title><rect x="768.6" y="931.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="771.6" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.08%)</title><rect x="768.6" y="915.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="771.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/917160777.get$Lambda (1 samples, 0.08%)</title><rect x="768.6" y="899.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="771.6" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="768.6" y="883.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="771.6" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="768.6" y="867.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="771.6" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="768.6" y="851.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="771.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.50%)</title><rect x="769.6" y="931.0" width="17.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="772.6" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.32%)</title><rect x="772.4" y="915.0" width="3.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="775.4" y="926.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="772.4" y="899.0" width="3.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="775.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.87%)</title><rect x="776.1" y="915.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="779.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.87%)</title><rect x="776.1" y="899.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="779.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$289/848642372.accept (11 samples, 0.87%)</title><rect x="776.1" y="883.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="779.1" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="776.1" y="867.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="779.1" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="776.1" y="851.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="779.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (10 samples, 0.79%)</title><rect x="777.0" y="867.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="780.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/2123515201.complete (10 samples, 0.79%)</title><rect x="777.0" y="851.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="780.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (10 samples, 0.79%)</title><rect x="777.0" y="835.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="780.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1801720742.complete (10 samples, 0.79%)</title><rect x="777.0" y="819.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="780.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (10 samples, 0.79%)</title><rect x="777.0" y="803.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="780.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (10 samples, 0.79%)</title><rect x="777.0" y="787.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="780.0" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.79%)</title><rect x="777.0" y="771.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="780.0" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.79%)</title><rect x="777.0" y="755.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="780.0" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.40%)</title><rect x="780.8" y="739.0" width="4.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="783.8" y="750.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.40%)</title><rect x="780.8" y="723.0" width="4.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="783.8" y="734.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="785.5" y="739.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="788.5" y="750.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="786.4" y="915.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="789.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (25 samples, 1.98%)</title><rect x="787.3" y="947.0" width="23.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="790.3" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 1.74%)</title><rect x="790.1" y="931.0" width="20.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="793.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (22 samples, 1.74%)</title><rect x="790.1" y="915.0" width="20.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="793.1" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$289/848642372.accept (22 samples, 1.74%)</title><rect x="790.1" y="899.0" width="20.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (22 samples, 1.74%)</title><rect x="790.1" y="883.0" width="20.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="793.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/2123515201.complete (22 samples, 1.74%)</title><rect x="790.1" y="867.0" width="20.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (22 samples, 1.74%)</title><rect x="790.1" y="851.0" width="20.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="793.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1801720742.complete (17 samples, 1.35%)</title><rect x="790.1" y="835.0" width="15.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="793.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (17 samples, 1.35%)</title><rect x="790.1" y="819.0" width="15.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="793.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (17 samples, 1.35%)</title><rect x="790.1" y="803.0" width="15.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="793.1" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (17 samples, 1.35%)</title><rect x="790.1" y="787.0" width="15.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="793.1" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (17 samples, 1.35%)</title><rect x="790.1" y="771.0" width="15.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="793.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/999352093.complete (5 samples, 0.40%)</title><rect x="806.0" y="835.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="809.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$67 (5 samples, 0.40%)</title><rect x="806.0" y="819.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="809.0" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.16%)</title><rect x="808.8" y="803.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="811.8" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.71%)</title><rect x="810.7" y="947.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="813.7" y="958.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.71%)</title><rect x="810.7" y="931.0" width="8.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="813.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="819.1" y="963.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="822.1" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="819.1" y="947.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="822.1" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="819.1" y="931.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="822.1" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="819.1" y="915.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="822.1" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="819.1" y="899.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="822.1" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="819.1" y="883.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="822.1" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="819.1" y="867.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="822.1" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="819.1" y="851.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="822.1" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="819.1" y="835.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="822.1" y="846.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="819.1" y="819.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="822.1" y="830.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.08%)</title><rect x="819.1" y="803.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="822.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 0.55%)</title><rect x="820.0" y="963.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="823.0" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.24%)</title><rect x="822.8" y="947.0" width="2.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="825.8" y="958.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="822.8" y="931.0" width="2.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="825.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="825.6" y="947.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="828.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (8 samples, 0.63%)</title><rect x="826.6" y="1011.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="829.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.63%)</title><rect x="826.6" y="995.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="829.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.63%)</title><rect x="826.6" y="979.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="829.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.63%)</title><rect x="826.6" y="963.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="829.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1536383163.run (1 samples, 0.08%)</title><rect x="833.1" y="947.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="836.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (217 samples, 17.18%)</title><rect x="834.0" y="1011.0" width="202.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="837.0" y="1022.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (216 samples, 17.10%)</title><rect x="835.0" y="995.0" width="201.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="838.0" y="1006.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (187 samples, 14.81%)</title><rect x="838.7" y="979.0" width="174.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="841.7" y="990.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.16%)</title><rect x="850.9" y="963.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="853.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.16%)</title><rect x="850.9" y="947.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="853.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.08%)</title><rect x="852.7" y="963.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="855.7" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="852.7" y="947.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="855.7" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="852.7" y="931.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="855.7" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="852.7" y="915.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="855.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (19 samples, 1.50%)</title><rect x="853.7" y="963.0" width="17.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="856.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.32%)</title><rect x="871.4" y="963.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="874.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.32%)</title><rect x="871.4" y="947.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="874.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.32%)</title><rect x="871.4" y="931.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="874.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.32%)</title><rect x="871.4" y="915.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="874.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (147 samples, 11.64%)</title><rect x="875.1" y="963.0" width="137.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="878.1" y="974.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (147 samples, 11.64%)</title><rect x="875.1" y="947.0" width="137.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="878.1" y="958.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="879.8" y="931.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="882.8" y="942.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.16%)</title><rect x="881.7" y="931.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="884.7" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.24%)</title><rect x="883.6" y="931.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="886.6" y="942.0"></text>
</g>
<g>
<title>Unsafe_Park (134 samples, 10.61%)</title><rect x="886.4" y="931.0" width="125.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="889.4" y="942.0">Unsafe_Park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.24%)</title><rect x="889.2" y="915.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="892.2" y="926.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (13 samples, 1.03%)</title><rect x="892.0" y="915.0" width="12.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="895.0" y="926.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.40%)</title><rect x="894.8" y="899.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="897.8" y="910.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.24%)</title><rect x="896.6" y="883.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="899.6" y="894.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.24%)</title><rect x="896.6" y="867.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="899.6" y="878.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="899.4" y="899.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="902.4" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.32%)</title><rect x="900.4" y="899.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="903.4" y="910.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="904.1" y="915.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="907.1" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.16%)</title><rect x="905.0" y="915.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="908.0" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.24%)</title><rect x="906.9" y="915.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="909.9" y="926.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.55%)</title><rect x="909.7" y="915.0" width="6.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="912.7" y="926.0"></text>
</g>
<g>
<title>__lll_unlock_wake (30 samples, 2.38%)</title><rect x="916.3" y="915.0" width="28.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="919.3" y="926.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (55 samples, 4.35%)</title><rect x="944.3" y="915.0" width="51.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="947.3" y="926.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.40%)</title><rect x="995.7" y="915.0" width="4.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="998.7" y="926.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="1000.3" y="915.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1003.3" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.16%)</title><rect x="1001.3" y="915.0" width="1.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1004.3" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="1003.1" y="915.0" width="1.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1006.1" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="1005.0" y="915.0" width="1.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1008.0" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="1006.9" y="915.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1009.9" y="926.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="1007.8" y="915.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1010.8" y="926.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.24%)</title><rect x="1008.7" y="915.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1011.7" y="926.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="1011.6" y="931.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1014.6" y="942.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="1012.5" y="963.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1015.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (25 samples, 1.98%)</title><rect x="1013.4" y="979.0" width="23.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1016.4" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (25 samples, 1.98%)</title><rect x="1013.4" y="963.0" width="23.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1016.4" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (25 samples, 1.98%)</title><rect x="1013.4" y="947.0" width="23.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1016.4" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (25 samples, 1.98%)</title><rect x="1013.4" y="931.0" width="23.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1016.4" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.08%)</title><rect x="1035.8" y="915.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1038.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1036.8" y="1059.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1039.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1036.8" y="1043.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1039.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1036.8" y="1027.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1039.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="1036.8" y="1011.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1039.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.08%)</title><rect x="1036.8" y="995.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1039.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.08%)</title><rect x="1036.8" y="979.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1039.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.08%)</title><rect x="1036.8" y="963.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1039.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.08%)</title><rect x="1036.8" y="947.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1039.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="1036.8" y="931.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1039.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="1036.8" y="915.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1039.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="1036.8" y="899.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1039.8" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="1036.8" y="883.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1039.8" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.08%)</title><rect x="1036.8" y="867.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1039.8" y="878.0"></text>
</g>
<g>
<title>start_thread (163 samples, 12.91%)</title><rect x="1037.7" y="1059.0" width="152.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1040.7" y="1070.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (163 samples, 12.91%)</title><rect x="1037.7" y="1043.0" width="152.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1040.7" y="1054.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 1.98%)</title><rect x="1037.7" y="1027.0" width="23.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1040.7" y="1038.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.48%)</title><rect x="1037.7" y="1011.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1040.7" y="1022.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.48%)</title><rect x="1037.7" y="995.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1040.7" y="1006.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1037.7" y="979.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1040.7" y="990.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.40%)</title><rect x="1038.6" y="979.0" width="4.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1041.6" y="990.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.50%)</title><rect x="1043.3" y="1011.0" width="17.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1046.3" y="1022.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.40%)</title><rect x="1043.3" y="995.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.3" y="1006.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.08%)</title><rect x="1043.3" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.3" y="990.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1044.3" y="979.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1047.3" y="990.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.24%)</title><rect x="1045.2" y="979.0" width="2.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1048.2" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.55%)</title><rect x="1048.0" y="995.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1051.0" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.40%)</title><rect x="1048.0" y="979.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1051.0" y="990.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (4 samples, 0.32%)</title><rect x="1048.0" y="963.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1051.0" y="974.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (4 samples, 0.32%)</title><rect x="1048.0" y="947.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1051.0" y="958.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (4 samples, 0.32%)</title><rect x="1048.0" y="931.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1051.0" y="942.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1051.7" y="963.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1054.7" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="1052.7" y="979.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1055.7" y="990.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.16%)</title><rect x="1052.7" y="963.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1055.7" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.55%)</title><rect x="1054.5" y="995.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1057.5" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.55%)</title><rect x="1054.5" y="979.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1057.5" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.55%)</title><rect x="1054.5" y="963.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1057.5" y="974.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.55%)</title><rect x="1054.5" y="947.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.5" y="958.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.55%)</title><rect x="1054.5" y="931.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1057.5" y="942.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.55%)</title><rect x="1054.5" y="915.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1057.5" y="926.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.40%)</title><rect x="1055.5" y="899.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1058.5" y="910.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (5 samples, 0.40%)</title><rect x="1055.5" y="883.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1058.5" y="894.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_size(oopDesc*) const (1 samples, 0.08%)</title><rect x="1060.1" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1063.1" y="910.0"></text>
</g>
<g>
<title>JavaThread::run() (135 samples, 10.69%)</title><rect x="1061.1" y="1027.0" width="126.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1064.1" y="1038.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (135 samples, 10.69%)</title><rect x="1061.1" y="1011.0" width="126.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1064.1" y="1022.0">JavaThread::thre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (135 samples, 10.69%)</title><rect x="1061.1" y="995.0" width="126.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1064.1" y="1006.0">CompileBroker::c..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (135 samples, 10.69%)</title><rect x="1061.1" y="979.0" width="126.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.1" y="990.0">CompileBroker::i..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (134 samples, 10.61%)</title><rect x="1061.1" y="963.0" width="125.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1064.1" y="974.0">C2Compiler::com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (134 samples, 10.61%)</title><rect x="1061.1" y="947.0" width="125.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1064.1" y="958.0">Compile::Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (60 samples, 4.75%)</title><rect x="1061.1" y="931.0" width="56.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1064.1" y="942.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.08%)</title><rect x="1061.1" y="915.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1064.1" y="926.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="1061.1" y="899.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1064.1" y="910.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="1061.1" y="883.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1064.1" y="894.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.40%)</title><rect x="1062.0" y="915.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1065.0" y="926.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.08%)</title><rect x="1062.0" y="899.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1065.0" y="910.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.08%)</title><rect x="1062.9" y="899.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.9" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="1062.9" y="883.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1065.9" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.16%)</title><rect x="1063.9" y="899.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1066.9" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.16%)</title><rect x="1063.9" y="883.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1066.9" y="894.0"></text>
</g>
<g>
<title>compN_rReg_imm_klassNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="1065.7" y="899.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.7" y="910.0"></text>
</g>
<g>
<title>TypeKlassPtr::get_con() const (1 samples, 0.08%)</title><rect x="1065.7" y="883.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.7" y="894.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.48%)</title><rect x="1066.7" y="915.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.7" y="926.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 0.48%)</title><rect x="1066.7" y="899.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1069.7" y="910.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1067.6" y="883.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.6" y="894.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.24%)</title><rect x="1068.5" y="883.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1071.5" y="894.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1070.4" y="867.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.4" y="878.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1070.4" y="851.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1073.4" y="862.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.08%)</title><rect x="1070.4" y="835.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1073.4" y="846.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1071.3" y="883.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1074.3" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.08%)</title><rect x="1072.3" y="915.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1075.3" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.08%)</title><rect x="1072.3" y="899.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1075.3" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1072.3" y="883.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1075.3" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (47 samples, 3.72%)</title><rect x="1073.2" y="915.0" width="43.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.2" y="926.0">Phas..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1074.1" y="899.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.1" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1075.1" y="899.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1078.1" y="910.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1076.0" y="899.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1079.0" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.24%)</title><rect x="1077.0" y="899.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.0" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1077.0" y="883.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.0" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.16%)</title><rect x="1077.9" y="883.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.9" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1078.8" y="867.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.8" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.16%)</title><rect x="1079.8" y="899.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1082.8" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.08%)</title><rect x="1080.7" y="883.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1083.7" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.63%)</title><rect x="1081.6" y="899.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.6" y="910.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.08%)</title><rect x="1087.2" y="883.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1090.2" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.08%)</title><rect x="1088.2" y="883.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.2" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.63%)</title><rect x="1089.1" y="899.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1092.1" y="910.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.08%)</title><rect x="1091.0" y="883.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.0" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1091.9" y="883.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1094.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.16%)</title><rect x="1093.8" y="883.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.8" y="894.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="1095.6" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.6" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.24%)</title><rect x="1096.6" y="899.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1099.6" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.16%)</title><rect x="1097.5" y="883.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1100.5" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.08%)</title><rect x="1099.4" y="899.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1102.4" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.24%)</title><rect x="1100.3" y="899.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.3" y="910.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1102.2" y="883.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.2" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="1103.1" y="899.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.1" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.32%)</title><rect x="1104.0" y="899.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.0" y="910.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1105.9" y="883.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1106.8" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.8" y="894.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.16%)</title><rect x="1107.8" y="899.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.8" y="910.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.16%)</title><rect x="1107.8" y="883.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.8" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.08%)</title><rect x="1108.7" y="867.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.7" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.16%)</title><rect x="1109.7" y="899.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.7" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1110.6" y="883.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.6" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.16%)</title><rect x="1111.5" y="899.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.5" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1111.5" y="883.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.5" y="894.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.24%)</title><rect x="1113.4" y="899.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.4" y="910.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1115.3" y="883.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.3" y="894.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="1116.2" y="899.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.2" y="910.0"></text>
</g>
<g>
<title>Compile::Optimize() (64 samples, 5.07%)</title><rect x="1117.1" y="931.0" width="59.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.1" y="942.0">Compil..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1117.1" y="915.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.1" y="926.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.08%)</title><rect x="1118.1" y="915.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.1" y="926.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1118.1" y="899.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.1" y="910.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1118.1" y="883.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.1" y="894.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1118.1" y="867.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.1" y="878.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1118.1" y="851.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.1" y="862.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1118.1" y="835.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.1" y="846.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.08%)</title><rect x="1118.1" y="819.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.1" y="830.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.08%)</title><rect x="1118.1" y="803.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.1" y="814.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1119.0" y="915.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.0" y="926.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="1119.0" y="899.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.0" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (50 samples, 3.96%)</title><rect x="1119.9" y="915.0" width="46.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.9" y="926.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.16%)</title><rect x="1119.9" y="899.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.24%)</title><rect x="1121.8" y="899.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.8" y="910.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.08%)</title><rect x="1123.7" y="883.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.7" y="894.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1123.7" y="867.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1126.7" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (39 samples, 3.09%)</title><rect x="1124.6" y="899.0" width="36.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.6" y="910.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (39 samples, 3.09%)</title><rect x="1124.6" y="883.0" width="36.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.6" y="894.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1125.5" y="867.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1126.5" y="867.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (35 samples, 2.77%)</title><rect x="1127.4" y="867.0" width="32.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.4" y="878.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (9 samples, 0.71%)</title><rect x="1151.7" y="851.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.7" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.08%)</title><rect x="1160.1" y="867.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.24%)</title><rect x="1161.0" y="899.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.0" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.16%)</title><rect x="1162.0" y="883.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.24%)</title><rect x="1163.8" y="899.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.8" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1165.7" y="883.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.7" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.08%)</title><rect x="1165.7" y="867.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.7" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.71%)</title><rect x="1166.6" y="915.0" width="8.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.6" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.71%)</title><rect x="1166.6" y="899.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.6" y="910.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1166.6" y="883.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.6" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1166.6" y="867.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.6" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1166.6" y="851.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.6" y="862.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1166.6" y="835.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.6" y="846.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1167.6" y="883.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.6" y="894.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1167.6" y="867.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.6" y="878.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.08%)</title><rect x="1167.6" y="851.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.6" y="862.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1167.6" y="835.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.6" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1167.6" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.6" y="830.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1167.6" y="803.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.6" y="814.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1167.6" y="787.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.6" y="798.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="1167.6" y="771.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.6" y="782.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1168.5" y="867.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.5" y="878.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1168.5" y="851.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.5" y="862.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1168.5" y="835.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1169.4" y="883.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.4" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1170.4" y="883.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.4" y="894.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1171.3" y="883.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.3" y="894.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1172.2" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.2" y="894.0"></text>
</g>
<g>
<title>TypeInt::hash() const (1 samples, 0.08%)</title><rect x="1172.2" y="867.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.2" y="878.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1173.2" y="883.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.2" y="894.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.16%)</title><rect x="1173.2" y="867.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.2" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1173.2" y="851.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.2" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1173.2" y="835.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.2" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1173.2" y="819.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.2" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1173.2" y="803.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.2" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1173.2" y="787.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.2" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1173.2" y="771.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.2" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1173.2" y="755.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.2" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.2" y="739.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.2" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.2" y="723.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.2" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.2" y="707.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.2" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.2" y="691.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.2" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.2" y="675.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.2" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.2" y="659.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.2" y="670.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1173.2" y="643.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.2" y="654.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1173.2" y="627.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.2" y="638.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1174.1" y="739.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.1" y="750.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1174.1" y="723.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.1" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1175.1" y="915.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.1" y="926.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1175.1" y="899.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.1" y="910.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.08%)</title><rect x="1175.1" y="883.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.1" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1175.1" y="867.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.1" y="878.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1175.1" y="851.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.1" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1176.0" y="915.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.0" y="926.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.08%)</title><rect x="1176.0" y="899.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="910.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1176.0" y="883.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="894.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_load(Node*, Node*, Node*, int, Type const*, BasicType) (1 samples, 0.08%)</title><rect x="1176.0" y="867.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.0" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.08%)</title><rect x="1176.0" y="851.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="862.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1176.0" y="835.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.0" y="846.0"></text>
</g>
<g>
<title>TypeKlassPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1176.0" y="819.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="830.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1176.0" y="803.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="814.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1176.0" y="787.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="798.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1176.0" y="771.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.71%)</title><rect x="1176.9" y="931.0" width="8.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.71%)</title><rect x="1176.9" y="915.0" width="8.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.71%)</title><rect x="1176.9" y="899.0" width="8.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.71%)</title><rect x="1176.9" y="883.0" width="8.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.71%)</title><rect x="1176.9" y="867.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.71%)</title><rect x="1176.9" y="851.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="862.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1176.9" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="846.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1176.9" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="830.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1176.9" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1176.9" y="787.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1176.9" y="771.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1176.9" y="755.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.9" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1176.9" y="739.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1176.9" y="723.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1176.9" y="707.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="718.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1176.9" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1176.9" y="675.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1176.9" y="659.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1176.9" y="643.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1176.9" y="627.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1176.9" y="611.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="622.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.08%)</title><rect x="1176.9" y="595.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="606.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1176.9" y="579.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1179.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.55%)</title><rect x="1177.9" y="835.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.55%)</title><rect x="1177.9" y="819.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.48%)</title><rect x="1177.9" y="803.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.48%)</title><rect x="1177.9" y="787.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.48%)</title><rect x="1177.9" y="771.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.48%)</title><rect x="1177.9" y="755.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.32%)</title><rect x="1177.9" y="739.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.32%)</title><rect x="1177.9" y="723.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.32%)</title><rect x="1177.9" y="707.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.32%)</title><rect x="1177.9" y="691.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.32%)</title><rect x="1177.9" y="675.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.32%)</title><rect x="1177.9" y="659.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1177.9" y="643.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1177.9" y="627.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1177.9" y="611.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1177.9" y="595.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1177.9" y="579.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_heads(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.9" y="563.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.9" y="547.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.9" y="531.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.9" y="515.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.08%)</title><rect x="1177.9" y="499.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.8" y="643.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.8" y="627.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="638.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1178.8" y="611.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="622.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1178.8" y="595.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="606.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1178.8" y="579.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="590.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.08%)</title><rect x="1178.8" y="563.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.7" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.7" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.7" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.7" y="611.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.7" y="595.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.7" y="579.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.7" y="563.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1179.7" y="547.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1179.7" y="531.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="542.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1179.7" y="515.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="526.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1179.7" y="499.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="510.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1179.7" y="483.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="494.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1179.7" y="467.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="478.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.08%)</title><rect x="1179.7" y="451.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="462.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.08%)</title><rect x="1179.7" y="435.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1180.7" y="643.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.7" y="627.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.7" y="611.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="622.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1180.7" y="595.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="606.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1180.7" y="579.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="590.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1180.7" y="563.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="574.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1180.7" y="547.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="558.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1180.7" y="531.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="542.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1180.7" y="515.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.08%)</title><rect x="1180.7" y="499.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.7" y="483.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1181.6" y="739.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1181.6" y="723.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1181.6" y="707.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1181.6" y="691.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1181.6" y="675.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1181.6" y="659.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1181.6" y="643.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1181.6" y="627.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1181.6" y="611.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1181.6" y="595.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1181.6" y="579.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1181.6" y="563.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1181.6" y="547.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1181.6" y="531.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1181.6" y="515.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.6" y="526.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1181.6" y="499.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="510.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1181.6" y="483.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.6" y="494.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1181.6" y="467.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.6" y="478.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1181.6" y="451.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="462.0"></text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1181.6" y="435.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.5" y="499.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.5" y="483.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.5" y="467.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.5" y="451.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.5" y="435.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.5" y="419.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.5" y="403.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.5" y="387.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.5" y="371.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.5" y="355.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.5" y="339.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.5" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.5" y="323.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.5" y="307.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.5" y="291.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.5" y="275.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.5" y="259.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.5" y="243.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.5" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.5" y="227.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.5" y="211.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.5" y="195.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.5" y="179.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.5" y="163.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.5" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.5" y="147.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.5" y="131.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.5" y="115.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.5" y="99.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.5" y="83.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="94.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.5" y="67.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="78.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1182.5" y="51.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="62.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1182.5" y="35.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1185.5" y="46.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.08%)</title><rect x="1183.5" y="803.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.5" y="814.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.08%)</title><rect x="1183.5" y="787.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.5" y="798.0"></text>
</g>
<g>
<title>ciCallTypeData::translate_from(ProfileData const*) (1 samples, 0.08%)</title><rect x="1183.5" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.5" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1183.5" y="755.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.5" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1183.5" y="739.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.5" y="750.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.08%)</title><rect x="1183.5" y="723.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.5" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.4" y="835.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.4" y="819.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.4" y="803.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.4" y="787.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.4" y="771.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.4" y="755.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.4" y="739.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.4" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.4" y="723.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.4" y="707.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.4" y="691.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.4" y="675.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.4" y="659.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.4" y="643.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.4" y="627.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.4" y="611.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.4" y="595.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.4" y="579.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.4" y="563.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1184.4" y="547.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1184.4" y="531.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.4" y="542.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.08%)</title><rect x="1184.4" y="515.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.4" y="526.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1184.4" y="499.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.4" y="510.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1184.4" y="483.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="494.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1184.4" y="467.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.4" y="478.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.08%)</title><rect x="1184.4" y="451.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="462.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1184.4" y="435.0" width="0.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1187.4" y="446.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.08%)</title><rect x="1185.3" y="931.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.3" y="942.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.3" y="963.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.3" y="974.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1186.3" y="947.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.3" y="958.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1186.3" y="931.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.3" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1186.3" y="915.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.3" y="926.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1186.3" y="899.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.3" y="910.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.3" y="883.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.3" y="894.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1186.3" y="867.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.3" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1186.3" y="851.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.3" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1186.3" y="835.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.3" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1186.3" y="819.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.3" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1186.3" y="803.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.3" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1186.3" y="787.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.3" y="798.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1186.3" y="771.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.3" y="782.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1186.3" y="755.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.3" y="766.0"></text>
</g>
<g>
<title>LinkResolver::check_field_accessability(KlassHandle, KlassHandle, KlassHandle, fieldDescriptor&amp;, Thread*) (1 samples, 0.08%)</title><rect x="1186.3" y="739.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.3" y="750.0"></text>
</g>
<g>
<title>Reflection::verify_field_access(Klass*, Klass*, Klass*, AccessFlags, bool, bool) (1 samples, 0.08%)</title><rect x="1186.3" y="723.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.3" y="734.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.24%)</title><rect x="1187.2" y="1027.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.2" y="1038.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.24%)</title><rect x="1187.2" y="1011.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.2" y="1022.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.16%)</title><rect x="1187.2" y="995.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.2" y="1006.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.1" y="995.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.1" y="1006.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.1" y="979.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.1" y="990.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.1" y="963.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.1" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.1" y="947.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.1" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.1" y="931.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.1" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.08%)</title><rect x="1189.1" y="915.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.1" y="926.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.08%)</title><rect x="1189.1" y="899.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.1" y="910.0"></text>
</g>
<g>
<title>GCTraceTime::~GCTraceTime() (1 samples, 0.08%)</title><rect x="1189.1" y="883.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.1" y="894.0"></text>
</g>
<g>
<title>Ticks::stamp() (1 samples, 0.08%)</title><rect x="1189.1" y="867.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.1" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="1189.1" y="851.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1192.1" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="1189.1" y="835.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1192.1" y="846.0"></text>
</g>
</g>
</svg>
