<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1205"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1205"> </text>
<g id="frames">
<g>
<title>all (328 samples, 100.00%)</title><rect x="10.0" y="1171.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1182.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 6.71%)</title><rect x="10.0" y="1155.0" width="79.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (22 samples, 6.71%)</title><rect x="10.0" y="1139.0" width="79.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1150.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.30%)</title><rect x="10.0" y="1123.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.30%)</title><rect x="10.0" y="1107.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1403028924.accept (1 samples, 0.30%)</title><rect x="10.0" y="1091.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.30%)</title><rect x="10.0" y="1075.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.30%)</title><rect x="10.0" y="1059.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.30%)</title><rect x="13.6" y="1123.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.30%)</title><rect x="13.6" y="1107.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.6" y="1118.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.30%)</title><rect x="13.6" y="1091.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.30%)</title><rect x="13.6" y="1075.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.30%)</title><rect x="13.6" y="1059.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (11 samples, 3.35%)</title><rect x="17.2" y="1123.0" width="39.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.2" y="1134.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/693970737.accept (11 samples, 3.35%)</title><rect x="17.2" y="1107.0" width="39.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.2" y="1118.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (11 samples, 3.35%)</title><rect x="17.2" y="1091.0" width="39.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.2" y="1102.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.61%)</title><rect x="17.2" y="1075.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.61%)</title><rect x="17.2" y="1059.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.61%)</title><rect x="17.2" y="1043.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.61%)</title><rect x="17.2" y="1027.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.61%)</title><rect x="17.2" y="1011.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.61%)</title><rect x="17.2" y="995.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.61%)</title><rect x="24.4" y="1075.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.61%)</title><rect x="24.4" y="1059.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (7 samples, 2.13%)</title><rect x="31.6" y="1075.0" width="25.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.6" y="1086.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.30%)</title><rect x="35.2" y="1059.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.30%)</title><rect x="35.2" y="1043.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.2" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="35.2" y="1027.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="38.2" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.30%)</title><rect x="35.2" y="1011.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="38.2" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.30%)</title><rect x="35.2" y="995.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="38.2" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.30%)</title><rect x="35.2" y="979.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="38.2" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.52%)</title><rect x="38.8" y="1059.0" width="18.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="41.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.52%)</title><rect x="38.8" y="1043.0" width="18.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.61%)</title><rect x="38.8" y="1027.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.61%)</title><rect x="38.8" y="1011.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.8" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.61%)</title><rect x="38.8" y="995.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.8" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.61%)</title><rect x="38.8" y="979.0" width="7.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="41.8" y="990.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.91%)</title><rect x="46.0" y="1027.0" width="10.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 2.74%)</title><rect x="56.8" y="1123.0" width="32.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.8" y="1134.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 2.74%)</title><rect x="56.8" y="1107.0" width="32.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.8" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 1.22%)</title><rect x="56.8" y="1091.0" width="14.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.30%)</title><rect x="56.8" y="1075.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.30%)</title><rect x="56.8" y="1059.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="59.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.30%)</title><rect x="56.8" y="1043.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.30%)</title><rect x="56.8" y="1027.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.30%)</title><rect x="56.8" y="1011.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.30%)</title><rect x="56.8" y="995.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="59.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.30%)</title><rect x="56.8" y="979.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.30%)</title><rect x="56.8" y="963.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="59.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.30%)</title><rect x="56.8" y="947.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="59.8" y="958.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.30%)</title><rect x="56.8" y="931.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.8" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.30%)</title><rect x="56.8" y="915.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="59.8" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.30%)</title><rect x="56.8" y="899.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.8" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerLastTemporaryDirectBuffer (1 samples, 0.30%)</title><rect x="56.8" y="883.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.8" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerLast (1 samples, 0.30%)</title><rect x="56.8" y="867.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 0.91%)</title><rect x="60.4" y="1075.0" width="10.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.61%)</title><rect x="64.0" y="1059.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.61%)</title><rect x="64.0" y="1043.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="67.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.61%)</title><rect x="64.0" y="1027.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.61%)</title><rect x="64.0" y="1011.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.61%)</title><rect x="64.0" y="995.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.61%)</title><rect x="64.0" y="979.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="67.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.30%)</title><rect x="67.6" y="963.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 1.22%)</title><rect x="71.2" y="1091.0" width="14.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="74.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 1.22%)</title><rect x="71.2" y="1075.0" width="14.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.91%)</title><rect x="71.2" y="1059.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="74.2" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.30%)</title><rect x="71.2" y="1043.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="74.2" y="1054.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.30%)</title><rect x="71.2" y="1027.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="74.2" y="1038.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.30%)</title><rect x="71.2" y="1011.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="74.2" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.30%)</title><rect x="71.2" y="995.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="74.2" y="1006.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.30%)</title><rect x="71.2" y="979.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="74.2" y="990.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.30%)</title><rect x="71.2" y="963.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="74.2" y="974.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.30%)</title><rect x="71.2" y="947.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="74.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.30%)</title><rect x="74.8" y="1043.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.30%)</title><rect x="78.4" y="1043.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.30%)</title><rect x="78.4" y="1027.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="81.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.30%)</title><rect x="78.4" y="1011.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.30%)</title><rect x="78.4" y="995.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="81.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.30%)</title><rect x="78.4" y="979.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.30%)</title><rect x="82.0" y="1059.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="85.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.30%)</title><rect x="82.0" y="1043.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.30%)</title><rect x="82.0" y="1027.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="85.0" y="1038.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.30%)</title><rect x="82.0" y="1011.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.30%)</title><rect x="85.5" y="1091.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.30%)</title><rect x="85.5" y="1075.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="88.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.30%)</title><rect x="85.5" y="1059.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="88.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.30%)</title><rect x="85.5" y="1043.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.30%)</title><rect x="85.5" y="1027.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.30%)</title><rect x="85.5" y="1011.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.30%)</title><rect x="85.5" y="995.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.30%)</title><rect x="85.5" y="979.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.30%)</title><rect x="85.5" y="963.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="88.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.30%)</title><rect x="85.5" y="947.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.validate (1 samples, 0.30%)</title><rect x="85.5" y="931.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="88.5" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.run (187 samples, 57.01%)</title><rect x="89.1" y="1155.0" width="672.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.1" y="1166.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (187 samples, 57.01%)</title><rect x="89.1" y="1139.0" width="672.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.1" y="1150.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (187 samples, 57.01%)</title><rect x="89.1" y="1123.0" width="672.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="92.1" y="1134.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1591720025.run (173 samples, 52.74%)</title><rect x="89.1" y="1107.0" width="622.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="92.1" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1591720025.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (173 samples, 52.74%)</title><rect x="89.1" y="1091.0" width="622.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.1" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (173 samples, 52.74%)</title><rect x="89.1" y="1075.0" width="622.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.1" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (169 samples, 51.52%)</title><rect x="89.1" y="1059.0" width="608.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.1" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.30%)</title><rect x="107.1" y="1043.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (29 samples, 8.84%)</title><rect x="110.7" y="1043.0" width="104.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.7" y="1054.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (29 samples, 8.84%)</title><rect x="110.7" y="1027.0" width="104.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.7" y="1038.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (29 samples, 8.84%)</title><rect x="110.7" y="1011.0" width="104.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.7" y="1022.0">com/linecorp..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="110.7" y="995.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="113.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (28 samples, 8.54%)</title><rect x="114.3" y="995.0" width="100.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.3" y="1006.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (28 samples, 8.54%)</title><rect x="114.3" y="979.0" width="100.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="117.3" y="990.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (28 samples, 8.54%)</title><rect x="114.3" y="963.0" width="100.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="117.3" y="974.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 1.52%)</title><rect x="114.3" y="947.0" width="18.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="117.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 0.91%)</title><rect x="121.5" y="931.0" width="10.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="124.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.30%)</title><rect x="128.7" y="915.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="131.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.30%)</title><rect x="128.7" y="899.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="131.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.30%)</title><rect x="128.7" y="883.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.30%)</title><rect x="128.7" y="867.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.7" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="128.7" y="851.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="131.7" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.30%)</title><rect x="128.7" y="835.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="131.7" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.30%)</title><rect x="128.7" y="819.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="131.7" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.30%)</title><rect x="128.7" y="803.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="131.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (22 samples, 6.71%)</title><rect x="132.3" y="947.0" width="79.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="135.3" y="958.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.30%)</title><rect x="135.9" y="931.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="138.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.30%)</title><rect x="139.5" y="931.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="142.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.30%)</title><rect x="139.5" y="915.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="142.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.22%)</title><rect x="143.1" y="931.0" width="14.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.91%)</title><rect x="146.7" y="915.0" width="10.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.61%)</title><rect x="150.3" y="899.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="153.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.61%)</title><rect x="150.3" y="883.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="153.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (14 samples, 4.27%)</title><rect x="157.5" y="931.0" width="50.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="160.5" y="942.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.61%)</title><rect x="157.5" y="915.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="160.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.30%)</title><rect x="161.1" y="899.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="164.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (12 samples, 3.66%)</title><rect x="164.7" y="915.0" width="43.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="167.7" y="926.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (12 samples, 3.66%)</title><rect x="164.7" y="899.0" width="43.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="167.7" y="910.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (12 samples, 3.66%)</title><rect x="164.7" y="883.0" width="43.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="167.7" y="894.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.91%)</title><rect x="164.7" y="867.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="167.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.30%)</title><rect x="171.9" y="851.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="174.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.30%)</title><rect x="171.9" y="835.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="174.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.30%)</title><rect x="171.9" y="819.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="174.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.91%)</title><rect x="175.5" y="867.0" width="10.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="178.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.91%)</title><rect x="175.5" y="851.0" width="10.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.91%)</title><rect x="175.5" y="835.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.91%)</title><rect x="175.5" y="819.0" width="10.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.5" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.91%)</title><rect x="175.5" y="803.0" width="10.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="178.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.61%)</title><rect x="186.3" y="867.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="189.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.61%)</title><rect x="186.3" y="851.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="189.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.61%)</title><rect x="186.3" y="835.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="189.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.61%)</title><rect x="186.3" y="819.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="189.3" y="830.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.61%)</title><rect x="186.3" y="803.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="189.3" y="814.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.61%)</title><rect x="186.3" y="787.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="189.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.30%)</title><rect x="193.5" y="867.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.5" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.30%)</title><rect x="193.5" y="851.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.30%)</title><rect x="193.5" y="835.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.91%)</title><rect x="197.1" y="867.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.30%)</title><rect x="207.9" y="931.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="210.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.30%)</title><rect x="211.5" y="947.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.30%)</title><rect x="211.5" y="931.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="214.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.30%)</title><rect x="211.5" y="915.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.30%)</title><rect x="211.5" y="899.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.30%)</title><rect x="211.5" y="883.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (129 samples, 39.33%)</title><rect x="215.1" y="1043.0" width="464.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.1" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (16 samples, 4.88%)</title><rect x="215.1" y="1027.0" width="57.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.1" y="1038.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (14 samples, 4.27%)</title><rect x="222.3" y="1011.0" width="50.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.3" y="1022.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (11 samples, 3.35%)</title><rect x="233.0" y="995.0" width="39.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.0" y="1006.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (10 samples, 3.05%)</title><rect x="236.6" y="979.0" width="36.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="239.6" y="990.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 3.05%)</title><rect x="236.6" y="963.0" width="36.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.6" y="974.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.22%)</title><rect x="258.2" y="947.0" width="14.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (27 samples, 8.23%)</title><rect x="272.6" y="1027.0" width="97.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.6" y="1038.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (27 samples, 8.23%)</title><rect x="272.6" y="1011.0" width="97.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.6" y="1022.0">com/linecor..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="276.2" y="995.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="279.2" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.30%)</title><rect x="276.2" y="979.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="279.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.30%)</title><rect x="276.2" y="963.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="279.2" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.30%)</title><rect x="276.2" y="947.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="279.2" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.30%)</title><rect x="276.2" y="931.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="279.2" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (12 samples, 3.66%)</title><rect x="279.8" y="995.0" width="43.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="282.8" y="1006.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 2.74%)</title><rect x="290.6" y="979.0" width="32.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.6" y="990.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 2.13%)</title><rect x="297.8" y="963.0" width="25.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="300.8" y="974.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.22%)</title><rect x="308.6" y="947.0" width="14.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.6" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.22%)</title><rect x="308.6" y="931.0" width="14.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.6" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.22%)</title><rect x="308.6" y="915.0" width="14.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="311.6" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.30%)</title><rect x="315.8" y="899.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="318.8" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.30%)</title><rect x="315.8" y="883.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="318.8" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.30%)</title><rect x="315.8" y="867.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="318.8" y="878.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.30%)</title><rect x="315.8" y="851.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="318.8" y="862.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.30%)</title><rect x="315.8" y="835.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="318.8" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.30%)</title><rect x="319.4" y="899.0" width="3.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="322.4" y="910.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 3.96%)</title><rect x="323.0" y="995.0" width="46.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="326.0" y="1006.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 3.96%)</title><rect x="323.0" y="979.0" width="46.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.0" y="990.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.61%)</title><rect x="323.0" y="963.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="326.0" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.61%)</title><rect x="323.0" y="947.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.61%)</title><rect x="323.0" y="931.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="326.0" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.61%)</title><rect x="323.0" y="915.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="326.0" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (11 samples, 3.35%)</title><rect x="330.2" y="963.0" width="39.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="333.2" y="974.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 3.35%)</title><rect x="330.2" y="947.0" width="39.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="333.2" y="958.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 2.74%)</title><rect x="337.4" y="931.0" width="32.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.4" y="942.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.30%)</title><rect x="355.4" y="915.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="358.4" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.30%)</title><rect x="359.0" y="915.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="362.0" y="926.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.61%)</title><rect x="362.6" y="915.0" width="7.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="365.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (74 samples, 22.56%)</title><rect x="369.8" y="1027.0" width="266.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="372.8" y="1038.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (74 samples, 22.56%)</title><rect x="369.8" y="1011.0" width="266.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="372.8" y="1022.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1980858194.process (63 samples, 19.21%)</title><rect x="373.4" y="995.0" width="226.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="376.4" y="1006.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (63 samples, 19.21%)</title><rect x="373.4" y="979.0" width="226.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="376.4" y="990.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (63 samples, 19.21%)</title><rect x="373.4" y="963.0" width="226.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="376.4" y="974.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (7 samples, 2.13%)</title><rect x="373.4" y="947.0" width="25.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="376.4" y="958.0">c..</text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.30%)</title><rect x="380.5" y="931.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="383.5" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.30%)</title><rect x="380.5" y="915.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="383.5" y="926.0"></text>
</g>
<g>
<title>RelocIterator::initialize(nmethod*, unsigned char*, unsigned char*) (1 samples, 0.30%)</title><rect x="380.5" y="899.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="383.5" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 1.22%)</title><rect x="384.1" y="931.0" width="14.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.1" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.22%)</title><rect x="384.1" y="915.0" width="14.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.1" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 1.22%)</title><rect x="384.1" y="899.0" width="14.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="387.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.61%)</title><rect x="391.3" y="883.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="394.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.30%)</title><rect x="394.9" y="867.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (56 samples, 17.07%)</title><rect x="398.5" y="947.0" width="201.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="401.5" y="958.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>java/lang/Thread.sleep (53 samples, 16.16%)</title><rect x="402.1" y="931.0" width="190.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="405.1" y="942.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (50 samples, 15.24%)</title><rect x="412.9" y="915.0" width="179.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="415.9" y="926.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.52%)</title><rect x="430.9" y="899.0" width="18.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="433.9" y="910.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.30%)</title><rect x="448.9" y="899.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="451.9" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="452.5" y="899.0" width="3.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="455.5" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.30%)</title><rect x="456.1" y="899.0" width="3.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="459.1" y="910.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.30%)</title><rect x="459.7" y="899.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="462.7" y="910.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.30%)</title><rect x="463.3" y="899.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="466.3" y="910.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (35 samples, 10.67%)</title><rect x="466.9" y="899.0" width="125.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="469.9" y="910.0">os::sleep(Threa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.61%)</title><rect x="495.7" y="883.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="498.7" y="894.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.30%)</title><rect x="499.3" y="867.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="502.3" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.30%)</title><rect x="502.9" y="883.0" width="3.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="505.9" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="502.9" y="867.0" width="3.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="505.9" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.30%)</title><rect x="506.5" y="883.0" width="3.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="509.5" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.30%)</title><rect x="510.1" y="883.0" width="3.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="513.1" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (15 samples, 4.57%)</title><rect x="513.7" y="883.0" width="53.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="516.7" y="894.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.30%)</title><rect x="567.6" y="883.0" width="3.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="570.6" y="894.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.30%)</title><rect x="571.2" y="883.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="574.2" y="894.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.30%)</title><rect x="574.8" y="883.0" width="3.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="577.8" y="894.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.61%)</title><rect x="578.4" y="883.0" width="7.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="581.4" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.61%)</title><rect x="585.6" y="883.0" width="7.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="588.6" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.61%)</title><rect x="592.8" y="931.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="595.8" y="942.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.61%)</title><rect x="592.8" y="915.0" width="7.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="595.8" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/558187323.linkToTargetMethod (2 samples, 0.61%)</title><rect x="600.0" y="995.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="603.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (2 samples, 0.61%)</title><rect x="600.0" y="979.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="603.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/637062670.get$Lambda (2 samples, 0.61%)</title><rect x="600.0" y="963.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="603.0" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.30%)</title><rect x="607.2" y="995.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="610.2" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.30%)</title><rect x="607.2" y="979.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="610.2" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.30%)</title><rect x="610.8" y="995.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="613.8" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.30%)</title><rect x="610.8" y="979.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="613.8" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.30%)</title><rect x="610.8" y="963.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="613.8" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.30%)</title><rect x="614.4" y="995.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="617.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (5 samples, 1.52%)</title><rect x="618.0" y="995.0" width="18.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="621.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 3.66%)</title><rect x="636.0" y="1027.0" width="43.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="639.0" y="1038.0">java..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="657.6" y="1011.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="660.6" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.30%)</title><rect x="661.2" y="1011.0" width="3.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="664.2" y="1022.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="661.2" y="995.0" width="3.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="664.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.22%)</title><rect x="664.8" y="1011.0" width="14.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="667.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.22%)</title><rect x="664.8" y="995.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="667.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$289/772188029.accept (4 samples, 1.22%)</title><rect x="664.8" y="979.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="667.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (4 samples, 1.22%)</title><rect x="664.8" y="963.0" width="14.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="667.8" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (4 samples, 1.22%)</title><rect x="664.8" y="947.0" width="14.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="667.8" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (4 samples, 1.22%)</title><rect x="664.8" y="931.0" width="14.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="667.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.52%)</title><rect x="679.1" y="1043.0" width="18.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="682.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.22%)</title><rect x="682.7" y="1027.0" width="14.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="685.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.22%)</title><rect x="682.7" y="1011.0" width="14.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="685.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/549543117.accept (4 samples, 1.22%)</title><rect x="682.7" y="995.0" width="14.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="685.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$44 (4 samples, 1.22%)</title><rect x="682.7" y="979.0" width="14.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="685.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/326710154.complete (4 samples, 1.22%)</title><rect x="682.7" y="963.0" width="14.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="685.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$54 (4 samples, 1.22%)</title><rect x="682.7" y="947.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="685.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (4 samples, 1.22%)</title><rect x="682.7" y="931.0" width="14.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="685.7" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.22%)</title><rect x="682.7" y="915.0" width="14.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="685.7" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.22%)</title><rect x="682.7" y="899.0" width="14.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="685.7" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.22%)</title><rect x="682.7" y="883.0" width="14.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="685.7" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 1.22%)</title><rect x="682.7" y="867.0" width="14.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="685.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 1.22%)</title><rect x="697.1" y="1059.0" width="14.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="700.1" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.30%)</title><rect x="707.9" y="1043.0" width="3.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="710.9" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="707.9" y="1027.0" width="3.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="710.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.91%)</title><rect x="711.5" y="1107.0" width="10.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="714.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.91%)</title><rect x="711.5" y="1091.0" width="10.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="714.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.91%)</title><rect x="711.5" y="1075.0" width="10.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="714.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.91%)</title><rect x="711.5" y="1059.0" width="10.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="714.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 3.35%)</title><rect x="722.3" y="1107.0" width="39.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="725.3" y="1118.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 2.13%)</title><rect x="736.7" y="1091.0" width="25.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.7" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.61%)</title><rect x="736.7" y="1075.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="739.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.61%)</title><rect x="736.7" y="1059.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="739.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.61%)</title><rect x="736.7" y="1043.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="739.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.61%)</title><rect x="736.7" y="1027.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="739.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.61%)</title><rect x="736.7" y="1011.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="739.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 1.52%)</title><rect x="743.9" y="1075.0" width="18.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="746.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.52%)</title><rect x="743.9" y="1059.0" width="18.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="746.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.52%)</title><rect x="743.9" y="1043.0" width="18.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="746.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.52%)</title><rect x="743.9" y="1027.0" width="18.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="746.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.61%)</title><rect x="761.9" y="1155.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="764.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.30%)</title><rect x="765.5" y="1139.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="768.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.30%)</title><rect x="765.5" y="1123.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="768.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.30%)</title><rect x="765.5" y="1107.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="768.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.30%)</title><rect x="765.5" y="1091.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="768.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.30%)</title><rect x="765.5" y="1075.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="768.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.30%)</title><rect x="765.5" y="1059.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="768.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.30%)</title><rect x="765.5" y="1043.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="768.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.30%)</title><rect x="765.5" y="1027.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="768.5" y="1038.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.30%)</title><rect x="765.5" y="1011.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="768.5" y="1022.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.30%)</title><rect x="765.5" y="995.0" width="3.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="768.5" y="1006.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.30%)</title><rect x="765.5" y="979.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="768.5" y="990.0"></text>
</g>
<g>
<title>start_thread (117 samples, 35.67%)</title><rect x="769.1" y="1155.0" width="420.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="772.1" y="1166.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (117 samples, 35.67%)</title><rect x="769.1" y="1139.0" width="420.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="772.1" y="1150.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 1.83%)</title><rect x="769.1" y="1123.0" width="21.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="772.1" y="1134.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 1.83%)</title><rect x="769.1" y="1107.0" width="21.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="772.1" y="1118.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 1.83%)</title><rect x="769.1" y="1091.0" width="21.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="772.1" y="1102.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 1.83%)</title><rect x="769.1" y="1075.0" width="21.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="772.1" y="1086.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.22%)</title><rect x="772.7" y="1059.0" width="14.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="775.7" y="1070.0"></text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.30%)</title><rect x="776.3" y="1043.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="779.3" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (1 samples, 0.30%)</title><rect x="776.3" y="1027.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="779.3" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.61%)</title><rect x="779.9" y="1043.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="782.9" y="1054.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.30%)</title><rect x="787.1" y="1059.0" width="3.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="790.1" y="1070.0"></text>
</g>
<g>
<title>JavaThread::run() (110 samples, 33.54%)</title><rect x="790.7" y="1123.0" width="395.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="793.7" y="1134.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (110 samples, 33.54%)</title><rect x="790.7" y="1107.0" width="395.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="793.7" y="1118.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (110 samples, 33.54%)</title><rect x="790.7" y="1091.0" width="395.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="793.7" y="1102.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (110 samples, 33.54%)</title><rect x="790.7" y="1075.0" width="395.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="793.7" y="1086.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (107 samples, 32.62%)</title><rect x="790.7" y="1059.0" width="384.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="793.7" y="1070.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (107 samples, 32.62%)</title><rect x="790.7" y="1043.0" width="384.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="793.7" y="1054.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int..</text>
</g>
<g>
<title>Compile::Code_Gen() (51 samples, 15.55%)</title><rect x="790.7" y="1027.0" width="183.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="793.7" y="1038.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.91%)</title><rect x="790.7" y="1011.0" width="10.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="793.7" y="1022.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.30%)</title><rect x="790.7" y="995.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="793.7" y="1006.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.61%)</title><rect x="794.3" y="995.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="797.3" y="1006.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.61%)</title><rect x="794.3" y="979.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="797.3" y="990.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.61%)</title><rect x="801.5" y="1011.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="804.5" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.61%)</title><rect x="801.5" y="995.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="804.5" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.30%)</title><rect x="805.1" y="979.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="808.1" y="990.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.22%)</title><rect x="808.7" y="1011.0" width="14.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="811.7" y="1022.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.22%)</title><rect x="808.7" y="995.0" width="14.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="811.7" y="1006.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.91%)</title><rect x="812.3" y="979.0" width="10.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="815.3" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.61%)</title><rect x="823.0" y="1011.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="826.0" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.61%)</title><rect x="823.0" y="995.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="826.0" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.30%)</title><rect x="823.0" y="979.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="826.0" y="990.0"></text>
</g>
<g>
<title>jmpDirNode::ideal_Opcode() const (1 samples, 0.30%)</title><rect x="823.0" y="963.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="826.0" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.30%)</title><rect x="826.6" y="979.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="829.6" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.30%)</title><rect x="826.6" y="963.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="829.6" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (40 samples, 12.20%)</title><rect x="830.2" y="1011.0" width="143.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="833.2" y="1022.0">PhaseChaitin::Regi..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.61%)</title><rect x="830.2" y="995.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="833.2" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.61%)</title><rect x="837.4" y="995.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="840.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.61%)</title><rect x="837.4" y="979.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="840.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.61%)</title><rect x="844.6" y="995.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="847.6" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.30%)</title><rect x="844.6" y="979.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="847.6" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.30%)</title><rect x="848.2" y="979.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="851.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 1.83%)</title><rect x="851.8" y="995.0" width="21.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="854.8" y="1006.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.13%)</title><rect x="873.4" y="995.0" width="25.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="876.4" y="1006.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.22%)</title><rect x="884.2" y="979.0" width="14.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="887.2" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.91%)</title><rect x="887.8" y="963.0" width="10.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="890.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.61%)</title><rect x="898.6" y="995.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="901.6" y="1006.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.30%)</title><rect x="902.2" y="979.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="905.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.91%)</title><rect x="905.8" y="995.0" width="10.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="908.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.61%)</title><rect x="909.4" y="979.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="912.4" y="990.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (9 samples, 2.74%)</title><rect x="916.6" y="995.0" width="32.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="919.6" y="1006.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (9 samples, 2.74%)</title><rect x="916.6" y="979.0" width="32.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="919.6" y="990.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (9 samples, 2.74%)</title><rect x="916.6" y="963.0" width="32.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="919.6" y="974.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.61%)</title><rect x="916.6" y="947.0" width="7.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="919.6" y="958.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (6 samples, 1.83%)</title><rect x="923.8" y="947.0" width="21.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="926.8" y="958.0">P..</text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.30%)</title><rect x="945.4" y="947.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="948.4" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.61%)</title><rect x="949.0" y="995.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="952.0" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.61%)</title><rect x="949.0" y="979.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="952.0" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.30%)</title><rect x="956.2" y="995.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="959.2" y="1006.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.30%)</title><rect x="956.2" y="979.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="959.2" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.22%)</title><rect x="959.8" y="995.0" width="14.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="962.8" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.61%)</title><rect x="967.0" y="979.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="970.0" y="990.0"></text>
</g>
<g>
<title>Compile::Optimize() (52 samples, 15.85%)</title><rect x="974.1" y="1027.0" width="187.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="977.1" y="1038.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.30%)</title><rect x="974.1" y="1011.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="977.1" y="1022.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.30%)</title><rect x="974.1" y="995.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="977.1" y="1006.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.30%)</title><rect x="974.1" y="979.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="977.1" y="990.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.30%)</title><rect x="977.7" y="1011.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="980.7" y="1022.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.30%)</title><rect x="977.7" y="995.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="980.7" y="1006.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.30%)</title><rect x="977.7" y="979.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.7" y="990.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.30%)</title><rect x="977.7" y="963.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="980.7" y="974.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.30%)</title><rect x="981.3" y="1011.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.3" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.30%)</title><rect x="981.3" y="995.0" width="3.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="984.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (46 samples, 14.02%)</title><rect x="984.9" y="1011.0" width="165.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="987.9" y="1022.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>HaltNode::is_CFG() const (1 samples, 0.30%)</title><rect x="984.9" y="995.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="987.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.30%)</title><rect x="988.5" y="995.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="991.5" y="1006.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.30%)</title><rect x="988.5" y="979.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="991.5" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.61%)</title><rect x="992.1" y="995.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="995.1" y="1006.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.30%)</title><rect x="995.7" y="979.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="998.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (40 samples, 12.20%)</title><rect x="999.3" y="995.0" width="143.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1002.3" y="1006.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (36 samples, 10.98%)</title><rect x="1010.1" y="979.0" width="129.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1013.1" y="990.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.30%)</title><rect x="1010.1" y="963.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1013.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (35 samples, 10.67%)</title><rect x="1013.7" y="963.0" width="125.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1016.7" y="974.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.30%)</title><rect x="1107.3" y="947.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.30%)</title><rect x="1107.3" y="931.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.3" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.30%)</title><rect x="1107.3" y="915.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.3" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (8 samples, 2.44%)</title><rect x="1110.9" y="947.0" width="28.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.9" y="958.0">Ph..</text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.30%)</title><rect x="1139.6" y="979.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.30%)</title><rect x="1143.2" y="995.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.30%)</title><rect x="1143.2" y="979.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.30%)</title><rect x="1146.8" y="995.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.30%)</title><rect x="1146.8" y="979.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.30%)</title><rect x="1146.8" y="963.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.30%)</title><rect x="1146.8" y="947.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.8" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.61%)</title><rect x="1150.4" y="1011.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.61%)</title><rect x="1150.4" y="995.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.4" y="1006.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1150.4" y="979.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.4" y="990.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1150.4" y="963.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.4" y="974.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1154.0" y="979.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.0" y="990.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1154.0" y="963.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.0" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.30%)</title><rect x="1157.6" y="1011.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.30%)</title><rect x="1157.6" y="995.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.30%)</title><rect x="1157.6" y="979.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.6" y="990.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.30%)</title><rect x="1157.6" y="963.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.6" y="974.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.30%)</title><rect x="1157.6" y="947.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.6" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1161.2" y="1027.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.2" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1161.2" y="1011.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1161.2" y="995.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1161.2" y="979.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1161.2" y="963.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1161.2" y="947.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.2" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1161.2" y="931.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.2" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1161.2" y="915.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1161.2" y="899.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1161.2" y="883.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1161.2" y="867.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1161.2" y="851.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.2" y="862.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1161.2" y="835.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.2" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1161.2" y="819.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.2" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1161.2" y="803.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1161.2" y="787.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1161.2" y="771.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1161.2" y="755.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1161.2" y="739.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.2" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1161.2" y="723.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.2" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1161.2" y="707.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1161.2" y="691.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1161.2" y="675.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1161.2" y="659.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1161.2" y="643.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.2" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1161.2" y="627.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.2" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1161.2" y="611.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1161.2" y="595.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1161.2" y="579.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1161.2" y="563.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1161.2" y="547.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1161.2" y="531.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1161.2" y="515.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1161.2" y="499.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1161.2" y="483.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1161.2" y="467.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1161.2" y="451.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1161.2" y="435.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1161.2" y="419.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1161.2" y="403.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1161.2" y="387.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1161.2" y="371.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1161.2" y="355.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1161.2" y="339.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1161.2" y="323.0" width="7.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1161.2" y="307.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1161.2" y="291.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1161.2" y="275.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1161.2" y="259.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.2" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1161.2" y="243.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.2" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1161.2" y="227.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1161.2" y="211.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1161.2" y="195.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1161.2" y="179.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.30%)</title><rect x="1161.2" y="163.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.30%)</title><rect x="1161.2" y="147.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.2" y="158.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.30%)</title><rect x="1161.2" y="131.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.2" y="142.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.30%)</title><rect x="1161.2" y="115.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.2" y="126.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.30%)</title><rect x="1161.2" y="99.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.2" y="110.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1161.2" y="83.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.2" y="94.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1161.2" y="67.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.2" y="78.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.30%)</title><rect x="1161.2" y="51.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.2" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.30%)</title><rect x="1161.2" y="35.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="46.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.30%)</title><rect x="1164.8" y="307.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.8" y="318.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.30%)</title><rect x="1164.8" y="291.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.8" y="302.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.30%)</title><rect x="1168.4" y="1027.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.4" y="1038.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.30%)</title><rect x="1168.4" y="1011.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.4" y="1022.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.30%)</title><rect x="1172.0" y="1027.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.0" y="1038.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.30%)</title><rect x="1172.0" y="1011.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.0" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.30%)</title><rect x="1172.0" y="995.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.0" y="1006.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.91%)</title><rect x="1175.6" y="1059.0" width="10.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.6" y="1070.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.91%)</title><rect x="1175.6" y="1043.0" width="10.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.6" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.91%)</title><rect x="1175.6" y="1027.0" width="10.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.6" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.61%)</title><rect x="1175.6" y="1011.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.6" y="1022.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.30%)</title><rect x="1175.6" y="995.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.6" y="1006.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.30%)</title><rect x="1175.6" y="979.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.6" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.30%)</title><rect x="1175.6" y="963.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.6" y="974.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.30%)</title><rect x="1175.6" y="947.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.6" y="958.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.30%)</title><rect x="1175.6" y="931.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.6" y="942.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.30%)</title><rect x="1175.6" y="915.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.6" y="926.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.30%)</title><rect x="1175.6" y="899.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.6" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.30%)</title><rect x="1175.6" y="883.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.6" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.30%)</title><rect x="1175.6" y="867.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.6" y="878.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.30%)</title><rect x="1179.2" y="995.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.2" y="1006.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.30%)</title><rect x="1179.2" y="979.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.2" y="990.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.30%)</title><rect x="1179.2" y="963.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.2" y="974.0"></text>
</g>
<g>
<title>Interval::add_use_pos(int, IntervalUseKind) (1 samples, 0.30%)</title><rect x="1179.2" y="947.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.2" y="958.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.30%)</title><rect x="1182.8" y="1011.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="1022.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.30%)</title><rect x="1182.8" y="995.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="1006.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.30%)</title><rect x="1182.8" y="979.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="990.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.30%)</title><rect x="1182.8" y="963.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="974.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.30%)</title><rect x="1182.8" y="947.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="958.0"></text>
</g>
<g>
<title>is_error_reported() (1 samples, 0.30%)</title><rect x="1186.4" y="1123.0" width="3.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1189.4" y="1134.0"></text>
</g>
</g>
</svg>
