<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,466 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="10.8" y="2035.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.8" y="2046.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (275 samples, 18.76%)</title><rect x="11.6" y="2035.0" width="221.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.6" y="2046.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (273 samples, 18.62%)</title><rect x="12.4" y="2019.0" width="219.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.4" y="2030.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.14%)</title><rect x="12.4" y="2003.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.4" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.14%)</title><rect x="12.4" y="1987.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.4" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/817352842.accept (2 samples, 0.14%)</title><rect x="12.4" y="1971.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.4" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.14%)</title><rect x="12.4" y="1955.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.4" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.14%)</title><rect x="12.4" y="1939.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.4" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.07%)</title><rect x="13.2" y="1923.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.2" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (6 samples, 0.41%)</title><rect x="14.0" y="2003.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.0" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (6 samples, 0.41%)</title><rect x="14.0" y="1987.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.0" y="1998.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="14.0" y="1971.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="14.0" y="1955.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.0" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="14.0" y="1939.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.0" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (5 samples, 0.34%)</title><rect x="14.8" y="1971.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.8" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (5 samples, 0.34%)</title><rect x="14.8" y="1955.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.8" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (5 samples, 0.34%)</title><rect x="14.8" y="1939.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.8" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (5 samples, 0.34%)</title><rect x="14.8" y="1923.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.8" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (5 samples, 0.34%)</title><rect x="14.8" y="1907.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.8" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.14%)</title><rect x="14.8" y="1891.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.8" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.14%)</title><rect x="14.8" y="1875.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.8" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.14%)</title><rect x="14.8" y="1859.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$265/356442845.test (1 samples, 0.07%)</title><rect x="14.8" y="1843.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$266/1628059559.test (1 samples, 0.07%)</title><rect x="15.6" y="1843.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.6" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$partitionsNeedsPause$61 (1 samples, 0.07%)</title><rect x="15.6" y="1827.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.6" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.pendingTasksCount (1 samples, 0.07%)</title><rect x="15.6" y="1811.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.6" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.07%)</title><rect x="15.6" y="1795.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.6" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (3 samples, 0.20%)</title><rect x="16.4" y="1891.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.14%)</title><rect x="17.2" y="1875.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.14%)</title><rect x="17.2" y="1859.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.2" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (2 samples, 0.14%)</title><rect x="17.2" y="1843.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.2" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/168555237.get (2 samples, 0.14%)</title><rect x="17.2" y="1827.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="20.2" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.07%)</title><rect x="18.9" y="2003.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.9" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.07%)</title><rect x="18.9" y="1987.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.9" y="1998.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="18.9" y="1971.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.9" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="18.9" y="1955.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.9" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="18.9" y="1939.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.9" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (204 samples, 13.92%)</title><rect x="19.7" y="2003.0" width="164.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.7" y="2014.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1796066652.accept (197 samples, 13.44%)</title><rect x="20.5" y="1987.0" width="158.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.5" y="1998.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (197 samples, 13.44%)</title><rect x="20.5" y="1971.0" width="158.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.5" y="1982.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (2 samples, 0.14%)</title><rect x="22.9" y="1955.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.9" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (156 samples, 10.64%)</title><rect x="24.5" y="1955.0" width="125.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.5" y="1966.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (156 samples, 10.64%)</title><rect x="24.5" y="1939.0" width="125.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.5" y="1950.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (156 samples, 10.64%)</title><rect x="24.5" y="1923.0" width="125.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.5" y="1934.0">com/linecorp/de..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="35.8" y="1907.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="38.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (141 samples, 9.62%)</title><rect x="36.6" y="1907.0" width="113.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.6" y="1918.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (141 samples, 9.62%)</title><rect x="36.6" y="1891.0" width="113.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.6" y="1902.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (141 samples, 9.62%)</title><rect x="36.6" y="1875.0" width="113.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="39.6" y="1886.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (141 samples, 9.62%)</title><rect x="36.6" y="1859.0" width="113.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="39.6" y="1870.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (65 samples, 4.43%)</title><rect x="36.6" y="1843.0" width="52.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.6" y="1854.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (65 samples, 4.43%)</title><rect x="36.6" y="1827.0" width="52.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="39.6" y="1838.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (65 samples, 4.43%)</title><rect x="36.6" y="1811.0" width="52.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.6" y="1822.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (76 samples, 5.18%)</title><rect x="88.9" y="1843.0" width="61.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="91.9" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (76 samples, 5.18%)</title><rect x="88.9" y="1827.0" width="61.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="91.9" y="1838.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (76 samples, 5.18%)</title><rect x="88.9" y="1811.0" width="61.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="91.9" y="1822.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (76 samples, 5.18%)</title><rect x="88.9" y="1795.0" width="61.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="91.9" y="1806.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (75 samples, 5.12%)</title><rect x="89.7" y="1779.0" width="60.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.7" y="1790.0">sun/mi..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="90.5" y="1763.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="93.5" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (67 samples, 4.57%)</title><rect x="91.3" y="1763.0" width="53.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="94.3" y="1774.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.14%)</title><rect x="92.9" y="1747.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="95.9" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.20%)</title><rect x="94.5" y="1747.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="97.5" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (44 samples, 3.00%)</title><rect x="96.9" y="1747.0" width="35.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="99.9" y="1758.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.14%)</title><rect x="132.3" y="1747.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="135.3" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 0.95%)</title><rect x="134.0" y="1747.0" width="11.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="137.0" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.27%)</title><rect x="145.2" y="1763.0" width="3.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="148.2" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="148.4" y="1763.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="151.4" y="1774.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="149.2" y="1763.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="152.2" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (7 samples, 0.48%)</title><rect x="150.1" y="1955.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="153.1" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (7 samples, 0.48%)</title><rect x="150.1" y="1939.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="153.1" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.27%)</title><rect x="155.7" y="1955.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="158.7" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.27%)</title><rect x="155.7" y="1939.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="158.7" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.27%)</title><rect x="155.7" y="1923.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="158.7" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (25 samples, 1.71%)</title><rect x="158.9" y="1955.0" width="20.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="161.9" y="1966.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (25 samples, 1.71%)</title><rect x="158.9" y="1939.0" width="20.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.9" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.61%)</title><rect x="171.0" y="1923.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="174.0" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.14%)</title><rect x="174.2" y="1907.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="177.2" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.14%)</title><rect x="174.2" y="1891.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="177.2" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.14%)</title><rect x="174.2" y="1875.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="177.2" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="175.0" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="178.0" y="1870.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="175.0" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="178.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="175.8" y="1907.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="178.8" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.14%)</title><rect x="176.6" y="1907.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.6" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="178.2" y="1923.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="181.2" y="1934.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="179.0" y="1987.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="182.0" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.20%)</title><rect x="179.8" y="1987.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="182.8" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.20%)</title><rect x="179.8" y="1971.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="182.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.20%)</title><rect x="179.8" y="1955.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="182.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.20%)</title><rect x="179.8" y="1939.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="182.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.14%)</title><rect x="182.3" y="1987.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.3" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.14%)</title><rect x="182.3" y="1971.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 4.09%)</title><rect x="183.9" y="2003.0" width="48.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.9" y="2014.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (59 samples, 4.02%)</title><rect x="184.7" y="1987.0" width="47.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="187.7" y="1998.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 2.52%)</title><rect x="184.7" y="1971.0" width="29.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="187.7" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.14%)</title><rect x="184.7" y="1955.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="187.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (2 samples, 0.14%)</title><rect x="184.7" y="1939.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.7" y="1950.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.07%)</title><rect x="184.7" y="1923.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="187.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="185.5" y="1923.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="188.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (35 samples, 2.39%)</title><rect x="186.3" y="1955.0" width="28.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.3" y="1966.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 2.39%)</title><rect x="186.3" y="1939.0" width="28.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="189.3" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1600 (1 samples, 0.07%)</title><rect x="186.3" y="1923.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="189.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.07%)</title><rect x="186.3" y="1907.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="189.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (29 samples, 1.98%)</title><rect x="187.1" y="1923.0" width="23.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.1" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (29 samples, 1.98%)</title><rect x="187.1" y="1907.0" width="23.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="190.1" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (17 samples, 1.16%)</title><rect x="187.1" y="1891.0" width="13.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.07%)</title><rect x="191.9" y="1875.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="194.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.07%)</title><rect x="191.9" y="1859.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="194.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="191.9" y="1843.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="194.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="191.9" y="1827.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="194.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="191.9" y="1811.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="194.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.07%)</title><rect x="191.9" y="1795.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="194.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.07%)</title><rect x="191.9" y="1779.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="194.9" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="191.9" y="1763.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.9" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.07%)</title><rect x="191.9" y="1747.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="194.9" y="1758.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.07%)</title><rect x="191.9" y="1731.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="194.9" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (9 samples, 0.61%)</title><rect x="192.7" y="1875.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="195.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (9 samples, 0.61%)</title><rect x="192.7" y="1859.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="195.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (9 samples, 0.61%)</title><rect x="192.7" y="1843.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="195.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (9 samples, 0.61%)</title><rect x="192.7" y="1827.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="195.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (9 samples, 0.61%)</title><rect x="192.7" y="1811.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="195.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (9 samples, 0.61%)</title><rect x="192.7" y="1795.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (9 samples, 0.61%)</title><rect x="192.7" y="1779.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="195.7" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.07%)</title><rect x="200.0" y="1875.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="203.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.07%)</title><rect x="200.0" y="1859.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.07%)</title><rect x="200.0" y="1843.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 0.82%)</title><rect x="200.8" y="1891.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 0.82%)</title><rect x="200.8" y="1875.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (9 samples, 0.61%)</title><rect x="200.8" y="1859.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.8" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (9 samples, 0.61%)</title><rect x="200.8" y="1843.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="203.8" y="1854.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="207.2" y="1827.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="210.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.20%)</title><rect x="208.0" y="1859.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="211.0" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.20%)</title><rect x="208.0" y="1843.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="211.0" y="1854.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="209.6" y="1827.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="212.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.14%)</title><rect x="210.4" y="1923.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.14%)</title><rect x="210.4" y="1907.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="210.4" y="1891.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="210.4" y="1875.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="210.4" y="1859.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="213.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.14%)</title><rect x="210.4" y="1843.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="213.4" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="211.2" y="1827.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="214.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.07%)</title><rect x="212.0" y="1923.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="215.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="212.0" y="1907.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="212.0" y="1891.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="212.0" y="1875.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.07%)</title><rect x="212.8" y="1923.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="215.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.07%)</title><rect x="212.8" y="1907.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.07%)</title><rect x="213.6" y="1923.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.6" y="1934.0"></text>
</g>
<g>
<title>java/lang/Long.longValue (1 samples, 0.07%)</title><rect x="213.6" y="1907.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.55%)</title><rect x="214.4" y="1971.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.48%)</title><rect x="214.4" y="1955.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.41%)</title><rect x="214.4" y="1939.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="217.4" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.20%)</title><rect x="214.4" y="1923.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/1516820846.accept (3 samples, 0.20%)</title><rect x="214.4" y="1907.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.14%)</title><rect x="215.3" y="1891.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="215.3" y="1875.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.07%)</title><rect x="215.3" y="1859.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="218.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.07%)</title><rect x="215.3" y="1843.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="215.3" y="1827.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.3" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="215.3" y="1811.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.07%)</title><rect x="216.1" y="1875.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="216.1" y="1859.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="219.1" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="216.9" y="1923.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.9" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="216.9" y="1907.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.9" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="216.9" y="1891.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.9" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="216.9" y="1875.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.9" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="216.9" y="1859.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.9" y="1870.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.07%)</title><rect x="216.9" y="1843.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="219.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.14%)</title><rect x="217.7" y="1923.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="220.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.14%)</title><rect x="217.7" y="1907.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="220.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="217.7" y="1891.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="217.7" y="1875.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="220.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="217.7" y="1859.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="217.7" y="1843.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="220.7" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="217.7" y="1827.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="220.7" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (2 samples, 0.14%)</title><rect x="217.7" y="1811.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="220.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (2 samples, 0.14%)</title><rect x="217.7" y="1795.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.07%)</title><rect x="219.3" y="1939.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.3" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="219.3" y="1923.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="219.3" y="1907.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="219.3" y="1891.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="219.3" y="1875.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="219.3" y="1859.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="222.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="219.3" y="1843.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="222.3" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="219.3" y="1827.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.3" y="1838.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="219.3" y="1811.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="222.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="220.1" y="1955.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="223.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="220.1" y="1939.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="220.1" y="1923.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.07%)</title><rect x="220.1" y="1907.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.07%)</title><rect x="220.1" y="1891.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.07%)</title><rect x="220.1" y="1875.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.1" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="220.1" y="1859.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.1" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="220.1" y="1843.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.07%)</title><rect x="220.9" y="1971.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.55%)</title><rect x="221.7" y="1971.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="224.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.48%)</title><rect x="221.7" y="1955.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="221.7" y="1939.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="224.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.07%)</title><rect x="221.7" y="1923.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.07%)</title><rect x="221.7" y="1907.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="224.7" y="1918.0"></text>
</g>
<g>
<title>java/util/Optional.filter (1 samples, 0.07%)</title><rect x="221.7" y="1891.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="224.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.41%)</title><rect x="222.5" y="1939.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="222.5" y="1923.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="225.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.27%)</title><rect x="223.3" y="1923.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.07%)</title><rect x="223.3" y="1907.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.07%)</title><rect x="223.3" y="1891.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.07%)</title><rect x="223.3" y="1875.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="226.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.07%)</title><rect x="223.3" y="1859.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="226.3" y="1870.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.07%)</title><rect x="223.3" y="1843.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.3" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.07%)</title><rect x="223.3" y="1827.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.3" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.07%)</title><rect x="223.3" y="1811.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="226.3" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/IOVecWrapper.get (1 samples, 0.07%)</title><rect x="223.3" y="1795.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.07%)</title><rect x="224.1" y="1907.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.1" y="1918.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="224.1" y="1891.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.1" y="1902.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="224.1" y="1875.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.07%)</title><rect x="224.1" y="1859.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.07%)</title><rect x="224.1" y="1843.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.1" y="1854.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="224.1" y="1827.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.07%)</title><rect x="224.9" y="1907.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.9" y="1918.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="224.9" y="1891.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="227.9" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="224.9" y="1875.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.9" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="224.9" y="1859.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.07%)</title><rect x="225.7" y="1907.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.7" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="225.7" y="1891.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="228.7" y="1902.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="225.7" y="1875.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="228.7" y="1886.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.07%)</title><rect x="225.7" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="228.7" y="1870.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="225.7" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="228.7" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long, unsigned char) (1 samples, 0.07%)</title><rect x="225.7" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="228.7" y="1838.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_sizes() (1 samples, 0.07%)</title><rect x="225.7" y="1811.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="228.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="226.5" y="1923.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.5" y="1934.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="226.5" y="1907.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="227.3" y="1955.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="227.3" y="1939.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="230.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="227.3" y="1923.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="227.3" y="1907.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="227.3" y="1891.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.07%)</title><rect x="227.3" y="1875.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="230.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.07%)</title><rect x="227.3" y="1859.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.07%)</title><rect x="227.3" y="1843.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="230.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="227.3" y="1827.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="230.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.07%)</title><rect x="227.3" y="1811.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.3" y="1822.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putShort (1 samples, 0.07%)</title><rect x="227.3" y="1795.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.3" y="1806.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.07%)</title><rect x="227.3" y="1779.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.3" y="1790.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.07%)</title><rect x="227.3" y="1763.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="230.3" y="1774.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.07%)</title><rect x="227.3" y="1747.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="230.3" y="1758.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.07%)</title><rect x="227.3" y="1731.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="230.3" y="1742.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.07%)</title><rect x="227.3" y="1715.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="230.3" y="1726.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.07%)</title><rect x="227.3" y="1699.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="230.3" y="1710.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.07%)</title><rect x="227.3" y="1683.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="230.3" y="1694.0"></text>
</g>
<g>
<title>Method::load_signature_classes(methodHandle, Thread*) (1 samples, 0.07%)</title><rect x="227.3" y="1667.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="230.3" y="1678.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.07%)</title><rect x="227.3" y="1651.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="230.3" y="1662.0"></text>
</g>
<g>
<title>Symbol::equals(char const*, int) const (1 samples, 0.07%)</title><rect x="227.3" y="1635.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="230.3" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.20%)</title><rect x="228.1" y="1971.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="231.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.20%)</title><rect x="228.1" y="1955.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="231.1" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="228.1" y="1939.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/442015946.accept (1 samples, 0.07%)</title><rect x="228.1" y="1923.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.07%)</title><rect x="228.1" y="1907.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="228.1" y="1891.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.07%)</title><rect x="228.1" y="1875.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.07%)</title><rect x="228.1" y="1859.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.1" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="228.1" y="1843.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="228.1" y="1827.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="231.1" y="1838.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="228.9" y="1939.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.9" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="228.9" y="1923.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/Node.hashCode (1 samples, 0.07%)</title><rect x="228.9" y="1907.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="229.7" y="1939.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.7" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="229.7" y="1923.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.7" y="1934.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="229.7" y="1907.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.7" y="1918.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="229.7" y="1891.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="232.7" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="229.7" y="1875.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="232.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.07%)</title><rect x="229.7" y="1859.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="232.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.07%)</title><rect x="230.5" y="1971.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="230.5" y="1955.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="231.4" y="1971.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="231.4" y="1955.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="231.4" y="1939.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="231.4" y="1923.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="231.4" y="1907.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="231.4" y="1891.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.4" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.07%)</title><rect x="232.2" y="2019.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.2" y="2030.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.07%)</title><rect x="232.2" y="2003.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="235.2" y="2014.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="232.2" y="1987.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="235.2" y="1998.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.07%)</title><rect x="232.2" y="1971.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="235.2" y="1982.0"></text>
</g>
<g>
<title>java/lang/Thread.run (837 samples, 57.09%)</title><rect x="233.0" y="2035.0" width="673.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.0" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (837 samples, 57.09%)</title><rect x="233.0" y="2019.0" width="673.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.0" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (837 samples, 57.09%)</title><rect x="233.0" y="2003.0" width="673.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.0" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.34%)</title><rect x="240.2" y="1987.0" width="4.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="243.2" y="1998.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.34%)</title><rect x="240.2" y="1971.0" width="4.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="243.2" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (7 samples, 0.48%)</title><rect x="244.2" y="1987.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.2" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1333145026.run (546 samples, 37.24%)</title><rect x="249.9" y="1987.0" width="439.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="252.9" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (546 samples, 37.24%)</title><rect x="249.9" y="1971.0" width="439.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.9" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (546 samples, 37.24%)</title><rect x="249.9" y="1955.0" width="439.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.9" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.process..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="251.5" y="1939.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="254.5" y="1950.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="251.5" y="1923.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="254.5" y="1934.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.20%)</title><rect x="252.3" y="1939.0" width="2.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="255.3" y="1950.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.20%)</title><rect x="252.3" y="1923.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="255.3" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (540 samples, 36.83%)</title><rect x="254.7" y="1939.0" width="434.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.7" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sched..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="260.3" y="1923.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="263.3" y="1934.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="260.3" y="1907.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="263.3" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (167 samples, 11.39%)</title><rect x="261.1" y="1923.0" width="134.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="264.1" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (167 samples, 11.39%)</title><rect x="261.1" y="1907.0" width="134.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.1" y="1918.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (167 samples, 11.39%)</title><rect x="261.1" y="1891.0" width="134.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="264.1" y="1902.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 11.39%)</title><rect x="261.1" y="1875.0" width="134.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.1" y="1886.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 11.39%)</title><rect x="261.1" y="1859.0" width="134.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.1" y="1870.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (167 samples, 11.39%)</title><rect x="261.1" y="1843.0" width="134.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="264.1" y="1854.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (48 samples, 3.27%)</title><rect x="261.1" y="1827.0" width="38.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.1" y="1838.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (24 samples, 1.64%)</title><rect x="261.1" y="1811.0" width="19.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="264.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (24 samples, 1.64%)</title><rect x="261.1" y="1795.0" width="19.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="264.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (13 samples, 0.89%)</title><rect x="261.1" y="1779.0" width="10.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="264.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (11 samples, 0.75%)</title><rect x="271.6" y="1779.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.6" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.20%)</title><rect x="274.0" y="1763.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.0" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.20%)</title><rect x="274.0" y="1747.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.0" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.20%)</title><rect x="274.0" y="1731.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.0" y="1742.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (5 samples, 0.34%)</title><rect x="276.4" y="1763.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (24 samples, 1.64%)</title><rect x="280.5" y="1811.0" width="19.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (24 samples, 1.64%)</title><rect x="280.5" y="1795.0" width="19.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="283.5" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="280.5" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="283.5" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="280.5" y="1763.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="283.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="280.5" y="1747.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="283.5" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="280.5" y="1731.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="283.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (9 samples, 0.61%)</title><rect x="281.3" y="1779.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (3 samples, 0.20%)</title><rect x="282.1" y="1763.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.1" y="1774.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.20%)</title><rect x="282.1" y="1747.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="285.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (2 samples, 0.14%)</title><rect x="284.5" y="1763.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="287.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (1 samples, 0.07%)</title><rect x="286.1" y="1763.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.07%)</title><rect x="286.9" y="1763.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="289.9" y="1774.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.07%)</title><rect x="287.7" y="1763.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (9 samples, 0.61%)</title><rect x="288.5" y="1779.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="291.5" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="291.7" y="1763.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="294.7" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="291.7" y="1747.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="294.7" y="1758.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.07%)</title><rect x="291.7" y="1731.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="294.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.27%)</title><rect x="292.5" y="1763.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="295.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.27%)</title><rect x="292.5" y="1747.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (5 samples, 0.34%)</title><rect x="295.7" y="1779.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="298.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.07%)</title><rect x="299.0" y="1763.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="302.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (104 samples, 7.09%)</title><rect x="299.8" y="1827.0" width="83.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.8" y="1838.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.07%)</title><rect x="299.8" y="1811.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.07%)</title><rect x="299.8" y="1795.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.07%)</title><rect x="299.8" y="1779.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.07%)</title><rect x="299.8" y="1763.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.27%)</title><rect x="300.6" y="1811.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="303.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.27%)</title><rect x="300.6" y="1795.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="303.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/SimpleType.equals (4 samples, 0.27%)</title><rect x="300.6" y="1779.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="303.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (18 samples, 1.23%)</title><rect x="303.8" y="1811.0" width="14.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.02%)</title><rect x="304.6" y="1795.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="307.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.14%)</title><rect x="306.2" y="1779.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="309.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.48%)</title><rect x="307.8" y="1779.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="310.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.48%)</title><rect x="307.8" y="1763.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (4 samples, 0.27%)</title><rect x="313.5" y="1779.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="316.5" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.14%)</title><rect x="316.7" y="1795.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.34%)</title><rect x="318.3" y="1811.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="321.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.14%)</title><rect x="318.3" y="1795.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="321.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.20%)</title><rect x="319.9" y="1795.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="322.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="321.5" y="1779.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="324.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="321.5" y="1763.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="321.5" y="1747.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="324.5" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="321.5" y="1731.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="324.5" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="321.5" y="1715.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="324.5" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="321.5" y="1699.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="324.5" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="321.5" y="1683.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="324.5" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (76 samples, 5.18%)</title><rect x="322.3" y="1811.0" width="61.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="325.3" y="1822.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (25 samples, 1.71%)</title><rect x="322.3" y="1795.0" width="20.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="325.5" y="1779.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="328.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.48%)</title><rect x="326.3" y="1779.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="329.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.48%)</title><rect x="326.3" y="1763.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="329.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.48%)</title><rect x="326.3" y="1747.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="329.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (7 samples, 0.48%)</title><rect x="326.3" y="1731.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="329.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 0.27%)</title><rect x="328.7" y="1715.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 0.68%)</title><rect x="332.0" y="1779.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="335.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (6 samples, 0.41%)</title><rect x="332.0" y="1763.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="335.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.07%)</title><rect x="336.0" y="1747.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.27%)</title><rect x="336.8" y="1763.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="339.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.27%)</title><rect x="336.8" y="1747.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="339.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 0.27%)</title><rect x="336.8" y="1731.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="339.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (4 samples, 0.27%)</title><rect x="336.8" y="1715.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="339.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (3 samples, 0.20%)</title><rect x="340.0" y="1779.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="343.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (51 samples, 3.48%)</title><rect x="342.4" y="1795.0" width="41.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="345.4" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (51 samples, 3.48%)</title><rect x="342.4" y="1779.0" width="41.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="345.4" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (50 samples, 3.41%)</title><rect x="343.2" y="1763.0" width="40.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="346.2" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.16%)</title><rect x="346.5" y="1747.0" width="13.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="349.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.41%)</title><rect x="347.3" y="1731.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="350.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.41%)</title><rect x="347.3" y="1715.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="350.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.41%)</title><rect x="347.3" y="1699.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="350.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 0.34%)</title><rect x="347.3" y="1683.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="350.3" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="351.3" y="1683.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="354.3" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.07%)</title><rect x="351.3" y="1667.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="354.3" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.20%)</title><rect x="352.1" y="1731.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.14%)</title><rect x="352.1" y="1715.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="355.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.07%)</title><rect x="353.7" y="1715.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="356.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.07%)</title><rect x="353.7" y="1699.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.7" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (5 samples, 0.34%)</title><rect x="354.5" y="1731.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="357.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (5 samples, 0.34%)</title><rect x="354.5" y="1715.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="357.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (2 samples, 0.14%)</title><rect x="358.5" y="1731.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="361.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.41%)</title><rect x="360.1" y="1747.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="363.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.27%)</title><rect x="361.7" y="1731.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.7" y="1742.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="361.7" y="1715.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="364.7" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.07%)</title><rect x="361.7" y="1699.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="364.7" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.20%)</title><rect x="362.6" y="1715.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="365.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.20%)</title><rect x="362.6" y="1699.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="365.6" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.20%)</title><rect x="362.6" y="1683.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="365.6" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (11 samples, 0.75%)</title><rect x="365.0" y="1747.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="368.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (11 samples, 0.75%)</title><rect x="365.0" y="1731.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="368.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (11 samples, 0.75%)</title><rect x="365.0" y="1715.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="368.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (11 samples, 0.75%)</title><rect x="365.0" y="1699.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.0" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 0.75%)</title><rect x="365.0" y="1683.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.0" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.61%)</title><rect x="365.8" y="1667.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="368.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.14%)</title><rect x="368.2" y="1651.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="371.2" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor6.newInstance (4 samples, 0.27%)</title><rect x="369.8" y="1651.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="372.8" y="1662.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="372.2" y="1635.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="375.2" y="1646.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="372.2" y="1619.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="375.2" y="1630.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="372.2" y="1603.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="375.2" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="372.2" y="1587.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="375.2" y="1598.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="372.2" y="1571.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="375.2" y="1582.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="372.2" y="1555.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="375.2" y="1566.0"></text>
</g>
<g>
<title>G1AllocRegion::fill_up_remaining_space(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="372.2" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="375.2" y="1550.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor6.newInstance (1 samples, 0.07%)</title><rect x="373.0" y="1667.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="376.0" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.34%)</title><rect x="373.8" y="1747.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="376.8" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.34%)</title><rect x="373.8" y="1731.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="376.8" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.34%)</title><rect x="373.8" y="1715.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="376.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (7 samples, 0.48%)</title><rect x="377.8" y="1747.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="380.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (15 samples, 1.02%)</title><rect x="383.5" y="1827.0" width="12.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="386.5" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (15 samples, 1.02%)</title><rect x="383.5" y="1811.0" width="12.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="386.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (15 samples, 1.02%)</title><rect x="383.5" y="1795.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="386.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (15 samples, 1.02%)</title><rect x="383.5" y="1779.0" width="12.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="386.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 0.20%)</title><rect x="386.7" y="1763.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="389.7" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.55%)</title><rect x="389.1" y="1763.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="392.1" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (340 samples, 23.19%)</title><rect x="395.6" y="1923.0" width="273.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.6" y="1934.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (55 samples, 3.75%)</title><rect x="397.2" y="1907.0" width="44.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="400.2" y="1918.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (55 samples, 3.75%)</title><rect x="397.2" y="1891.0" width="44.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="400.2" y="1902.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (55 samples, 3.75%)</title><rect x="397.2" y="1875.0" width="44.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="400.2" y="1886.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (17 samples, 1.16%)</title><rect x="398.8" y="1859.0" width="13.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="401.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (17 samples, 1.16%)</title><rect x="398.8" y="1843.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="401.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (17 samples, 1.16%)</title><rect x="398.8" y="1827.0" width="13.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="401.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (17 samples, 1.16%)</title><rect x="398.8" y="1811.0" width="13.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="401.8" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.20%)</title><rect x="412.5" y="1859.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="415.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="413.3" y="1843.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="416.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="413.3" y="1827.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="416.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.07%)</title><rect x="414.1" y="1843.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="417.1" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (32 samples, 2.18%)</title><rect x="414.9" y="1859.0" width="25.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="417.9" y="1870.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (19 samples, 1.30%)</title><rect x="425.3" y="1843.0" width="15.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="428.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (19 samples, 1.30%)</title><rect x="425.3" y="1827.0" width="15.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="428.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (7 samples, 0.48%)</title><rect x="435.0" y="1811.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="438.0" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.07%)</title><rect x="440.6" y="1859.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="443.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.41%)</title><rect x="441.4" y="1907.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="444.4" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.20%)</title><rect x="443.8" y="1891.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="446.8" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.20%)</title><rect x="443.8" y="1875.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="446.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (196 samples, 13.37%)</title><rect x="446.3" y="1907.0" width="157.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="449.3" y="1918.0">com/linecorp/decaton..</text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="446.3" y="1891.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="449.3" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (195 samples, 13.30%)</title><rect x="447.1" y="1891.0" width="156.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="450.1" y="1902.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.27%)</title><rect x="452.7" y="1875.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="455.7" y="1886.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.20%)</title><rect x="453.5" y="1859.0" width="2.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="456.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (74 samples, 5.05%)</title><rect x="455.9" y="1875.0" width="59.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="458.9" y="1886.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (61 samples, 4.16%)</title><rect x="463.2" y="1859.0" width="49.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="466.2" y="1870.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (35 samples, 2.39%)</title><rect x="477.7" y="1843.0" width="28.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="480.7" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="485.7" y="1827.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="488.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (18 samples, 1.23%)</title><rect x="486.5" y="1827.0" width="14.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="489.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (18 samples, 1.23%)</title><rect x="486.5" y="1811.0" width="14.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="489.5" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (18 samples, 1.23%)</title><rect x="486.5" y="1795.0" width="14.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="489.5" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="487.3" y="1779.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="490.3" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (16 samples, 1.09%)</title><rect x="488.1" y="1779.0" width="12.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="491.1" y="1790.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.07%)</title><rect x="488.9" y="1763.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="491.9" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.34%)</title><rect x="489.7" y="1763.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="492.7" y="1774.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.07%)</title><rect x="490.5" y="1747.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="493.5" y="1758.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.14%)</title><rect x="491.3" y="1747.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="494.3" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.14%)</title><rect x="491.3" y="1731.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="494.3" y="1742.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="492.9" y="1747.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="495.9" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="492.9" y="1731.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="495.9" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.07%)</title><rect x="492.9" y="1715.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="495.9" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (8 samples, 0.55%)</title><rect x="493.8" y="1763.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="496.8" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (6 samples, 0.41%)</title><rect x="493.8" y="1747.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="496.8" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (5 samples, 0.34%)</title><rect x="493.8" y="1731.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="496.8" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (4 samples, 0.27%)</title><rect x="493.8" y="1715.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="496.8" y="1726.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (2 samples, 0.14%)</title><rect x="493.8" y="1699.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="496.8" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (2 samples, 0.14%)</title><rect x="493.8" y="1683.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="496.8" y="1694.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.07%)</title><rect x="493.8" y="1667.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="496.8" y="1678.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.07%)</title><rect x="494.6" y="1667.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="497.6" y="1678.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="495.4" y="1699.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="498.4" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="495.4" y="1683.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="498.4" y="1694.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="495.4" y="1667.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="498.4" y="1678.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.07%)</title><rect x="496.2" y="1699.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="499.2" y="1710.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.07%)</title><rect x="497.0" y="1715.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="500.0" y="1726.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="497.8" y="1731.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="500.8" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.07%)</title><rect x="498.6" y="1747.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="501.6" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="499.4" y="1747.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="502.4" y="1758.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.07%)</title><rect x="500.2" y="1763.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="503.2" y="1774.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.20%)</title><rect x="501.0" y="1827.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="504.0" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.20%)</title><rect x="503.4" y="1827.0" width="2.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="506.4" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.55%)</title><rect x="505.8" y="1843.0" width="6.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="508.8" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.27%)</title><rect x="512.3" y="1859.0" width="3.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="515.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="515.5" y="1875.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="518.5" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.07%)</title><rect x="515.5" y="1859.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="518.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.07%)</title><rect x="515.5" y="1843.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="518.5" y="1854.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="515.5" y="1827.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="518.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (14 samples, 0.95%)</title><rect x="516.3" y="1875.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="519.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (14 samples, 0.95%)</title><rect x="516.3" y="1859.0" width="11.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="519.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (14 samples, 0.95%)</title><rect x="516.3" y="1843.0" width="11.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="519.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.14%)</title><rect x="525.9" y="1827.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="528.9" y="1838.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (95 samples, 6.48%)</title><rect x="527.6" y="1875.0" width="76.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="530.6" y="1886.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (91 samples, 6.21%)</title><rect x="530.8" y="1859.0" width="73.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="533.8" y="1870.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (18 samples, 1.23%)</title><rect x="544.5" y="1843.0" width="14.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="547.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (18 samples, 1.23%)</title><rect x="544.5" y="1827.0" width="14.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="547.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (18 samples, 1.23%)</title><rect x="544.5" y="1811.0" width="14.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="547.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (18 samples, 1.23%)</title><rect x="544.5" y="1795.0" width="14.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="547.5" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="558.9" y="1843.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="561.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="558.9" y="1827.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="561.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="558.9" y="1811.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="561.9" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="558.9" y="1795.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="561.9" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (55 samples, 3.75%)</title><rect x="559.8" y="1843.0" width="44.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="562.8" y="1854.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (47 samples, 3.21%)</title><rect x="566.2" y="1827.0" width="37.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="569.2" y="1838.0">jav..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.07%)</title><rect x="570.2" y="1811.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="573.2" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.41%)</title><rect x="571.0" y="1811.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="574.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.41%)</title><rect x="571.0" y="1795.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="574.0" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (35 samples, 2.39%)</title><rect x="575.9" y="1811.0" width="28.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="578.9" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.14%)</title><rect x="589.5" y="1795.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="592.5" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (12 samples, 0.82%)</title><rect x="591.1" y="1795.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="594.1" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="600.0" y="1779.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="603.0" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="600.0" y="1763.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="603.0" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="600.0" y="1747.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="603.0" y="1758.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.27%)</title><rect x="600.8" y="1795.0" width="3.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="603.8" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (49 samples, 3.34%)</title><rect x="604.0" y="1907.0" width="39.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="607.0" y="1918.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (47 samples, 3.21%)</title><rect x="604.8" y="1891.0" width="37.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="607.8" y="1902.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="604.8" y="1875.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="607.8" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="604.8" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="607.8" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="604.8" y="1843.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="607.8" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="604.8" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="607.8" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="604.8" y="1811.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="607.8" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="604.8" y="1795.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="607.8" y="1806.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="604.8" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="607.8" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="604.8" y="1763.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="607.8" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.07%)</title><rect x="604.8" y="1747.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="607.8" y="1758.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.07%)</title><rect x="604.8" y="1731.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="607.8" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/698841530.process (25 samples, 1.71%)</title><rect x="605.6" y="1875.0" width="20.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="608.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (25 samples, 1.71%)</title><rect x="605.6" y="1859.0" width="20.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="608.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (18 samples, 1.23%)</title><rect x="606.4" y="1843.0" width="14.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="609.4" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="607.2" y="1827.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="610.2" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="607.2" y="1811.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="610.2" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.07%)</title><rect x="607.2" y="1795.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="610.2" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="607.2" y="1779.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="610.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="607.2" y="1763.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="610.2" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.55%)</title><rect x="608.0" y="1827.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="611.0" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.48%)</title><rect x="608.9" y="1811.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="611.9" y="1822.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.41%)</title><rect x="609.7" y="1795.0" width="4.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="612.7" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.55%)</title><rect x="614.5" y="1827.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="617.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (6 samples, 0.41%)</title><rect x="620.9" y="1843.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="623.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.41%)</title><rect x="620.9" y="1827.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="623.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.34%)</title><rect x="620.9" y="1811.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.34%)</title><rect x="620.9" y="1795.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="623.9" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 0.14%)</title><rect x="623.3" y="1779.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="626.3" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.07%)</title><rect x="625.0" y="1811.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="628.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="625.0" y="1795.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="628.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="625.0" y="1779.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="628.0" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.07%)</title><rect x="625.0" y="1763.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="628.0" y="1774.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="625.0" y="1747.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="628.0" y="1758.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="625.0" y="1731.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="628.0" y="1742.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="625.0" y="1715.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="628.0" y="1726.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="625.0" y="1699.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="628.0" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="625.0" y="1683.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="628.0" y="1694.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="625.0" y="1667.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="628.0" y="1678.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="625.0" y="1651.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="628.0" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.27%)</title><rect x="625.8" y="1875.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="628.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.27%)</title><rect x="625.8" y="1859.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="628.8" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="628.2" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="631.2" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="628.2" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="631.2" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="628.2" y="1811.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="631.2" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="628.2" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="631.2" y="1806.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="628.2" y="1779.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="631.2" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.61%)</title><rect x="629.0" y="1875.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="632.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.34%)</title><rect x="632.2" y="1859.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="635.2" y="1870.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="632.2" y="1843.0" width="1.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="635.2" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.20%)</title><rect x="633.8" y="1843.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="636.8" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.20%)</title><rect x="636.2" y="1875.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="639.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.20%)</title><rect x="636.2" y="1859.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.2" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.34%)</title><rect x="638.6" y="1875.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="641.6" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="640.2" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="643.2" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="640.2" y="1843.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="643.2" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="640.2" y="1827.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="643.2" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.14%)</title><rect x="641.1" y="1859.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="644.1" y="1870.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="642.7" y="1891.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="645.7" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.14%)</title><rect x="643.5" y="1907.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="646.5" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="643.5" y="1891.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="646.5" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="643.5" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="646.5" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="643.5" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="646.5" y="1870.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.07%)</title><rect x="644.3" y="1891.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="647.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (30 samples, 2.05%)</title><rect x="645.1" y="1907.0" width="24.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="648.1" y="1918.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (30 samples, 2.05%)</title><rect x="645.1" y="1891.0" width="24.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="648.1" y="1902.0">j..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="651.5" y="1875.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="654.5" y="1886.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.20%)</title><rect x="652.3" y="1875.0" width="2.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="655.3" y="1886.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.20%)</title><rect x="652.3" y="1859.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="655.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 1.02%)</title><rect x="654.7" y="1875.0" width="12.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="657.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/32083426.accept (15 samples, 1.02%)</title><rect x="654.7" y="1859.0" width="12.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="657.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (15 samples, 1.02%)</title><rect x="654.7" y="1843.0" width="12.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="657.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (15 samples, 1.02%)</title><rect x="654.7" y="1827.0" width="12.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="657.7" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (15 samples, 1.02%)</title><rect x="654.7" y="1811.0" width="12.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.7" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (15 samples, 1.02%)</title><rect x="654.7" y="1795.0" width="12.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="657.7" y="1806.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.27%)</title><rect x="662.8" y="1779.0" width="3.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="665.8" y="1790.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.27%)</title><rect x="662.8" y="1763.0" width="3.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="665.8" y="1774.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="666.0" y="1779.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="669.0" y="1790.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.07%)</title><rect x="666.8" y="1875.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="669.8" y="1886.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.14%)</title><rect x="667.6" y="1875.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="670.6" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.23%)</title><rect x="669.2" y="1923.0" width="14.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="672.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 1.23%)</title><rect x="669.2" y="1907.0" width="14.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="672.2" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="672.4" y="1891.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="675.4" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 0.89%)</title><rect x="673.2" y="1891.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.2" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/32083426.accept (13 samples, 0.89%)</title><rect x="673.2" y="1875.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="676.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (13 samples, 0.89%)</title><rect x="673.2" y="1859.0" width="10.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="676.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (13 samples, 0.89%)</title><rect x="673.2" y="1843.0" width="10.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="676.2" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (13 samples, 0.89%)</title><rect x="673.2" y="1827.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="676.2" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (13 samples, 0.89%)</title><rect x="673.2" y="1811.0" width="10.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="676.2" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.48%)</title><rect x="683.7" y="1923.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="686.7" y="1934.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.48%)</title><rect x="683.7" y="1907.0" width="5.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="686.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.34%)</title><rect x="689.3" y="1987.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="692.3" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.34%)</title><rect x="689.3" y="1971.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="692.3" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.34%)</title><rect x="689.3" y="1955.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="692.3" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.34%)</title><rect x="689.3" y="1939.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="692.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (265 samples, 18.08%)</title><rect x="693.4" y="1987.0" width="213.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="696.4" y="1998.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (265 samples, 18.08%)</title><rect x="693.4" y="1971.0" width="213.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="696.4" y="1982.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (240 samples, 16.37%)</title><rect x="694.2" y="1955.0" width="193.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="697.2" y="1966.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (14 samples, 0.95%)</title><rect x="700.6" y="1939.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="703.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.14%)</title><rect x="711.9" y="1939.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="714.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.20%)</title><rect x="713.5" y="1939.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="716.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.14%)</title><rect x="714.3" y="1923.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="717.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.14%)</title><rect x="714.3" y="1907.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="717.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.14%)</title><rect x="714.3" y="1891.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="717.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.20%)</title><rect x="715.9" y="1939.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="718.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.20%)</title><rect x="715.9" y="1923.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="718.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.20%)</title><rect x="715.9" y="1907.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="718.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.20%)</title><rect x="715.9" y="1891.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="718.9" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (4 samples, 0.27%)</title><rect x="718.3" y="1939.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="721.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (4 samples, 0.27%)</title><rect x="718.3" y="1923.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="721.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (206 samples, 14.05%)</title><rect x="721.5" y="1939.0" width="165.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="724.5" y="1950.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (206 samples, 14.05%)</title><rect x="721.5" y="1923.0" width="165.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="724.5" y="1934.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.20%)</title><rect x="733.6" y="1907.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="736.6" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="736.0" y="1907.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="739.0" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.27%)</title><rect x="736.8" y="1907.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="739.8" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (178 samples, 12.14%)</title><rect x="740.1" y="1907.0" width="143.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="743.1" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.20%)</title><rect x="744.9" y="1891.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="747.9" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (32 samples, 2.18%)</title><rect x="747.3" y="1891.0" width="25.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="750.3" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.61%)</title><rect x="757.8" y="1875.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="760.8" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.14%)</title><rect x="761.0" y="1859.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="764.0" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.14%)</title><rect x="762.6" y="1859.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="765.6" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="764.2" y="1859.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="767.2" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.20%)</title><rect x="765.0" y="1875.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="768.0" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.34%)</title><rect x="767.4" y="1875.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="770.4" y="1886.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.14%)</title><rect x="771.4" y="1875.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="774.4" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.14%)</title><rect x="773.1" y="1891.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="776.1" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.20%)</title><rect x="774.7" y="1891.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="777.7" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (4 samples, 0.27%)</title><rect x="777.1" y="1891.0" width="3.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="780.1" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (42 samples, 2.86%)</title><rect x="780.3" y="1891.0" width="33.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="783.3" y="1902.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (55 samples, 3.75%)</title><rect x="814.1" y="1891.0" width="44.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="817.1" y="1902.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (8 samples, 0.55%)</title><rect x="858.4" y="1891.0" width="6.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="861.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.20%)</title><rect x="864.8" y="1891.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="867.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.20%)</title><rect x="867.2" y="1891.0" width="2.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="870.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.34%)</title><rect x="869.6" y="1891.0" width="4.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="872.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.14%)</title><rect x="873.7" y="1891.0" width="1.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="876.7" y="1902.0"></text>
</g>
<g>
<title>_init (2 samples, 0.14%)</title><rect x="875.3" y="1891.0" width="1.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="878.3" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.27%)</title><rect x="876.9" y="1891.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="879.9" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.14%)</title><rect x="880.1" y="1891.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="883.1" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.14%)</title><rect x="881.7" y="1891.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="884.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.20%)</title><rect x="883.3" y="1907.0" width="2.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="886.3" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="885.7" y="1907.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="888.7" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="886.5" y="1907.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="889.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (24 samples, 1.64%)</title><rect x="887.4" y="1955.0" width="19.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="890.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (24 samples, 1.64%)</title><rect x="887.4" y="1939.0" width="19.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="890.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (24 samples, 1.64%)</title><rect x="887.4" y="1923.0" width="19.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="890.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (24 samples, 1.64%)</title><rect x="887.4" y="1907.0" width="19.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="890.4" y="1918.0"></text>
</g>
<g>
<title>start_thread (352 samples, 24.01%)</title><rect x="906.7" y="2035.0" width="283.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="909.7" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (352 samples, 24.01%)</title><rect x="906.7" y="2019.0" width="283.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="909.7" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (70 samples, 4.77%)</title><rect x="906.7" y="2003.0" width="56.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="909.7" y="2014.0">GangWo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (22 samples, 1.50%)</title><rect x="906.7" y="1987.0" width="17.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="909.7" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (22 samples, 1.50%)</title><rect x="906.7" y="1971.0" width="17.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="909.7" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.27%)</title><rect x="906.7" y="1955.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="909.7" y="1966.0"></text>
</g>
<g>
<title>SpinPause (18 samples, 1.23%)</title><rect x="909.9" y="1955.0" width="14.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="912.9" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (48 samples, 3.27%)</title><rect x="924.4" y="1987.0" width="38.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="927.4" y="1998.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (35 samples, 2.39%)</title><rect x="924.4" y="1971.0" width="28.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="927.4" y="1982.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.14%)</title><rect x="924.4" y="1955.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="927.4" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.14%)</title><rect x="924.4" y="1939.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="927.4" y="1950.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.07%)</title><rect x="925.2" y="1923.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="928.2" y="1934.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (8 samples, 0.55%)</title><rect x="926.0" y="1955.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="929.0" y="1966.0"></text>
</g>
<g>
<title>SpinPause (25 samples, 1.71%)</title><rect x="932.4" y="1955.0" width="20.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="935.4" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.41%)</title><rect x="952.6" y="1971.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="955.6" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.34%)</title><rect x="952.6" y="1955.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="955.6" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (4 samples, 0.27%)</title><rect x="952.6" y="1939.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="955.6" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (4 samples, 0.27%)</title><rect x="952.6" y="1923.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="955.6" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.14%)</title><rect x="953.4" y="1907.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="956.4" y="1918.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="955.0" y="1907.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="958.0" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="955.8" y="1939.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="958.8" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="955.8" y="1923.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="958.8" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="956.6" y="1955.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="959.6" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="956.6" y="1939.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="959.6" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.48%)</title><rect x="957.4" y="1971.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="960.4" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.48%)</title><rect x="957.4" y="1955.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="960.4" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.48%)</title><rect x="957.4" y="1939.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="960.4" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.48%)</title><rect x="957.4" y="1923.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.4" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.48%)</title><rect x="957.4" y="1907.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="960.4" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.48%)</title><rect x="957.4" y="1891.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="960.4" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (6 samples, 0.41%)</title><rect x="958.2" y="1875.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="961.2" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (4 samples, 0.27%)</title><rect x="958.2" y="1859.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="961.2" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.07%)</title><rect x="960.6" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="963.6" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.07%)</title><rect x="960.6" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="963.6" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (2 samples, 0.14%)</title><rect x="961.4" y="1859.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.4" y="1870.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.07%)</title><rect x="961.4" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="964.4" y="1854.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.07%)</title><rect x="962.2" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="965.2" y="1854.0"></text>
</g>
<g>
<title>JavaThread::run() (278 samples, 18.96%)</title><rect x="963.0" y="2003.0" width="223.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="966.0" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (278 samples, 18.96%)</title><rect x="963.0" y="1987.0" width="223.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="966.0" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (277 samples, 18.89%)</title><rect x="963.0" y="1971.0" width="223.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="966.0" y="1982.0">CompileBroker::compiler_threa..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (277 samples, 18.89%)</title><rect x="963.0" y="1955.0" width="223.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="966.0" y="1966.0">CompileBroker::invoke_compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (275 samples, 18.76%)</title><rect x="963.0" y="1939.0" width="221.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="966.0" y="1950.0">C2Compiler::compile_method(ci..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (275 samples, 18.76%)</title><rect x="963.0" y="1923.0" width="221.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="966.0" y="1934.0">Compile::Compile(ciEnv*, C2Co..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.07%)</title><rect x="963.0" y="1907.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="966.0" y="1918.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.07%)</title><rect x="963.0" y="1891.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="966.0" y="1902.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="963.0" y="1875.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="966.0" y="1886.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="963.0" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="966.0" y="1870.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="963.0" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="966.0" y="1854.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="963.0" y="1827.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="966.0" y="1838.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="963.0" y="1811.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="966.0" y="1822.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="963.0" y="1795.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="966.0" y="1806.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (78 samples, 5.32%)</title><rect x="963.8" y="1907.0" width="62.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="966.8" y="1918.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.20%)</title><rect x="963.8" y="1891.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="966.8" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.14%)</title><rect x="963.8" y="1875.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="966.8" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="965.4" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="968.4" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="965.4" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="968.4" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.07%)</title><rect x="965.4" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="968.4" y="1854.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.27%)</title><rect x="966.2" y="1891.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="969.2" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.20%)</title><rect x="967.0" y="1875.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="970.0" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="967.0" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="970.0" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="967.0" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="970.0" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.14%)</title><rect x="967.8" y="1859.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="970.8" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.14%)</title><rect x="967.8" y="1843.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="970.8" y="1854.0"></text>
</g>
<g>
<title>Matcher::match() (10 samples, 0.68%)</title><rect x="969.5" y="1891.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="972.5" y="1902.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.07%)</title><rect x="969.5" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="972.5" y="1886.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.14%)</title><rect x="970.3" y="1875.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="973.3" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.48%)</title><rect x="971.9" y="1875.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="974.9" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.20%)</title><rect x="972.7" y="1859.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="975.7" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.20%)</title><rect x="975.1" y="1859.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="978.1" y="1870.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.14%)</title><rect x="975.9" y="1843.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.9" y="1854.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.07%)</title><rect x="975.9" y="1827.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="978.9" y="1838.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.07%)</title><rect x="976.7" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.7" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.34%)</title><rect x="977.5" y="1891.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.5" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.07%)</title><rect x="977.5" y="1875.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="980.5" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.27%)</title><rect x="978.3" y="1875.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.3" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.20%)</title><rect x="978.3" y="1859.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="981.3" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="978.3" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="981.3" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="979.1" y="1843.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="982.1" y="1854.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.07%)</title><rect x="979.1" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="982.1" y="1838.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.07%)</title><rect x="979.1" y="1811.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="982.1" y="1822.0"></text>
</g>
<g>
<title>compP_mem_rRegNode::memory_operand() const (1 samples, 0.07%)</title><rect x="979.1" y="1795.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="982.1" y="1806.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.07%)</title><rect x="979.9" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="982.9" y="1854.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="979.9" y="1827.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="982.9" y="1838.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="979.9" y="1811.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="982.9" y="1822.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="979.9" y="1795.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="982.9" y="1806.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="980.7" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="983.7" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.07%)</title><rect x="981.5" y="1891.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="984.5" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.07%)</title><rect x="982.3" y="1891.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="985.3" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (53 samples, 3.62%)</title><rect x="983.1" y="1891.0" width="42.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="986.1" y="1902.0">Phas..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="983.1" y="1875.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="986.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="983.9" y="1875.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="986.9" y="1886.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.07%)</title><rect x="984.7" y="1875.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="987.7" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="985.6" y="1875.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.27%)</title><rect x="986.4" y="1875.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.4" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="988.0" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="991.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.07%)</title><rect x="988.8" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="991.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="988.8" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="991.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.34%)</title><rect x="989.6" y="1875.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="991.2" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.14%)</title><rect x="992.0" y="1859.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="995.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="992.0" y="1843.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.0" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (11 samples, 0.75%)</title><rect x="993.6" y="1875.0" width="8.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="996.6" y="1886.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="1000.8" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1003.8" y="1870.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.07%)</title><rect x="1000.8" y="1843.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1003.8" y="1854.0"></text>
</g>
<g>
<title>loadINode::out_RegMask() const (1 samples, 0.07%)</title><rect x="1001.7" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1004.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 0.82%)</title><rect x="1002.5" y="1875.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1005.5" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1005.7" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1008.7" y="1870.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="1006.5" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1009.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.34%)</title><rect x="1007.3" y="1859.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1010.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1010.5" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.5" y="1854.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="1011.3" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1014.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="1012.1" y="1875.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1015.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.14%)</title><rect x="1012.9" y="1875.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1015.9" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="1013.7" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1016.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.20%)</title><rect x="1014.5" y="1875.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1017.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.14%)</title><rect x="1015.3" y="1859.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1018.3" y="1870.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.07%)</title><rect x="1016.1" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1019.1" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.07%)</title><rect x="1016.9" y="1875.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1019.9" y="1886.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.14%)</title><rect x="1017.7" y="1875.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1020.7" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.14%)</title><rect x="1017.7" y="1859.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1020.7" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.14%)</title><rect x="1017.7" y="1843.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1020.7" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.07%)</title><rect x="1017.7" y="1827.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1020.7" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.07%)</title><rect x="1018.6" y="1827.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1021.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.14%)</title><rect x="1019.4" y="1875.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1022.4" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1020.2" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1023.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.14%)</title><rect x="1021.0" y="1875.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1024.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1021.8" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1024.8" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.27%)</title><rect x="1022.6" y="1875.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1025.6" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.14%)</title><rect x="1023.4" y="1859.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1026.4" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="1025.0" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1028.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1025.0" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1028.0" y="1854.0"></text>
</g>
<g>
<title>storePNode::ideal_Opcode() const (1 samples, 0.07%)</title><rect x="1025.8" y="1891.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1028.8" y="1902.0"></text>
</g>
<g>
<title>Compile::Optimize() (184 samples, 12.55%)</title><rect x="1026.6" y="1907.0" width="148.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.6" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="1026.6" y="1891.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.6" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="1026.6" y="1875.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.6" y="1886.0"></text>
</g>
<g>
<title>Node::subsume_by(Node*, Compile*) (1 samples, 0.07%)</title><rect x="1026.6" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1029.6" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.27%)</title><rect x="1027.4" y="1891.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1030.4" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.27%)</title><rect x="1027.4" y="1875.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1030.4" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1027.4" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1030.4" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.07%)</title><rect x="1027.4" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1030.4" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.07%)</title><rect x="1027.4" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1030.4" y="1838.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1027.4" y="1811.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1030.4" y="1822.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="1027.4" y="1795.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1030.4" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1027.4" y="1779.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1030.4" y="1790.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1027.4" y="1763.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1030.4" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.20%)</title><rect x="1028.2" y="1859.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1031.2" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="1028.2" y="1843.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1031.2" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="1028.2" y="1827.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1031.2" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="1028.2" y="1811.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1031.2" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1795.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1031.2" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1779.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.2" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1763.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1031.2" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1031.2" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1731.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1031.2" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1715.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.2" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1699.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1031.2" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1683.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1031.2" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1667.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1031.2" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1651.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1031.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1635.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1031.2" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1619.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.2" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1603.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1031.2" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1587.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1031.2" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1571.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1031.2" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1555.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1031.2" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1539.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1031.2" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1523.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1031.2" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1507.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1031.2" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1491.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1031.2" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1475.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1031.2" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1459.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1031.2" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1443.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.2" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1427.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.2" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1411.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1031.2" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1395.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1031.2" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1379.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1031.2" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1363.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1031.2" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1347.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1031.2" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1331.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1031.2" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1315.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1031.2" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1299.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1031.2" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1283.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1031.2" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1267.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.2" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1251.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1031.2" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1235.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1031.2" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1219.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.2" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1031.2" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1187.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1031.2" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1171.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1031.2" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1031.2" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1139.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1031.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1123.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1031.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1107.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1031.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1091.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1031.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1075.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1031.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1059.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1031.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1043.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1031.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1027.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1031.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="1011.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1031.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="995.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="979.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1031.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="963.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1031.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="947.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1031.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="931.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1031.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="915.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1031.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="899.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1031.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="883.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1031.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="1028.2" y="867.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.2" y="878.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1028.2" y="851.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1031.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1795.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1032.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1779.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1032.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1763.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1032.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1747.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1032.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1731.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1032.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1715.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1032.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1699.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1032.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1683.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1032.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1667.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1032.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1651.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1032.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1635.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1032.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1619.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1032.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1603.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1032.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1032.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1571.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1032.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1555.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1032.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1539.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1032.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1523.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1032.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1507.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1032.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1491.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1032.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1475.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1032.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1459.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1032.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1443.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1032.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1427.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1032.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1411.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1032.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1395.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1032.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1379.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1032.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1363.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1032.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1347.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1032.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1331.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1032.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1315.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1032.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1299.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1032.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1283.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1032.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1267.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1032.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1251.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1032.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1235.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1032.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1219.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1032.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1203.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1032.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1032.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1171.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1032.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1155.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1032.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1139.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1032.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1123.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1032.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1107.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1032.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1091.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1032.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1075.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1032.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1059.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1032.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1043.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1032.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1027.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1032.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="1011.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1032.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="995.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1032.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="979.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1032.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="963.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1032.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="947.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1032.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="931.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1032.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="915.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1032.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="899.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1032.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="883.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1032.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="867.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1032.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="851.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1032.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="835.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1032.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="819.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1032.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="803.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1032.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="787.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1032.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="771.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1032.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="755.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1032.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="739.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1032.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="723.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1032.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="707.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1032.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="691.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1032.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="675.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1032.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="659.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1032.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="643.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1032.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="627.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1032.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="611.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1032.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="595.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1032.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="579.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1032.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="563.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1032.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="547.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1032.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="531.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1032.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="515.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1032.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="499.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1032.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="483.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1032.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="467.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1032.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="451.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1032.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="435.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1032.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="419.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1032.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="403.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1032.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="387.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1032.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="371.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1032.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="355.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1032.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="339.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1032.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="323.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1032.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="307.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1032.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="291.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1032.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="1029.0" y="275.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1032.0" y="286.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.07%)</title><rect x="1029.0" y="259.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1032.0" y="270.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1029.0" y="243.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1032.0" y="254.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1029.8" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1032.8" y="1854.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.07%)</title><rect x="1030.6" y="1891.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1033.6" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (156 samples, 10.64%)</title><rect x="1031.4" y="1891.0" width="125.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.4" y="1902.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1031.4" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1034.4" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1032.2" y="1875.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1035.2" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1032.2" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1035.2" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1032.2" y="1843.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1035.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1032.2" y="1827.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1035.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1032.2" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1035.2" y="1822.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1032.2" y="1795.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1035.2" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1033.0" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.0" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1033.0" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.0" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1033.0" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.0" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1033.0" y="1827.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1033.0" y="1811.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1036.0" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.07%)</title><rect x="1033.0" y="1795.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.0" y="1806.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="1033.8" y="1875.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1036.8" y="1886.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.07%)</title><rect x="1034.7" y="1875.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.27%)</title><rect x="1035.5" y="1875.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1038.5" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.07%)</title><rect x="1037.1" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1040.1" y="1870.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="1037.9" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1040.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.27%)</title><rect x="1038.7" y="1875.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.7" y="1886.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (2 samples, 0.14%)</title><rect x="1040.3" y="1859.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1043.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (133 samples, 9.07%)</title><rect x="1041.9" y="1875.0" width="107.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1044.9" y="1886.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (128 samples, 8.73%)</title><rect x="1045.9" y="1859.0" width="103.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1048.9" y="1870.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (8 samples, 0.55%)</title><rect x="1049.9" y="1843.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1052.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (115 samples, 7.84%)</title><rect x="1056.4" y="1843.0" width="92.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1059.4" y="1854.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.07%)</title><rect x="1135.3" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1135.3" y="1811.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.3" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (14 samples, 0.95%)</title><rect x="1136.1" y="1827.0" width="11.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.14%)</title><rect x="1147.3" y="1827.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.20%)</title><rect x="1148.9" y="1875.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.34%)</title><rect x="1151.4" y="1875.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.27%)</title><rect x="1151.4" y="1859.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.07%)</title><rect x="1152.2" y="1843.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.07%)</title><rect x="1153.0" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1153.0" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1153.8" y="1843.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.8" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1153.8" y="1827.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.8" y="1838.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1153.8" y="1811.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.8" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1153.8" y="1795.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.8" y="1806.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="1153.8" y="1779.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.8" y="1790.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1153.8" y="1763.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.8" y="1774.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1153.8" y="1747.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.8" y="1758.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.07%)</title><rect x="1154.6" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.14%)</title><rect x="1155.4" y="1875.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.14%)</title><rect x="1155.4" y="1859.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.4" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1155.4" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.4" y="1854.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1155.4" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.4" y="1838.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1155.4" y="1811.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.4" y="1822.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1155.4" y="1795.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.4" y="1806.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1156.2" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.2" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1156.2" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (17 samples, 1.16%)</title><rect x="1157.0" y="1891.0" width="13.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1157.0" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.0" y="1886.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1157.0" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (16 samples, 1.09%)</title><rect x="1157.8" y="1875.0" width="12.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.8" y="1886.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1157.8" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.8" y="1870.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1158.6" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.6" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1159.4" y="1859.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.4" y="1870.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1159.4" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.4" y="1854.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.07%)</title><rect x="1159.4" y="1827.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.4" y="1838.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1159.4" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.4" y="1822.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="1159.4" y="1795.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.4" y="1806.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1159.4" y="1779.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.4" y="1790.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1159.4" y="1763.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.4" y="1774.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.07%)</title><rect x="1159.4" y="1747.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.4" y="1758.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1160.2" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.2" y="1870.0"></text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.07%)</title><rect x="1161.0" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.0" y="1870.0"></text>
</g>
<g>
<title>MultiNode::hash() const (1 samples, 0.07%)</title><rect x="1161.8" y="1859.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.8" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.14%)</title><rect x="1162.6" y="1859.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.6" y="1870.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1163.4" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.27%)</title><rect x="1164.2" y="1859.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.2" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1167.5" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1167.5" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.5" y="1854.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.07%)</title><rect x="1167.5" y="1827.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.5" y="1838.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1168.3" y="1859.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.3" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.14%)</title><rect x="1168.3" y="1843.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1168.3" y="1827.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.3" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.14%)</title><rect x="1168.3" y="1811.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.3" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1795.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.3" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1779.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.3" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1763.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.3" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1747.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1731.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.3" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1715.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.3" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1699.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.3" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1683.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.3" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1667.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.3" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1651.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.3" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1635.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.3" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1619.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.3" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1603.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1587.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.3" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1571.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.3" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1555.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="1566.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1168.3" y="1539.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.3" y="1550.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1168.3" y="1523.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="1534.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.1" y="1795.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.1" y="1806.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1169.1" y="1779.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.1" y="1790.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1169.9" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.9" y="1870.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1169.9" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.9" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.9" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.9" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1169.9" y="1811.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="1822.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1170.7" y="1891.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.7" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1170.7" y="1875.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.7" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1170.7" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.7" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.14%)</title><rect x="1171.5" y="1891.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.5" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1171.5" y="1875.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.5" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1171.5" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.5" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.07%)</title><rect x="1171.5" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1171.5" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.5" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_lock_node(LockNode*) (1 samples, 0.07%)</title><rect x="1172.3" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.3" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_slow_call(CallNode*, TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1172.3" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1172.3" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1172.3" y="1827.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.3" y="1838.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1172.3" y="1811.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.3" y="1822.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.07%)</title><rect x="1173.1" y="1891.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.1" y="1902.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1173.9" y="1891.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1176.9" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.82%)</title><rect x="1174.7" y="1907.0" width="9.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.7" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.82%)</title><rect x="1174.7" y="1891.0" width="9.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.7" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.82%)</title><rect x="1174.7" y="1875.0" width="9.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.7" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.82%)</title><rect x="1174.7" y="1859.0" width="9.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.7" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 0.82%)</title><rect x="1174.7" y="1843.0" width="9.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.7" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.82%)</title><rect x="1174.7" y="1827.0" width="9.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.7" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.7" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.7" y="1822.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1174.7" y="1795.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.7" y="1806.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1174.7" y="1779.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.7" y="1790.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1174.7" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.7" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1174.7" y="1747.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.7" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1174.7" y="1731.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.7" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1174.7" y="1715.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.7" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1174.7" y="1699.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.7" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1174.7" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.7" y="1694.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1174.7" y="1667.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.7" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1174.7" y="1651.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.7" y="1662.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1174.7" y="1635.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.7" y="1646.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1174.7" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.7" y="1630.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1174.7" y="1603.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.7" y="1614.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1174.7" y="1587.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.7" y="1598.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.55%)</title><rect x="1175.5" y="1811.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.5" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.55%)</title><rect x="1175.5" y="1795.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.5" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.55%)</title><rect x="1175.5" y="1779.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.55%)</title><rect x="1175.5" y="1763.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.55%)</title><rect x="1175.5" y="1747.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.48%)</title><rect x="1176.3" y="1731.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.34%)</title><rect x="1176.3" y="1715.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.34%)</title><rect x="1176.3" y="1699.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.34%)</title><rect x="1176.3" y="1683.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.3" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.34%)</title><rect x="1176.3" y="1667.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.3" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.34%)</title><rect x="1176.3" y="1651.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.34%)</title><rect x="1176.3" y="1635.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1176.3" y="1619.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1176.3" y="1603.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1176.3" y="1587.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1176.3" y="1571.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1176.3" y="1555.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1176.3" y="1539.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1176.3" y="1523.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1176.3" y="1507.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="1518.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1176.3" y="1491.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="1502.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1176.3" y="1475.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="1486.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.07%)</title><rect x="1176.3" y="1459.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="1470.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1176.3" y="1443.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="1454.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1176.3" y="1427.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="1438.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1176.3" y="1411.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="1422.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1176.3" y="1395.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="1406.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.07%)</title><rect x="1176.3" y="1379.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="1390.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1176.3" y="1363.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.3" y="1374.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.07%)</title><rect x="1176.3" y="1347.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1177.1" y="1491.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.1" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1177.1" y="1475.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1177.1" y="1459.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1177.1" y="1443.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.1" y="1427.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.1" y="1411.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.1" y="1395.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.1" y="1379.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.1" y="1363.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.1" y="1347.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.1" y="1331.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.1" y="1315.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.1" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.1" y="1299.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.1" y="1283.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.1" y="1267.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.1" y="1278.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1177.1" y="1251.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="1262.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.07%)</title><rect x="1177.1" y="1235.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="1246.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.07%)</title><rect x="1177.1" y="1219.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.1" y="1230.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.9" y="1427.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.9" y="1411.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.9" y="1395.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.9" y="1379.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.9" y="1363.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.9" y="1347.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.07%)</title><rect x="1177.9" y="1331.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="1342.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.07%)</title><rect x="1177.9" y="1315.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="1326.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1177.9" y="1299.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="1310.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1177.9" y="1283.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="1294.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1177.9" y="1267.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.9" y="1278.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.7" y="1523.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.7" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.7" y="1507.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.7" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.7" y="1491.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.7" y="1475.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.7" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.7" y="1459.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.7" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.7" y="1443.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.7" y="1427.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.7" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.7" y="1411.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.7" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.7" y="1395.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.7" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.7" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.7" y="1363.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.7" y="1347.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.7" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.7" y="1331.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.7" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.7" y="1315.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.7" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.7" y="1299.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.7" y="1283.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.7" y="1267.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.7" y="1251.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.7" y="1235.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.7" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.7" y="1219.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.7" y="1203.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.7" y="1187.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.7" y="1171.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.7" y="1155.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.7" y="1139.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.7" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.7" y="1123.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.7" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.7" y="1107.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.7" y="1091.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.7" y="1075.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.7" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.7" y="1043.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.7" y="1027.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.7" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.7" y="1011.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.7" y="1022.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.07%)</title><rect x="1178.7" y="995.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.7" y="1006.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.07%)</title><rect x="1178.7" y="979.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.7" y="990.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1178.7" y="963.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.7" y="974.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1178.7" y="947.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1181.7" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.5" y="1619.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.5" y="1603.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.5" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.5" y="1587.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.5" y="1571.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.5" y="1555.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.5" y="1539.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.5" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.5" y="1523.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.5" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.5" y="1507.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.5" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.5" y="1491.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.5" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.5" y="1475.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.5" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.5" y="1459.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.5" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.5" y="1443.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.5" y="1427.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.5" y="1411.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.5" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.5" y="1395.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.5" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.5" y="1379.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.5" y="1363.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.5" y="1347.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.5" y="1331.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.5" y="1342.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.5" y="1315.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.5" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.5" y="1299.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.5" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.5" y="1283.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.5" y="1267.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.5" y="1251.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.5" y="1235.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.5" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.5" y="1230.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1179.5" y="1203.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.5" y="1214.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1179.5" y="1187.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="1198.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1179.5" y="1171.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="1182.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1179.5" y="1155.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.5" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1179.5" y="1139.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1179.5" y="1123.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.5" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1179.5" y="1107.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1179.5" y="1091.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1179.5" y="1075.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.5" y="1086.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1179.5" y="1059.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1179.5" y="1043.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.5" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1179.5" y="1027.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="1038.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1179.5" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.5" y="1022.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1179.5" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.5" y="1006.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1179.5" y="979.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.5" y="990.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.07%)</title><rect x="1179.5" y="963.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="974.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.07%)</title><rect x="1179.5" y="947.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="958.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.07%)</title><rect x="1179.5" y="931.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="942.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.3" y="1715.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.3" y="1699.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.3" y="1683.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.3" y="1667.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.3" y="1651.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.3" y="1635.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.3" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.3" y="1619.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.3" y="1603.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.3" y="1587.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.3" y="1571.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.3" y="1555.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.3" y="1539.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.3" y="1523.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.3" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.3" y="1507.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.3" y="1491.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.3" y="1475.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.3" y="1459.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.3" y="1443.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.3" y="1427.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="1438.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1180.3" y="1411.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="1422.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1180.3" y="1395.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="1406.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1180.3" y="1379.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="1390.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.07%)</title><rect x="1180.3" y="1363.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="1374.0"></text>
</g>
<g>
<title>ciMethod::was_executed_more_than(int) (1 samples, 0.07%)</title><rect x="1180.3" y="1347.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="1358.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.07%)</title><rect x="1181.1" y="1619.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.1" y="1630.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1181.1" y="1603.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.1" y="1614.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1181.1" y="1587.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.1" y="1598.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1182.0" y="1811.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.0" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1182.0" y="1795.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.0" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1182.0" y="1779.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.0" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.0" y="1763.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.0" y="1747.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.0" y="1731.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.0" y="1715.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.0" y="1726.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.0" y="1699.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="1710.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.0" y="1683.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="1694.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.0" y="1667.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.0" y="1678.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.0" y="1651.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.0" y="1635.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.0" y="1646.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.0" y="1619.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.0" y="1630.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.0" y="1603.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.0" y="1587.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.0" y="1571.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.0" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.0" y="1555.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.0" y="1539.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.0" y="1523.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.0" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.0" y="1507.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.0" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.0" y="1491.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.0" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.0" y="1459.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.0" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.0" y="1443.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.0" y="1427.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.0" y="1411.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.0" y="1395.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.0" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.0" y="1379.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.0" y="1390.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1182.0" y="1363.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="1374.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1182.0" y="1347.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="1358.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.07%)</title><rect x="1182.0" y="1331.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.0" y="1342.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1182.0" y="1315.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="1326.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.07%)</title><rect x="1182.0" y="1299.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.0" y="1310.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.07%)</title><rect x="1182.0" y="1283.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.0" y="1294.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.07%)</title><rect x="1182.8" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="1774.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.6" y="1795.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="1806.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.6" y="1779.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="1790.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.6" y="1763.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.6" y="1774.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.6" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.6" y="1731.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.6" y="1742.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.6" y="1715.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="1726.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.6" y="1699.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.6" y="1710.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.6" y="1683.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="1694.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.6" y="1667.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.6" y="1651.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.6" y="1635.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="1646.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.6" y="1619.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.6" y="1630.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="1603.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.6" y="1614.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="1587.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="1598.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1183.6" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="1582.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1183.6" y="1555.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="1566.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.14%)</title><rect x="1184.4" y="1939.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.4" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.14%)</title><rect x="1184.4" y="1923.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.4" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.14%)</title><rect x="1184.4" y="1907.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.14%)</title><rect x="1184.4" y="1891.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.07%)</title><rect x="1184.4" y="1875.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1184.4" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.4" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.07%)</title><rect x="1184.4" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.4" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.07%)</title><rect x="1184.4" y="1827.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.4" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1184.4" y="1811.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1184.4" y="1795.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.4" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1184.4" y="1779.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.4" y="1790.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1184.4" y="1763.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="1774.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1184.4" y="1747.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.4" y="1758.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1184.4" y="1731.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.4" y="1742.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1184.4" y="1715.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="1726.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1184.4" y="1699.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="1710.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1184.4" y="1683.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.4" y="1694.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1184.4" y="1667.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="1678.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1184.4" y="1651.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.4" y="1662.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1184.4" y="1635.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.4" y="1646.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.07%)</title><rect x="1184.4" y="1619.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.4" y="1630.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.07%)</title><rect x="1184.4" y="1603.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="1614.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.07%)</title><rect x="1185.2" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="1886.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.07%)</title><rect x="1185.2" y="1859.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.2" y="1870.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.07%)</title><rect x="1185.2" y="1843.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="1854.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.07%)</title><rect x="1185.2" y="1827.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.2" y="1838.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.07%)</title><rect x="1185.2" y="1811.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.2" y="1822.0"></text>
</g>
<g>
<title>OopMap::set_oop(VMRegImpl*) (1 samples, 0.07%)</title><rect x="1185.2" y="1795.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.2" y="1806.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.07%)</title><rect x="1185.2" y="1779.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="1790.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1186.0" y="1971.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.0" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1186.0" y="1955.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.0" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1186.0" y="1939.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.0" y="1950.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.07%)</title><rect x="1186.0" y="1923.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.0" y="1934.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1186.0" y="1907.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="1918.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1186.0" y="1891.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.0" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (4 samples, 0.27%)</title><rect x="1186.8" y="2003.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.8" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (4 samples, 0.27%)</title><rect x="1186.8" y="1987.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.8" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1186.8" y="1971.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.8" y="1982.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.07%)</title><rect x="1187.6" y="1971.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.6" y="1982.0"></text>
</g>
<g>
<title>RuntimeService::record_safepoint_end() (1 samples, 0.07%)</title><rect x="1187.6" y="1955.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.6" y="1966.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.14%)</title><rect x="1188.4" y="1971.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.4" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.14%)</title><rect x="1188.4" y="1955.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.4" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.14%)</title><rect x="1188.4" y="1939.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.4" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.07%)</title><rect x="1188.4" y="1923.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.4" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1188.4" y="1907.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.4" y="1918.0"></text>
</g>
<g>
<title>DerivedPointerTable::update_pointers() (1 samples, 0.07%)</title><rect x="1188.4" y="1891.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.4" y="1902.0"></text>
</g>
<g>
<title>VM_GC_Operation::notify_gc_end() (1 samples, 0.07%)</title><rect x="1189.2" y="1923.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.2" y="1934.0"></text>
</g>
</g>
</svg>
