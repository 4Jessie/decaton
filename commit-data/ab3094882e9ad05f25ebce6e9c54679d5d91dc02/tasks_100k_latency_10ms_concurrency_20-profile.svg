<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (290 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 8.97%)</title><rect x="10.0" y="739.0" width="105.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="750.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.69%)</title><rect x="10.0" y="723.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.69%)</title><rect x="10.0" y="707.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.69%)</title><rect x="10.0" y="691.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.forEach (1 samples, 0.34%)</title><rect x="10.0" y="675.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.34%)</title><rect x="14.1" y="675.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.34%)</title><rect x="14.1" y="659.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.34%)</title><rect x="14.1" y="643.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.34%)</title><rect x="14.1" y="627.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedSends (1 samples, 0.34%)</title><rect x="14.1" y="611.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.lastSent (1 samples, 0.34%)</title><rect x="14.1" y="595.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.requestQueue (1 samples, 0.34%)</title><rect x="14.1" y="579.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.1" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (24 samples, 8.28%)</title><rect x="18.1" y="723.0" width="97.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.1" y="734.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.34%)</title><rect x="18.1" y="707.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.34%)</title><rect x="18.1" y="691.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/817352842.accept (1 samples, 0.34%)</title><rect x="18.1" y="675.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.34%)</title><rect x="18.1" y="659.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.34%)</title><rect x="18.1" y="643.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.1" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.34%)</title><rect x="18.1" y="627.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.34%)</title><rect x="22.2" y="707.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.34%)</title><rect x="22.2" y="691.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.34%)</title><rect x="22.2" y="675.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="22.2" y="659.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.2" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.34%)</title><rect x="22.2" y="643.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="22.2" y="627.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.34%)</title><rect x="22.2" y="611.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.2" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.34%)</title><rect x="22.2" y="595.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.2" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.34%)</title><rect x="22.2" y="579.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.34%)</title><rect x="22.2" y="563.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.34%)</title><rect x="22.2" y="547.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.2" y="558.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.34%)</title><rect x="22.2" y="531.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.2" y="542.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (11 samples, 3.79%)</title><rect x="26.3" y="707.0" width="44.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.3" y="718.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1796066652.accept (10 samples, 3.45%)</title><rect x="26.3" y="691.0" width="40.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.3" y="702.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (9 samples, 3.10%)</title><rect x="30.3" y="675.0" width="36.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.3" y="686.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (4 samples, 1.38%)</title><rect x="30.3" y="659.0" width="16.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.3" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (4 samples, 1.38%)</title><rect x="30.3" y="643.0" width="16.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (4 samples, 1.38%)</title><rect x="30.3" y="627.0" width="16.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.38%)</title><rect x="30.3" y="611.0" width="16.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.38%)</title><rect x="30.3" y="595.0" width="16.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.38%)</title><rect x="30.3" y="579.0" width="16.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.34%)</title><rect x="42.6" y="563.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.34%)</title><rect x="42.6" y="547.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.34%)</title><rect x="42.6" y="531.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.6" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.34%)</title><rect x="46.6" y="659.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.6" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.34%)</title><rect x="46.6" y="643.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.34%)</title><rect x="46.6" y="627.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (4 samples, 1.38%)</title><rect x="50.7" y="659.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.7" y="670.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.34%)</title><rect x="67.0" y="691.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.34%)</title><rect x="67.0" y="675.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.34%)</title><rect x="67.0" y="659.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.34%)</title><rect x="67.0" y="643.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.0" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$EmptySet.iterator (1 samples, 0.34%)</title><rect x="67.0" y="627.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="70.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.79%)</title><rect x="71.0" y="707.0" width="44.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.0" y="718.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.79%)</title><rect x="71.0" y="691.0" width="44.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.0" y="702.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.41%)</title><rect x="71.0" y="675.0" width="28.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.0" y="686.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.03%)</title><rect x="71.0" y="659.0" width="12.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.03%)</title><rect x="71.0" y="643.0" width="12.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (2 samples, 0.69%)</title><rect x="75.1" y="627.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (2 samples, 0.69%)</title><rect x="75.1" y="611.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (2 samples, 0.69%)</title><rect x="75.1" y="595.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (2 samples, 0.69%)</title><rect x="75.1" y="579.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="78.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.34%)</title><rect x="75.1" y="563.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.34%)</title><rect x="75.1" y="547.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="78.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.lazySetNext (1 samples, 0.34%)</title><rect x="75.1" y="531.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.34%)</title><rect x="79.2" y="563.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="82.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.34%)</title><rect x="79.2" y="547.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.34%)</title><rect x="79.2" y="531.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.34%)</title><rect x="79.2" y="515.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.34%)</title><rect x="79.2" y="499.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.38%)</title><rect x="83.2" y="659.0" width="16.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.peek (1 samples, 0.34%)</title><rect x="83.2" y="643.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.03%)</title><rect x="87.3" y="643.0" width="12.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.34%)</title><rect x="87.3" y="627.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.34%)</title><rect x="87.3" y="611.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.34%)</title><rect x="87.3" y="595.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="90.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.34%)</title><rect x="87.3" y="579.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.34%)</title><rect x="87.3" y="563.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.34%)</title><rect x="87.3" y="547.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.34%)</title><rect x="87.3" y="531.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.34%)</title><rect x="87.3" y="515.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.34%)</title><rect x="87.3" y="499.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.34%)</title><rect x="87.3" y="483.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.34%)</title><rect x="91.4" y="627.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.34%)</title><rect x="91.4" y="611.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="94.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.34%)</title><rect x="91.4" y="595.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="94.4" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.34%)</title><rect x="91.4" y="579.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="94.4" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.34%)</title><rect x="91.4" y="563.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.34%)</title><rect x="95.4" y="627.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.34%)</title><rect x="95.4" y="611.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.34%)</title><rect x="95.4" y="595.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.4" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.34%)</title><rect x="95.4" y="579.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="98.4" y="590.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.34%)</title><rect x="95.4" y="563.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.34%)</title><rect x="95.4" y="547.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.4" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="95.4" y="531.0" width="4.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="98.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.34%)</title><rect x="99.5" y="675.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.34%)</title><rect x="99.5" y="659.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.34%)</title><rect x="99.5" y="643.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="102.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.34%)</title><rect x="99.5" y="627.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.34%)</title><rect x="99.5" y="611.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.34%)</title><rect x="99.5" y="595.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.5" y="606.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.34%)</title><rect x="99.5" y="579.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.5" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.34%)</title><rect x="99.5" y="563.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.5" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.34%)</title><rect x="99.5" y="547.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.69%)</title><rect x="103.6" y="675.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="106.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.69%)</title><rect x="103.6" y="659.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="106.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.69%)</title><rect x="103.6" y="643.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="106.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="103.6" y="627.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="106.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="103.6" y="611.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="106.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.34%)</title><rect x="103.6" y="595.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.6" y="606.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.34%)</title><rect x="103.6" y="579.0" width="4.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="106.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.34%)</title><rect x="107.7" y="627.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="110.7" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.34%)</title><rect x="107.7" y="611.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="110.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.34%)</title><rect x="107.7" y="595.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.7" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.34%)</title><rect x="107.7" y="579.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="110.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.34%)</title><rect x="107.7" y="563.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.34%)</title><rect x="107.7" y="547.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="110.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.34%)</title><rect x="107.7" y="531.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="110.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.34%)</title><rect x="107.7" y="515.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="110.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.34%)</title><rect x="111.7" y="675.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="114.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.34%)</title><rect x="111.7" y="659.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="114.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.34%)</title><rect x="111.7" y="643.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="114.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.34%)</title><rect x="111.7" y="627.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="114.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.34%)</title><rect x="111.7" y="611.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="114.7" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="111.7" y="595.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="114.7" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.34%)</title><rect x="111.7" y="579.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="114.7" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="111.7" y="563.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="114.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.34%)</title><rect x="111.7" y="547.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="114.7" y="558.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.34%)</title><rect x="111.7" y="531.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="114.7" y="542.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.34%)</title><rect x="111.7" y="515.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="114.7" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.34%)</title><rect x="111.7" y="499.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="114.7" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.34%)</title><rect x="111.7" y="483.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="114.7" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.34%)</title><rect x="111.7" y="467.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="114.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$259/323695806.apply (1 samples, 0.34%)</title><rect x="111.7" y="451.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="114.7" y="462.0"></text>
</g>
<g>
<title>java/lang/Thread.run (219 samples, 75.52%)</title><rect x="115.8" y="739.0" width="891.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="118.8" y="750.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (219 samples, 75.52%)</title><rect x="115.8" y="723.0" width="891.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="118.8" y="734.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (219 samples, 75.52%)</title><rect x="115.8" y="707.0" width="891.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="118.8" y="718.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1333145026.run (209 samples, 72.07%)</title><rect x="119.9" y="691.0" width="850.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="122.9" y="702.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1333145026.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (209 samples, 72.07%)</title><rect x="119.9" y="675.0" width="850.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.9" y="686.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (209 samples, 72.07%)</title><rect x="119.9" y="659.0" width="850.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.9" y="670.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (208 samples, 71.72%)</title><rect x="119.9" y="643.0" width="846.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="122.9" y="654.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (32 samples, 11.03%)</title><rect x="128.0" y="627.0" width="130.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="131.0" y="638.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (32 samples, 11.03%)</title><rect x="128.0" y="611.0" width="130.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="131.0" y="622.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (32 samples, 11.03%)</title><rect x="128.0" y="595.0" width="130.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="131.0" y="606.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 11.03%)</title><rect x="128.0" y="579.0" width="130.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.0" y="590.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 11.03%)</title><rect x="128.0" y="563.0" width="130.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="131.0" y="574.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (32 samples, 11.03%)</title><rect x="128.0" y="547.0" width="130.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="131.0" y="558.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 3.45%)</title><rect x="128.0" y="531.0" width="40.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="131.0" y="542.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.38%)</title><rect x="128.0" y="515.0" width="16.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="131.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.38%)</title><rect x="128.0" y="499.0" width="16.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="131.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.34%)</title><rect x="140.2" y="483.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.2" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.34%)</title><rect x="140.2" y="467.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="143.2" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.34%)</title><rect x="140.2" y="451.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.2" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.34%)</title><rect x="140.2" y="435.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 2.07%)</title><rect x="144.3" y="515.0" width="24.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.3" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (2 samples, 0.69%)</title><rect x="144.3" y="499.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="147.3" y="510.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.34%)</title><rect x="148.3" y="483.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.38%)</title><rect x="152.4" y="499.0" width="16.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="155.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.34%)</title><rect x="160.6" y="483.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.34%)</title><rect x="160.6" y="467.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.34%)</title><rect x="160.6" y="451.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="163.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.34%)</title><rect x="164.6" y="483.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="167.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (20 samples, 6.90%)</title><rect x="168.7" y="531.0" width="81.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.7" y="542.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.34%)</title><rect x="168.7" y="515.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="171.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.34%)</title><rect x="168.7" y="499.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="171.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.34%)</title><rect x="168.7" y="483.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.69%)</title><rect x="172.8" y="515.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="175.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.69%)</title><rect x="172.8" y="499.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.34%)</title><rect x="176.8" y="483.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.69%)</title><rect x="180.9" y="515.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="183.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.69%)</title><rect x="180.9" y="499.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.69%)</title><rect x="180.9" y="483.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.69%)</title><rect x="180.9" y="467.0" width="8.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="183.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.69%)</title><rect x="180.9" y="451.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.69%)</title><rect x="189.0" y="515.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="192.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.69%)</title><rect x="189.0" y="499.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="192.0" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.69%)</title><rect x="189.0" y="483.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="192.0" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.69%)</title><rect x="189.0" y="467.0" width="8.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="192.0" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.69%)</title><rect x="189.0" y="451.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="192.0" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.69%)</title><rect x="189.0" y="435.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="192.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (13 samples, 4.48%)</title><rect x="197.2" y="515.0" width="52.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.2" y="526.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.38%)</title><rect x="197.2" y="499.0" width="16.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.34%)</title><rect x="209.4" y="483.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="212.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (9 samples, 3.10%)</title><rect x="213.4" y="499.0" width="36.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.4" y="510.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (9 samples, 3.10%)</title><rect x="213.4" y="483.0" width="36.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.4" y="494.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 3.10%)</title><rect x="213.4" y="467.0" width="36.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.4" y="478.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.38%)</title><rect x="221.6" y="451.0" width="16.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.69%)</title><rect x="229.7" y="435.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.69%)</title><rect x="229.7" y="419.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.69%)</title><rect x="229.7" y="403.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.34%)</title><rect x="237.9" y="451.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.34%)</title><rect x="237.9" y="435.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.9" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="237.9" y="419.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="240.9" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="237.9" y="403.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="240.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.69%)</title><rect x="241.9" y="451.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.69%)</title><rect x="241.9" y="435.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.69%)</title><rect x="241.9" y="419.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.69%)</title><rect x="241.9" y="403.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.9" y="414.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.69%)</title><rect x="241.9" y="387.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.9" y="398.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.34%)</title><rect x="246.0" y="371.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.0" y="382.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.34%)</title><rect x="246.0" y="355.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.0" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.69%)</title><rect x="250.1" y="531.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.69%)</title><rect x="250.1" y="515.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.69%)</title><rect x="250.1" y="499.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.34%)</title><rect x="250.1" y="483.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (1 samples, 0.34%)</title><rect x="254.1" y="483.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.1" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (151 samples, 52.07%)</title><rect x="258.2" y="627.0" width="614.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.2" y="638.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (26 samples, 8.97%)</title><rect x="258.2" y="611.0" width="105.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.2" y="622.0">com/linecorp/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (25 samples, 8.62%)</title><rect x="262.3" y="595.0" width="101.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.3" y="606.0">org/slf4j/MD..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (21 samples, 7.24%)</title><rect x="278.6" y="579.0" width="85.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.6" y="590.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 3.10%)</title><rect x="290.8" y="563.0" width="36.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.8" y="574.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 3.10%)</title><rect x="290.8" y="547.0" width="36.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="293.8" y="558.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.34%)</title><rect x="323.3" y="531.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="326.3" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.34%)</title><rect x="323.3" y="515.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="326.3" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.34%)</title><rect x="323.3" y="499.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="326.3" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.34%)</title><rect x="327.4" y="563.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.4" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.34%)</title><rect x="327.4" y="547.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.34%)</title><rect x="327.4" y="531.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="330.4" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (8 samples, 2.76%)</title><rect x="331.4" y="563.0" width="32.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.4" y="574.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 2.76%)</title><rect x="331.4" y="547.0" width="32.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.4" y="558.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 2.76%)</title><rect x="331.4" y="531.0" width="32.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="334.4" y="542.0">ja..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.69%)</title><rect x="355.9" y="515.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.9" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 1.72%)</title><rect x="364.0" y="611.0" width="20.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="367.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.38%)</title><rect x="368.1" y="595.0" width="16.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="371.1" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 1.38%)</title><rect x="368.1" y="579.0" width="16.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.1" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (24 samples, 8.28%)</title><rect x="384.3" y="611.0" width="97.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="387.3" y="622.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (24 samples, 8.28%)</title><rect x="384.3" y="595.0" width="97.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="387.3" y="606.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (11 samples, 3.79%)</title><rect x="392.5" y="579.0" width="44.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="395.5" y="590.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.72%)</title><rect x="404.7" y="563.0" width="20.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="407.7" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.72%)</title><rect x="404.7" y="547.0" width="20.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="407.7" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.69%)</title><rect x="404.7" y="531.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="407.7" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.69%)</title><rect x="404.7" y="515.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="407.7" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.69%)</title><rect x="404.7" y="499.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.7" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.69%)</title><rect x="404.7" y="483.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="407.7" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.34%)</title><rect x="412.8" y="531.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="415.8" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="416.9" y="531.0" width="4.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="419.9" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="421.0" y="531.0" width="4.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="424.0" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 1.03%)</title><rect x="425.0" y="563.0" width="12.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="428.0" y="574.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.69%)</title><rect x="437.2" y="579.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="440.2" y="590.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.34%)</title><rect x="437.2" y="563.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="440.2" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.34%)</title><rect x="437.2" y="547.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="440.2" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.34%)</title><rect x="437.2" y="531.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="440.2" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="437.2" y="515.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="440.2" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.34%)</title><rect x="437.2" y="499.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="440.2" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.34%)</title><rect x="441.3" y="563.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="444.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.34%)</title><rect x="441.3" y="547.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="444.3" y="558.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 3.10%)</title><rect x="445.4" y="579.0" width="36.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="448.4" y="590.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (9 samples, 3.10%)</title><rect x="445.4" y="563.0" width="36.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="448.4" y="574.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.69%)</title><rect x="445.4" y="547.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="448.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.69%)</title><rect x="445.4" y="531.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="448.4" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.34%)</title><rect x="449.4" y="515.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="452.4" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.34%)</title><rect x="449.4" y="499.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="452.4" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.34%)</title><rect x="449.4" y="483.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="452.4" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 2.41%)</title><rect x="453.5" y="547.0" width="28.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="456.5" y="558.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 1.38%)</title><rect x="465.7" y="531.0" width="16.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="468.7" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.38%)</title><rect x="465.7" y="515.0" width="16.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="468.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.34%)</title><rect x="473.9" y="499.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.9" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.34%)</title><rect x="477.9" y="499.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.9" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (84 samples, 28.97%)</title><rect x="482.0" y="611.0" width="341.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="485.0" y="622.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (84 samples, 28.97%)</title><rect x="482.0" y="595.0" width="341.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="485.0" y="606.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/698841530.process (72 samples, 24.83%)</title><rect x="502.3" y="579.0" width="293.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="505.3" y="590.0">com/linecorp/decaton/benchmark/DecatonR..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (72 samples, 24.83%)</title><rect x="502.3" y="563.0" width="293.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="505.3" y="574.0">com/linecorp/decaton/benchmark/DecatonR..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (72 samples, 24.83%)</title><rect x="502.3" y="547.0" width="293.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="505.3" y="558.0">com/linecorp/decaton/benchmark/Recordin..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.69%)</title><rect x="506.4" y="531.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="509.4" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.69%)</title><rect x="506.4" y="515.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="509.4" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.69%)</title><rect x="506.4" y="499.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="509.4" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.69%)</title><rect x="506.4" y="483.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="509.4" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (69 samples, 23.79%)</title><rect x="514.6" y="531.0" width="280.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="517.6" y="542.0">com/linecorp/decaton/benchmark/Recordi..</text>
</g>
<g>
<title>java/lang/Thread.sleep (68 samples, 23.45%)</title><rect x="518.6" y="515.0" width="276.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="521.6" y="526.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (57 samples, 19.66%)</title><rect x="551.2" y="499.0" width="231.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="554.2" y="510.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 1.03%)</title><rect x="563.4" y="483.0" width="12.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="566.4" y="494.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 1.38%)</title><rect x="575.6" y="483.0" width="16.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="578.6" y="494.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.69%)</title><rect x="591.9" y="483.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="594.9" y="494.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (45 samples, 15.52%)</title><rect x="600.0" y="483.0" width="183.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="603.0" y="494.0">os::sleep(Thread*, long,..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.34%)</title><rect x="644.8" y="467.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="647.8" y="478.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.34%)</title><rect x="644.8" y="451.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="647.8" y="462.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.34%)</title><rect x="648.8" y="467.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="651.8" y="478.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.69%)</title><rect x="652.9" y="467.0" width="8.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="655.9" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.34%)</title><rect x="661.0" y="467.0" width="4.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="664.0" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (15 samples, 5.17%)</title><rect x="665.1" y="467.0" width="61.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="668.1" y="478.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.69%)</title><rect x="726.1" y="467.0" width="8.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="729.1" y="478.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.34%)</title><rect x="734.3" y="467.0" width="4.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="737.3" y="478.0"></text>
</g>
<g>
<title>_init (1 samples, 0.34%)</title><rect x="738.3" y="467.0" width="4.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="741.3" y="478.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 2.41%)</title><rect x="742.4" y="467.0" width="28.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="745.4" y="478.0">os..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.34%)</title><rect x="770.9" y="467.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="773.9" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.69%)</title><rect x="775.0" y="467.0" width="8.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="778.0" y="478.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.69%)</title><rect x="783.1" y="499.0" width="8.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="786.1" y="510.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.34%)</title><rect x="791.2" y="499.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="794.2" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/558187323.linkToTargetMethod (1 samples, 0.34%)</title><rect x="795.3" y="579.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="798.3" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.34%)</title><rect x="795.3" y="563.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="798.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$284/901092341.get$Lambda (1 samples, 0.34%)</title><rect x="795.3" y="547.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="798.3" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.03%)</title><rect x="799.4" y="579.0" width="12.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="802.4" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 1.03%)</title><rect x="799.4" y="563.0" width="12.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="802.4" y="574.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.34%)</title><rect x="799.4" y="547.0" width="4.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="802.4" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.69%)</title><rect x="803.4" y="547.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="806.4" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.69%)</title><rect x="811.6" y="579.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="814.6" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.69%)</title><rect x="811.6" y="563.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="814.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.34%)</title><rect x="819.7" y="579.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="822.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.34%)</title><rect x="823.8" y="611.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.8" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="823.8" y="595.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="826.8" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="823.8" y="579.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="826.8" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="823.8" y="563.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="826.8" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="823.8" y="547.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="826.8" y="558.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.34%)</title><rect x="823.8" y="531.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="826.8" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.34%)</title><rect x="823.8" y="515.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="826.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 3.79%)</title><rect x="827.9" y="611.0" width="44.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="830.9" y="622.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 3.79%)</title><rect x="827.9" y="595.0" width="44.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="830.9" y="606.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.72%)</title><rect x="852.3" y="579.0" width="20.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="855.3" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/194243449.accept (5 samples, 1.72%)</title><rect x="852.3" y="563.0" width="20.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="855.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (5 samples, 1.72%)</title><rect x="852.3" y="547.0" width="20.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="855.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (5 samples, 1.72%)</title><rect x="852.3" y="531.0" width="20.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="855.3" y="542.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 1.72%)</title><rect x="852.3" y="515.0" width="20.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="855.3" y="526.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 1.72%)</title><rect x="852.3" y="499.0" width="20.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="855.3" y="510.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.03%)</title><rect x="860.4" y="483.0" width="12.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="863.4" y="494.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.03%)</title><rect x="860.4" y="467.0" width="12.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="863.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 7.59%)</title><rect x="872.6" y="627.0" width="89.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="875.6" y="638.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 7.59%)</title><rect x="872.6" y="611.0" width="89.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="875.6" y="622.0">java/util/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.34%)</title><rect x="880.8" y="595.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="883.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (19 samples, 6.55%)</title><rect x="884.8" y="595.0" width="77.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="887.8" y="606.0">java/util..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/194243449.accept (1 samples, 0.34%)</title><rect x="884.8" y="579.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="887.8" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (1 samples, 0.34%)</title><rect x="884.8" y="563.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="887.8" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.34%)</title><rect x="884.8" y="547.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="887.8" y="558.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.34%)</title><rect x="884.8" y="531.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="887.8" y="542.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.34%)</title><rect x="884.8" y="515.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="887.8" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$291/2049302934.accept (18 samples, 6.21%)</title><rect x="888.9" y="579.0" width="73.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="891.9" y="590.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$44 (18 samples, 6.21%)</title><rect x="888.9" y="563.0" width="73.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="891.9" y="574.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1839797240.complete (18 samples, 6.21%)</title><rect x="888.9" y="547.0" width="73.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="891.9" y="558.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$54 (18 samples, 6.21%)</title><rect x="888.9" y="531.0" width="73.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="891.9" y="542.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (18 samples, 6.21%)</title><rect x="888.9" y="515.0" width="73.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="891.9" y="526.0">com/line..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (18 samples, 6.21%)</title><rect x="888.9" y="499.0" width="73.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="891.9" y="510.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (18 samples, 6.21%)</title><rect x="888.9" y="483.0" width="73.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="891.9" y="494.0">ch/qos/l..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.34%)</title><rect x="962.1" y="627.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="965.1" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="962.1" y="611.0" width="4.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="965.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.34%)</title><rect x="966.2" y="643.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="969.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.34%)</title><rect x="970.3" y="691.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="973.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.34%)</title><rect x="970.3" y="675.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="973.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.34%)</title><rect x="970.3" y="659.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="973.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.34%)</title><rect x="970.3" y="643.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="973.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 2.76%)</title><rect x="974.3" y="691.0" width="32.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="977.3" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 1.72%)</title><rect x="986.6" y="675.0" width="20.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="989.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.03%)</title><rect x="994.7" y="659.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="997.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.03%)</title><rect x="994.7" y="643.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="997.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.03%)</title><rect x="994.7" y="627.0" width="12.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="997.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.03%)</title><rect x="994.7" y="611.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="997.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.34%)</title><rect x="1006.9" y="739.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1009.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.34%)</title><rect x="1006.9" y="723.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1009.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.34%)</title><rect x="1006.9" y="707.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1009.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.34%)</title><rect x="1006.9" y="691.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1009.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.34%)</title><rect x="1006.9" y="675.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1009.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.34%)</title><rect x="1006.9" y="659.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1009.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.34%)</title><rect x="1006.9" y="643.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1009.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.34%)</title><rect x="1006.9" y="627.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1009.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.34%)</title><rect x="1006.9" y="611.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1009.9" y="622.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.34%)</title><rect x="1006.9" y="595.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1009.9" y="606.0"></text>
</g>
<g>
<title>start_thread (44 samples, 15.17%)</title><rect x="1011.0" y="739.0" width="179.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1014.0" y="750.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (44 samples, 15.17%)</title><rect x="1011.0" y="723.0" width="179.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1014.0" y="734.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 4.14%)</title><rect x="1011.0" y="707.0" width="48.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1014.0" y="718.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 4.14%)</title><rect x="1011.0" y="691.0" width="48.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1014.0" y="702.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 4.14%)</title><rect x="1011.0" y="675.0" width="48.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1014.0" y="686.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 2.07%)</title><rect x="1011.0" y="659.0" width="24.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.0" y="670.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.03%)</title><rect x="1015.0" y="643.0" width="12.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1018.0" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.69%)</title><rect x="1019.1" y="627.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1022.1" y="638.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.69%)</title><rect x="1027.2" y="643.0" width="8.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1030.2" y="654.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 0.69%)</title><rect x="1035.4" y="659.0" width="8.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1038.4" y="670.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.69%)</title><rect x="1043.5" y="659.0" width="8.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1046.5" y="670.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.69%)</title><rect x="1051.7" y="659.0" width="8.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1054.7" y="670.0"></text>
</g>
<g>
<title>JavaThread::run() (32 samples, 11.03%)</title><rect x="1059.8" y="707.0" width="130.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1062.8" y="718.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (32 samples, 11.03%)</title><rect x="1059.8" y="691.0" width="130.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.8" y="702.0">JavaThread::thre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (32 samples, 11.03%)</title><rect x="1059.8" y="675.0" width="130.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1062.8" y="686.0">CompileBroker::c..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (32 samples, 11.03%)</title><rect x="1059.8" y="659.0" width="130.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1062.8" y="670.0">CompileBroker::i..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (29 samples, 10.00%)</title><rect x="1059.8" y="643.0" width="118.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1062.8" y="654.0">C2Compiler::co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (29 samples, 10.00%)</title><rect x="1059.8" y="627.0" width="118.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1062.8" y="638.0">Compile::Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (16 samples, 5.52%)</title><rect x="1059.8" y="611.0" width="65.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1062.8" y="622.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.69%)</title><rect x="1059.8" y="595.0" width="8.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1062.8" y="606.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.34%)</title><rect x="1059.8" y="579.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1062.8" y="590.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.34%)</title><rect x="1063.9" y="579.0" width="4.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1066.9" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.34%)</title><rect x="1067.9" y="595.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.9" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.34%)</title><rect x="1067.9" y="579.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.9" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.34%)</title><rect x="1067.9" y="563.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1070.9" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 4.48%)</title><rect x="1072.0" y="595.0" width="52.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.0" y="606.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.34%)</title><rect x="1072.0" y="579.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1075.0" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.34%)</title><rect x="1072.0" y="563.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1075.0" y="574.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.34%)</title><rect x="1072.0" y="547.0" width="4.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1075.0" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 1.03%)</title><rect x="1076.1" y="579.0" width="12.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1079.1" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.03%)</title><rect x="1076.1" y="563.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.1" y="574.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="1084.2" y="547.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.2" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.69%)</title><rect x="1088.3" y="579.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.3" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.34%)</title><rect x="1092.3" y="563.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1095.3" y="574.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="1092.3" y="547.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1095.3" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.03%)</title><rect x="1096.4" y="579.0" width="12.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1099.4" y="590.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.34%)</title><rect x="1100.5" y="563.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.5" y="574.0"></text>
</g>
<g>
<title>loadNKlassNode::oper_input_base() const (1 samples, 0.34%)</title><rect x="1104.6" y="563.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.6" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.34%)</title><rect x="1108.6" y="579.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.6" y="590.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.34%)</title><rect x="1108.6" y="563.0" width="4.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1111.6" y="574.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.34%)</title><rect x="1112.7" y="579.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.7" y="590.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.34%)</title><rect x="1112.7" y="563.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.7" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.34%)</title><rect x="1112.7" y="547.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.7" y="558.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.34%)</title><rect x="1116.8" y="579.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.8" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="1116.8" y="563.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.8" y="574.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.34%)</title><rect x="1120.8" y="579.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.8" y="590.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.34%)</title><rect x="1120.8" y="563.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.8" y="574.0"></text>
</g>
<g>
<title>Compile::Optimize() (11 samples, 3.79%)</title><rect x="1124.9" y="611.0" width="44.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.9" y="622.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.34%)</title><rect x="1124.9" y="595.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.9" y="606.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.34%)</title><rect x="1124.9" y="579.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.9" y="590.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.34%)</title><rect x="1124.9" y="563.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.9" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.34%)</title><rect x="1129.0" y="595.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.34%)</title><rect x="1129.0" y="579.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.34%)</title><rect x="1129.0" y="563.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::add_base(FieldNode*, PointsToNode*) (1 samples, 0.34%)</title><rect x="1129.0" y="547.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.0" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (6 samples, 2.07%)</title><rect x="1133.0" y="595.0" width="24.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.0" y="606.0">P..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.34%)</title><rect x="1133.0" y="579.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.0" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.69%)</title><rect x="1137.1" y="579.0" width="8.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.1" y="590.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.34%)</title><rect x="1141.2" y="563.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.2" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.69%)</title><rect x="1145.2" y="579.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.34%)</title><rect x="1153.4" y="579.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.4" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.69%)</title><rect x="1157.4" y="595.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.4" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.69%)</title><rect x="1157.4" y="579.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.4" y="590.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.34%)</title><rect x="1157.4" y="563.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.4" y="574.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1161.5" y="563.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.5" y="574.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.34%)</title><rect x="1161.5" y="547.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1161.5" y="531.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.5" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1161.5" y="515.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.5" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1161.5" y="499.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.5" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1161.5" y="483.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1161.5" y="467.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.5" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1161.5" y="451.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.5" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1161.5" y="435.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.5" y="446.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.34%)</title><rect x="1161.5" y="419.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.5" y="430.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.34%)</title><rect x="1161.5" y="403.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.5" y="414.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.34%)</title><rect x="1165.6" y="595.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.6" y="606.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.34%)</title><rect x="1165.6" y="579.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.6" y="590.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.34%)</title><rect x="1165.6" y="563.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.6" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.34%)</title><rect x="1165.6" y="547.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1169.7" y="611.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1169.7" y="595.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1169.7" y="579.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1169.7" y="563.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1169.7" y="547.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1169.7" y="531.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1169.7" y="515.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1169.7" y="499.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1169.7" y="483.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1169.7" y="467.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1169.7" y="451.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1169.7" y="435.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1169.7" y="419.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1169.7" y="403.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1169.7" y="387.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1169.7" y="371.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1169.7" y="355.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1169.7" y="339.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1169.7" y="323.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1169.7" y="307.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1169.7" y="291.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1169.7" y="275.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1169.7" y="259.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1169.7" y="243.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1169.7" y="227.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1169.7" y="211.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1169.7" y="195.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1169.7" y="179.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1169.7" y="163.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1169.7" y="147.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.7" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1169.7" y="131.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.7" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1169.7" y="115.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1169.7" y="99.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.7" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1169.7" y="83.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.7" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1169.7" y="67.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.7" y="78.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.34%)</title><rect x="1169.7" y="51.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.7" y="62.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.34%)</title><rect x="1169.7" y="35.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1173.7" y="515.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1173.7" y="499.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1173.7" y="483.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1173.7" y="467.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1173.7" y="451.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1173.7" y="435.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1173.7" y="419.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1173.7" y="403.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1173.7" y="387.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1173.7" y="371.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1173.7" y="355.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1173.7" y="339.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1173.7" y="323.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.7" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1173.7" y="307.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.7" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1173.7" y="291.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.7" y="302.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.34%)</title><rect x="1173.7" y="275.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.7" y="286.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.03%)</title><rect x="1177.8" y="643.0" width="12.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="654.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.03%)</title><rect x="1177.8" y="627.0" width="12.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="638.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.03%)</title><rect x="1177.8" y="611.0" width="12.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="622.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.03%)</title><rect x="1177.8" y="595.0" width="12.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.8" y="606.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.69%)</title><rect x="1177.8" y="579.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="590.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.69%)</title><rect x="1177.8" y="563.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.8" y="574.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.69%)</title><rect x="1177.8" y="547.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.69%)</title><rect x="1177.8" y="531.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.8" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.69%)</title><rect x="1177.8" y="515.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.69%)</title><rect x="1177.8" y="499.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.69%)</title><rect x="1177.8" y="483.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.8" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.69%)</title><rect x="1177.8" y="467.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.69%)</title><rect x="1177.8" y="451.0" width="8.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.8" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::profile_call(ciMethod*, Instruction*, ciKlass*, Values*, bool) (1 samples, 0.34%)</title><rect x="1177.8" y="435.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="446.0"></text>
</g>
<g>
<title>Compilation::cha_exact_type(ciType*) (1 samples, 0.34%)</title><rect x="1177.8" y="419.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.8" y="430.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.34%)</title><rect x="1181.9" y="435.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.9" y="446.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.34%)</title><rect x="1181.9" y="419.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.9" y="430.0"></text>
</g>
<g>
<title>methodHandle::methodHandle(methodHandle const&amp;) (1 samples, 0.34%)</title><rect x="1181.9" y="403.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.9" y="414.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.34%)</title><rect x="1185.9" y="579.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="590.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.34%)</title><rect x="1185.9" y="563.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.9" y="574.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.34%)</title><rect x="1185.9" y="547.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.9" y="558.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.34%)</title><rect x="1185.9" y="531.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="542.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.34%)</title><rect x="1185.9" y="515.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="526.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.34%)</title><rect x="1185.9" y="499.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.9" y="510.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.34%)</title><rect x="1185.9" y="483.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="494.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.34%)</title><rect x="1185.9" y="467.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.9" y="478.0"></text>
</g>
</g>
</svg>
