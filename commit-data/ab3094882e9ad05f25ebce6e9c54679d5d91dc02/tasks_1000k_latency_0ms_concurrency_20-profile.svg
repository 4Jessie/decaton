<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1029"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1029"> </text>
<g id="frames">
<g>
<title>all (1,176 samples, 100.00%)</title><rect x="10.0" y="995.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1006.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (284 samples, 24.15%)</title><rect x="10.0" y="979.0" width="285.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="990.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.09%)</title><rect x="11.0" y="963.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.09%)</title><rect x="11.0" y="947.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.09%)</title><rect x="11.0" y="931.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.09%)</title><rect x="11.0" y="915.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="926.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.09%)</title><rect x="11.0" y="899.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (282 samples, 23.98%)</title><rect x="12.0" y="963.0" width="283.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.0" y="974.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.09%)</title><rect x="12.0" y="947.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.0" y="958.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="12.0" y="931.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.0" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="12.0" y="915.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.0" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.09%)</title><rect x="12.0" y="899.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.0" y="910.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.09%)</title><rect x="12.0" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.0" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.09%)</title><rect x="12.0" y="867.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.0" y="878.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="12.0" y="851.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.0" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.09%)</title><rect x="12.0" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.0" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="12.0" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.0" y="830.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.09%)</title><rect x="12.0" y="803.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.0" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="13.0" y="947.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="16.0" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="13.0" y="931.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="16.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.17%)</title><rect x="14.0" y="947.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.09%)</title><rect x="15.0" y="931.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1707510292.accept (1 samples, 0.09%)</title><rect x="15.0" y="915.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.09%)</title><rect x="15.0" y="899.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.09%)</title><rect x="15.0" y="883.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.0" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.09%)</title><rect x="15.0" y="867.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.26%)</title><rect x="16.0" y="947.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.26%)</title><rect x="16.0" y="931.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.26%)</title><rect x="16.0" y="915.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="16.0" y="899.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.26%)</title><rect x="16.0" y="883.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.26%)</title><rect x="16.0" y="867.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="16.0" y="851.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.17%)</title><rect x="16.0" y="835.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="17.0" y="819.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="17.0" y="803.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$266/495827185.test (1 samples, 0.09%)</title><rect x="17.0" y="787.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$partitionsNeedsPause$61 (1 samples, 0.09%)</title><rect x="17.0" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.pendingTasksCount (1 samples, 0.09%)</title><rect x="17.0" y="755.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.09%)</title><rect x="17.0" y="739.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="18.0" y="835.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="18.0" y="819.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="18.0" y="803.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="18.0" y="787.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/1168875844.get (1 samples, 0.09%)</title><rect x="18.0" y="771.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (3 samples, 0.26%)</title><rect x="19.0" y="947.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (3 samples, 0.26%)</title><rect x="19.0" y="931.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.26%)</title><rect x="19.0" y="915.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="19.0" y="899.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.26%)</title><rect x="19.0" y="883.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.26%)</title><rect x="19.0" y="867.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="19.0" y="851.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.0" y="862.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="19.0" y="835.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="22.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.17%)</title><rect x="20.0" y="835.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="20.0" y="819.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="20.0" y="803.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$268/2100975623.test (1 samples, 0.09%)</title><rect x="20.0" y="787.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.0" y="798.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="21.0" y="787.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="24.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="22.0" y="947.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="25.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.09%)</title><rect x="22.0" y="931.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.09%)</title><rect x="23.0" y="947.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.0" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="23.0" y="931.0" width="1.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="26.0" y="942.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="23.0" y="915.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="26.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (214 samples, 18.20%)</title><rect x="24.0" y="947.0" width="214.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.0" y="958.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1495811397.accept (205 samples, 17.43%)</title><rect x="24.0" y="931.0" width="205.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.0" y="942.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (203 samples, 17.26%)</title><rect x="26.1" y="915.0" width="203.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="29.1" y="926.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.09%)</title><rect x="31.1" y="899.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="34.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (161 samples, 13.69%)</title><rect x="32.1" y="899.0" width="161.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="35.1" y="910.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (161 samples, 13.69%)</title><rect x="32.1" y="883.0" width="161.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.1" y="894.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (161 samples, 13.69%)</title><rect x="32.1" y="867.0" width="161.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="35.1" y="878.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (161 samples, 13.69%)</title><rect x="32.1" y="851.0" width="161.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.1" y="862.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (161 samples, 13.69%)</title><rect x="32.1" y="835.0" width="161.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.1" y="846.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (161 samples, 13.69%)</title><rect x="32.1" y="819.0" width="161.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="35.1" y="830.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (112 samples, 9.52%)</title><rect x="32.1" y="803.0" width="112.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.1" y="814.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (40 samples, 3.40%)</title><rect x="32.1" y="787.0" width="40.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.1" y="798.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (38 samples, 3.23%)</title><rect x="34.1" y="771.0" width="38.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="37.1" y="782.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (38 samples, 3.23%)</title><rect x="34.1" y="755.0" width="38.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.1" y="766.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (38 samples, 3.23%)</title><rect x="34.1" y="739.0" width="38.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="37.1" y="750.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.60%)</title><rect x="72.2" y="787.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (7 samples, 0.60%)</title><rect x="72.2" y="771.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.34%)</title><rect x="72.2" y="755.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.2" y="766.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (4 samples, 0.34%)</title><rect x="72.2" y="739.0" width="4.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="75.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.26%)</title><rect x="76.2" y="755.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (65 samples, 5.53%)</title><rect x="79.2" y="787.0" width="65.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.2" y="798.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (65 samples, 5.53%)</title><rect x="79.2" y="771.0" width="65.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="82.2" y="782.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (65 samples, 5.53%)</title><rect x="79.2" y="755.0" width="65.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="82.2" y="766.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (65 samples, 5.53%)</title><rect x="79.2" y="739.0" width="65.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="82.2" y="750.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (63 samples, 5.36%)</title><rect x="81.2" y="723.0" width="63.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.2" y="734.0">sun/mis..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="82.2" y="707.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="85.2" y="718.0"></text>
</g>
<g>
<title>Unsafe_Unpark (51 samples, 4.34%)</title><rect x="83.2" y="707.0" width="51.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="86.2" y="718.0">Unsaf..</text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.26%)</title><rect x="85.3" y="691.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="88.3" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_signal (35 samples, 2.98%)</title><rect x="88.3" y="691.0" width="35.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="91.3" y="702.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.26%)</title><rect x="123.4" y="691.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="126.4" y="702.0"></text>
</g>
<g>
<title>pthread_mutex_lock (8 samples, 0.68%)</title><rect x="126.4" y="691.0" width="8.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="129.4" y="702.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.43%)</title><rect x="134.4" y="707.0" width="5.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="137.4" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.43%)</title><rect x="139.4" y="707.0" width="5.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="142.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (42 samples, 3.57%)</title><rect x="144.5" y="803.0" width="42.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="147.5" y="814.0">java..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.34%)</title><rect x="182.6" y="787.0" width="4.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="185.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.51%)</title><rect x="186.6" y="803.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (6 samples, 0.51%)</title><rect x="186.6" y="787.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.51%)</title><rect x="186.6" y="771.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="189.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="192.6" y="803.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="192.6" y="787.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="192.6" y="771.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.17%)</title><rect x="193.6" y="899.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.17%)</title><rect x="193.6" y="883.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.43%)</title><rect x="195.6" y="899.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="198.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.43%)</title><rect x="195.6" y="883.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="198.6" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.43%)</title><rect x="195.6" y="867.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="198.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (23 samples, 1.96%)</title><rect x="200.6" y="899.0" width="23.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.6" y="910.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (23 samples, 1.96%)</title><rect x="200.6" y="883.0" width="23.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="203.6" y="894.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.26%)</title><rect x="217.7" y="867.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="220.7" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.17%)</title><rect x="218.7" y="851.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.7" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.17%)</title><rect x="218.7" y="835.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.7" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.17%)</title><rect x="218.7" y="819.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.7" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="220.7" y="867.0" width="3.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="223.7" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.51%)</title><rect x="223.7" y="899.0" width="6.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="226.7" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="229.7" y="931.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="232.7" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="230.7" y="931.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.7" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.09%)</title><rect x="230.7" y="915.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="230.7" y="899.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="230.7" y="883.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.60%)</title><rect x="231.8" y="931.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.60%)</title><rect x="231.8" y="915.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.60%)</title><rect x="231.8" y="899.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.60%)</title><rect x="231.8" y="883.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.8" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (6 samples, 0.51%)</title><rect x="232.8" y="867.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 4.76%)</title><rect x="238.8" y="947.0" width="56.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="241.8" y="958.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 4.76%)</title><rect x="238.8" y="931.0" width="56.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.8" y="942.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 3.15%)</title><rect x="238.8" y="915.0" width="37.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="241.8" y="926.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (36 samples, 3.06%)</title><rect x="239.8" y="899.0" width="36.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="242.8" y="910.0">org..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="239.8" y="883.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.8" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="239.8" y="867.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.09%)</title><rect x="239.8" y="851.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.09%)</title><rect x="239.8" y="835.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 2.98%)</title><rect x="240.8" y="883.0" width="35.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="243.8" y="894.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (31 samples, 2.64%)</title><rect x="240.8" y="867.0" width="31.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="243.8" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (30 samples, 2.55%)</title><rect x="240.8" y="851.0" width="30.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="243.8" y="862.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (17 samples, 1.45%)</title><rect x="243.8" y="835.0" width="17.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.60%)</title><rect x="253.8" y="819.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.60%)</title><rect x="253.8" y="803.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.60%)</title><rect x="253.8" y="787.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="256.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.60%)</title><rect x="253.8" y="771.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.60%)</title><rect x="253.8" y="755.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.60%)</title><rect x="253.8" y="739.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.51%)</title><rect x="254.8" y="723.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 0.85%)</title><rect x="260.9" y="835.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.85%)</title><rect x="260.9" y="819.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (10 samples, 0.85%)</title><rect x="260.9" y="803.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.9" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (10 samples, 0.85%)</title><rect x="260.9" y="787.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.9" y="798.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (5 samples, 0.43%)</title><rect x="265.9" y="771.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (5 samples, 0.43%)</title><rect x="265.9" y="755.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (5 samples, 0.43%)</title><rect x="265.9" y="739.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (5 samples, 0.43%)</title><rect x="265.9" y="723.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.9" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="269.9" y="707.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="272.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="270.9" y="851.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.26%)</title><rect x="271.9" y="867.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.26%)</title><rect x="271.9" y="851.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.26%)</title><rect x="271.9" y="835.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.26%)</title><rect x="271.9" y="819.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.26%)</title><rect x="271.9" y="803.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="273.9" y="787.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.09%)</title><rect x="274.9" y="867.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.09%)</title><rect x="274.9" y="851.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.85%)</title><rect x="275.9" y="915.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.68%)</title><rect x="276.9" y="899.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.51%)</title><rect x="276.9" y="883.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.9" y="894.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.17%)</title><rect x="276.9" y="867.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/1704725119.accept (2 samples, 0.17%)</title><rect x="276.9" y="851.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.17%)</title><rect x="276.9" y="835.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="279.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.17%)</title><rect x="276.9" y="819.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (2 samples, 0.17%)</title><rect x="276.9" y="803.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (2 samples, 0.17%)</title><rect x="276.9" y="787.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="279.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.09%)</title><rect x="276.9" y="771.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="277.9" y="771.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="278.9" y="867.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="279.9" y="867.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="279.9" y="851.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="282.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="279.9" y="835.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="280.9" y="867.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="280.9" y="851.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.09%)</title><rect x="280.9" y="835.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="283.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.09%)</title><rect x="280.9" y="819.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.9" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.09%)</title><rect x="280.9" y="803.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="280.9" y="787.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="280.9" y="771.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="280.9" y="755.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.09%)</title><rect x="281.9" y="867.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="281.9" y="851.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="281.9" y="835.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="281.9" y="819.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="281.9" y="803.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="281.9" y="787.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="281.9" y="771.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.9" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="281.9" y="755.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.9" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="281.9" y="739.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="281.9" y="723.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.17%)</title><rect x="282.9" y="883.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (2 samples, 0.17%)</title><rect x="282.9" y="867.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.9" y="878.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.17%)</title><rect x="282.9" y="851.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.9" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.spliterator (1 samples, 0.09%)</title><rect x="282.9" y="835.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.9" y="846.0"></text>
</g>
<g>
<title>java/util/Spliterators.spliterator (1 samples, 0.09%)</title><rect x="282.9" y="819.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="282.9" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="283.9" y="835.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="283.9" y="819.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="284.9" y="899.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.09%)</title><rect x="284.9" y="883.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.09%)</title><rect x="284.9" y="867.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.26%)</title><rect x="285.9" y="915.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.17%)</title><rect x="285.9" y="899.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="286.9" y="883.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="286.9" y="867.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="289.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.09%)</title><rect x="286.9" y="851.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="286.9" y="835.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="286.9" y="819.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.9" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.09%)</title><rect x="286.9" y="803.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="286.9" y="787.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="287.9" y="899.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="287.9" y="883.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="287.9" y="867.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="287.9" y="851.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="287.9" y="835.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="287.9" y="819.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.09%)</title><rect x="287.9" y="803.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.09%)</title><rect x="287.9" y="787.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="290.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.09%)</title><rect x="287.9" y="771.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="290.9" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="287.9" y="755.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.arrayElementType (1 samples, 0.09%)</title><rect x="287.9" y="739.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.43%)</title><rect x="288.9" y="915.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.34%)</title><rect x="289.9" y="899.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.34%)</title><rect x="289.9" y="883.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="292.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.26%)</title><rect x="291.0" y="867.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="294.0" y="878.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.09%)</title><rect x="291.0" y="851.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="294.0" y="862.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.09%)</title><rect x="291.0" y="835.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="294.0" y="846.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.09%)</title><rect x="291.0" y="819.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="294.0" y="830.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.09%)</title><rect x="291.0" y="803.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="294.0" y="814.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.09%)</title><rect x="291.0" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="294.0" y="798.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.09%)</title><rect x="291.0" y="771.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="294.0" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::protection_domain() const (1 samples, 0.09%)</title><rect x="291.0" y="755.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="294.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="292.0" y="851.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="295.0" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.09%)</title><rect x="292.0" y="835.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="292.0" y="819.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="292.0" y="803.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="292.0" y="787.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="292.0" y="771.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="293.0" y="835.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="296.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="293.0" y="819.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="293.0" y="803.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="293.0" y="787.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="296.0" y="798.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="293.0" y="771.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.0" y="782.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="293.0" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="293.0" y="739.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$229/965666648.apply (1 samples, 0.09%)</title><rect x="293.0" y="723.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.09%)</title><rect x="293.0" y="707.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="296.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.09%)</title><rect x="294.0" y="915.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.run (747 samples, 63.52%)</title><rect x="295.0" y="979.0" width="749.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.0" y="990.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (747 samples, 63.52%)</title><rect x="295.0" y="963.0" width="749.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.0" y="974.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (747 samples, 63.52%)</title><rect x="295.0" y="947.0" width="749.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.0" y="958.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1838891648.run (522 samples, 44.39%)</title><rect x="297.0" y="931.0" width="523.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.0" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1838891..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (521 samples, 44.30%)</title><rect x="298.0" y="915.0" width="522.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.0" y="926.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (521 samples, 44.30%)</title><rect x="298.0" y="899.0" width="522.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.0" y="910.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (514 samples, 43.71%)</title><rect x="298.0" y="883.0" width="515.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.0" y="894.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProc..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.17%)</title><rect x="305.0" y="867.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (186 samples, 15.82%)</title><rect x="307.0" y="867.0" width="186.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="310.0" y="878.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (186 samples, 15.82%)</title><rect x="307.0" y="851.0" width="186.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="310.0" y="862.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (186 samples, 15.82%)</title><rect x="307.0" y="835.0" width="186.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="310.0" y="846.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (186 samples, 15.82%)</title><rect x="307.0" y="819.0" width="186.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="310.0" y="830.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (186 samples, 15.82%)</title><rect x="307.0" y="803.0" width="186.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="310.0" y="814.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (186 samples, 15.82%)</title><rect x="307.0" y="787.0" width="186.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.0" y="798.0">com/fasterxml/jackson/da..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (55 samples, 4.68%)</title><rect x="307.0" y="771.0" width="55.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="310.0" y="782.0">com/f..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.43%)</title><rect x="326.1" y="755.0" width="5.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="329.1" y="766.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="328.1" y="739.0" width="3.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="331.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.34%)</title><rect x="331.1" y="755.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.34%)</title><rect x="331.1" y="739.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.34%)</title><rect x="331.1" y="723.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="334.1" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.34%)</title><rect x="331.1" y="707.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="334.1" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.34%)</title><rect x="331.1" y="691.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="334.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.34%)</title><rect x="331.1" y="675.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="334.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (27 samples, 2.30%)</title><rect x="335.1" y="755.0" width="27.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="338.1" y="766.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.26%)</title><rect x="359.2" y="739.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="362.2" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="359.2" y="723.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="362.2" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="359.2" y="707.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="362.2" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="359.2" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="362.2" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="359.2" y="675.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="362.2" y="686.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="359.2" y="659.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="362.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.09%)</title><rect x="360.2" y="723.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="363.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.09%)</title><rect x="360.2" y="707.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="363.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="361.2" y="723.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="364.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.09%)</title><rect x="361.2" y="707.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="364.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.09%)</title><rect x="361.2" y="691.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="364.2" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="361.2" y="675.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="364.2" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="361.2" y="659.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="364.2" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="361.2" y="643.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="364.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (125 samples, 10.63%)</title><rect x="362.2" y="771.0" width="125.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="365.2" y="782.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.17%)</title><rect x="363.2" y="755.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="366.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.09%)</title><rect x="365.2" y="755.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="368.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.51%)</title><rect x="366.2" y="755.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="369.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.34%)</title><rect x="368.2" y="739.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="371.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 0.94%)</title><rect x="372.2" y="755.0" width="11.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="375.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.85%)</title><rect x="373.2" y="739.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="376.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.09%)</title><rect x="376.2" y="723.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="379.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.43%)</title><rect x="377.2" y="723.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="380.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.26%)</title><rect x="379.3" y="707.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="382.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.09%)</title><rect x="382.3" y="723.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="385.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.09%)</title><rect x="382.3" y="707.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.09%)</title><rect x="382.3" y="691.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="385.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.09%)</title><rect x="382.3" y="675.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="385.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (8 samples, 0.68%)</title><rect x="383.3" y="755.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="386.3" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="386.3" y="739.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="389.3" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="386.3" y="723.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="389.3" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="386.3" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="389.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="386.3" y="691.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="389.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.34%)</title><rect x="387.3" y="739.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="390.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (95 samples, 8.08%)</title><rect x="391.3" y="755.0" width="95.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="394.3" y="766.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (22 samples, 1.87%)</title><rect x="392.3" y="739.0" width="22.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="395.3" y="750.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.09%)</title><rect x="392.3" y="723.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.68%)</title><rect x="393.3" y="723.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="396.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.68%)</title><rect x="393.3" y="707.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="396.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.68%)</title><rect x="393.3" y="691.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (7 samples, 0.60%)</title><rect x="394.3" y="675.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="397.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (5 samples, 0.43%)</title><rect x="396.3" y="659.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="399.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 0.85%)</title><rect x="401.3" y="723.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="404.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (6 samples, 0.51%)</title><rect x="401.3" y="707.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.26%)</title><rect x="404.3" y="691.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="407.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.34%)</title><rect x="407.3" y="707.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.34%)</title><rect x="407.3" y="691.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="410.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 0.34%)</title><rect x="407.3" y="675.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="410.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (4 samples, 0.34%)</title><rect x="407.3" y="659.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="410.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.26%)</title><rect x="411.4" y="723.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="414.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.26%)</title><rect x="411.4" y="707.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="414.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (72 samples, 6.12%)</title><rect x="414.4" y="739.0" width="72.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.4" y="750.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (72 samples, 6.12%)</title><rect x="414.4" y="723.0" width="72.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="417.4" y="734.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (71 samples, 6.04%)</title><rect x="415.4" y="707.0" width="71.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="418.4" y="718.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (29 samples, 2.47%)</title><rect x="418.4" y="691.0" width="29.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="421.4" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (6 samples, 0.51%)</title><rect x="420.4" y="675.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="426.4" y="675.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="429.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (13 samples, 1.11%)</title><rect x="427.4" y="675.0" width="13.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="430.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (13 samples, 1.11%)</title><rect x="427.4" y="659.0" width="13.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="430.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (13 samples, 1.11%)</title><rect x="427.4" y="643.0" width="13.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="430.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (8 samples, 0.68%)</title><rect x="432.4" y="627.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="435.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.26%)</title><rect x="440.5" y="675.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.26%)</title><rect x="440.5" y="659.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="443.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.26%)</title><rect x="440.5" y="643.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="443.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="443.5" y="675.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="446.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="443.5" y="659.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="446.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="443.5" y="643.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="446.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (3 samples, 0.26%)</title><rect x="444.5" y="675.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="447.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (15 samples, 1.28%)</title><rect x="447.5" y="691.0" width="15.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="450.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (13 samples, 1.11%)</title><rect x="449.5" y="675.0" width="13.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="452.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (13 samples, 1.11%)</title><rect x="449.5" y="659.0" width="13.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="452.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (13 samples, 1.11%)</title><rect x="449.5" y="643.0" width="13.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="452.5" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (13 samples, 1.11%)</title><rect x="449.5" y="627.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="452.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (11 samples, 0.94%)</title><rect x="462.5" y="691.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="465.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (11 samples, 0.94%)</title><rect x="462.5" y="675.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="465.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (11 samples, 0.94%)</title><rect x="462.5" y="659.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="465.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (11 samples, 0.94%)</title><rect x="462.5" y="643.0" width="11.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="465.5" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 0.94%)</title><rect x="462.5" y="627.0" width="11.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="465.5" y="638.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.34%)</title><rect x="469.6" y="611.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="472.6" y="622.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (3 samples, 0.26%)</title><rect x="470.6" y="595.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="473.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.60%)</title><rect x="473.6" y="691.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="476.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.60%)</title><rect x="473.6" y="675.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="476.6" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.60%)</title><rect x="473.6" y="659.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="476.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (6 samples, 0.51%)</title><rect x="480.6" y="691.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="483.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.09%)</title><rect x="486.6" y="755.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="489.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.51%)</title><rect x="487.6" y="771.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="490.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.09%)</title><rect x="487.6" y="755.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="490.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.43%)</title><rect x="488.6" y="755.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="491.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.43%)</title><rect x="488.6" y="739.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="491.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.43%)</title><rect x="488.6" y="723.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="491.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.43%)</title><rect x="488.6" y="707.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="491.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (297 samples, 25.26%)</title><rect x="493.6" y="867.0" width="298.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="496.6" y="878.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="497.7" y="851.0" width="4.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="500.7" y="862.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="497.7" y="835.0" width="4.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="500.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (56 samples, 4.76%)</title><rect x="501.7" y="851.0" width="56.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="504.7" y="862.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (56 samples, 4.76%)</title><rect x="501.7" y="835.0" width="56.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="504.7" y="846.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (49 samples, 4.17%)</title><rect x="507.7" y="819.0" width="49.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="510.7" y="830.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (15 samples, 1.28%)</title><rect x="510.7" y="803.0" width="15.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="513.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (15 samples, 1.28%)</title><rect x="510.7" y="787.0" width="15.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="513.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.77%)</title><rect x="516.7" y="771.0" width="9.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="519.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.77%)</title><rect x="516.7" y="755.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="519.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (9 samples, 0.77%)</title><rect x="516.7" y="739.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="519.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.85%)</title><rect x="525.7" y="803.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="528.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (10 samples, 0.85%)</title><rect x="525.7" y="787.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="528.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (10 samples, 0.85%)</title><rect x="525.7" y="771.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="528.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 0.26%)</title><rect x="532.8" y="755.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="535.8" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (21 samples, 1.79%)</title><rect x="535.8" y="803.0" width="21.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="538.8" y="814.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 1.02%)</title><rect x="544.8" y="787.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="547.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="544.8" y="771.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="547.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="544.8" y="755.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="547.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 0.94%)</title><rect x="545.8" y="771.0" width="11.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="548.8" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.09%)</title><rect x="556.9" y="819.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="559.9" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.09%)</title><rect x="556.9" y="803.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="559.9" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.09%)</title><rect x="556.9" y="787.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="559.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.77%)</title><rect x="557.9" y="851.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="560.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.60%)</title><rect x="559.9" y="835.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="562.9" y="846.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.60%)</title><rect x="559.9" y="819.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="562.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (174 samples, 14.80%)</title><rect x="566.9" y="851.0" width="174.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="569.9" y="862.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (174 samples, 14.80%)</title><rect x="566.9" y="835.0" width="174.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="569.9" y="846.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.60%)</title><rect x="579.9" y="819.0" width="7.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="582.9" y="830.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="581.9" y="803.0" width="5.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="584.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (54 samples, 4.59%)</title><rect x="587.0" y="819.0" width="54.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="590.0" y="830.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="592.0" y="803.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="595.0" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="592.0" y="787.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="595.0" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="592.0" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="595.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (43 samples, 3.66%)</title><rect x="593.0" y="803.0" width="43.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="596.0" y="814.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (21 samples, 1.79%)</title><rect x="604.0" y="787.0" width="21.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="607.0" y="798.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.77%)</title><rect x="613.0" y="771.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="616.0" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.77%)</title><rect x="613.0" y="755.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="616.0" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.77%)</title><rect x="613.0" y="739.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="616.0" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="615.1" y="723.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="618.1" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.51%)</title><rect x="616.1" y="723.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="619.1" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.34%)</title><rect x="617.1" y="707.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="620.1" y="718.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="617.1" y="691.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="620.1" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.26%)</title><rect x="618.1" y="691.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="621.1" y="702.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.26%)</title><rect x="618.1" y="675.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="621.1" y="686.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="618.1" y="659.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="621.1" y="670.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="619.1" y="659.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="622.1" y="670.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="620.1" y="659.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="623.1" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="621.1" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="624.1" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="621.1" y="691.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="624.1" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.09%)</title><rect x="622.1" y="771.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="625.1" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="623.1" y="771.0" width="2.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="626.1" y="782.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.17%)</title><rect x="625.1" y="787.0" width="2.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="628.1" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (9 samples, 0.77%)</title><rect x="627.1" y="787.0" width="9.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="630.1" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.43%)</title><rect x="636.1" y="803.0" width="5.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="639.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.43%)</title><rect x="641.1" y="819.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="644.1" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.17%)</title><rect x="641.1" y="803.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="644.1" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.17%)</title><rect x="641.1" y="787.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="644.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.17%)</title><rect x="641.1" y="771.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="644.1" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.26%)</title><rect x="643.1" y="803.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="646.1" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.26%)</title><rect x="643.1" y="787.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="646.1" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (95 samples, 8.08%)</title><rect x="646.2" y="819.0" width="95.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="649.2" y="830.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (92 samples, 7.82%)</title><rect x="649.2" y="803.0" width="92.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="652.2" y="814.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (31 samples, 2.64%)</title><rect x="649.2" y="787.0" width="31.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="652.2" y="798.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (31 samples, 2.64%)</title><rect x="649.2" y="771.0" width="31.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="652.2" y="782.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.60%)</title><rect x="673.2" y="755.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="676.2" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.60%)</title><rect x="673.2" y="739.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="676.2" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (7 samples, 0.60%)</title><rect x="673.2" y="723.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="676.2" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.60%)</title><rect x="680.3" y="787.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="683.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 0.60%)</title><rect x="680.3" y="771.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="683.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.60%)</title><rect x="680.3" y="755.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="683.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.17%)</title><rect x="685.3" y="739.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="688.3" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (54 samples, 4.59%)</title><rect x="687.3" y="787.0" width="54.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="690.3" y="798.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (39 samples, 3.32%)</title><rect x="702.3" y="771.0" width="39.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="705.3" y="782.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (39 samples, 3.32%)</title><rect x="702.3" y="755.0" width="39.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="705.3" y="766.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.26%)</title><rect x="723.4" y="739.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="726.4" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.85%)</title><rect x="726.4" y="739.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="729.4" y="750.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.43%)</title><rect x="736.5" y="739.0" width="5.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="739.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (40 samples, 3.40%)</title><rect x="741.5" y="851.0" width="40.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="744.5" y="862.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (39 samples, 3.32%)</title><rect x="742.5" y="835.0" width="39.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="745.5" y="846.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="743.5" y="819.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="746.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/574530467.process (16 samples, 1.36%)</title><rect x="744.5" y="819.0" width="16.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="747.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (16 samples, 1.36%)</title><rect x="744.5" y="803.0" width="16.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="747.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (14 samples, 1.19%)</title><rect x="745.5" y="787.0" width="14.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="748.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.68%)</title><rect x="751.5" y="771.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="754.5" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.43%)</title><rect x="754.5" y="755.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="757.5" y="766.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="755.5" y="739.0" width="4.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="758.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="759.5" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="762.5" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="759.5" y="771.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="762.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="759.5" y="755.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="762.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="759.5" y="739.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="762.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="760.5" y="819.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="763.5" y="830.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.09%)</title><rect x="760.5" y="803.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="763.5" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/558187323.linkToTargetMethod (5 samples, 0.43%)</title><rect x="761.5" y="819.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="764.5" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (5 samples, 0.43%)</title><rect x="761.5" y="803.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="764.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/1455425268.get$Lambda (5 samples, 0.43%)</title><rect x="761.5" y="787.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="764.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/1455425268.&lt;init&gt; (5 samples, 0.43%)</title><rect x="761.5" y="771.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="764.5" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="766.6" y="819.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="769.6" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="766.6" y="803.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="769.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.68%)</title><rect x="767.6" y="819.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="770.6" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.68%)</title><rect x="767.6" y="803.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="770.6" y="814.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.26%)</title><rect x="768.6" y="787.0" width="3.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="771.6" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.34%)</title><rect x="771.6" y="787.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="774.6" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.26%)</title><rect x="775.6" y="819.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="778.6" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.17%)</title><rect x="776.6" y="803.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="779.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.26%)</title><rect x="778.6" y="819.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="781.6" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="780.6" y="803.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="783.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="780.6" y="787.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="783.6" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="780.6" y="771.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="783.6" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="780.6" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="783.6" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="780.6" y="739.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="783.6" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="780.6" y="723.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="783.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.17%)</title><rect x="781.6" y="851.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="784.6" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="781.6" y="835.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="784.6" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="782.6" y="835.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="785.6" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="782.6" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="785.6" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="782.6" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="785.6" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="782.6" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="785.6" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1959923211.linkToTargetMethod (1 samples, 0.09%)</title><rect x="783.6" y="851.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="786.6" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.09%)</title><rect x="783.6" y="835.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="786.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/801236836.get$Lambda (1 samples, 0.09%)</title><rect x="783.6" y="819.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="786.6" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="783.6" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="786.6" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="783.6" y="787.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="786.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="783.6" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="786.6" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="783.6" y="755.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="786.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.60%)</title><rect x="784.6" y="851.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="787.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.60%)</title><rect x="784.6" y="835.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="787.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.43%)</title><rect x="786.6" y="819.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="789.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/801236836.accept (3 samples, 0.26%)</title><rect x="786.6" y="803.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="789.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (3 samples, 0.26%)</title><rect x="786.6" y="787.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="789.6" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 0.26%)</title><rect x="786.6" y="771.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="789.6" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 0.26%)</title><rect x="786.6" y="755.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="789.6" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="787.6" y="739.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="790.6" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="788.6" y="723.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="791.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/1212578972.accept (2 samples, 0.17%)</title><rect x="789.6" y="803.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="792.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="789.6" y="787.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="792.6" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="790.6" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="793.6" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="790.6" y="755.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="793.6" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="790.6" y="739.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="793.6" y="750.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="790.6" y="723.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="793.6" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="790.6" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="793.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.28%)</title><rect x="791.6" y="867.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="794.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 1.28%)</title><rect x="791.6" y="851.0" width="15.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="794.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 1.19%)</title><rect x="792.7" y="835.0" width="14.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="795.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/1212578972.accept (14 samples, 1.19%)</title><rect x="792.7" y="819.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="795.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$44 (14 samples, 1.19%)</title><rect x="792.7" y="803.0" width="14.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="795.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/2001302630.complete (14 samples, 1.19%)</title><rect x="792.7" y="787.0" width="14.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="795.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$54 (14 samples, 1.19%)</title><rect x="792.7" y="771.0" width="14.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="795.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (14 samples, 1.19%)</title><rect x="792.7" y="755.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="795.7" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.19%)</title><rect x="792.7" y="739.0" width="14.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="795.7" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.19%)</title><rect x="792.7" y="723.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="795.7" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (14 samples, 1.19%)</title><rect x="792.7" y="707.0" width="14.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="795.7" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.60%)</title><rect x="806.7" y="867.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="809.7" y="878.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="808.7" y="851.0" width="5.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="811.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 0.60%)</title><rect x="813.7" y="883.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="816.7" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.60%)</title><rect x="813.7" y="867.0" width="7.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="816.7" y="878.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.60%)</title><rect x="813.7" y="851.0" width="7.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="816.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.17%)</title><rect x="820.7" y="931.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="823.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="820.7" y="915.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="823.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.17%)</title><rect x="820.7" y="899.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="823.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.17%)</title><rect x="820.7" y="883.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="823.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (221 samples, 18.79%)</title><rect x="822.8" y="931.0" width="221.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="825.8" y="942.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (220 samples, 18.71%)</title><rect x="822.8" y="915.0" width="220.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="825.8" y="926.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (4 samples, 0.34%)</title><rect x="828.8" y="899.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="831.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (200 samples, 17.01%)</title><rect x="832.8" y="899.0" width="200.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="835.8" y="910.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (15 samples, 1.28%)</title><rect x="838.8" y="883.0" width="15.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="841.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 1.28%)</title><rect x="838.8" y="867.0" width="15.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="841.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 1.28%)</title><rect x="838.8" y="851.0" width="15.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="841.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 1.28%)</title><rect x="838.8" y="835.0" width="15.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="841.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (179 samples, 15.22%)</title><rect x="853.9" y="883.0" width="179.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="856.9" y="894.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (171 samples, 14.54%)</title><rect x="861.9" y="867.0" width="171.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="864.9" y="878.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="867.9" y="851.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="870.9" y="862.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="868.9" y="851.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="871.9" y="862.0"></text>
</g>
<g>
<title>Unsafe_Park (155 samples, 13.18%)</title><rect x="869.9" y="851.0" width="155.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="872.9" y="862.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="874.9" y="835.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="877.9" y="846.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 2.38%)</title><rect x="875.9" y="835.0" width="28.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="878.9" y="846.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (14 samples, 1.19%)</title><rect x="884.0" y="819.0" width="14.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="887.0" y="830.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (9 samples, 0.77%)</title><rect x="886.0" y="803.0" width="9.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="889.0" y="814.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (5 samples, 0.43%)</title><rect x="890.0" y="787.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="893.0" y="798.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="895.0" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="898.0" y="814.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.17%)</title><rect x="896.0" y="803.0" width="2.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="899.0" y="814.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="898.0" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="901.0" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.43%)</title><rect x="899.0" y="819.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="902.0" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="904.0" y="835.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="907.0" y="846.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.60%)</title><rect x="906.0" y="835.0" width="7.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="909.0" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (26 samples, 2.21%)</title><rect x="913.1" y="835.0" width="26.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="916.1" y="846.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (68 samples, 5.78%)</title><rect x="939.1" y="835.0" width="68.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="942.1" y="846.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.60%)</title><rect x="1007.4" y="835.0" width="7.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1010.4" y="846.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.17%)</title><rect x="1014.4" y="835.0" width="2.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1017.4" y="846.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (5 samples, 0.43%)</title><rect x="1016.4" y="835.0" width="5.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1019.4" y="846.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="1021.4" y="835.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1024.4" y="846.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1022.4" y="835.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1025.4" y="846.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="1023.4" y="835.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1026.4" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1024.4" y="835.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1027.4" y="846.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.34%)</title><rect x="1025.4" y="851.0" width="4.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1028.4" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.34%)</title><rect x="1029.5" y="851.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1032.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (10 samples, 0.85%)</title><rect x="1033.5" y="899.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1036.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (10 samples, 0.85%)</title><rect x="1033.5" y="883.0" width="10.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1036.5" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (9 samples, 0.77%)</title><rect x="1033.5" y="867.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1036.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.09%)</title><rect x="1042.5" y="867.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1045.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.09%)</title><rect x="1042.5" y="851.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1045.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.09%)</title><rect x="1042.5" y="835.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1045.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.09%)</title><rect x="1043.5" y="915.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1046.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1044.5" y="979.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1047.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1044.5" y="963.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1047.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1044.5" y="947.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1047.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.09%)</title><rect x="1044.5" y="931.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1047.5" y="942.0"></text>
</g>
<g>
<title>start_thread (144 samples, 12.24%)</title><rect x="1045.5" y="979.0" width="144.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1048.5" y="990.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (144 samples, 12.24%)</title><rect x="1045.5" y="963.0" width="144.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1048.5" y="974.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 1.87%)</title><rect x="1045.5" y="947.0" width="22.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.5" y="958.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (10 samples, 0.85%)</title><rect x="1045.5" y="931.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.5" y="942.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 0.85%)</title><rect x="1045.5" y="915.0" width="10.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1048.5" y="926.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.17%)</title><rect x="1045.5" y="899.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1048.5" y="910.0"></text>
</g>
<g>
<title>SpinPause (7 samples, 0.60%)</title><rect x="1047.5" y="899.0" width="7.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1050.5" y="910.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.09%)</title><rect x="1054.5" y="899.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1057.5" y="910.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 1.02%)</title><rect x="1055.5" y="931.0" width="12.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1058.5" y="942.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.17%)</title><rect x="1055.5" y="915.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1058.5" y="926.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1055.5" y="899.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1058.5" y="910.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1056.5" y="899.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1059.5" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.43%)</title><rect x="1057.6" y="915.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1060.6" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="1057.6" y="899.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1060.6" y="910.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.17%)</title><rect x="1057.6" y="883.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1060.6" y="894.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.17%)</title><rect x="1057.6" y="867.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1060.6" y="878.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.17%)</title><rect x="1057.6" y="851.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1060.6" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.26%)</title><rect x="1059.6" y="899.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1062.6" y="910.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.26%)</title><rect x="1059.6" y="883.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1062.6" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.43%)</title><rect x="1062.6" y="915.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1065.6" y="926.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.43%)</title><rect x="1062.6" y="899.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.6" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.26%)</title><rect x="1062.6" y="883.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.6" y="894.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.26%)</title><rect x="1062.6" y="867.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.6" y="878.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.26%)</title><rect x="1062.6" y="851.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.6" y="862.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.26%)</title><rect x="1062.6" y="835.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1065.6" y="846.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.26%)</title><rect x="1062.6" y="819.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1065.6" y="830.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1063.6" y="803.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1066.6" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1063.6" y="787.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.6" y="798.0"></text>
</g>
<g>
<title>G1Mux2Closure::do_oop(unsigned int*) (1 samples, 0.09%)</title><rect x="1063.6" y="771.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.6" y="782.0"></text>
</g>
<g>
<title>FilterIntoCSClosure::do_oop(unsigned int*) (1 samples, 0.09%)</title><rect x="1063.6" y="755.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.6" y="766.0"></text>
</g>
<g>
<title>MemRegion::intersection(MemRegion) const (1 samples, 0.09%)</title><rect x="1064.6" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.6" y="814.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.17%)</title><rect x="1065.6" y="883.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1068.6" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.17%)</title><rect x="1065.6" y="867.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1068.6" y="878.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1066.6" y="851.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1069.6" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.09%)</title><rect x="1066.6" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1069.6" y="846.0"></text>
</g>
<g>
<title>JavaThread::run() (120 samples, 10.20%)</title><rect x="1067.6" y="947.0" width="120.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1070.6" y="958.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (120 samples, 10.20%)</title><rect x="1067.6" y="931.0" width="120.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.6" y="942.0">JavaThread::thr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (120 samples, 10.20%)</title><rect x="1067.6" y="915.0" width="120.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1070.6" y="926.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (119 samples, 10.12%)</title><rect x="1067.6" y="899.0" width="119.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.6" y="910.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (118 samples, 10.03%)</title><rect x="1067.6" y="883.0" width="118.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1070.6" y="894.0">C2Compiler::co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (118 samples, 10.03%)</title><rect x="1067.6" y="867.0" width="118.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1070.6" y="878.0">Compile::Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (49 samples, 4.17%)</title><rect x="1067.6" y="851.0" width="49.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.6" y="862.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.17%)</title><rect x="1067.6" y="835.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.6" y="846.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.17%)</title><rect x="1067.6" y="819.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1070.6" y="830.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.09%)</title><rect x="1067.6" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.6" y="814.0"></text>
</g>
<g>
<title>MemoryService::track_memory_pool_usage(MemoryPool*) (1 samples, 0.09%)</title><rect x="1067.6" y="787.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1070.6" y="798.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1068.6" y="803.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.6" y="814.0"></text>
</g>
<g>
<title>MachNullCheckNode::save_label(Label**, unsigned int*) (1 samples, 0.09%)</title><rect x="1068.6" y="787.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.6" y="798.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.26%)</title><rect x="1069.6" y="835.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.6" y="846.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1069.6" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1072.6" y="830.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="1069.6" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1072.6" y="814.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.17%)</title><rect x="1070.6" y="819.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1073.6" y="830.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.09%)</title><rect x="1071.6" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.6" y="814.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.09%)</title><rect x="1072.6" y="835.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1075.6" y="846.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.43%)</title><rect x="1073.6" y="835.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1076.6" y="846.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.09%)</title><rect x="1073.6" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1076.6" y="830.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.34%)</title><rect x="1074.6" y="819.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.6" y="830.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.17%)</title><rect x="1074.6" y="803.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1077.6" y="814.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.17%)</title><rect x="1076.6" y="803.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.6" y="814.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.17%)</title><rect x="1076.6" y="787.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.6" y="798.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="1076.6" y="771.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.6" y="782.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1077.6" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.6" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.34%)</title><rect x="1078.6" y="835.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1081.6" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.34%)</title><rect x="1078.6" y="819.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.6" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1078.6" y="803.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.6" y="814.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.09%)</title><rect x="1078.6" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.6" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1079.6" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1082.6" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1080.6" y="803.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1083.6" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.09%)</title><rect x="1081.6" y="787.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (34 samples, 2.89%)</title><rect x="1082.6" y="835.0" width="34.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.6" y="846.0">Ph..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1082.6" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.6" y="830.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1082.6" y="803.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1085.6" y="814.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1082.6" y="787.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1085.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.26%)</title><rect x="1083.6" y="819.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.6" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.26%)</title><rect x="1083.6" y="803.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.6" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1085.6" y="787.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1088.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.17%)</title><rect x="1086.6" y="819.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.6" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1086.6" y="803.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.6" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1087.7" y="803.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.7" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1087.7" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.7" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.26%)</title><rect x="1088.7" y="819.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 0.60%)</title><rect x="1091.7" y="819.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.43%)</title><rect x="1093.7" y="803.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.7" y="814.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1097.7" y="787.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1100.7" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1098.7" y="819.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1101.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1098.7" y="803.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1101.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.09%)</title><rect x="1099.7" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1102.7" y="830.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1099.7" y="803.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.43%)</title><rect x="1100.7" y="819.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.7" y="830.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.17%)</title><rect x="1103.7" y="803.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.09%)</title><rect x="1105.7" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.09%)</title><rect x="1105.7" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.17%)</title><rect x="1106.7" y="819.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.7" y="830.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.26%)</title><rect x="1108.7" y="819.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.7" y="830.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.26%)</title><rect x="1108.7" y="803.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.7" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 0.17%)</title><rect x="1108.7" y="787.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.7" y="798.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="1110.7" y="787.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.7" y="798.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="1110.7" y="771.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.7" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.17%)</title><rect x="1111.7" y="819.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.7" y="830.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.09%)</title><rect x="1113.7" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.7" y="830.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1114.7" y="819.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1117.7" y="830.0"></text>
</g>
<g>
<title>loadConPNode::ideal_Opcode() const (1 samples, 0.09%)</title><rect x="1115.7" y="819.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.7" y="830.0"></text>
</g>
<g>
<title>Compile::Optimize() (60 samples, 5.10%)</title><rect x="1116.8" y="851.0" width="60.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.8" y="862.0">Compil..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1116.8" y="835.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.8" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1116.8" y="819.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.8" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1116.8" y="803.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.8" y="814.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1116.8" y="787.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.26%)</title><rect x="1117.8" y="835.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.26%)</title><rect x="1117.8" y="819.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1120.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1117.8" y="803.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1117.8" y="787.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.09%)</title><rect x="1117.8" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1118.8" y="803.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="787.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="755.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="739.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="723.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="707.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="691.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="675.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="659.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="627.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="611.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="595.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1121.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="579.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="563.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="547.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="531.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="515.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="499.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="483.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="467.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="451.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1118.8" y="435.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.8" y="446.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1118.8" y="419.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_AddP(Node*, Node*) (1 samples, 0.09%)</title><rect x="1119.8" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.8" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1119.8" y="771.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.8" y="782.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1119.8" y="755.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.8" y="766.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1119.8" y="739.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.8" y="750.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.09%)</title><rect x="1119.8" y="723.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.8" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.17%)</title><rect x="1120.8" y="835.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.8" y="846.0"></text>
</g>
<g>
<title>RegionNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1121.8" y="819.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (42 samples, 3.57%)</title><rect x="1122.8" y="835.0" width="42.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.8" y="846.0">Phas..</text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1122.8" y="819.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.17%)</title><rect x="1123.8" y="819.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (37 samples, 3.15%)</title><rect x="1125.8" y="819.0" width="37.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.8" y="830.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (36 samples, 3.06%)</title><rect x="1126.8" y="803.0" width="36.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.8" y="814.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1126.8" y="787.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (35 samples, 2.98%)</title><rect x="1127.8" y="787.0" width="35.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.8" y="798.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (10 samples, 0.85%)</title><rect x="1151.9" y="771.0" width="10.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1161.9" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1162.9" y="819.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.9" y="830.0"></text>
</g>
<g>
<title>LoopNode::Opcode() const (1 samples, 0.09%)</title><rect x="1163.9" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.77%)</title><rect x="1164.9" y="835.0" width="9.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.9" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.68%)</title><rect x="1164.9" y="819.0" width="8.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.9" y="830.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.17%)</title><rect x="1164.9" y="803.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.9" y="814.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.09%)</title><rect x="1165.9" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.9" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1166.9" y="803.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.9" y="814.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1166.9" y="787.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.9" y="798.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1166.9" y="771.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.9" y="782.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1166.9" y="755.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.9" y="766.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1167.9" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.9" y="814.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (1 samples, 0.09%)</title><rect x="1167.9" y="787.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="798.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1168.9" y="803.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.9" y="814.0"></text>
</g>
<g>
<title>Node::set_req_X(unsigned int, Node*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1168.9" y="787.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.9" y="798.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.26%)</title><rect x="1169.9" y="803.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.9" y="814.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 0.26%)</title><rect x="1169.9" y="787.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.9" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.26%)</title><rect x="1169.9" y="771.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.9" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.26%)</title><rect x="1169.9" y="755.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.9" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.26%)</title><rect x="1169.9" y="739.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.9" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.26%)</title><rect x="1169.9" y="723.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.9" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.26%)</title><rect x="1169.9" y="707.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.9" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.26%)</title><rect x="1169.9" y="691.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.9" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.26%)</title><rect x="1169.9" y="675.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.9" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.26%)</title><rect x="1169.9" y="659.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.9" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.26%)</title><rect x="1169.9" y="643.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.9" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.26%)</title><rect x="1169.9" y="627.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.9" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.9" y="611.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.9" y="595.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.9" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.9" y="579.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.9" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.9" y="563.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.9" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.9" y="547.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.9" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.9" y="531.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.9" y="515.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.9" y="499.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.9" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.9" y="483.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.9" y="467.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.9" y="478.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.17%)</title><rect x="1169.9" y="451.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="462.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.17%)</title><rect x="1169.9" y="435.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.9" y="446.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1171.9" y="611.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.9" y="622.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1171.9" y="595.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.9" y="606.0"></text>
</g>
<g>
<title>TypePtr::singleton() const (1 samples, 0.09%)</title><rect x="1172.9" y="819.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.9" y="830.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.17%)</title><rect x="1173.9" y="835.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.9" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1173.9" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.9" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1173.9" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.9" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1174.9" y="819.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.9" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1174.9" y="803.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.9" y="814.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1176.0" y="835.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1179.0" y="846.0"></text>
</g>
<g>
<title>Compile::rethrow_exceptions(JVMState*) (1 samples, 0.09%)</title><rect x="1177.0" y="851.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.0" y="862.0"></text>
</g>
<g>
<title>RethrowNode::RethrowNode(Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1177.0" y="835.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.51%)</title><rect x="1178.0" y="851.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.51%)</title><rect x="1178.0" y="835.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.51%)</title><rect x="1178.0" y="819.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.51%)</title><rect x="1178.0" y="803.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.51%)</title><rect x="1178.0" y="787.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.51%)</title><rect x="1178.0" y="771.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.34%)</title><rect x="1178.0" y="755.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.34%)</title><rect x="1178.0" y="739.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.34%)</title><rect x="1178.0" y="723.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.34%)</title><rect x="1178.0" y="707.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.34%)</title><rect x="1178.0" y="691.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.34%)</title><rect x="1178.0" y="675.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1178.0" y="659.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1178.0" y="643.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1178.0" y="627.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1178.0" y="611.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1178.0" y="595.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1178.0" y="579.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1178.0" y="563.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.0" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1178.0" y="547.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1178.0" y="531.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1178.0" y="515.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1178.0" y="499.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1178.0" y="483.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1178.0" y="467.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1178.0" y="451.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.0" y="435.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.0" y="419.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.0" y="403.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1178.0" y="387.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.0" y="398.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1178.0" y="371.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.0" y="382.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1178.0" y="355.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="366.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1178.0" y="339.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.0" y="350.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1178.0" y="323.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.0" y="334.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1178.0" y="307.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="318.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1178.0" y="291.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.0" y="302.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1178.0" y="275.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.0" y="286.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.09%)</title><rect x="1179.0" y="435.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.0" y="446.0"></text>
</g>
<g>
<title>ciBaseObject::set_ident(unsigned int) (1 samples, 0.09%)</title><rect x="1179.0" y="419.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.0" y="659.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.0" y="670.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.09%)</title><rect x="1180.0" y="643.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.0" y="654.0"></text>
</g>
<g>
<title>TypeKlassPtr::as_instance_type() const (1 samples, 0.09%)</title><rect x="1180.0" y="627.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="638.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1180.0" y="611.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.0" y="622.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1180.0" y="595.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.0" y="606.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1180.0" y="579.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.0" y="643.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.0" y="627.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.0" y="611.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.0" y="595.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.0" y="579.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.0" y="563.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.0" y="547.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.0" y="531.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.0" y="515.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.0" y="499.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.0" y="483.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.0" y="467.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.0" y="451.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.0" y="435.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.0" y="419.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.0" y="403.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.0" y="387.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.0" y="371.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.0" y="355.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="366.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1181.0" y="339.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.0" y="350.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1181.0" y="323.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1181.0" y="307.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1181.0" y="291.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.0" y="275.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.0" y="259.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.0" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1181.0" y="243.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1181.0" y="227.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.0" y="755.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.0" y="739.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1182.0" y="723.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1182.0" y="707.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1182.0" y="691.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1182.0" y="675.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1182.0" y="659.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.0" y="643.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1182.0" y="627.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1182.0" y="611.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1182.0" y="595.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1182.0" y="579.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1182.0" y="563.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.0" y="547.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1182.0" y="531.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1182.0" y="515.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1182.0" y="499.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1182.0" y="483.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1182.0" y="467.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.0" y="451.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1182.0" y="435.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1182.0" y="419.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1182.0" y="403.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1182.0" y="387.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1182.0" y="371.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.0" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.0" y="355.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1182.0" y="339.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1182.0" y="323.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1182.0" y="307.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1182.0" y="291.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1182.0" y="275.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="286.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.0" y="259.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.0" y="270.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.09%)</title><rect x="1182.0" y="243.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.0" y="259.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.0" y="243.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.0" y="227.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.0" y="211.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.0" y="195.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1183.0" y="179.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1183.0" y="163.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.0" y="174.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1183.0" y="147.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.0" y="158.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1183.0" y="131.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="142.0"></text>
</g>
<g>
<title>LoadNode::LoadNode(Node*, Node*, Node*, TypePtr const*, Type const*, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1183.0" y="115.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="126.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1183.0" y="99.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="110.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1183.0" y="83.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="94.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.09%)</title><rect x="1183.0" y="67.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.0" y="78.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1183.0" y="51.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.0" y="62.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.09%)</title><rect x="1183.0" y="35.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1186.0" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.17%)</title><rect x="1184.0" y="851.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.0" y="862.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.17%)</title><rect x="1184.0" y="835.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.0" y="846.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1186.0" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.0" y="894.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1186.0" y="867.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.0" y="878.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1186.0" y="851.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.0" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1186.0" y="835.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.0" y="846.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1186.0" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="830.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1186.0" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="814.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1186.0" y="787.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1186.0" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1186.0" y="755.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.0" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1186.0" y="739.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1186.0" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.0" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1186.0" y="707.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1186.0" y="691.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.0" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1186.0" y="675.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.0" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1186.0" y="659.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1186.0" y="643.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.0" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1186.0" y="627.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1186.0" y="611.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.0" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1186.0" y="595.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1186.0" y="579.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.0" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1186.0" y="563.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.0" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1186.0" y="547.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.0" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1186.0" y="531.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.0" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1186.0" y="515.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1186.0" y="499.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.0" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1186.0" y="483.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.0" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1186.0" y="467.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.0" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1186.0" y="451.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.0" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1186.0" y="435.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1186.0" y="419.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1186.0" y="403.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.0" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1186.0" y="387.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.0" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1186.0" y="371.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1186.0" y="355.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1186.0" y="339.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.0" y="350.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1186.0" y="323.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1186.0" y="307.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.0" y="318.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1186.0" y="291.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="302.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1186.0" y="275.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.0" y="286.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1186.0" y="259.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.0" y="270.0"></text>
</g>
<g>
<title>GraphBuilder::new_instance(int) (1 samples, 0.09%)</title><rect x="1186.0" y="243.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.0" y="254.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.09%)</title><rect x="1186.0" y="227.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.0" y="238.0"></text>
</g>
<g>
<title>GraphBuilder::handle_exception(Instruction*) (1 samples, 0.09%)</title><rect x="1186.0" y="211.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.0" y="222.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1187.0" y="899.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.0" y="910.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1187.0" y="883.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.0" y="894.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1187.0" y="867.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.0" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1187.0" y="851.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.0" y="862.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.09%)</title><rect x="1187.0" y="835.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.0" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="1187.0" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.0" y="830.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.17%)</title><rect x="1188.0" y="947.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.0" y="958.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.17%)</title><rect x="1188.0" y="931.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.0" y="942.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.17%)</title><rect x="1188.0" y="915.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.0" y="926.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.09%)</title><rect x="1189.0" y="899.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.0" y="910.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.09%)</title><rect x="1189.0" y="883.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="894.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1189.0" y="867.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="878.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1189.0" y="851.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.0" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1189.0" y="835.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.0" y="846.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1189.0" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="830.0"></text>
</g>
</g>
</svg>
