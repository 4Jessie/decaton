<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1414" onload="init(evt)" viewBox="0 0 1200 1414" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1397"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1397"> </text>
<g id="frames">
<g>
<title>all (1,494 samples, 100.00%)</title><rect x="10.0" y="1363.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1374.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (289 samples, 19.34%)</title><rect x="10.0" y="1347.0" width="228.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1358.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (288 samples, 19.28%)</title><rect x="10.8" y="1331.0" width="227.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.8" y="1342.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="11.6" y="1315.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.6" y="1326.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="11.6" y="1299.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.6" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.13%)</title><rect x="12.4" y="1315.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.4" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.13%)</title><rect x="12.4" y="1299.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.4" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1398739064.accept (2 samples, 0.13%)</title><rect x="12.4" y="1283.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.4" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.13%)</title><rect x="12.4" y="1267.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.4" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.13%)</title><rect x="12.4" y="1251.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.4" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.13%)</title><rect x="12.4" y="1235.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.27%)</title><rect x="13.9" y="1315.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.9" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.27%)</title><rect x="13.9" y="1299.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.9" y="1310.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="13.9" y="1283.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.9" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.07%)</title><rect x="13.9" y="1267.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.9" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="13.9" y="1251.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.9" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.20%)</title><rect x="14.7" y="1283.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.7" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.20%)</title><rect x="14.7" y="1267.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.7" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.13%)</title><rect x="15.5" y="1251.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.5" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.13%)</title><rect x="15.5" y="1235.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.5" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.13%)</title><rect x="15.5" y="1219.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.5" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.13%)</title><rect x="15.5" y="1203.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.5" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.13%)</title><rect x="15.5" y="1187.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.5" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.13%)</title><rect x="15.5" y="1171.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$266/1401550030.test (1 samples, 0.07%)</title><rect x="15.5" y="1155.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$partitionsNeedsPause$61 (1 samples, 0.07%)</title><rect x="15.5" y="1139.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.pendingTasksCount (1 samples, 0.07%)</title><rect x="15.5" y="1123.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.07%)</title><rect x="15.5" y="1107.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.5" y="1118.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="16.3" y="1155.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="19.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="17.1" y="1315.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.1" y="1326.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="17.1" y="1299.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="20.1" y="1310.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="17.1" y="1283.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="20.1" y="1294.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.07%)</title><rect x="17.9" y="1315.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.9" y="1326.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (222 samples, 14.86%)</title><rect x="18.7" y="1315.0" width="175.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.7" y="1326.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1696112149.accept (209 samples, 13.99%)</title><rect x="19.5" y="1299.0" width="165.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.5" y="1310.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (207 samples, 13.86%)</title><rect x="21.1" y="1283.0" width="163.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.1" y="1294.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (161 samples, 10.78%)</title><rect x="25.8" y="1267.0" width="127.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.8" y="1278.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (161 samples, 10.78%)</title><rect x="25.8" y="1251.0" width="127.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.8" y="1262.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (161 samples, 10.78%)</title><rect x="25.8" y="1235.0" width="127.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.8" y="1246.0">com/linecorp/dec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (161 samples, 10.78%)</title><rect x="25.8" y="1219.0" width="127.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.8" y="1230.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (161 samples, 10.78%)</title><rect x="25.8" y="1203.0" width="127.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.8" y="1214.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (161 samples, 10.78%)</title><rect x="25.8" y="1187.0" width="127.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.8" y="1198.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (105 samples, 7.03%)</title><rect x="59.0" y="1171.0" width="82.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="62.0" y="1182.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (22 samples, 1.47%)</title><rect x="59.0" y="1155.0" width="17.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (22 samples, 1.47%)</title><rect x="59.0" y="1139.0" width="17.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (22 samples, 1.47%)</title><rect x="59.0" y="1123.0" width="17.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.40%)</title><rect x="76.3" y="1155.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.40%)</title><rect x="76.3" y="1139.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.40%)</title><rect x="76.3" y="1123.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.3" y="1134.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (6 samples, 0.40%)</title><rect x="76.3" y="1107.0" width="4.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="79.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (77 samples, 5.15%)</title><rect x="81.1" y="1155.0" width="60.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.1" y="1166.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (77 samples, 5.15%)</title><rect x="81.1" y="1139.0" width="60.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.1" y="1150.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (75 samples, 5.02%)</title><rect x="81.9" y="1123.0" width="59.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.9" y="1134.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (75 samples, 5.02%)</title><rect x="81.9" y="1107.0" width="59.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.9" y="1118.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (75 samples, 5.02%)</title><rect x="81.9" y="1091.0" width="59.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.9" y="1102.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Unpark (73 samples, 4.89%)</title><rect x="82.7" y="1075.0" width="57.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="85.7" y="1086.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.13%)</title><rect x="84.2" y="1059.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="87.2" y="1070.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.13%)</title><rect x="85.8" y="1059.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="88.8" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.13%)</title><rect x="87.4" y="1059.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="90.4" y="1070.0"></text>
</g>
<g>
<title>__pthread_cond_signal (45 samples, 3.01%)</title><rect x="89.0" y="1059.0" width="35.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="92.0" y="1070.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.27%)</title><rect x="124.5" y="1059.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="127.5" y="1070.0"></text>
</g>
<g>
<title>pthread_mutex_lock (16 samples, 1.07%)</title><rect x="127.7" y="1059.0" width="12.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="130.7" y="1070.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.07%)</title><rect x="140.3" y="1075.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="143.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="141.1" y="1123.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="144.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.47%)</title><rect x="141.9" y="1171.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (6 samples, 0.40%)</title><rect x="141.9" y="1155.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="144.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.40%)</title><rect x="141.9" y="1139.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="144.9" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="145.9" y="1123.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="148.9" y="1134.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="145.9" y="1107.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="148.9" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="145.9" y="1091.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="148.9" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="145.9" y="1075.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="148.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.07%)</title><rect x="146.6" y="1155.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="149.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.07%)</title><rect x="146.6" y="1139.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="149.6" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="146.6" y="1123.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="149.6" y="1134.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="146.6" y="1107.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="149.6" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="146.6" y="1091.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="149.6" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="146.6" y="1075.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="149.6" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="146.6" y="1059.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="149.6" y="1070.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="146.6" y="1043.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="149.6" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="146.6" y="1027.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="149.6" y="1038.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.07%)</title><rect x="146.6" y="1011.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="149.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.33%)</title><rect x="147.4" y="1171.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="150.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.33%)</title><rect x="147.4" y="1155.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="150.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="147.4" y="1139.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="150.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="147.4" y="1123.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="150.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.27%)</title><rect x="148.2" y="1139.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="151.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.07%)</title><rect x="148.2" y="1123.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="151.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.07%)</title><rect x="149.0" y="1123.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.13%)</title><rect x="149.8" y="1123.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="152.8" y="1134.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.13%)</title><rect x="151.4" y="1171.0" width="1.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="154.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (4 samples, 0.27%)</title><rect x="153.0" y="1267.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="156.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 0.27%)</title><rect x="153.0" y="1251.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="156.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.33%)</title><rect x="156.1" y="1267.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="159.1" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.33%)</title><rect x="156.1" y="1251.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="159.1" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.33%)</title><rect x="156.1" y="1235.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="159.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (30 samples, 2.01%)</title><rect x="160.1" y="1267.0" width="23.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.1" y="1278.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (30 samples, 2.01%)</title><rect x="160.1" y="1251.0" width="23.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="163.1" y="1262.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.40%)</title><rect x="175.1" y="1235.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="178.1" y="1246.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.07%)</title><rect x="175.1" y="1219.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.07%)</title><rect x="175.1" y="1203.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.1" y="1214.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="175.1" y="1187.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="178.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="175.9" y="1219.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="178.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.27%)</title><rect x="176.7" y="1219.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.7" y="1230.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.33%)</title><rect x="179.8" y="1235.0" width="4.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="182.8" y="1246.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="183.8" y="1267.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="186.8" y="1278.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.13%)</title><rect x="184.6" y="1299.0" width="1.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="187.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.07%)</title><rect x="186.1" y="1299.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.1" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.07%)</title><rect x="186.1" y="1283.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="189.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (8 samples, 0.54%)</title><rect x="186.9" y="1299.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="189.9" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (8 samples, 0.54%)</title><rect x="186.9" y="1283.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.54%)</title><rect x="186.9" y="1267.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="189.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.54%)</title><rect x="186.9" y="1251.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="189.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.07%)</title><rect x="193.2" y="1299.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="193.2" y="1283.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.07%)</title><rect x="193.2" y="1267.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="196.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="193.2" y="1251.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="193.2" y="1235.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="196.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 3.68%)</title><rect x="194.0" y="1315.0" width="43.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="197.0" y="1326.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 3.68%)</title><rect x="194.0" y="1299.0" width="43.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.0" y="1310.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.07%)</title><rect x="194.0" y="1283.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 2.41%)</title><rect x="194.8" y="1283.0" width="28.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="197.8" y="1294.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (36 samples, 2.41%)</title><rect x="194.8" y="1267.0" width="28.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="197.8" y="1278.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 2.34%)</title><rect x="194.8" y="1251.0" width="27.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="197.8" y="1262.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (29 samples, 1.94%)</title><rect x="195.6" y="1235.0" width="22.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.6" y="1246.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (29 samples, 1.94%)</title><rect x="195.6" y="1219.0" width="22.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="198.6" y="1230.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 0.80%)</title><rect x="197.2" y="1203.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="200.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.47%)</title><rect x="201.1" y="1187.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.47%)</title><rect x="201.1" y="1171.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.47%)</title><rect x="201.1" y="1155.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.47%)</title><rect x="201.1" y="1139.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.47%)</title><rect x="201.1" y="1123.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.47%)</title><rect x="201.1" y="1107.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.47%)</title><rect x="201.1" y="1091.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 1.00%)</title><rect x="206.7" y="1203.0" width="11.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="209.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.13%)</title><rect x="207.5" y="1187.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="210.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 0.80%)</title><rect x="209.0" y="1187.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="212.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.54%)</title><rect x="209.0" y="1171.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="212.0" y="1182.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.54%)</title><rect x="209.0" y="1155.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="212.0" y="1166.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="214.6" y="1139.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="217.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.27%)</title><rect x="215.4" y="1171.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.4" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.27%)</title><rect x="215.4" y="1155.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.07%)</title><rect x="218.5" y="1235.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.07%)</title><rect x="218.5" y="1219.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="218.5" y="1203.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="221.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="218.5" y="1187.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="218.5" y="1171.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.20%)</title><rect x="219.3" y="1235.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.20%)</title><rect x="219.3" y="1219.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.20%)</title><rect x="219.3" y="1203.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.20%)</title><rect x="219.3" y="1187.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.13%)</title><rect x="220.1" y="1171.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="220.1" y="1155.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="220.9" y="1155.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.07%)</title><rect x="221.7" y="1235.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="224.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.07%)</title><rect x="221.7" y="1219.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.07%)</title><rect x="222.5" y="1251.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.07%)</title><rect x="222.5" y="1235.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="222.5" y="1219.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.5" y="1230.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="222.5" y="1203.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.5" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="222.5" y="1187.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.54%)</title><rect x="223.3" y="1283.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.54%)</title><rect x="223.3" y="1267.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.47%)</title><rect x="223.3" y="1251.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="226.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.13%)</title><rect x="224.0" y="1235.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/193729802.accept (2 samples, 0.13%)</title><rect x="224.0" y="1219.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.13%)</title><rect x="224.0" y="1203.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.13%)</title><rect x="224.0" y="1187.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.07%)</title><rect x="224.8" y="1171.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.07%)</title><rect x="224.8" y="1155.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.8" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="224.8" y="1139.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="224.8" y="1123.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.07%)</title><rect x="225.6" y="1235.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.6" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="226.4" y="1235.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.07%)</title><rect x="227.2" y="1235.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.07%)</title><rect x="227.2" y="1219.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.2" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toMap (1 samples, 0.07%)</title><rect x="227.2" y="1203.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.2" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toMap (1 samples, 0.07%)</title><rect x="227.2" y="1187.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.2" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1508789423.linkToTargetMethod (1 samples, 0.07%)</title><rect x="227.2" y="1171.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="230.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.07%)</title><rect x="227.2" y="1155.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.2" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$80/1746443452.get$Lambda (1 samples, 0.07%)</title><rect x="227.2" y="1139.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.2" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="227.2" y="1123.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="230.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.07%)</title><rect x="228.0" y="1235.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="231.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.07%)</title><rect x="228.0" y="1219.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.0" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="228.0" y="1203.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.0" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="228.0" y="1187.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.07%)</title><rect x="228.8" y="1251.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.8" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="228.8" y="1235.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="231.8" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="228.8" y="1219.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.8" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="228.8" y="1203.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.8" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="228.8" y="1187.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.8" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/2100961961.get (1 samples, 0.07%)</title><rect x="228.8" y="1171.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.lambda$makeRef$237 (1 samples, 0.07%)</title><rect x="228.8" y="1155.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.07%)</title><rect x="229.6" y="1283.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.07%)</title><rect x="229.6" y="1267.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="232.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.40%)</title><rect x="230.4" y="1283.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="233.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.33%)</title><rect x="230.4" y="1267.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.33%)</title><rect x="230.4" y="1251.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.27%)</title><rect x="230.4" y="1235.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.07%)</title><rect x="230.4" y="1219.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.07%)</title><rect x="230.4" y="1203.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.07%)</title><rect x="230.4" y="1187.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.07%)</title><rect x="230.4" y="1171.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.4" y="1182.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.07%)</title><rect x="230.4" y="1155.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.4" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.07%)</title><rect x="230.4" y="1139.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.4" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.07%)</title><rect x="230.4" y="1123.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.4" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.07%)</title><rect x="230.4" y="1107.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.4" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.07%)</title><rect x="230.4" y="1091.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.4" y="1102.0"></text>
</g>
<g>
<title>__writev (1 samples, 0.07%)</title><rect x="230.4" y="1075.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="233.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.13%)</title><rect x="231.2" y="1219.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.13%)</title><rect x="231.2" y="1203.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="234.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.13%)</title><rect x="231.2" y="1187.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.13%)</title><rect x="231.2" y="1171.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.13%)</title><rect x="231.2" y="1155.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="234.2" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.13%)</title><rect x="231.2" y="1139.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.2" y="1150.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="231.9" y="1123.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="234.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.07%)</title><rect x="232.7" y="1219.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.7" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="232.7" y="1203.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="235.7" y="1214.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="232.7" y="1187.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="235.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="233.5" y="1235.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="236.5" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="233.5" y="1219.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.5" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.07%)</title><rect x="233.5" y="1203.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.5" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.07%)</title><rect x="233.5" y="1187.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.5" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.07%)</title><rect x="233.5" y="1171.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="236.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="234.3" y="1267.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="237.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="234.3" y="1251.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="234.3" y="1235.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="234.3" y="1219.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="234.3" y="1203.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.07%)</title><rect x="234.3" y="1187.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.07%)</title><rect x="234.3" y="1171.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.07%)</title><rect x="234.3" y="1155.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.07%)</title><rect x="234.3" y="1139.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.20%)</title><rect x="235.1" y="1283.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.20%)</title><rect x="235.1" y="1267.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="238.1" y="1278.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="235.9" y="1251.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="238.9" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="235.9" y="1235.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="238.9" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="235.9" y="1219.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="236.7" y="1251.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.7" y="1262.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="237.5" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="240.5" y="1326.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="237.5" y="1299.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="240.5" y="1310.0"></text>
</g>
<g>
<title>java/lang/Thread.run (699 samples, 46.79%)</title><rect x="238.3" y="1347.0" width="552.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.3" y="1358.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (699 samples, 46.79%)</title><rect x="238.3" y="1331.0" width="552.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="241.3" y="1342.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (699 samples, 46.79%)</title><rect x="238.3" y="1315.0" width="552.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="241.3" y="1326.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1481596201.run (451 samples, 30.19%)</title><rect x="238.3" y="1299.0" width="356.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.3" y="1310.0">com/linecorp/decaton/processor/runtime/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (451 samples, 30.19%)</title><rect x="238.3" y="1283.0" width="356.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.3" y="1294.0">com/linecorp/decaton/processor/runtime/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (451 samples, 30.19%)</title><rect x="238.3" y="1267.0" width="356.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.3" y="1278.0">com/linecorp/decaton/processor/runtime/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (440 samples, 29.45%)</title><rect x="238.3" y="1251.0" width="347.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="241.3" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessP..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.27%)</title><rect x="248.5" y="1235.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="251.5" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.07%)</title><rect x="251.7" y="1235.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="254.7" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.07%)</title><rect x="251.7" y="1219.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.7" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/1387966527.get (1 samples, 0.07%)</title><rect x="251.7" y="1203.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.07%)</title><rect x="251.7" y="1187.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.7" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="251.7" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="254.7" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="251.7" y="1155.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="254.7" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="251.7" y="1139.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="254.7" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="251.7" y="1123.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="254.7" y="1134.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="251.7" y="1107.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="254.7" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="251.7" y="1091.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="254.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (154 samples, 10.31%)</title><rect x="252.5" y="1235.0" width="121.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.5" y="1246.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (154 samples, 10.31%)</title><rect x="252.5" y="1219.0" width="121.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.5" y="1230.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (154 samples, 10.31%)</title><rect x="252.5" y="1203.0" width="121.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.5" y="1214.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (153 samples, 10.24%)</title><rect x="252.5" y="1187.0" width="120.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.5" y="1198.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (153 samples, 10.24%)</title><rect x="252.5" y="1171.0" width="120.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.5" y="1182.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (153 samples, 10.24%)</title><rect x="252.5" y="1155.0" width="120.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.5" y="1166.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (52 samples, 3.48%)</title><rect x="252.5" y="1139.0" width="41.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.5" y="1150.0">com..</text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.67%)</title><rect x="262.7" y="1123.0" width="7.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="265.7" y="1134.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.47%)</title><rect x="265.1" y="1107.0" width="5.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="268.1" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (11 samples, 0.74%)</title><rect x="270.6" y="1123.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (11 samples, 0.74%)</title><rect x="270.6" y="1107.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (11 samples, 0.74%)</title><rect x="270.6" y="1091.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.74%)</title><rect x="270.6" y="1075.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (10 samples, 0.67%)</title><rect x="270.6" y="1059.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="273.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (10 samples, 0.67%)</title><rect x="270.6" y="1043.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.07%)</title><rect x="278.5" y="1059.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="278.5" y="1043.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="278.5" y="1027.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="281.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.07%)</title><rect x="278.5" y="1011.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="278.5" y="995.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="281.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="278.5" y="979.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.5" y="990.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="278.5" y="963.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.5" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="278.5" y="947.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="281.5" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="278.5" y="931.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="281.5" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="278.5" y="915.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="281.5" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="278.5" y="899.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="281.5" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="278.5" y="883.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="281.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (18 samples, 1.20%)</title><rect x="279.3" y="1123.0" width="14.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.3" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 0.47%)</title><rect x="288.0" y="1107.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.0" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.20%)</title><rect x="288.0" y="1091.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="291.0" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.20%)</title><rect x="288.0" y="1075.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="291.0" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.20%)</title><rect x="288.0" y="1059.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="291.0" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.20%)</title><rect x="288.0" y="1043.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="291.0" y="1054.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (2 samples, 0.13%)</title><rect x="288.0" y="1027.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="291.0" y="1038.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="289.6" y="1027.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="292.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.20%)</title><rect x="290.4" y="1091.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="293.4" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="290.4" y="1075.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="293.4" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="290.4" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="293.4" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="290.4" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="293.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.13%)</title><rect x="291.2" y="1075.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.07%)</title><rect x="292.8" y="1091.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.07%)</title><rect x="292.8" y="1075.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="295.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.07%)</title><rect x="292.8" y="1059.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.8" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="292.8" y="1043.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="295.8" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="292.8" y="1027.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="295.8" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="292.8" y="1011.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="295.8" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="292.8" y="995.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="295.8" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="292.8" y="979.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="295.8" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="292.8" y="963.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="295.8" y="974.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="292.8" y="947.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="295.8" y="958.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="292.8" y="931.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="295.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (93 samples, 6.22%)</title><rect x="293.5" y="1139.0" width="73.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.5" y="1150.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.07%)</title><rect x="294.3" y="1123.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="297.3" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.13%)</title><rect x="295.1" y="1123.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="298.1" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.40%)</title><rect x="296.7" y="1123.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.20%)</title><rect x="299.1" y="1107.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.1" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.40%)</title><rect x="301.4" y="1123.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="304.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.20%)</title><rect x="303.8" y="1107.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="306.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="304.6" y="1091.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="307.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.07%)</title><rect x="304.6" y="1075.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="307.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="305.4" y="1091.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (8 samples, 0.54%)</title><rect x="306.2" y="1123.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="309.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.40%)</title><rect x="307.8" y="1107.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="310.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (69 samples, 4.62%)</title><rect x="312.5" y="1123.0" width="54.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="315.5" y="1134.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.14%)</title><rect x="312.5" y="1107.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="315.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.40%)</title><rect x="314.1" y="1091.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="317.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.40%)</title><rect x="314.1" y="1075.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.40%)</title><rect x="314.1" y="1059.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="317.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="318.8" y="1091.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="321.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="318.8" y="1075.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="321.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (8 samples, 0.54%)</title><rect x="319.6" y="1091.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="322.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.07%)</title><rect x="325.9" y="1107.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="328.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (51 samples, 3.41%)</title><rect x="326.7" y="1107.0" width="40.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="329.7" y="1118.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (51 samples, 3.41%)</title><rect x="326.7" y="1091.0" width="40.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="329.7" y="1102.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (50 samples, 3.35%)</title><rect x="327.5" y="1075.0" width="39.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="330.5" y="1086.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.07%)</title><rect x="332.2" y="1059.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="335.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.54%)</title><rect x="337.0" y="1043.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="340.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.54%)</title><rect x="337.0" y="1027.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="340.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.54%)</title><rect x="337.0" y="1011.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="340.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.27%)</title><rect x="340.1" y="995.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="343.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.13%)</title><rect x="343.3" y="1043.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="346.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (16 samples, 1.07%)</title><rect x="344.9" y="1059.0" width="12.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="347.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (10 samples, 0.67%)</title><rect x="349.6" y="1043.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="352.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.67%)</title><rect x="349.6" y="1027.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="352.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.67%)</title><rect x="349.6" y="1011.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="352.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (10 samples, 0.67%)</title><rect x="349.6" y="995.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="352.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.54%)</title><rect x="357.5" y="1059.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="360.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.54%)</title><rect x="357.5" y="1043.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="360.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.54%)</title><rect x="357.5" y="1027.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="360.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.54%)</title><rect x="357.5" y="1011.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="360.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.54%)</title><rect x="357.5" y="995.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="360.5" y="1006.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (8 samples, 0.54%)</title><rect x="357.5" y="979.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="360.5" y="990.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (1 samples, 0.07%)</title><rect x="357.5" y="963.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.5" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="357.5" y="947.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="360.5" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.07%)</title><rect x="357.5" y="931.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="360.5" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="357.5" y="915.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="360.5" y="926.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (7 samples, 0.47%)</title><rect x="358.3" y="963.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.27%)</title><rect x="363.8" y="1059.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="366.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.27%)</title><rect x="363.8" y="1043.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="366.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.27%)</title><rect x="363.8" y="1027.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="366.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.54%)</title><rect x="367.0" y="1139.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="370.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.54%)</title><rect x="367.0" y="1123.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="370.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.54%)</title><rect x="367.0" y="1107.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="370.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.54%)</title><rect x="367.0" y="1091.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="370.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.54%)</title><rect x="367.0" y="1075.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="370.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.07%)</title><rect x="373.3" y="1187.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="376.3" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="373.3" y="1171.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="376.3" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="373.3" y="1155.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="376.3" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="373.3" y="1139.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="376.3" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="373.3" y="1123.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="376.3" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="373.3" y="1107.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="376.3" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="373.3" y="1091.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="376.3" y="1102.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="373.3" y="1075.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="376.3" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="373.3" y="1059.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="376.3" y="1070.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="373.3" y="1043.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="376.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (248 samples, 16.60%)</title><rect x="374.1" y="1235.0" width="195.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="377.1" y="1246.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (49 samples, 3.28%)</title><rect x="377.3" y="1219.0" width="38.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="380.3" y="1230.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (47 samples, 3.15%)</title><rect x="378.8" y="1203.0" width="37.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="381.8" y="1214.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (44 samples, 2.95%)</title><rect x="381.2" y="1187.0" width="34.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="384.2" y="1198.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.60%)</title><rect x="382.0" y="1171.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="385.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.60%)</title><rect x="382.0" y="1155.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="385.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.60%)</title><rect x="382.0" y="1139.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="385.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.60%)</title><rect x="382.0" y="1123.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="385.0" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (34 samples, 2.28%)</title><rect x="389.1" y="1171.0" width="26.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="392.1" y="1182.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 0.33%)</title><rect x="412.0" y="1155.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="415.0" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.33%)</title><rect x="412.0" y="1139.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="415.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.47%)</title><rect x="416.0" y="1219.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.47%)</title><rect x="416.0" y="1203.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="419.0" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.47%)</title><rect x="416.0" y="1187.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="419.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (136 samples, 9.10%)</title><rect x="421.5" y="1219.0" width="107.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="424.5" y="1230.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (136 samples, 9.10%)</title><rect x="421.5" y="1203.0" width="107.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="424.5" y="1214.0">com/linecorp/..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="427.8" y="1187.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="430.8" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.27%)</title><rect x="428.6" y="1187.0" width="3.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="431.6" y="1198.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.20%)</title><rect x="429.4" y="1171.0" width="2.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="432.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (45 samples, 3.01%)</title><rect x="431.8" y="1187.0" width="35.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="434.8" y="1198.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (18 samples, 1.20%)</title><rect x="441.2" y="1171.0" width="14.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="444.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (18 samples, 1.20%)</title><rect x="441.2" y="1155.0" width="14.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="444.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.67%)</title><rect x="444.4" y="1139.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="447.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.67%)</title><rect x="444.4" y="1123.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="447.4" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.67%)</title><rect x="444.4" y="1107.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="447.4" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.60%)</title><rect x="445.2" y="1091.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="448.2" y="1102.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.07%)</title><rect x="445.2" y="1075.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="448.2" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.20%)</title><rect x="446.0" y="1075.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="449.0" y="1086.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.13%)</title><rect x="446.0" y="1059.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="449.0" y="1070.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="447.6" y="1059.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="450.6" y="1070.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="447.6" y="1043.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="450.6" y="1054.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="447.6" y="1027.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="450.6" y="1038.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.07%)</title><rect x="448.4" y="1075.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="451.4" y="1086.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.27%)</title><rect x="449.1" y="1075.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="452.1" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.20%)</title><rect x="449.9" y="1059.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="452.9" y="1070.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (2 samples, 0.13%)</title><rect x="450.7" y="1043.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="453.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.07%)</title><rect x="452.3" y="1139.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="455.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="453.1" y="1139.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="456.1" y="1150.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.13%)</title><rect x="453.9" y="1139.0" width="1.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="456.9" y="1150.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.13%)</title><rect x="455.5" y="1171.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="458.5" y="1182.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (13 samples, 0.87%)</title><rect x="457.0" y="1171.0" width="10.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="460.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.27%)</title><rect x="467.3" y="1187.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="470.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.27%)</title><rect x="467.3" y="1171.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="470.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.27%)</title><rect x="467.3" y="1155.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="470.3" y="1166.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (72 samples, 4.82%)</title><rect x="470.5" y="1187.0" width="56.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="473.5" y="1198.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (71 samples, 4.75%)</title><rect x="471.3" y="1171.0" width="56.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="474.3" y="1182.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (12 samples, 0.80%)</title><rect x="471.3" y="1155.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="474.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 0.80%)</title><rect x="471.3" y="1139.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="474.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (12 samples, 0.80%)</title><rect x="471.3" y="1123.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="474.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 0.80%)</title><rect x="471.3" y="1107.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="474.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.13%)</title><rect x="479.2" y="1091.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="482.2" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (59 samples, 3.95%)</title><rect x="480.7" y="1155.0" width="46.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="483.7" y="1166.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (34 samples, 2.28%)</title><rect x="500.5" y="1139.0" width="26.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="503.5" y="1150.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (34 samples, 2.28%)</title><rect x="500.5" y="1123.0" width="26.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="503.5" y="1134.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.20%)</title><rect x="514.7" y="1107.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="517.7" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 0.87%)</title><rect x="517.1" y="1107.0" width="10.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="520.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.20%)</title><rect x="523.4" y="1091.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="526.4" y="1102.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.13%)</title><rect x="525.8" y="1091.0" width="1.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="528.8" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.13%)</title><rect x="527.3" y="1187.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="530.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (38 samples, 2.54%)</title><rect x="528.9" y="1219.0" width="30.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="531.9" y="1230.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (38 samples, 2.54%)</title><rect x="528.9" y="1203.0" width="30.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="531.9" y="1214.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2034428208.process (16 samples, 1.07%)</title><rect x="531.3" y="1187.0" width="12.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="534.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (16 samples, 1.07%)</title><rect x="531.3" y="1171.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="534.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.07%)</title><rect x="531.3" y="1155.0" width="12.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="534.3" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.20%)</title><rect x="533.7" y="1139.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="536.7" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.20%)</title><rect x="533.7" y="1123.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="536.7" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.20%)</title><rect x="533.7" y="1107.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="536.7" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.20%)</title><rect x="533.7" y="1091.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="536.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.20%)</title><rect x="533.7" y="1075.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="536.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.13%)</title><rect x="534.4" y="1059.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="537.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.40%)</title><rect x="536.0" y="1139.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="539.0" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.40%)</title><rect x="536.0" y="1123.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="539.0" y="1134.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.40%)</title><rect x="536.0" y="1107.0" width="4.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="539.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.20%)</title><rect x="540.8" y="1139.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="543.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="543.1" y="1139.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="546.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="543.1" y="1123.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="546.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="543.1" y="1107.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="546.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.27%)</title><rect x="543.9" y="1187.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="546.9" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="543.9" y="1171.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="546.9" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="543.9" y="1155.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="546.9" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.20%)</title><rect x="544.7" y="1171.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="547.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/558187323.linkToTargetMethod (2 samples, 0.13%)</title><rect x="547.1" y="1187.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="550.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (2 samples, 0.13%)</title><rect x="547.1" y="1171.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="550.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/29147874.get$Lambda (2 samples, 0.13%)</title><rect x="547.1" y="1155.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="550.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/29147874.&lt;init&gt; (2 samples, 0.13%)</title><rect x="547.1" y="1139.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="550.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.54%)</title><rect x="548.7" y="1187.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="551.7" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.40%)</title><rect x="550.2" y="1171.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="553.2" y="1182.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.20%)</title><rect x="550.2" y="1155.0" width="2.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="553.2" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.20%)</title><rect x="552.6" y="1155.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="555.6" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.33%)</title><rect x="555.0" y="1187.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="558.0" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.07%)</title><rect x="558.1" y="1171.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="561.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1508789423.linkToTargetMethod (1 samples, 0.07%)</title><rect x="558.9" y="1219.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="561.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.07%)</title><rect x="558.9" y="1203.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="561.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1347892313.get$Lambda (1 samples, 0.07%)</title><rect x="558.9" y="1187.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="561.9" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="558.9" y="1171.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="561.9" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="558.9" y="1155.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="561.9" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="558.9" y="1139.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="561.9" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="558.9" y="1123.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="561.9" y="1134.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="558.9" y="1107.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="561.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 0.87%)</title><rect x="559.7" y="1219.0" width="10.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="562.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 0.87%)</title><rect x="559.7" y="1203.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="562.7" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.13%)</title><rect x="566.0" y="1187.0" width="1.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="569.0" y="1198.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.13%)</title><rect x="566.0" y="1171.0" width="1.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="569.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.20%)</title><rect x="567.6" y="1187.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="570.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1347892313.accept (3 samples, 0.20%)</title><rect x="567.6" y="1171.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="570.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (3 samples, 0.20%)</title><rect x="567.6" y="1155.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="570.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 0.20%)</title><rect x="567.6" y="1139.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="570.6" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.20%)</title><rect x="567.6" y="1123.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="570.6" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 0.20%)</title><rect x="567.6" y="1107.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="570.6" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.13%)</title><rect x="568.4" y="1091.0" width="1.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="571.4" y="1102.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.13%)</title><rect x="568.4" y="1075.0" width="1.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="571.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 0.87%)</title><rect x="570.0" y="1235.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="573.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 0.87%)</title><rect x="570.0" y="1219.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="573.0" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="570.8" y="1203.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="573.8" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="570.8" y="1187.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="573.8" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="570.8" y="1171.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="573.8" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="570.8" y="1155.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="573.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.74%)</title><rect x="571.6" y="1203.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="574.6" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1347892313.accept (11 samples, 0.74%)</title><rect x="571.6" y="1187.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="574.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (11 samples, 0.74%)</title><rect x="571.6" y="1171.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="574.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (11 samples, 0.74%)</title><rect x="571.6" y="1155.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="574.6" y="1166.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (11 samples, 0.74%)</title><rect x="571.6" y="1139.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="574.6" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.create (11 samples, 0.74%)</title><rect x="571.6" y="1123.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="574.6" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.47%)</title><rect x="580.3" y="1235.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="583.3" y="1246.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.40%)</title><rect x="581.0" y="1219.0" width="4.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="584.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="585.8" y="1251.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="588.8" y="1262.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="585.8" y="1235.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="588.8" y="1246.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="585.8" y="1219.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="588.8" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="585.8" y="1203.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="588.8" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="585.8" y="1187.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="588.8" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="585.8" y="1171.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="588.8" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="585.8" y="1155.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="588.8" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="585.8" y="1139.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="588.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (10 samples, 0.67%)</title><rect x="586.6" y="1251.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="589.6" y="1262.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.54%)</title><rect x="588.2" y="1235.0" width="6.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="591.2" y="1246.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.54%)</title><rect x="588.2" y="1219.0" width="6.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="591.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (8 samples, 0.54%)</title><rect x="594.5" y="1299.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="597.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.54%)</title><rect x="594.5" y="1283.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="597.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.54%)</title><rect x="594.5" y="1267.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="597.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.54%)</title><rect x="594.5" y="1251.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="597.5" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1481596201.run (1 samples, 0.07%)</title><rect x="600.0" y="1235.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="603.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (240 samples, 16.06%)</title><rect x="600.8" y="1299.0" width="189.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="603.8" y="1310.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (237 samples, 15.86%)</title><rect x="603.2" y="1283.0" width="187.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="606.2" y="1294.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (10 samples, 0.67%)</title><rect x="611.1" y="1267.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="614.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (205 samples, 13.72%)</title><rect x="619.0" y="1267.0" width="161.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="622.0" y="1278.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (8 samples, 0.54%)</title><rect x="624.5" y="1251.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="627.5" y="1262.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.07%)</title><rect x="630.0" y="1235.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="633.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (26 samples, 1.74%)</title><rect x="630.8" y="1251.0" width="20.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="633.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (9 samples, 0.60%)</title><rect x="638.7" y="1235.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="641.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.47%)</title><rect x="645.8" y="1235.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="648.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.47%)</title><rect x="645.8" y="1219.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (7 samples, 0.47%)</title><rect x="645.8" y="1203.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="648.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (10 samples, 0.67%)</title><rect x="651.3" y="1251.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="654.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (9 samples, 0.60%)</title><rect x="652.1" y="1235.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="655.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (154 samples, 10.31%)</title><rect x="659.2" y="1251.0" width="121.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="662.2" y="1262.0">java/util/concu..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (154 samples, 10.31%)</title><rect x="659.2" y="1235.0" width="121.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="662.2" y="1246.0">sun/misc/Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.13%)</title><rect x="661.6" y="1219.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="664.6" y="1230.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.13%)</title><rect x="663.2" y="1219.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="666.2" y="1230.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.13%)</title><rect x="664.8" y="1219.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="667.8" y="1230.0"></text>
</g>
<g>
<title>Unsafe_Park (139 samples, 9.30%)</title><rect x="666.3" y="1219.0" width="109.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="669.3" y="1230.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="669.5" y="1203.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="672.5" y="1214.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="670.3" y="1203.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="673.3" y="1214.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (32 samples, 2.14%)</title><rect x="671.1" y="1203.0" width="25.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="674.1" y="1214.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (15 samples, 1.00%)</title><rect x="679.0" y="1187.0" width="11.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="682.0" y="1198.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.33%)</title><rect x="683.7" y="1171.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="686.7" y="1182.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="686.9" y="1155.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="689.9" y="1166.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.13%)</title><rect x="687.7" y="1171.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="690.7" y="1182.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.13%)</title><rect x="689.3" y="1171.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="692.3" y="1182.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.20%)</title><rect x="690.8" y="1187.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="693.8" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.27%)</title><rect x="693.2" y="1187.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="696.2" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.07%)</title><rect x="696.4" y="1203.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="699.4" y="1214.0"></text>
</g>
<g>
<title>__lll_lock_wait (4 samples, 0.27%)</title><rect x="697.1" y="1203.0" width="3.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="700.1" y="1214.0"></text>
</g>
<g>
<title>__lll_unlock_wake (28 samples, 1.87%)</title><rect x="700.3" y="1203.0" width="22.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="703.3" y="1214.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (48 samples, 3.21%)</title><rect x="722.4" y="1203.0" width="37.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="725.4" y="1214.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.13%)</title><rect x="760.3" y="1203.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="763.3" y="1214.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="761.9" y="1203.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="764.9" y="1214.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.20%)</title><rect x="762.7" y="1203.0" width="2.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="765.7" y="1214.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.27%)</title><rect x="765.1" y="1203.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="768.1" y="1214.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.27%)</title><rect x="768.2" y="1203.0" width="3.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="771.2" y="1214.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.13%)</title><rect x="771.4" y="1203.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="774.4" y="1214.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.13%)</title><rect x="773.0" y="1203.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="776.0" y="1214.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.13%)</title><rect x="774.6" y="1203.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="777.6" y="1214.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="776.1" y="1219.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="779.1" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.13%)</title><rect x="776.9" y="1219.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="779.9" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.20%)</title><rect x="778.5" y="1219.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="781.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (11 samples, 0.74%)</title><rect x="780.9" y="1267.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="783.9" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (11 samples, 0.74%)</title><rect x="780.9" y="1251.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="783.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (10 samples, 0.67%)</title><rect x="780.9" y="1235.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="783.9" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.07%)</title><rect x="788.8" y="1235.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="791.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.07%)</title><rect x="788.8" y="1219.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="791.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.07%)</title><rect x="788.8" y="1203.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="791.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.07%)</title><rect x="789.6" y="1267.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="792.6" y="1278.0"></text>
</g>
<g>
<title>start_thread (506 samples, 33.87%)</title><rect x="790.3" y="1347.0" width="399.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="793.3" y="1358.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (506 samples, 33.87%)</title><rect x="790.3" y="1331.0" width="399.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="793.3" y="1342.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 1.67%)</title><rect x="790.3" y="1315.0" width="19.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="793.3" y="1326.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.33%)</title><rect x="790.3" y="1299.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="793.3" y="1310.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.33%)</title><rect x="790.3" y="1283.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="793.3" y="1294.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.27%)</title><rect x="790.3" y="1267.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="793.3" y="1278.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="793.5" y="1267.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="796.5" y="1278.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.27%)</title><rect x="794.3" y="1299.0" width="15.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="797.3" y="1310.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.40%)</title><rect x="794.3" y="1283.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="797.3" y="1294.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="794.3" y="1267.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="797.3" y="1278.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.13%)</title><rect x="795.1" y="1267.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="798.1" y="1278.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.20%)</title><rect x="796.7" y="1267.0" width="2.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="799.7" y="1278.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.33%)</title><rect x="799.0" y="1283.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="802.0" y="1294.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.20%)</title><rect x="799.0" y="1267.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="802.0" y="1278.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.13%)</title><rect x="799.0" y="1251.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="802.0" y="1262.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.13%)</title><rect x="799.0" y="1235.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="802.0" y="1246.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.13%)</title><rect x="799.0" y="1219.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="802.0" y="1230.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="800.6" y="1251.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="803.6" y="1262.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="800.6" y="1235.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="803.6" y="1246.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.07%)</title><rect x="800.6" y="1219.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="803.6" y="1230.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.07%)</title><rect x="800.6" y="1203.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="803.6" y="1214.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.13%)</title><rect x="801.4" y="1267.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="804.4" y="1278.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="801.4" y="1251.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="804.4" y="1262.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="802.2" y="1251.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="805.2" y="1262.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="802.2" y="1235.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="805.2" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (8 samples, 0.54%)</title><rect x="803.0" y="1283.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="806.0" y="1294.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (8 samples, 0.54%)</title><rect x="803.0" y="1267.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="806.0" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.47%)</title><rect x="803.0" y="1251.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="806.0" y="1262.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.47%)</title><rect x="803.0" y="1235.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="806.0" y="1246.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.47%)</title><rect x="803.0" y="1219.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="806.0" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.47%)</title><rect x="803.0" y="1203.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="806.0" y="1214.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.27%)</title><rect x="804.6" y="1187.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="807.6" y="1198.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.13%)</title><rect x="805.4" y="1171.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="808.4" y="1182.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.07%)</title><rect x="806.9" y="1171.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="809.9" y="1182.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="807.7" y="1187.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="810.7" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="808.5" y="1251.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="811.5" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.07%)</title><rect x="808.5" y="1235.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="811.5" y="1246.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.07%)</title><rect x="808.5" y="1219.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="811.5" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.07%)</title><rect x="808.5" y="1203.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="811.5" y="1214.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="809.3" y="1299.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="812.3" y="1310.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="809.3" y="1283.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="812.3" y="1294.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.07%)</title><rect x="809.3" y="1267.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="812.3" y="1278.0"></text>
</g>
<g>
<title>JavaThread::run() (479 samples, 32.06%)</title><rect x="810.1" y="1315.0" width="378.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="813.1" y="1326.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (479 samples, 32.06%)</title><rect x="810.1" y="1299.0" width="378.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="813.1" y="1310.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (478 samples, 31.99%)</title><rect x="810.1" y="1283.0" width="377.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="813.1" y="1294.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (475 samples, 31.79%)</title><rect x="810.1" y="1267.0" width="375.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="813.1" y="1278.0">CompileBroker::invoke_compiler_on_method(CompileTas..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (474 samples, 31.73%)</title><rect x="810.1" y="1251.0" width="374.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="813.1" y="1262.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (474 samples, 31.73%)</title><rect x="810.1" y="1235.0" width="374.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="813.1" y="1246.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, in..</text>
</g>
<g>
<title>Compile::Code_Gen() (175 samples, 11.71%)</title><rect x="810.1" y="1219.0" width="138.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="813.1" y="1230.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.20%)</title><rect x="810.1" y="1203.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="813.1" y="1214.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.13%)</title><rect x="810.1" y="1187.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="813.1" y="1198.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.07%)</title><rect x="810.9" y="1171.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="813.9" y="1182.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.07%)</title><rect x="810.9" y="1155.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="813.9" y="1166.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="811.7" y="1187.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="814.7" y="1198.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="811.7" y="1171.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="814.7" y="1182.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.07%)</title><rect x="811.7" y="1155.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="814.7" y="1166.0"></text>
</g>
<g>
<title>PhaseRegAlloc::reg2offset(int) const (1 samples, 0.07%)</title><rect x="811.7" y="1139.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="814.7" y="1150.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (10 samples, 0.67%)</title><rect x="812.5" y="1203.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="815.5" y="1214.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.20%)</title><rect x="814.0" y="1187.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="817.0" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="814.8" y="1171.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="817.8" y="1182.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.07%)</title><rect x="814.8" y="1155.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="817.8" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="815.6" y="1171.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="818.6" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.20%)</title><rect x="816.4" y="1187.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="819.4" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.20%)</title><rect x="816.4" y="1171.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="819.4" y="1182.0"></text>
</g>
<g>
<title>MachUEPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="818.8" y="1187.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="821.8" y="1198.0"></text>
</g>
<g>
<title>Node::size(PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="819.6" y="1187.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="822.6" y="1198.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.07%)</title><rect x="820.4" y="1203.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="823.4" y="1214.0"></text>
</g>
<g>
<title>Matcher::match() (18 samples, 1.20%)</title><rect x="821.2" y="1203.0" width="14.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="824.2" y="1214.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.07%)</title><rect x="821.2" y="1187.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="824.2" y="1198.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.13%)</title><rect x="821.9" y="1187.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="824.9" y="1198.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (15 samples, 1.00%)</title><rect x="823.5" y="1187.0" width="11.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="826.5" y="1198.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (8 samples, 0.54%)</title><rect x="824.3" y="1171.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="827.3" y="1182.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (5 samples, 0.33%)</title><rect x="830.6" y="1171.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="833.6" y="1182.0"></text>
</g>
<g>
<title>CmpNode::bottom_type() const (1 samples, 0.07%)</title><rect x="830.6" y="1155.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="833.6" y="1166.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.20%)</title><rect x="831.4" y="1155.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="834.4" y="1166.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="831.4" y="1139.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="834.4" y="1150.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.13%)</title><rect x="832.2" y="1139.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="835.2" y="1150.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (2 samples, 0.13%)</title><rect x="832.2" y="1123.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="835.2" y="1134.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.07%)</title><rect x="832.2" y="1107.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="835.2" y="1118.0"></text>
</g>
<g>
<title>State::_sub_Op_Bool(Node const*) (1 samples, 0.07%)</title><rect x="833.0" y="1107.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="836.0" y="1118.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="833.8" y="1155.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="836.8" y="1166.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.07%)</title><rect x="833.8" y="1139.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="836.8" y="1150.0"></text>
</g>
<g>
<title>MachTypeNode::MachTypeNode() (1 samples, 0.07%)</title><rect x="833.8" y="1123.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="836.8" y="1134.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="834.6" y="1171.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="837.6" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.07%)</title><rect x="835.4" y="1203.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="838.4" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.07%)</title><rect x="835.4" y="1187.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="838.4" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (9 samples, 0.60%)</title><rect x="836.2" y="1203.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="839.2" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (9 samples, 0.60%)</title><rect x="836.2" y="1187.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="839.2" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (3 samples, 0.20%)</title><rect x="836.2" y="1171.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="839.2" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.20%)</title><rect x="838.5" y="1171.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="841.5" y="1182.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="838.5" y="1155.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="841.5" y="1166.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="839.3" y="1155.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="842.3" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="840.1" y="1155.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="843.1" y="1166.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.07%)</title><rect x="840.1" y="1139.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="843.1" y="1150.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.07%)</title><rect x="840.1" y="1123.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="843.1" y="1134.0"></text>
</g>
<g>
<title>MachOper::base_position() const (1 samples, 0.07%)</title><rect x="840.1" y="1107.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="843.1" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.13%)</title><rect x="840.9" y="1171.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="843.9" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.07%)</title><rect x="840.9" y="1155.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="843.9" y="1166.0"></text>
</g>
<g>
<title>SafePointScalarObjectNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="841.7" y="1155.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="844.7" y="1166.0"></text>
</g>
<g>
<title>compI_rRegNode::ideal_Opcode() const (1 samples, 0.07%)</title><rect x="842.5" y="1171.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="845.5" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.07%)</title><rect x="843.3" y="1203.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="846.3" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (132 samples, 8.84%)</title><rect x="844.1" y="1203.0" width="104.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="847.1" y="1214.0">PhaseChaitin..</text>
</g>
<g>
<title>BoxLockNode::bottom_type() const (1 samples, 0.07%)</title><rect x="844.1" y="1187.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="847.1" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="844.8" y="1187.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="847.8" y="1198.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="845.6" y="1187.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="848.6" y="1198.0"></text>
</g>
<g>
<title>Node::jvms() const (2 samples, 0.13%)</title><rect x="846.4" y="1187.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="849.4" y="1198.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.13%)</title><rect x="848.0" y="1187.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="851.0" y="1198.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.20%)</title><rect x="849.6" y="1187.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="852.6" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (8 samples, 0.54%)</title><rect x="852.0" y="1187.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="855.0" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="852.0" y="1171.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="855.0" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="852.7" y="1171.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="855.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (6 samples, 0.40%)</title><rect x="853.5" y="1171.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="856.5" y="1182.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="854.3" y="1155.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="857.3" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.27%)</title><rect x="855.1" y="1155.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="858.1" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (8 samples, 0.54%)</title><rect x="858.3" y="1187.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="861.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (8 samples, 0.54%)</title><rect x="858.3" y="1171.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="861.3" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.27%)</title><rect x="861.4" y="1155.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="864.4" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (14 samples, 0.94%)</title><rect x="864.6" y="1187.0" width="11.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="867.6" y="1198.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="874.1" y="1171.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="877.1" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="874.9" y="1171.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="877.9" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (21 samples, 1.41%)</title><rect x="875.6" y="1187.0" width="16.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="878.6" y="1198.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.07%)</title><rect x="879.6" y="1171.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="882.6" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.20%)</title><rect x="880.4" y="1171.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="883.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (11 samples, 0.74%)</title><rect x="882.8" y="1171.0" width="8.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="885.8" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.33%)</title><rect x="887.5" y="1155.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="890.5" y="1166.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="891.4" y="1171.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="894.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="892.2" y="1187.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="895.2" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.07%)</title><rect x="893.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="896.0" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (10 samples, 0.67%)</title><rect x="893.8" y="1187.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="896.8" y="1198.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="898.6" y="1171.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="901.6" y="1182.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.07%)</title><rect x="899.3" y="1171.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="902.3" y="1182.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="900.1" y="1171.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="903.1" y="1182.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="900.9" y="1171.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="903.9" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="901.7" y="1187.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="904.7" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 0.60%)</title><rect x="902.5" y="1187.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="905.5" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (7 samples, 0.47%)</title><rect x="904.1" y="1171.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="907.1" y="1182.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (23 samples, 1.54%)</title><rect x="909.6" y="1187.0" width="18.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="912.6" y="1198.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.07%)</title><rect x="909.6" y="1171.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="912.6" y="1182.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (22 samples, 1.47%)</title><rect x="910.4" y="1171.0" width="17.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="913.4" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.07%)</title><rect x="910.4" y="1155.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="913.4" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (21 samples, 1.41%)</title><rect x="911.2" y="1155.0" width="16.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="914.2" y="1166.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (6 samples, 0.40%)</title><rect x="911.2" y="1139.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="914.2" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="915.1" y="1123.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="918.1" y="1134.0"></text>
</g>
<g>
<title>LiveRangeMap::find(Node const*) (1 samples, 0.07%)</title><rect x="915.9" y="1139.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="918.9" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (12 samples, 0.80%)</title><rect x="916.7" y="1139.0" width="9.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="919.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.13%)</title><rect x="926.2" y="1139.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="929.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (5 samples, 0.33%)</title><rect x="927.8" y="1187.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="930.8" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.20%)</title><rect x="929.4" y="1171.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="932.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (5 samples, 0.33%)</title><rect x="931.7" y="1187.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="934.7" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="933.3" y="1171.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="936.3" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.13%)</title><rect x="934.1" y="1171.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="937.1" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.13%)</title><rect x="935.7" y="1187.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="938.7" y="1198.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.13%)</title><rect x="935.7" y="1171.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="938.7" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 0.54%)</title><rect x="937.3" y="1187.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="940.3" y="1198.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="940.4" y="1171.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="943.4" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="941.2" y="1171.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="944.2" y="1182.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="941.2" y="1155.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="944.2" y="1166.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.07%)</title><rect x="941.2" y="1139.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="944.2" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="942.0" y="1171.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="945.0" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.07%)</title><rect x="942.8" y="1171.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="945.8" y="1182.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="943.6" y="1187.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="946.6" y="1198.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.07%)</title><rect x="944.4" y="1187.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="947.4" y="1198.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.07%)</title><rect x="944.4" y="1171.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="947.4" y="1182.0"></text>
</g>
<g>
<title>compP_rRegNode::ideal_Opcode() const (1 samples, 0.07%)</title><rect x="945.2" y="1187.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="948.2" y="1198.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (2 samples, 0.13%)</title><rect x="945.9" y="1187.0" width="1.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="948.9" y="1198.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="947.5" y="1187.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="950.5" y="1198.0"></text>
</g>
<g>
<title>Compile::Optimize() (278 samples, 18.61%)</title><rect x="948.3" y="1219.0" width="219.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="951.3" y="1230.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.13%)</title><rect x="948.3" y="1203.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="951.3" y="1214.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.07%)</title><rect x="948.3" y="1187.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="951.3" y="1198.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="948.3" y="1171.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="951.3" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.07%)</title><rect x="948.3" y="1155.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="951.3" y="1166.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.07%)</title><rect x="948.3" y="1139.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="951.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="949.1" y="1187.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="952.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="949.1" y="1171.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="952.1" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="949.1" y="1155.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="952.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="949.1" y="1139.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="952.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (8 samples, 0.54%)</title><rect x="949.9" y="1203.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="952.9" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (8 samples, 0.54%)</title><rect x="949.9" y="1187.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="952.9" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var_and_edge(Node*, PointsToNode::EscapeState, Node*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="950.7" y="1171.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="953.7" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="951.5" y="1171.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="954.5" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.07%)</title><rect x="951.5" y="1155.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="954.5" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.07%)</title><rect x="951.5" y="1139.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="954.5" y="1150.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="951.5" y="1123.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="954.5" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="952.3" y="1171.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="955.3" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.07%)</title><rect x="952.3" y="1155.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="955.3" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.27%)</title><rect x="953.1" y="1171.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="956.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="953.1" y="1155.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="956.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="953.1" y="1139.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="956.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="953.1" y="1123.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="956.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="1107.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="956.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="1091.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="956.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="1075.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="956.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="1059.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="956.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="1043.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="956.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="1027.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="956.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="1011.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="956.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="995.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="956.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="979.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="956.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="963.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="956.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="947.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="956.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="931.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="956.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="915.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="956.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="899.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="956.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="883.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="956.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="867.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="956.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="851.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="956.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="835.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="956.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="819.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="956.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="803.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="956.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="787.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="956.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="771.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="956.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="755.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="956.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="739.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="956.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="723.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="956.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="707.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="956.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="691.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="956.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="675.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="956.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="659.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="956.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="643.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="956.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="627.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="956.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="611.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="956.1" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="595.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="956.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="579.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="956.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="563.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="956.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="547.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="956.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="531.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="956.1" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="515.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="956.1" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="499.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="956.1" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="483.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="956.1" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="467.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="956.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="451.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="956.1" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="435.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="956.1" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="419.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="956.1" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="403.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="956.1" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="387.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="956.1" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="371.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="956.1" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="355.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="956.1" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="339.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="956.1" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="323.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="956.1" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="953.1" y="307.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="956.1" y="318.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="953.1" y="291.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="956.1" y="302.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="953.1" y="275.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="956.1" y="286.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.07%)</title><rect x="953.1" y="259.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="956.1" y="270.0"></text>
</g>
<g>
<title>ciInstanceKlass::super() (1 samples, 0.07%)</title><rect x="953.1" y="243.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="956.1" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.20%)</title><rect x="953.8" y="1107.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="956.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.20%)</title><rect x="953.8" y="1091.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="956.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="953.8" y="1075.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="956.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="1059.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="956.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="1043.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="956.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="1027.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="956.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="1011.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="956.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="995.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="956.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="979.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="956.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="963.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="956.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="947.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="956.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="931.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="956.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="915.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="956.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="899.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="956.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="883.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="956.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="867.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="956.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="851.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="956.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="835.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="956.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="819.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="956.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="803.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="956.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="787.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="956.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="771.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="956.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="755.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="956.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="739.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="956.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="723.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="956.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="707.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="956.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="691.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="956.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="675.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="956.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="659.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="956.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="643.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="956.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="953.8" y="627.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="956.8" y="638.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.07%)</title><rect x="953.8" y="611.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="956.8" y="622.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="953.8" y="595.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="956.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="954.6" y="1059.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="957.6" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="954.6" y="1043.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="957.6" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="954.6" y="1027.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="957.6" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="954.6" y="1011.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="957.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="954.6" y="995.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="957.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="954.6" y="979.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="957.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="954.6" y="963.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="957.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="954.6" y="947.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="957.6" y="958.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="954.6" y="931.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="957.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="955.4" y="1075.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="958.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="955.4" y="1059.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="958.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="955.4" y="1043.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="958.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="955.4" y="1027.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="958.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="955.4" y="1011.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="958.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="955.4" y="995.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="958.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="955.4" y="979.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="958.4" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.20%)</title><rect x="956.2" y="1203.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="959.2" y="1214.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (2 samples, 0.13%)</title><rect x="956.2" y="1187.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="959.2" y="1198.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="956.2" y="1171.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="959.2" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="957.0" y="1171.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="960.0" y="1182.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="957.0" y="1155.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="960.0" y="1166.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="957.0" y="1139.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.0" y="1150.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="957.8" y="1187.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.8" y="1198.0"></text>
</g>
<g>
<title>Type::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="957.8" y="1171.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.8" y="1182.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="957.8" y="1155.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.8" y="1166.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.07%)</title><rect x="958.6" y="1203.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="961.6" y="1214.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.07%)</title><rect x="958.6" y="1187.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="961.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (235 samples, 15.73%)</title><rect x="959.4" y="1203.0" width="185.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="962.4" y="1214.0">PhaseIdealLoop::build_an..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.07%)</title><rect x="959.4" y="1187.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="962.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.40%)</title><rect x="960.2" y="1187.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="963.2" y="1198.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.13%)</title><rect x="963.3" y="1171.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="966.3" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.33%)</title><rect x="964.9" y="1187.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="967.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="968.1" y="1171.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="971.1" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (214 samples, 14.32%)</title><rect x="968.8" y="1187.0" width="169.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="971.8" y="1198.0">PhaseIdealLoop::build_..</text>
</g>
<g>
<title>CastP2XNode::Opcode() const (1 samples, 0.07%)</title><rect x="972.0" y="1171.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="975.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (209 samples, 13.99%)</title><rect x="972.8" y="1171.0" width="165.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="975.8" y="1182.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.27%)</title><rect x="975.2" y="1155.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="978.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (201 samples, 13.45%)</title><rect x="978.3" y="1155.0" width="158.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.3" y="1166.0">PhaseIdealLoop::get_..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1108.6" y="1139.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.6" y="1150.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1108.6" y="1123.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1111.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (4 samples, 0.27%)</title><rect x="1109.4" y="1139.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (4 samples, 0.27%)</title><rect x="1109.4" y="1123.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (28 samples, 1.87%)</title><rect x="1112.6" y="1139.0" width="22.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.6" y="1150.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.20%)</title><rect x="1134.7" y="1139.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.7" y="1150.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1137.1" y="1155.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1140.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.07%)</title><rect x="1137.9" y="1187.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.20%)</title><rect x="1138.7" y="1187.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.7" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.07%)</title><rect x="1140.2" y="1171.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.2" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1140.2" y="1155.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.2" y="1166.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1140.2" y="1139.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.2" y="1150.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1140.2" y="1123.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.2" y="1134.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1140.2" y="1107.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.2" y="1118.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="1140.2" y="1091.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.2" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1140.2" y="1075.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.2" y="1086.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1140.2" y="1059.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.27%)</title><rect x="1141.0" y="1187.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.0" y="1198.0"></text>
</g>
<g>
<title>CmpNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1141.8" y="1171.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1142.6" y="1171.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.6" y="1182.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1142.6" y="1155.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1143.4" y="1171.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.4" y="1182.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1143.4" y="1155.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.4" y="1166.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1143.4" y="1139.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.4" y="1150.0"></text>
</g>
<g>
<title>RegionNode::pinned() const (1 samples, 0.07%)</title><rect x="1144.2" y="1187.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (27 samples, 1.81%)</title><rect x="1145.0" y="1203.0" width="21.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.0" y="1214.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (25 samples, 1.67%)</title><rect x="1146.6" y="1187.0" width="19.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.6" y="1198.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1147.3" y="1171.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.3" y="1182.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1147.3" y="1155.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.3" y="1166.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1148.1" y="1171.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.1" y="1182.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1148.9" y="1171.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.9" y="1182.0"></text>
</g>
<g>
<title>IfNode::IfNode(Node*, Node*, float, float) (1 samples, 0.07%)</title><rect x="1148.9" y="1155.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.9" y="1166.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1149.7" y="1171.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.7" y="1182.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1149.7" y="1155.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.7" y="1166.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1149.7" y="1139.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.7" y="1150.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1149.7" y="1123.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.7" y="1134.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1150.5" y="1171.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.5" y="1182.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1150.5" y="1155.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.5" y="1166.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="1150.5" y="1139.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.5" y="1150.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="1150.5" y="1123.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.5" y="1134.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.07%)</title><rect x="1150.5" y="1107.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.5" y="1118.0"></text>
</g>
<g>
<title>MemBarVolatileNode::Opcode() const (1 samples, 0.07%)</title><rect x="1151.3" y="1171.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.3" y="1182.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1152.1" y="1171.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.1" y="1182.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.07%)</title><rect x="1152.9" y="1171.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.9" y="1182.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.13%)</title><rect x="1153.7" y="1171.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (6 samples, 0.40%)</title><rect x="1155.2" y="1171.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.2" y="1182.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1158.4" y="1155.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.4" y="1166.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1158.4" y="1139.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1161.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1159.2" y="1155.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.2" y="1166.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1159.2" y="1139.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.2" y="1150.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.20%)</title><rect x="1160.0" y="1171.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1160.8" y="1155.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.8" y="1166.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1160.8" y="1139.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.8" y="1150.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.07%)</title><rect x="1161.6" y="1155.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.6" y="1166.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (2 samples, 0.13%)</title><rect x="1162.4" y="1171.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.4" y="1182.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1162.4" y="1155.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.4" y="1166.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1163.1" y="1155.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.1" y="1166.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1163.1" y="1139.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.1" y="1150.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1163.9" y="1171.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="1182.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1163.9" y="1155.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.9" y="1166.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1164.7" y="1171.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.7" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1164.7" y="1155.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.7" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1164.7" y="1139.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.7" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1164.7" y="1123.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.7" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1164.7" y="1107.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.7" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1164.7" y="1091.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.7" y="1102.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1164.7" y="1075.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.7" y="1086.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1164.7" y="1059.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.7" y="1070.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1165.5" y="1171.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.5" y="1182.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.07%)</title><rect x="1165.5" y="1155.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.5" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.13%)</title><rect x="1166.3" y="1203.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.3" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.13%)</title><rect x="1166.3" y="1187.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.13%)</title><rect x="1166.3" y="1171.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.3" y="1182.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1166.3" y="1155.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1167.1" y="1155.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.1" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (17 samples, 1.14%)</title><rect x="1167.9" y="1219.0" width="13.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.9" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (17 samples, 1.14%)</title><rect x="1167.9" y="1203.0" width="13.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (17 samples, 1.14%)</title><rect x="1167.9" y="1187.0" width="13.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (17 samples, 1.14%)</title><rect x="1167.9" y="1171.0" width="13.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (17 samples, 1.14%)</title><rect x="1167.9" y="1155.0" width="13.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (16 samples, 1.07%)</title><rect x="1167.9" y="1139.0" width="12.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.9" y="1150.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1167.9" y="1123.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.9" y="1134.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1167.9" y="1107.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.9" y="1118.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1167.9" y="1091.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.9" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1167.9" y="1075.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.9" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1167.9" y="1059.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.9" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1167.9" y="1043.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.9" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1167.9" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.9" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1167.9" y="1011.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.9" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1167.9" y="995.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.9" y="1006.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1167.9" y="979.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.9" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1167.9" y="963.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.9" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1167.9" y="947.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.9" y="958.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1167.9" y="931.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.9" y="942.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1167.9" y="915.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.9" y="926.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1167.9" y="899.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.9" y="910.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.07%)</title><rect x="1167.9" y="883.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="894.0"></text>
</g>
<g>
<title>CallInfo::set_common(KlassHandle, KlassHandle, methodHandle, methodHandle, CallInfo::CallKind, int, Thread*) (1 samples, 0.07%)</title><rect x="1167.9" y="867.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.9" y="878.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle, int) (1 samples, 0.07%)</title><rect x="1167.9" y="851.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.9" y="862.0"></text>
</g>
<g>
<title>CompilationPolicy::can_be_compiled(methodHandle, int) (1 samples, 0.07%)</title><rect x="1167.9" y="835.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.9" y="846.0"></text>
</g>
<g>
<title>Method::is_not_compilable(int) const (1 samples, 0.07%)</title><rect x="1167.9" y="819.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.9" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.74%)</title><rect x="1168.7" y="1123.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.7" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.74%)</title><rect x="1168.7" y="1107.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.74%)</title><rect x="1168.7" y="1091.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.74%)</title><rect x="1168.7" y="1075.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.74%)</title><rect x="1168.7" y="1059.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.74%)</title><rect x="1168.7" y="1043.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.7" y="1054.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1168.7" y="1027.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="1038.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.07%)</title><rect x="1168.7" y="1011.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.7" y="1022.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1168.7" y="995.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.7" y="1006.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1168.7" y="979.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.7" y="990.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="1168.7" y="963.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.7" y="974.0"></text>
</g>
<g>
<title>ReplacedNodes::clone() (1 samples, 0.07%)</title><rect x="1168.7" y="947.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.7" y="958.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.07%)</title><rect x="1168.7" y="931.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.40%)</title><rect x="1169.5" y="1027.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.5" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.40%)</title><rect x="1169.5" y="1011.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.40%)</title><rect x="1169.5" y="995.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.40%)</title><rect x="1169.5" y="979.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.40%)</title><rect x="1169.5" y="963.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.40%)</title><rect x="1169.5" y="947.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.5" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.40%)</title><rect x="1169.5" y="931.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.5" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.40%)</title><rect x="1169.5" y="915.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.40%)</title><rect x="1169.5" y="899.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.40%)</title><rect x="1169.5" y="883.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.07%)</title><rect x="1169.5" y="867.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.5" y="878.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.07%)</title><rect x="1169.5" y="851.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.5" y="862.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.5" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.5" y="846.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.5" y="819.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.33%)</title><rect x="1170.3" y="867.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1170.3" y="851.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.3" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1170.3" y="835.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.3" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1170.3" y="819.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1170.3" y="803.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1170.3" y="787.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1170.3" y="771.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1170.3" y="755.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1170.3" y="739.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1170.3" y="723.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1170.3" y="707.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1170.3" y="691.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1170.3" y="675.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1170.3" y="659.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1170.3" y="643.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1170.3" y="627.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1170.3" y="611.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1170.3" y="595.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1170.3" y="579.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.07%)</title><rect x="1170.3" y="563.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.3" y="574.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.07%)</title><rect x="1170.3" y="547.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.3" y="558.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.07%)</title><rect x="1170.3" y="531.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.3" y="542.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1170.3" y="515.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.3" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1171.0" y="643.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1171.0" y="627.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1171.0" y="611.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1171.0" y="595.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1171.0" y="579.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1171.0" y="563.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1171.0" y="547.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1171.0" y="531.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1171.0" y="515.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1171.0" y="499.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1171.0" y="483.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1171.0" y="467.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1171.0" y="451.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1171.0" y="435.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1171.0" y="419.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1171.0" y="403.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1171.0" y="387.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1171.0" y="371.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1171.0" y="355.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1171.0" y="339.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1171.0" y="323.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1171.0" y="307.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1171.0" y="291.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1171.0" y="275.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1171.0" y="259.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.0" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1171.0" y="243.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.0" y="254.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1171.0" y="227.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="238.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.07%)</title><rect x="1171.0" y="211.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.0" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1171.8" y="739.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="750.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1171.8" y="723.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1172.6" y="723.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1172.6" y="707.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1172.6" y="691.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1172.6" y="675.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1172.6" y="659.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="670.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.07%)</title><rect x="1172.6" y="643.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="654.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1172.6" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.6" y="638.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1172.6" y="611.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.6" y="622.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.07%)</title><rect x="1172.6" y="595.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="606.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1172.6" y="579.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.6" y="590.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1172.6" y="563.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1175.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1173.4" y="851.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1173.4" y="835.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.4" y="846.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1173.4" y="819.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.4" y="830.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1173.4" y="803.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.4" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1173.4" y="787.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.4" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1173.4" y="771.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.4" y="782.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.07%)</title><rect x="1173.4" y="755.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.4" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1174.2" y="1027.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.2" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1174.2" y="1011.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.2" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1174.2" y="995.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1174.2" y="979.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1174.2" y="963.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1174.2" y="947.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1174.2" y="931.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.2" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1174.2" y="915.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.2" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1174.2" y="899.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1174.2" y="883.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1174.2" y="867.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1174.2" y="851.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1174.2" y="835.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.2" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1174.2" y="819.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.2" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1174.2" y="803.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1174.2" y="787.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1174.2" y="771.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1174.2" y="755.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1174.2" y="739.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.2" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1174.2" y="723.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.2" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1174.2" y="707.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1174.2" y="691.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1174.2" y="675.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1174.2" y="659.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1174.2" y="643.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.2" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1174.2" y="627.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.2" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1174.2" y="611.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1174.2" y="595.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1174.2" y="579.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1174.2" y="563.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.0" y="547.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.0" y="531.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.0" y="515.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.0" y="499.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.0" y="483.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.0" y="467.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.0" y="451.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.0" y="435.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.0" y="419.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.0" y="403.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.0" y="387.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.0" y="371.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.0" y="355.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.0" y="339.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.0" y="323.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.0" y="291.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.0" y="275.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.0" y="259.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.0" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.0" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.0" y="227.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.0" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.0" y="211.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.0" y="195.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="206.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1175.0" y="179.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.0" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1175.0" y="163.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="174.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1175.0" y="147.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="158.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1175.0" y="131.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1175.8" y="595.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="606.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.07%)</title><rect x="1175.8" y="579.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.8" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.6" y="723.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.6" y="707.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.6" y="691.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.6" y="675.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.6" y="659.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.6" y="643.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.6" y="627.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.6" y="611.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.6" y="595.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.6" y="579.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.6" y="563.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.6" y="547.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.6" y="531.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.6" y="515.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.6" y="499.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.6" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.6" y="467.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.6" y="451.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1176.6" y="435.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.6" y="446.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1176.6" y="419.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="430.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.07%)</title><rect x="1176.6" y="403.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.6" y="414.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1176.6" y="387.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="398.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1176.6" y="371.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.6" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1177.4" y="1123.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1177.4" y="1107.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1177.4" y="1091.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1177.4" y="1075.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1177.4" y="1059.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1177.4" y="1043.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1177.4" y="1027.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1177.4" y="1011.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1177.4" y="995.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1177.4" y="979.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1177.4" y="963.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1177.4" y="947.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1177.4" y="931.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1177.4" y="915.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1177.4" y="899.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1177.4" y="883.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1177.4" y="867.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1177.4" y="851.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1177.4" y="835.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="846.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1177.4" y="819.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="830.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1177.4" y="803.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.4" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1177.4" y="787.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1177.4" y="771.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1177.4" y="755.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1177.4" y="739.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.4" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1177.4" y="723.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1177.4" y="707.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1177.4" y="691.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1177.4" y="675.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1177.4" y="659.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.4" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1177.4" y="643.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1177.4" y="627.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1177.4" y="611.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="622.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1177.4" y="595.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="606.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.07%)</title><rect x="1177.4" y="579.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.07%)</title><rect x="1177.4" y="563.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="574.0"></text>
</g>
<g>
<title>Atomic::inc(short volatile*) (1 samples, 0.07%)</title><rect x="1177.4" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1178.2" y="819.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1178.2" y="803.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1178.2" y="787.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1178.2" y="771.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1178.2" y="755.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1178.2" y="739.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.2" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1178.2" y="723.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.2" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1178.2" y="707.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1178.2" y="691.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1178.2" y="675.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1178.2" y="659.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1178.2" y="643.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1178.2" y="627.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.2" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1178.2" y="611.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1178.2" y="595.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1178.2" y="579.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1178.2" y="563.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1178.2" y="547.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1178.2" y="531.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1178.2" y="515.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.2" y="499.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.2" y="483.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.2" y="467.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.2" y="451.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.2" y="435.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.2" y="419.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.2" y="403.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.2" y="387.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.2" y="371.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.2" y="355.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.2" y="339.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.2" y="323.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.2" y="307.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.2" y="291.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.2" y="275.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.2" y="259.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.2" y="243.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.2" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.2" y="227.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.2" y="211.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.2" y="195.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.2" y="179.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.2" y="163.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.2" y="174.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.2" y="147.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.2" y="158.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1178.2" y="131.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.2" y="142.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1178.2" y="115.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.2" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1178.2" y="99.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.2" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1178.2" y="83.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.2" y="94.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1178.2" y="67.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="78.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1178.2" y="51.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.2" y="62.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1178.2" y="35.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.2" y="46.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.07%)</title><rect x="1178.9" y="499.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.7" y="723.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="734.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.7" y="707.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.7" y="718.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1179.7" y="691.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.7" y="702.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.07%)</title><rect x="1179.7" y="675.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="686.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1179.7" y="659.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.7" y="670.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.07%)</title><rect x="1179.7" y="643.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="654.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.07%)</title><rect x="1179.7" y="627.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.7" y="638.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1179.7" y="611.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1180.5" y="1139.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.5" y="1150.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1180.5" y="1123.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="1134.0"></text>
</g>
<g>
<title>GraphKit::builtin_throw(Deoptimization::DeoptReason, Node*) (1 samples, 0.07%)</title><rect x="1180.5" y="1107.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.5" y="1118.0"></text>
</g>
<g>
<title>Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.07%)</title><rect x="1180.5" y="1091.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="1102.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.07%)</title><rect x="1180.5" y="1075.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="1086.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_extra_data(int, ciMethod*, bool&amp;) (1 samples, 0.07%)</title><rect x="1180.5" y="1059.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.5" y="1070.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (4 samples, 0.27%)</title><rect x="1181.3" y="1219.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="1230.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.13%)</title><rect x="1181.3" y="1203.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="1214.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.13%)</title><rect x="1182.9" y="1203.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.9" y="1214.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.07%)</title><rect x="1184.5" y="1251.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.5" y="1262.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.13%)</title><rect x="1185.3" y="1267.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.3" y="1278.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.13%)</title><rect x="1185.3" y="1251.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.3" y="1262.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.13%)</title><rect x="1185.3" y="1235.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.3" y="1246.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.13%)</title><rect x="1185.3" y="1219.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.3" y="1230.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.07%)</title><rect x="1185.3" y="1203.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.3" y="1214.0"></text>
</g>
<g>
<title>nmethod::make_not_entrant_or_zombie(unsigned int) (1 samples, 0.07%)</title><rect x="1186.1" y="1203.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.1" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::unregister_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1186.1" y="1187.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="1198.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.07%)</title><rect x="1186.1" y="1171.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.1" y="1182.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (1 samples, 0.07%)</title><rect x="1186.8" y="1267.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.8" y="1278.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1187.6" y="1283.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.6" y="1294.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1187.6" y="1267.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.6" y="1278.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1187.6" y="1251.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.6" y="1262.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1187.6" y="1235.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1190.6" y="1246.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.07%)</title><rect x="1187.6" y="1219.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.6" y="1230.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(nmethod const*, int, int, bool, bool) (1 samples, 0.07%)</title><rect x="1187.6" y="1203.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.6" y="1214.0"></text>
</g>
<g>
<title>ScopeDesc::decode_object_values(int) (1 samples, 0.07%)</title><rect x="1187.6" y="1187.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.6" y="1198.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.07%)</title><rect x="1187.6" y="1171.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.6" y="1182.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1187.6" y="1155.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1190.6" y="1166.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.13%)</title><rect x="1188.4" y="1315.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.4" y="1326.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.13%)</title><rect x="1188.4" y="1299.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.4" y="1310.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.13%)</title><rect x="1188.4" y="1283.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.4" y="1294.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.13%)</title><rect x="1188.4" y="1267.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.4" y="1278.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.13%)</title><rect x="1188.4" y="1251.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.4" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.13%)</title><rect x="1188.4" y="1235.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.4" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (2 samples, 0.13%)</title><rect x="1188.4" y="1219.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.4" y="1230.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (2 samples, 0.13%)</title><rect x="1188.4" y="1203.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.4" y="1214.0"></text>
</g>
<g>
<title>oop_Relocation::value() (1 samples, 0.07%)</title><rect x="1189.2" y="1187.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.2" y="1198.0"></text>
</g>
</g>
</svg>
