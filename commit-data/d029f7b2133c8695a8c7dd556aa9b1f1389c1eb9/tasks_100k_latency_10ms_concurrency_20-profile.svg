<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1285"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1285"> </text>
<g id="frames">
<g>
<title>all (210 samples, 100.00%)</title><rect x="10.0" y="1251.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (22 samples, 10.48%)</title><rect x="10.0" y="1235.0" width="123.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.48%)</title><rect x="10.0" y="1219.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.48%)</title><rect x="10.0" y="1203.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.48%)</title><rect x="10.0" y="1187.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.48%)</title><rect x="10.0" y="1171.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.doCommitOffsetsAsync (1 samples, 0.48%)</title><rect x="10.0" y="1155.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.48%)</title><rect x="10.0" y="1139.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest$Builder.&lt;init&gt; (1 samples, 0.48%)</title><rect x="10.0" y="1123.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 10.00%)</title><rect x="15.6" y="1219.0" width="118.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.6" y="1230.0">com/linecorp/d..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (7 samples, 3.33%)</title><rect x="15.6" y="1203.0" width="39.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.6" y="1214.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/850394948.accept (6 samples, 2.86%)</title><rect x="15.6" y="1187.0" width="33.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.6" y="1198.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (6 samples, 2.86%)</title><rect x="15.6" y="1171.0" width="33.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.6" y="1182.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (4 samples, 1.90%)</title><rect x="15.6" y="1155.0" width="22.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.6" y="1166.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (4 samples, 1.90%)</title><rect x="15.6" y="1139.0" width="22.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.6" y="1150.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (4 samples, 1.90%)</title><rect x="15.6" y="1123.0" width="22.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.6" y="1134.0">c..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.90%)</title><rect x="15.6" y="1107.0" width="22.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.6" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.90%)</title><rect x="15.6" y="1091.0" width="22.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.6" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.90%)</title><rect x="15.6" y="1075.0" width="22.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.6" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 1.90%)</title><rect x="15.6" y="1059.0" width="22.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.6" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 1.90%)</title><rect x="15.6" y="1043.0" width="22.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.6" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 1.90%)</title><rect x="15.6" y="1027.0" width="22.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.6" y="1038.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.95%)</title><rect x="38.1" y="1155.0" width="11.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.95%)</title><rect x="38.1" y="1139.0" width="11.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.1" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.48%)</title><rect x="43.7" y="1123.0" width="5.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="46.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.48%)</title><rect x="49.3" y="1187.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="52.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.48%)</title><rect x="49.3" y="1171.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="52.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.48%)</title><rect x="49.3" y="1155.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="52.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.48%)</title><rect x="49.3" y="1139.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.3" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.48%)</title><rect x="49.3" y="1123.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 6.67%)</title><rect x="55.0" y="1203.0" width="78.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.0" y="1214.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 6.67%)</title><rect x="55.0" y="1187.0" width="78.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.0" y="1198.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (10 samples, 4.76%)</title><rect x="55.0" y="1171.0" width="56.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="58.0" y="1182.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.48%)</title><rect x="55.0" y="1155.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.0" y="1166.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.48%)</title><rect x="55.0" y="1139.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 2.86%)</title><rect x="60.6" y="1155.0" width="33.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.6" y="1166.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 2.86%)</title><rect x="60.6" y="1139.0" width="33.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="63.6" y="1150.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.90%)</title><rect x="66.2" y="1123.0" width="22.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.2" y="1134.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 1.90%)</title><rect x="66.2" y="1107.0" width="22.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.2" y="1118.0">o..</text>
</g>
<g>
<title>java/util/HashSet.isEmpty (1 samples, 0.48%)</title><rect x="66.2" y="1091.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.48%)</title><rect x="71.8" y="1091.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.48%)</title><rect x="71.8" y="1075.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="74.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.48%)</title><rect x="71.8" y="1059.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="74.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.95%)</title><rect x="77.4" y="1091.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.48%)</title><rect x="77.4" y="1075.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.4" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.48%)</title><rect x="77.4" y="1059.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.4" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.48%)</title><rect x="77.4" y="1043.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.4" y="1054.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeAccess (1 samples, 0.48%)</title><rect x="77.4" y="1027.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.48%)</title><rect x="83.0" y="1075.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="86.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.48%)</title><rect x="83.0" y="1059.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.48%)</title><rect x="83.0" y="1043.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.48%)</title><rect x="83.0" y="1027.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="86.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.48%)</title><rect x="83.0" y="1011.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="86.0" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.48%)</title><rect x="83.0" y="995.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.0" y="1006.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.48%)</title><rect x="83.0" y="979.0" width="5.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="86.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.48%)</title><rect x="88.7" y="1123.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="91.7" y="1134.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.48%)</title><rect x="88.7" y="1107.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="91.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.43%)</title><rect x="94.3" y="1155.0" width="16.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="97.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.43%)</title><rect x="94.3" y="1139.0" width="16.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.43%)</title><rect x="94.3" y="1123.0" width="16.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="97.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.43%)</title><rect x="94.3" y="1107.0" width="16.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.48%)</title><rect x="94.3" y="1091.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.48%)</title><rect x="94.3" y="1075.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.48%)</title><rect x="94.3" y="1059.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="97.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.48%)</title><rect x="94.3" y="1043.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.48%)</title><rect x="94.3" y="1027.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="97.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.48%)</title><rect x="94.3" y="1011.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.3" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.48%)</title><rect x="94.3" y="995.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="97.3" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.48%)</title><rect x="94.3" y="979.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="97.3" y="990.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.48%)</title><rect x="94.3" y="963.0" width="5.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="97.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.95%)</title><rect x="99.9" y="1091.0" width="11.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.95%)</title><rect x="99.9" y="1075.0" width="11.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="102.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.95%)</title><rect x="99.9" y="1059.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.9" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.95%)</title><rect x="99.9" y="1043.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 1.43%)</title><rect x="111.1" y="1171.0" width="16.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="114.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.43%)</title><rect x="111.1" y="1155.0" width="16.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.48%)</title><rect x="111.1" y="1139.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="114.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.48%)</title><rect x="111.1" y="1123.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="114.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.48%)</title><rect x="111.1" y="1107.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="114.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.48%)</title><rect x="111.1" y="1091.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="114.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.48%)</title><rect x="111.1" y="1075.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="114.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.48%)</title><rect x="111.1" y="1059.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="114.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.48%)</title><rect x="111.1" y="1043.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="114.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.48%)</title><rect x="111.1" y="1027.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="114.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.48%)</title><rect x="111.1" y="1011.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="114.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.48%)</title><rect x="111.1" y="995.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="114.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.48%)</title><rect x="111.1" y="979.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="114.1" y="990.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.48%)</title><rect x="111.1" y="963.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="114.1" y="974.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.48%)</title><rect x="111.1" y="947.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="114.1" y="958.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (1 samples, 0.48%)</title><rect x="111.1" y="931.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="114.1" y="942.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.48%)</title><rect x="111.1" y="915.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="114.1" y="926.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.48%)</title><rect x="111.1" y="899.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="114.1" y="910.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.48%)</title><rect x="111.1" y="883.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="114.1" y="894.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.48%)</title><rect x="111.1" y="867.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="114.1" y="878.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (1 samples, 0.48%)</title><rect x="111.1" y="851.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="114.1" y="862.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.48%)</title><rect x="111.1" y="835.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="114.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.95%)</title><rect x="116.8" y="1139.0" width="11.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="119.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.95%)</title><rect x="116.8" y="1123.0" width="11.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="119.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.maybeBeginClientReauthentication (1 samples, 0.48%)</title><rect x="116.8" y="1107.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.ready (1 samples, 0.48%)</title><rect x="116.8" y="1091.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$$Lambda$86/1510166421.get$Lambda (1 samples, 0.48%)</title><rect x="122.4" y="1107.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="125.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.48%)</title><rect x="128.0" y="1171.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.48%)</title><rect x="128.0" y="1155.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="131.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.run (153 samples, 72.86%)</title><rect x="133.6" y="1235.0" width="859.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.6" y="1246.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (153 samples, 72.86%)</title><rect x="133.6" y="1219.0" width="859.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="136.6" y="1230.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (153 samples, 72.86%)</title><rect x="133.6" y="1203.0" width="859.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="136.6" y="1214.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1831930008.run (147 samples, 70.00%)</title><rect x="133.6" y="1187.0" width="826.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="136.6" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1831930008.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (147 samples, 70.00%)</title><rect x="133.6" y="1171.0" width="826.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="136.6" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (147 samples, 70.00%)</title><rect x="133.6" y="1155.0" width="826.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="136.6" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.48%)</title><rect x="139.2" y="1139.0" width="5.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="142.2" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.48%)</title><rect x="139.2" y="1123.0" width="5.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="142.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (145 samples, 69.05%)</title><rect x="144.9" y="1139.0" width="814.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="147.9" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (27 samples, 12.86%)</title><rect x="150.5" y="1123.0" width="151.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.5" y="1134.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (27 samples, 12.86%)</title><rect x="150.5" y="1107.0" width="151.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="153.5" y="1118.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (27 samples, 12.86%)</title><rect x="150.5" y="1091.0" width="151.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="153.5" y="1102.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (27 samples, 12.86%)</title><rect x="150.5" y="1075.0" width="151.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="153.5" y="1086.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (27 samples, 12.86%)</title><rect x="150.5" y="1059.0" width="151.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="153.5" y="1070.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (27 samples, 12.86%)</title><rect x="150.5" y="1043.0" width="151.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="153.5" y="1054.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 4.76%)</title><rect x="150.5" y="1027.0" width="56.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="153.5" y="1038.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 2.38%)</title><rect x="161.7" y="1011.0" width="28.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="164.7" y="1022.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 2.38%)</title><rect x="161.7" y="995.0" width="28.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="164.7" y="1006.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (3 samples, 1.43%)</title><rect x="161.7" y="979.0" width="16.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="164.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.95%)</title><rect x="178.6" y="979.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="181.6" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.48%)</title><rect x="184.2" y="963.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.2" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.48%)</title><rect x="184.2" y="947.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="187.2" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.48%)</title><rect x="184.2" y="931.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="187.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.43%)</title><rect x="189.8" y="1011.0" width="16.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.48%)</title><rect x="201.0" y="995.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.48%)</title><rect x="201.0" y="979.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.48%)</title><rect x="201.0" y="963.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.48%)</title><rect x="201.0" y="947.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.0" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.48%)</title><rect x="201.0" y="931.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="204.0" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.48%)</title><rect x="201.0" y="915.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="204.0" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.48%)</title><rect x="201.0" y="899.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="204.0" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.48%)</title><rect x="201.0" y="883.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="204.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (16 samples, 7.62%)</title><rect x="206.7" y="1027.0" width="89.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="209.7" y="1038.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.48%)</title><rect x="206.7" y="1011.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="209.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.48%)</title><rect x="206.7" y="995.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="209.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.48%)</title><rect x="206.7" y="979.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="209.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.48%)</title><rect x="206.7" y="963.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.48%)</title><rect x="212.3" y="1011.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.48%)</title><rect x="212.3" y="995.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="215.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.48%)</title><rect x="212.3" y="979.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.48%)</title><rect x="212.3" y="963.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="215.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (14 samples, 6.67%)</title><rect x="217.9" y="1011.0" width="78.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="220.9" y="1022.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 2.38%)</title><rect x="217.9" y="995.0" width="28.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="220.9" y="1006.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.48%)</title><rect x="229.1" y="979.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.95%)</title><rect x="234.8" y="979.0" width="11.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (9 samples, 4.29%)</title><rect x="246.0" y="995.0" width="50.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.0" y="1006.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (9 samples, 4.29%)</title><rect x="246.0" y="979.0" width="50.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.0" y="990.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 4.29%)</title><rect x="246.0" y="963.0" width="50.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.0" y="974.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.90%)</title><rect x="251.6" y="947.0" width="22.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.6" y="958.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.48%)</title><rect x="251.6" y="931.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.48%)</title><rect x="251.6" y="915.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.48%)</title><rect x="251.6" y="899.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.48%)</title><rect x="251.6" y="883.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.95%)</title><rect x="257.2" y="931.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.48%)</title><rect x="268.5" y="931.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.48%)</title><rect x="274.1" y="947.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.95%)</title><rect x="279.7" y="947.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.95%)</title><rect x="279.7" y="931.0" width="11.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.95%)</title><rect x="279.7" y="915.0" width="11.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.95%)</title><rect x="279.7" y="899.0" width="11.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.7" y="910.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.95%)</title><rect x="279.7" y="883.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.7" y="894.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.48%)</title><rect x="285.3" y="867.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.48%)</title><rect x="291.0" y="947.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.48%)</title><rect x="291.0" y="931.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="294.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.48%)</title><rect x="291.0" y="915.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="294.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.48%)</title><rect x="296.6" y="1027.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.48%)</title><rect x="296.6" y="1011.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.48%)</title><rect x="296.6" y="995.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="299.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.48%)</title><rect x="296.6" y="979.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (107 samples, 50.95%)</title><rect x="302.2" y="1123.0" width="601.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="305.2" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (29 samples, 13.81%)</title><rect x="302.2" y="1107.0" width="162.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.2" y="1118.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/498940144.process (1 samples, 0.48%)</title><rect x="319.0" y="1091.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="322.0" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (25 samples, 11.90%)</title><rect x="324.7" y="1091.0" width="140.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="327.7" y="1102.0">org/slf4j/MDC.remove</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (22 samples, 10.48%)</title><rect x="341.5" y="1075.0" width="123.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.5" y="1086.0">ch/qos/logback/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.48%)</title><rect x="352.8" y="1059.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="355.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.48%)</title><rect x="352.8" y="1043.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.48%)</title><rect x="352.8" y="1027.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="355.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.48%)</title><rect x="352.8" y="1011.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.8" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (19 samples, 9.05%)</title><rect x="358.4" y="1059.0" width="106.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="361.4" y="1070.0">java/util/Col..</text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 4.76%)</title><rect x="409.0" y="1043.0" width="56.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="412.0" y="1054.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 4.76%)</title><rect x="409.0" y="1027.0" width="56.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="412.0" y="1038.0">java/u..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.48%)</title><rect x="459.5" y="1011.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="462.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (16 samples, 7.62%)</title><rect x="465.1" y="1107.0" width="89.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="468.1" y="1118.0">com/lineco..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.48%)</title><rect x="465.1" y="1091.0" width="5.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="468.1" y="1102.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.48%)</title><rect x="465.1" y="1075.0" width="5.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="468.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (15 samples, 7.14%)</title><rect x="470.8" y="1091.0" width="84.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="473.8" y="1102.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 2.86%)</title><rect x="476.4" y="1075.0" width="33.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.4" y="1086.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.86%)</title><rect x="476.4" y="1059.0" width="33.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.4" y="1070.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.90%)</title><rect x="476.4" y="1043.0" width="22.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="479.4" y="1054.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.43%)</title><rect x="476.4" y="1027.0" width="16.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="479.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.43%)</title><rect x="476.4" y="1011.0" width="16.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="479.4" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.43%)</title><rect x="476.4" y="995.0" width="16.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="479.4" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.43%)</title><rect x="476.4" y="979.0" width="16.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="479.4" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.95%)</title><rect x="476.4" y="963.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="479.4" y="974.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.48%)</title><rect x="476.4" y="947.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="479.4" y="958.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.48%)</title><rect x="482.0" y="947.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="485.0" y="958.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.48%)</title><rect x="487.6" y="963.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="490.6" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.48%)</title><rect x="487.6" y="947.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="490.6" y="958.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.48%)</title><rect x="487.6" y="931.0" width="5.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="490.6" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.48%)</title><rect x="493.2" y="1027.0" width="5.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="496.2" y="1038.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.48%)</title><rect x="498.9" y="1043.0" width="5.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="501.9" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.48%)</title><rect x="504.5" y="1043.0" width="5.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="507.5" y="1054.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 3.81%)</title><rect x="510.1" y="1075.0" width="44.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="513.1" y="1086.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 3.33%)</title><rect x="515.7" y="1059.0" width="39.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="518.7" y="1070.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 3.33%)</title><rect x="515.7" y="1043.0" width="39.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="518.7" y="1054.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 1.90%)</title><rect x="532.6" y="1027.0" width="22.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="535.6" y="1038.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.90%)</title><rect x="532.6" y="1011.0" width="22.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="535.6" y="1022.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.48%)</title><rect x="538.2" y="995.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="541.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.95%)</title><rect x="543.8" y="995.0" width="11.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="546.8" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.48%)</title><rect x="549.4" y="979.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="552.4" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.48%)</title><rect x="549.4" y="963.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="552.4" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.48%)</title><rect x="549.4" y="947.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="552.4" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.48%)</title><rect x="549.4" y="931.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="552.4" y="942.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.48%)</title><rect x="549.4" y="915.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="552.4" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.48%)</title><rect x="549.4" y="899.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="552.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (60 samples, 28.57%)</title><rect x="555.0" y="1107.0" width="337.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="558.0" y="1118.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (60 samples, 28.57%)</title><rect x="555.0" y="1091.0" width="337.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="558.0" y="1102.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/498940144.process (55 samples, 26.19%)</title><rect x="555.0" y="1075.0" width="309.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="558.0" y="1086.0">com/linecorp/decaton/benchmark/DecatonRunn..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (55 samples, 26.19%)</title><rect x="555.0" y="1059.0" width="309.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="558.0" y="1070.0">com/linecorp/decaton/benchmark/DecatonRunn..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (55 samples, 26.19%)</title><rect x="555.0" y="1043.0" width="309.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="558.0" y="1054.0">com/linecorp/decaton/benchmark/Recording.p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (53 samples, 25.24%)</title><rect x="555.0" y="1027.0" width="297.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="558.0" y="1038.0">com/linecorp/decaton/benchmark/Recording..</text>
</g>
<g>
<title>java/lang/Thread.sleep (51 samples, 24.29%)</title><rect x="560.7" y="1011.0" width="286.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="563.7" y="1022.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (45 samples, 21.43%)</title><rect x="594.4" y="995.0" width="252.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="597.4" y="1006.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.90%)</title><rect x="600.0" y="979.0" width="22.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="603.0" y="990.0">H..</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.48%)</title><rect x="622.5" y="979.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="625.5" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.48%)</title><rect x="628.1" y="979.0" width="5.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="631.1" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.48%)</title><rect x="628.1" y="963.0" width="5.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="631.1" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.48%)</title><rect x="633.7" y="979.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="636.7" y="990.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.48%)</title><rect x="639.3" y="979.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="642.3" y="990.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (36 samples, 17.14%)</title><rect x="645.0" y="979.0" width="202.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="648.0" y="990.0">os::sleep(Thread*, long, b..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.95%)</title><rect x="673.0" y="963.0" width="11.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="676.0" y="974.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.48%)</title><rect x="678.7" y="947.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="681.7" y="958.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 3.33%)</title><rect x="684.3" y="963.0" width="39.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="687.3" y="974.0">__l..</text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 5.71%)</title><rect x="723.6" y="963.0" width="67.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="726.6" y="974.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.48%)</title><rect x="791.0" y="963.0" width="5.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="794.0" y="974.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 1.43%)</title><rect x="796.7" y="963.0" width="16.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="799.7" y="974.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 2.38%)</title><rect x="813.5" y="963.0" width="28.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="816.5" y="974.0">os..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.48%)</title><rect x="841.6" y="963.0" width="5.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="844.6" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.48%)</title><rect x="847.2" y="1011.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="850.2" y="1022.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.48%)</title><rect x="847.2" y="995.0" width="5.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="850.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.95%)</title><rect x="852.9" y="1027.0" width="11.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="855.9" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 2.38%)</title><rect x="864.1" y="1075.0" width="28.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.1" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.95%)</title><rect x="892.2" y="1107.0" width="11.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="895.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.95%)</title><rect x="892.2" y="1091.0" width="11.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="895.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 4.29%)</title><rect x="903.4" y="1123.0" width="50.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="906.4" y="1134.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 4.29%)</title><rect x="903.4" y="1107.0" width="50.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="906.4" y="1118.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 4.29%)</title><rect x="903.4" y="1091.0" width="50.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="906.4" y="1102.0">java/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/396121905.accept (9 samples, 4.29%)</title><rect x="903.4" y="1075.0" width="50.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="906.4" y="1086.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (9 samples, 4.29%)</title><rect x="903.4" y="1059.0" width="50.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="906.4" y="1070.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 4.29%)</title><rect x="903.4" y="1043.0" width="50.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="906.4" y="1054.0">com/l..</text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 4.29%)</title><rect x="903.4" y="1027.0" width="50.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="906.4" y="1038.0">java/..</text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 4.29%)</title><rect x="903.4" y="1011.0" width="50.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="906.4" y="1022.0">java/..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.48%)</title><rect x="954.0" y="1123.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="957.0" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.48%)</title><rect x="954.0" y="1107.0" width="5.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="957.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.48%)</title><rect x="959.6" y="1187.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="962.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.48%)</title><rect x="959.6" y="1171.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="962.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.48%)</title><rect x="959.6" y="1155.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="962.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.48%)</title><rect x="959.6" y="1139.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="962.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 2.38%)</title><rect x="965.2" y="1187.0" width="28.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="968.2" y="1198.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.90%)</title><rect x="970.9" y="1171.0" width="22.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="973.9" y="1182.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.95%)</title><rect x="970.9" y="1155.0" width="11.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="973.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.95%)</title><rect x="970.9" y="1139.0" width="11.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="973.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.95%)</title><rect x="982.1" y="1155.0" width="11.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="985.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.95%)</title><rect x="982.1" y="1139.0" width="11.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="985.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.95%)</title><rect x="982.1" y="1123.0" width="11.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="985.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.95%)</title><rect x="982.1" y="1107.0" width="11.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="985.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.48%)</title><rect x="993.3" y="1235.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="996.3" y="1246.0"></text>
</g>
<g>
<title>start_thread (34 samples, 16.19%)</title><rect x="999.0" y="1235.0" width="191.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1002.0" y="1246.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (34 samples, 16.19%)</title><rect x="999.0" y="1219.0" width="191.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1002.0" y="1230.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 4.76%)</title><rect x="999.0" y="1203.0" width="56.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1002.0" y="1214.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 4.76%)</title><rect x="999.0" y="1187.0" width="56.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1002.0" y="1198.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 4.76%)</title><rect x="999.0" y="1171.0" width="56.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1002.0" y="1182.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 3.81%)</title><rect x="1004.6" y="1155.0" width="44.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1007.6" y="1166.0">G1Pa..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.48%)</title><rect x="1021.4" y="1139.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1024.4" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.43%)</title><rect x="1027.0" y="1139.0" width="16.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1030.0" y="1150.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.48%)</title><rect x="1043.9" y="1139.0" width="5.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1046.9" y="1150.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.48%)</title><rect x="1049.5" y="1155.0" width="5.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1052.5" y="1166.0"></text>
</g>
<g>
<title>JavaThread::run() (24 samples, 11.43%)</title><rect x="1055.1" y="1203.0" width="134.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1058.1" y="1214.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (24 samples, 11.43%)</title><rect x="1055.1" y="1187.0" width="134.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1058.1" y="1198.0">JavaThread::threa..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (24 samples, 11.43%)</title><rect x="1055.1" y="1171.0" width="134.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1058.1" y="1182.0">CompileBroker::co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (24 samples, 11.43%)</title><rect x="1055.1" y="1155.0" width="134.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1058.1" y="1166.0">CompileBroker::in..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (21 samples, 10.00%)</title><rect x="1055.1" y="1139.0" width="118.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1058.1" y="1150.0">C2Compiler::co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (21 samples, 10.00%)</title><rect x="1055.1" y="1123.0" width="118.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.1" y="1134.0">Compile::Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (11 samples, 5.24%)</title><rect x="1055.1" y="1107.0" width="61.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1058.1" y="1118.0">Compil..</text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.48%)</title><rect x="1055.1" y="1091.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1058.1" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.48%)</title><rect x="1055.1" y="1075.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1058.1" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.48%)</title><rect x="1055.1" y="1059.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1058.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (10 samples, 4.76%)</title><rect x="1060.8" y="1091.0" width="56.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1063.8" y="1102.0">PhaseC..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.48%)</title><rect x="1060.8" y="1075.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1063.8" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 1.43%)</title><rect x="1066.4" y="1075.0" width="16.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1069.4" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.48%)</title><rect x="1066.4" y="1059.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1069.4" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.48%)</title><rect x="1072.0" y="1059.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1075.0" y="1070.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.48%)</title><rect x="1077.6" y="1059.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.6" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.90%)</title><rect x="1083.2" y="1075.0" width="22.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.2" y="1086.0">P..</text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.48%)</title><rect x="1105.7" y="1075.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.7" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.48%)</title><rect x="1111.3" y="1075.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.3" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.48%)</title><rect x="1111.3" y="1059.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.3" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.48%)</title><rect x="1111.3" y="1043.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.3" y="1054.0"></text>
</g>
<g>
<title>Compile::Optimize() (5 samples, 2.38%)</title><rect x="1117.0" y="1107.0" width="28.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.0" y="1118.0">Co..</text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.48%)</title><rect x="1117.0" y="1091.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.0" y="1102.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.48%)</title><rect x="1117.0" y="1075.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.0" y="1086.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.48%)</title><rect x="1117.0" y="1059.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (4 samples, 1.90%)</title><rect x="1122.6" y="1091.0" width="22.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.6" y="1102.0">P..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.48%)</title><rect x="1122.6" y="1075.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.48%)</title><rect x="1128.2" y="1075.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.2" y="1086.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.48%)</title><rect x="1128.2" y="1059.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.48%)</title><rect x="1133.8" y="1075.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.48%)</title><rect x="1139.4" y="1075.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.48%)</title><rect x="1139.4" y="1059.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.4" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.43%)</title><rect x="1145.0" y="1107.0" width="16.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.0" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.43%)</title><rect x="1145.0" y="1091.0" width="16.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.43%)</title><rect x="1145.0" y="1075.0" width="16.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.0" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.95%)</title><rect x="1145.0" y="1059.0" width="11.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.0" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.95%)</title><rect x="1145.0" y="1043.0" width="11.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.95%)</title><rect x="1145.0" y="1027.0" width="11.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.0" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.95%)</title><rect x="1145.0" y="1011.0" width="11.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.0" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.95%)</title><rect x="1145.0" y="995.0" width="11.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.95%)</title><rect x="1145.0" y="979.0" width="11.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.95%)</title><rect x="1145.0" y="963.0" width="11.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.95%)</title><rect x="1145.0" y="947.0" width="11.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.95%)</title><rect x="1145.0" y="931.0" width="11.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.0" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.95%)</title><rect x="1145.0" y="915.0" width="11.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.0" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.95%)</title><rect x="1145.0" y="899.0" width="11.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.95%)</title><rect x="1145.0" y="883.0" width="11.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.95%)</title><rect x="1145.0" y="867.0" width="11.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.95%)</title><rect x="1145.0" y="851.0" width="11.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.95%)</title><rect x="1145.0" y="835.0" width="11.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.95%)</title><rect x="1145.0" y="819.0" width="11.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.0" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.95%)</title><rect x="1145.0" y="803.0" width="11.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.95%)</title><rect x="1145.0" y="787.0" width="11.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.95%)</title><rect x="1145.0" y="771.0" width="11.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.95%)</title><rect x="1145.0" y="755.0" width="11.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.95%)</title><rect x="1145.0" y="739.0" width="11.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.0" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.95%)</title><rect x="1145.0" y="723.0" width="11.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.95%)</title><rect x="1145.0" y="707.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.95%)</title><rect x="1145.0" y="691.0" width="11.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.95%)</title><rect x="1145.0" y="675.0" width="11.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.95%)</title><rect x="1145.0" y="659.0" width="11.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.95%)</title><rect x="1145.0" y="643.0" width="11.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.95%)</title><rect x="1145.0" y="627.0" width="11.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.95%)</title><rect x="1145.0" y="611.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.95%)</title><rect x="1145.0" y="595.0" width="11.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.95%)</title><rect x="1145.0" y="579.0" width="11.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.95%)</title><rect x="1145.0" y="563.0" width="11.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.95%)</title><rect x="1145.0" y="547.0" width="11.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.95%)</title><rect x="1145.0" y="531.0" width="11.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.95%)</title><rect x="1145.0" y="515.0" width="11.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.95%)</title><rect x="1145.0" y="499.0" width="11.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.95%)</title><rect x="1145.0" y="483.0" width="11.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.95%)</title><rect x="1145.0" y="467.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.95%)</title><rect x="1145.0" y="451.0" width="11.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.95%)</title><rect x="1145.0" y="435.0" width="11.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.95%)</title><rect x="1145.0" y="419.0" width="11.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.95%)</title><rect x="1145.0" y="403.0" width="11.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.95%)</title><rect x="1145.0" y="387.0" width="11.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.95%)</title><rect x="1145.0" y="371.0" width="11.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1145.0" y="355.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1145.0" y="339.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1145.0" y="323.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1145.0" y="307.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1145.0" y="291.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1145.0" y="275.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1145.0" y="259.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.0" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1145.0" y="243.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.0" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1145.0" y="227.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1145.0" y="211.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1145.0" y="195.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1145.0" y="179.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.48%)</title><rect x="1145.0" y="163.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.48%)</title><rect x="1145.0" y="147.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.0" y="158.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.48%)</title><rect x="1145.0" y="131.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.0" y="142.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.48%)</title><rect x="1145.0" y="115.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.0" y="126.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.48%)</title><rect x="1145.0" y="99.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.0" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.48%)</title><rect x="1145.0" y="83.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.0" y="94.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.48%)</title><rect x="1145.0" y="67.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.0" y="78.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.48%)</title><rect x="1145.0" y="51.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.0" y="62.0"></text>
</g>
<g>
<title>FieldType::basic_type(Symbol*) (1 samples, 0.48%)</title><rect x="1145.0" y="35.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.48%)</title><rect x="1150.7" y="355.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.48%)</title><rect x="1150.7" y="339.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.7" y="350.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.48%)</title><rect x="1150.7" y="323.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.7" y="334.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.48%)</title><rect x="1150.7" y="307.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.7" y="318.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.48%)</title><rect x="1150.7" y="291.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.7" y="302.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.48%)</title><rect x="1150.7" y="275.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.7" y="286.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.48%)</title><rect x="1150.7" y="259.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.7" y="270.0"></text>
</g>
<g>
<title>Parse::ensure_phis_everywhere() (1 samples, 0.48%)</title><rect x="1156.3" y="1059.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.3" y="1070.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.48%)</title><rect x="1156.3" y="1043.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.3" y="1054.0"></text>
</g>
<g>
<title>Parse::Block::local_type_at(int) const (1 samples, 0.48%)</title><rect x="1156.3" y="1027.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.3" y="1038.0"></text>
</g>
<g>
<title>Type::get_typeflow_type(ciType*) (1 samples, 0.48%)</title><rect x="1156.3" y="1011.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.3" y="1022.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.48%)</title><rect x="1156.3" y="995.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.3" y="1006.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.48%)</title><rect x="1156.3" y="979.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.3" y="990.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.48%)</title><rect x="1156.3" y="963.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.3" y="974.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.48%)</title><rect x="1161.9" y="1107.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.9" y="1118.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.48%)</title><rect x="1161.9" y="1091.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.9" y="1102.0"></text>
</g>
<g>
<title>bool ciMethod::has_option_value&lt;unsigned long&gt;(char const*, unsigned long&amp;) (1 samples, 0.48%)</title><rect x="1167.5" y="1107.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.5" y="1118.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.95%)</title><rect x="1173.1" y="1139.0" width="11.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.1" y="1150.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.95%)</title><rect x="1173.1" y="1123.0" width="11.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.1" y="1134.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.95%)</title><rect x="1173.1" y="1107.0" width="11.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.1" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.48%)</title><rect x="1173.1" y="1091.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.1" y="1102.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.48%)</title><rect x="1173.1" y="1075.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.1" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.48%)</title><rect x="1173.1" y="1059.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.1" y="1070.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.48%)</title><rect x="1173.1" y="1043.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.1" y="1054.0"></text>
</g>
<g>
<title>LIR_Assembler::stack2reg(LIR_OprDesc*, LIR_OprDesc*, BasicType) (1 samples, 0.48%)</title><rect x="1173.1" y="1027.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.1" y="1038.0"></text>
</g>
<g>
<title>Assembler::movq(RegisterImpl*, Address) (1 samples, 0.48%)</title><rect x="1173.1" y="1011.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.1" y="1022.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.48%)</title><rect x="1178.8" y="1091.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.8" y="1102.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.48%)</title><rect x="1178.8" y="1075.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="1086.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.48%)</title><rect x="1178.8" y="1059.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="1070.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.48%)</title><rect x="1178.8" y="1043.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.48%)</title><rect x="1178.8" y="1027.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="1038.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.48%)</title><rect x="1184.4" y="1139.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="1150.0"></text>
</g>
<g>
<title>ciObjectFactory::ciObjectFactory(Arena*, int) (1 samples, 0.48%)</title><rect x="1184.4" y="1123.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="1134.0"></text>
</g>
</g>
</svg>
