<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (1,224 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (293 samples, 23.94%)</title><rect x="10.0" y="867.0" width="282.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="878.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.08%)</title><rect x="10.0" y="851.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.08%)</title><rect x="10.0" y="835.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.08%)</title><rect x="10.0" y="819.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_2 (1 samples, 0.08%)</title><rect x="10.0" y="803.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_2 (1 samples, 0.08%)</title><rect x="10.0" y="787.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (292 samples, 23.86%)</title><rect x="11.0" y="851.0" width="281.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="862.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (9 samples, 0.74%)</title><rect x="11.9" y="835.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (8 samples, 0.65%)</title><rect x="12.9" y="819.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/2103195694.accept (8 samples, 0.65%)</title><rect x="12.9" y="803.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (8 samples, 0.65%)</title><rect x="12.9" y="787.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (8 samples, 0.65%)</title><rect x="12.9" y="771.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.9" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (8 samples, 0.65%)</title><rect x="12.9" y="755.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.08%)</title><rect x="20.6" y="835.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.08%)</title><rect x="20.6" y="819.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.6" y="830.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="20.6" y="803.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.6" y="814.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="20.6" y="787.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="20.6" y="771.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.08%)</title><rect x="21.6" y="835.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="21.6" y="819.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.08%)</title><rect x="22.5" y="835.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.5" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (218 samples, 17.81%)</title><rect x="23.5" y="835.0" width="210.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.5" y="846.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/182127789.accept (213 samples, 17.40%)</title><rect x="23.5" y="819.0" width="205.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.5" y="830.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$68 (212 samples, 17.32%)</title><rect x="24.5" y="803.0" width="204.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.5" y="814.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (174 samples, 14.22%)</title><rect x="24.5" y="787.0" width="167.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.5" y="798.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (174 samples, 14.22%)</title><rect x="24.5" y="771.0" width="167.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.5" y="782.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (174 samples, 14.22%)</title><rect x="24.5" y="755.0" width="167.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.5" y="766.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (174 samples, 14.22%)</title><rect x="24.5" y="739.0" width="167.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.5" y="750.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (174 samples, 14.22%)</title><rect x="24.5" y="723.0" width="167.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.5" y="734.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (174 samples, 14.22%)</title><rect x="24.5" y="707.0" width="167.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.5" y="718.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (118 samples, 9.64%)</title><rect x="24.5" y="691.0" width="113.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.5" y="702.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (23 samples, 1.88%)</title><rect x="24.5" y="675.0" width="22.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.5" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (23 samples, 1.88%)</title><rect x="24.5" y="659.0" width="22.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.5" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 1.31%)</title><rect x="31.2" y="643.0" width="15.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (14 samples, 1.14%)</title><rect x="33.1" y="627.0" width="13.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.90%)</title><rect x="46.6" y="675.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="49.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (11 samples, 0.90%)</title><rect x="46.6" y="659.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (5 samples, 0.41%)</title><rect x="48.6" y="643.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.6" y="654.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (5 samples, 0.41%)</title><rect x="48.6" y="627.0" width="4.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="51.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.33%)</title><rect x="53.4" y="643.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (84 samples, 6.86%)</title><rect x="57.2" y="675.0" width="81.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="60.2" y="686.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (84 samples, 6.86%)</title><rect x="57.2" y="659.0" width="81.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.2" y="670.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (84 samples, 6.86%)</title><rect x="57.2" y="643.0" width="81.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="60.2" y="654.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (83 samples, 6.78%)</title><rect x="57.2" y="627.0" width="80.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.2" y="638.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (83 samples, 6.78%)</title><rect x="57.2" y="611.0" width="80.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.2" y="622.0">sun/misc/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="57.2" y="595.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="60.2" y="606.0"></text>
</g>
<g>
<title>Unsafe_Unpark (78 samples, 6.37%)</title><rect x="59.2" y="595.0" width="75.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="62.2" y="606.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="59.2" y="579.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="62.2" y="590.0"></text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.33%)</title><rect x="60.1" y="579.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="63.1" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_signal (54 samples, 4.41%)</title><rect x="64.0" y="579.0" width="52.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="67.0" y="590.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.16%)</title><rect x="116.0" y="579.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="119.0" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (17 samples, 1.39%)</title><rect x="118.0" y="579.0" width="16.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="121.0" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.08%)</title><rect x="134.4" y="595.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="137.4" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="135.3" y="595.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="138.3" y="606.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.08%)</title><rect x="137.3" y="627.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="140.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (46 samples, 3.76%)</title><rect x="138.2" y="691.0" width="44.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="141.2" y="702.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (46 samples, 3.76%)</title><rect x="138.2" y="675.0" width="44.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="141.2" y="686.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (46 samples, 3.76%)</title><rect x="138.2" y="659.0" width="44.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="141.2" y="670.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.82%)</title><rect x="182.6" y="691.0" width="9.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="185.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (10 samples, 0.82%)</title><rect x="182.6" y="675.0" width="9.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="185.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (10 samples, 0.82%)</title><rect x="182.6" y="659.0" width="9.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.6" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="191.2" y="643.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="194.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.08%)</title><rect x="192.2" y="787.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="195.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.08%)</title><rect x="192.2" y="771.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="195.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (5 samples, 0.41%)</title><rect x="193.2" y="787.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="196.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.41%)</title><rect x="193.2" y="771.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="196.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.41%)</title><rect x="193.2" y="755.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (32 samples, 2.61%)</title><rect x="198.0" y="787.0" width="30.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="201.0" y="798.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (30 samples, 2.45%)</title><rect x="199.0" y="771.0" width="28.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.0" y="782.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.25%)</title><rect x="224.0" y="755.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.0" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="224.0" y="739.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.0" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.08%)</title><rect x="224.0" y="723.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.0" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="224.0" y="707.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.0" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.16%)</title><rect x="225.0" y="739.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.0" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="226.9" y="755.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="229.9" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="227.9" y="771.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="230.9" y="782.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="228.8" y="819.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="231.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.08%)</title><rect x="229.8" y="819.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.08%)</title><rect x="229.8" y="803.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="232.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="229.8" y="787.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.08%)</title><rect x="229.8" y="771.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="229.8" y="755.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="229.8" y="739.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.25%)</title><rect x="230.8" y="819.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.8" y="830.0"></text>
</g>
<g>
<title>java/lang/Enum.ordinal (1 samples, 0.08%)</title><rect x="230.8" y="803.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.16%)</title><rect x="231.7" y="803.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="232.7" y="787.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="232.7" y="771.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="235.7" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.08%)</title><rect x="232.7" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.7" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.access$100 (1 samples, 0.08%)</title><rect x="232.7" y="739.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 4.98%)</title><rect x="233.7" y="835.0" width="58.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.7" y="846.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 4.90%)</title><rect x="233.7" y="819.0" width="57.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.7" y="830.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 2.94%)</title><rect x="233.7" y="803.0" width="34.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.7" y="814.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.16%)</title><rect x="233.7" y="787.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (2 samples, 0.16%)</title><rect x="233.7" y="771.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.7" y="782.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="233.7" y="755.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="236.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="234.6" y="755.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (34 samples, 2.78%)</title><rect x="235.6" y="787.0" width="32.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.6" y="798.0">or..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="235.6" y="771.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (33 samples, 2.70%)</title><rect x="236.6" y="771.0" width="31.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.6" y="782.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (29 samples, 2.37%)</title><rect x="236.6" y="755.0" width="27.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.6" y="766.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (28 samples, 2.29%)</title><rect x="236.6" y="739.0" width="26.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="239.6" y="750.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.08%)</title><rect x="238.5" y="723.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.5" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="238.5" y="707.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.5" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.08%)</title><rect x="238.5" y="691.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.5" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.08%)</title><rect x="238.5" y="675.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.5" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="238.5" y="659.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="241.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.31%)</title><rect x="239.4" y="723.0" width="15.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.41%)</title><rect x="249.1" y="707.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.41%)</title><rect x="249.1" y="691.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="252.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.41%)</title><rect x="249.1" y="675.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.41%)</title><rect x="249.1" y="659.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.41%)</title><rect x="249.1" y="643.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.41%)</title><rect x="249.1" y="627.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.41%)</title><rect x="249.1" y="611.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="253.9" y="707.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="256.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.08%)</title><rect x="253.9" y="691.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="256.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (9 samples, 0.74%)</title><rect x="254.9" y="723.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="255.8" y="707.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.57%)</title><rect x="256.8" y="707.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="259.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 0.25%)</title><rect x="256.8" y="691.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="259.8" y="702.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 0.25%)</title><rect x="256.8" y="675.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.8" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="258.7" y="659.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="261.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.33%)</title><rect x="259.7" y="691.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.7" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.33%)</title><rect x="259.7" y="675.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="262.7" y="686.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="262.6" y="659.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="265.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="263.5" y="739.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="266.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.25%)</title><rect x="264.5" y="755.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.25%)</title><rect x="264.5" y="739.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="267.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.08%)</title><rect x="264.5" y="723.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.5" y="734.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="264.5" y="707.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.5" y="718.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.08%)</title><rect x="264.5" y="691.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.08%)</title><rect x="264.5" y="675.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="267.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="265.5" y="723.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="265.5" y="707.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="266.4" y="723.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="266.4" y="707.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="269.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="266.4" y="691.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="266.4" y="675.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.08%)</title><rect x="266.4" y="659.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.4" y="670.0"></text>
</g>
<g>
<title>java/lang/Math.max (1 samples, 0.08%)</title><rect x="266.4" y="643.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="267.4" y="755.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="270.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="267.4" y="739.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="267.4" y="723.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="267.4" y="707.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="267.4" y="691.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="270.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (12 samples, 0.98%)</title><rect x="268.4" y="803.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.65%)</title><rect x="268.4" y="787.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.57%)</title><rect x="268.4" y="771.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.4" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="268.4" y="755.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/811957465.accept (1 samples, 0.08%)</title><rect x="268.4" y="739.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.08%)</title><rect x="268.4" y="723.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="268.4" y="707.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.08%)</title><rect x="268.4" y="691.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.08%)</title><rect x="268.4" y="675.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.4" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="269.3" y="755.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="269.3" y="739.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="269.3" y="723.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="272.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="269.3" y="707.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="269.3" y="691.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.08%)</title><rect x="269.3" y="675.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.16%)</title><rect x="270.3" y="755.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.16%)</title><rect x="270.3" y="739.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.3" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="270.3" y="723.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="270.3" y="707.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="270.3" y="691.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.3" y="702.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.08%)</title><rect x="270.3" y="675.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.3" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.08%)</title><rect x="271.3" y="723.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.25%)</title><rect x="272.2" y="755.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="273.2" y="739.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="276.2" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="274.2" y="739.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="277.2" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="274.2" y="723.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="277.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="275.1" y="771.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="275.1" y="755.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="275.1" y="739.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="278.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="275.1" y="723.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="275.1" y="707.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/1374026904.get (1 samples, 0.08%)</title><rect x="275.1" y="691.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (4 samples, 0.33%)</title><rect x="276.1" y="787.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (2 samples, 0.16%)</title><rect x="276.1" y="771.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.08%)</title><rect x="276.1" y="755.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="279.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitCompletion.invoke (1 samples, 0.08%)</title><rect x="277.0" y="755.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.08%)</title><rect x="278.0" y="771.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.08%)</title><rect x="278.0" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="281.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.08%)</title><rect x="279.0" y="771.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.rejoinNeededOrPending (1 samples, 0.08%)</title><rect x="279.0" y="755.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="282.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.16%)</title><rect x="279.9" y="803.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.16%)</title><rect x="279.9" y="787.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.16%)</title><rect x="279.9" y="771.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.16%)</title><rect x="279.9" y="755.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.08%)</title><rect x="279.9" y="739.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.08%)</title><rect x="279.9" y="723.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.08%)</title><rect x="279.9" y="707.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.08%)</title><rect x="279.9" y="691.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.9" y="702.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.08%)</title><rect x="279.9" y="675.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.9" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.08%)</title><rect x="279.9" y="659.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.9" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.08%)</title><rect x="279.9" y="643.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.9" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.08%)</title><rect x="279.9" y="627.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.9" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="279.9" y="611.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.9" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="279.9" y="595.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.9" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="279.9" y="579.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.9" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="279.9" y="563.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.9" y="574.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="279.9" y="547.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="282.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.08%)</title><rect x="280.9" y="739.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.08%)</title><rect x="280.9" y="723.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="280.9" y="707.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="280.9" y="691.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="280.9" y="675.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.9" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="280.9" y="659.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.9" y="670.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="280.9" y="643.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="283.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (9 samples, 0.74%)</title><rect x="281.9" y="803.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (9 samples, 0.74%)</title><rect x="281.9" y="787.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.9" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 0.41%)</title><rect x="281.9" y="771.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="281.9" y="755.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="284.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/183456992.accept (4 samples, 0.33%)</title><rect x="282.8" y="755.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (4 samples, 0.33%)</title><rect x="282.8" y="739.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.16%)</title><rect x="282.8" y="723.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="282.8" y="707.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="282.8" y="691.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="282.8" y="675.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="283.8" y="707.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="283.8" y="691.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="283.8" y="675.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="283.8" y="659.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="286.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.16%)</title><rect x="284.8" y="723.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="287.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.08%)</title><rect x="284.8" y="707.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="287.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.08%)</title><rect x="284.8" y="691.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="287.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="285.7" y="707.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="285.7" y="691.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.7" y="702.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="285.7" y="675.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="288.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="285.7" y="659.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.33%)</title><rect x="286.7" y="771.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.25%)</title><rect x="286.7" y="755.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="289.7" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.25%)</title><rect x="286.7" y="739.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.7" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="287.6" y="723.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.08%)</title><rect x="287.6" y="707.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.6" y="718.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.08%)</title><rect x="287.6" y="691.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.6" y="702.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="287.6" y="675.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="287.6" y="659.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="290.6" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="288.6" y="723.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.6" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.08%)</title><rect x="288.6" y="707.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="289.6" y="755.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="289.6" y="739.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.08%)</title><rect x="290.5" y="803.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="290.5" y="787.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.08%)</title><rect x="290.5" y="771.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.5" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="290.5" y="755.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="293.5" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="290.5" y="739.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="293.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.08%)</title><rect x="291.5" y="819.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="291.5" y="803.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="291.5" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.run (773 samples, 63.15%)</title><rect x="292.5" y="867.0" width="745.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="295.5" y="878.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (773 samples, 63.15%)</title><rect x="292.5" y="851.0" width="745.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="295.5" y="862.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (773 samples, 63.15%)</title><rect x="292.5" y="835.0" width="745.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.5" y="846.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/452158485.run (521 samples, 42.57%)</title><rect x="295.4" y="819.0" width="502.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.4" y="830.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/4521..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (521 samples, 42.57%)</title><rect x="295.4" y="803.0" width="502.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.4" y="814.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (521 samples, 42.57%)</title><rect x="295.4" y="787.0" width="502.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.4" y="798.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (517 samples, 42.24%)</title><rect x="295.4" y="771.0" width="498.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.4" y="782.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenPr..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="306.0" y="755.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="309.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (177 samples, 14.46%)</title><rect x="306.9" y="755.0" width="170.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.9" y="766.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/580718781.extract (177 samples, 14.46%)</title><rect x="306.9" y="739.0" width="170.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.9" y="750.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (177 samples, 14.46%)</title><rect x="306.9" y="723.0" width="170.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.9" y="734.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (176 samples, 14.38%)</title><rect x="306.9" y="707.0" width="169.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="309.9" y="718.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (176 samples, 14.38%)</title><rect x="306.9" y="691.0" width="169.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="309.9" y="702.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (176 samples, 14.38%)</title><rect x="306.9" y="675.0" width="169.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.9" y="686.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (59 samples, 4.82%)</title><rect x="306.9" y="659.0" width="56.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="309.9" y="670.0">com/fa..</text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.65%)</title><rect x="320.4" y="643.0" width="7.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="323.4" y="654.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.65%)</title><rect x="320.4" y="627.0" width="7.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="323.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (10 samples, 0.82%)</title><rect x="328.1" y="643.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 0.41%)</title><rect x="333.0" y="627.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="336.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.41%)</title><rect x="333.0" y="611.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="336.0" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.41%)</title><rect x="333.0" y="595.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.0" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.41%)</title><rect x="333.0" y="579.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.0" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.41%)</title><rect x="333.0" y="563.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="336.0" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.41%)</title><rect x="333.0" y="547.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="336.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (27 samples, 2.21%)</title><rect x="337.8" y="643.0" width="26.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="340.8" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (10 samples, 0.82%)</title><rect x="354.2" y="627.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="357.2" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="354.2" y="611.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="357.2" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="354.2" y="595.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="357.2" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="354.2" y="579.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="357.2" y="590.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="354.2" y="563.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="357.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (6 samples, 0.49%)</title><rect x="355.1" y="611.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.1" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.16%)</title><rect x="355.1" y="595.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="358.1" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="355.1" y="579.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="358.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 0.33%)</title><rect x="357.1" y="595.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="360.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.25%)</title><rect x="360.9" y="611.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="363.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 0.25%)</title><rect x="360.9" y="595.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="363.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.16%)</title><rect x="360.9" y="579.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.9" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="360.9" y="563.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="363.9" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="361.9" y="547.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="364.9" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="361.9" y="531.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="364.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="362.8" y="579.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="365.8" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="362.8" y="563.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="365.8" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="362.8" y="547.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="365.8" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="362.8" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="365.8" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="362.8" y="515.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="365.8" y="526.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="362.8" y="499.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="365.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (108 samples, 8.82%)</title><rect x="363.8" y="659.0" width="104.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.8" y="670.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.16%)</title><rect x="364.8" y="643.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="367.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.16%)</title><rect x="366.7" y="643.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="369.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.16%)</title><rect x="368.6" y="643.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="371.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.33%)</title><rect x="370.6" y="643.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.33%)</title><rect x="370.6" y="627.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="373.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (7 samples, 0.57%)</title><rect x="374.4" y="643.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="377.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.41%)</title><rect x="376.3" y="627.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="379.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.33%)</title><rect x="377.3" y="611.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="380.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.16%)</title><rect x="379.2" y="595.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="382.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="380.2" y="579.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="383.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.57%)</title><rect x="381.2" y="643.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="384.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.41%)</title><rect x="383.1" y="627.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="386.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (81 samples, 6.62%)</title><rect x="387.9" y="643.0" width="78.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="390.9" y="654.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (22 samples, 1.80%)</title><rect x="389.8" y="627.0" width="21.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="392.8" y="638.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.57%)</title><rect x="389.8" y="611.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="392.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.57%)</title><rect x="389.8" y="595.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="392.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.57%)</title><rect x="389.8" y="579.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="392.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.41%)</title><rect x="396.6" y="611.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="399.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (10 samples, 0.82%)</title><rect x="401.4" y="611.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="404.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (10 samples, 0.82%)</title><rect x="401.4" y="595.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="404.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.16%)</title><rect x="411.0" y="627.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="414.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (55 samples, 4.49%)</title><rect x="413.0" y="627.0" width="53.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.0" y="638.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (55 samples, 4.49%)</title><rect x="413.0" y="611.0" width="53.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="416.0" y="622.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (55 samples, 4.49%)</title><rect x="413.0" y="595.0" width="53.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="416.0" y="606.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.55%)</title><rect x="417.8" y="579.0" width="18.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="420.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.08%)</title><rect x="418.8" y="563.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="421.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.74%)</title><rect x="419.7" y="563.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="422.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.74%)</title><rect x="419.7" y="547.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="422.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.74%)</title><rect x="419.7" y="531.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="422.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.49%)</title><rect x="422.6" y="515.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="425.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.25%)</title><rect x="422.6" y="499.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.16%)</title><rect x="423.6" y="483.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="426.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.16%)</title><rect x="423.6" y="467.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="426.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.25%)</title><rect x="425.5" y="499.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="428.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.41%)</title><rect x="428.4" y="563.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="431.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="433.2" y="563.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="436.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="433.2" y="547.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="436.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.16%)</title><rect x="434.2" y="563.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="437.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.57%)</title><rect x="436.1" y="579.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="439.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.49%)</title><rect x="437.1" y="563.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="440.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.49%)</title><rect x="437.1" y="547.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="440.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.49%)</title><rect x="437.1" y="531.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="440.1" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.49%)</title><rect x="437.1" y="515.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.16%)</title><rect x="442.9" y="579.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="445.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.65%)</title><rect x="444.8" y="579.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="447.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.65%)</title><rect x="444.8" y="563.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="447.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.65%)</title><rect x="444.8" y="547.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="447.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.49%)</title><rect x="446.7" y="531.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="449.7" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.49%)</title><rect x="446.7" y="515.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="449.7" y="526.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.49%)</title><rect x="446.7" y="499.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="449.7" y="510.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (6 samples, 0.49%)</title><rect x="446.7" y="483.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="449.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (9 samples, 0.74%)</title><rect x="452.5" y="579.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="455.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.74%)</title><rect x="452.5" y="563.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="455.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.74%)</title><rect x="452.5" y="547.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="455.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="458.3" y="531.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="461.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.16%)</title><rect x="459.2" y="531.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="462.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.33%)</title><rect x="461.2" y="579.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="464.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.08%)</title><rect x="465.0" y="579.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="468.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.08%)</title><rect x="466.0" y="643.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="469.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.08%)</title><rect x="467.0" y="643.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.74%)</title><rect x="467.9" y="659.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="470.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.08%)</title><rect x="468.9" y="643.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="471.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.57%)</title><rect x="469.9" y="643.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="472.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.57%)</title><rect x="469.9" y="627.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="472.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.57%)</title><rect x="469.9" y="611.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="472.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.57%)</title><rect x="469.9" y="595.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="472.9" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.08%)</title><rect x="476.6" y="707.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="479.6" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="476.6" y="691.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="479.6" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="476.6" y="675.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="479.6" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="476.6" y="659.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="479.6" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="476.6" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="479.6" y="654.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="476.6" y="627.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="479.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (288 samples, 23.53%)</title><rect x="477.6" y="755.0" width="277.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="480.6" y="766.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (50 samples, 4.08%)</title><rect x="478.5" y="739.0" width="48.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="481.5" y="750.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="478.5" y="723.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="481.5" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (49 samples, 4.00%)</title><rect x="479.5" y="723.0" width="47.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="482.5" y="734.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (49 samples, 4.00%)</title><rect x="479.5" y="707.0" width="47.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="482.5" y="718.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.65%)</title><rect x="480.5" y="691.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="483.5" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.65%)</title><rect x="480.5" y="675.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="483.5" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.65%)</title><rect x="480.5" y="659.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="483.5" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.65%)</title><rect x="480.5" y="643.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="483.5" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.16%)</title><rect x="486.2" y="627.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="489.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.16%)</title><rect x="486.2" y="611.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="489.2" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (40 samples, 3.27%)</title><rect x="488.2" y="691.0" width="38.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="491.2" y="702.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 0.74%)</title><rect x="518.1" y="675.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="521.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 0.74%)</title><rect x="518.1" y="659.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="521.1" y="670.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="525.8" y="643.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="528.8" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.25%)</title><rect x="526.7" y="739.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="529.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="528.7" y="723.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="531.7" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.08%)</title><rect x="528.7" y="707.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="531.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (152 samples, 12.42%)</title><rect x="529.6" y="739.0" width="146.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="532.6" y="750.0">com/linecorp/decat..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="530.6" y="723.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="533.6" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="530.6" y="707.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="533.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (150 samples, 12.25%)</title><rect x="531.6" y="723.0" width="144.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="534.6" y="734.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (66 samples, 5.39%)</title><rect x="543.1" y="707.0" width="63.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="546.1" y="718.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (44 samples, 3.59%)</title><rect x="556.6" y="691.0" width="42.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="559.6" y="702.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (44 samples, 3.59%)</title><rect x="556.6" y="675.0" width="42.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="559.6" y="686.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (30 samples, 2.45%)</title><rect x="564.3" y="659.0" width="29.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="567.3" y="670.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (30 samples, 2.45%)</title><rect x="564.3" y="643.0" width="29.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="567.3" y="654.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (30 samples, 2.45%)</title><rect x="564.3" y="627.0" width="29.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="567.3" y="638.0">ja..</text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="575.9" y="611.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="578.9" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (13 samples, 1.06%)</title><rect x="576.9" y="611.0" width="12.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="579.9" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.41%)</title><rect x="577.8" y="595.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="580.8" y="606.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.08%)</title><rect x="577.8" y="579.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="580.8" y="590.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.33%)</title><rect x="578.8" y="579.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="581.8" y="590.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.33%)</title><rect x="578.8" y="563.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="581.8" y="574.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="578.8" y="547.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="581.8" y="558.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="578.8" y="531.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="581.8" y="542.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="579.8" y="547.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="582.8" y="558.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="580.7" y="547.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="583.7" y="558.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="581.7" y="547.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="584.7" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.57%)</title><rect x="582.6" y="595.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="585.6" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.25%)</title><rect x="584.6" y="579.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="587.6" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="586.5" y="563.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="589.5" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.16%)</title><rect x="587.5" y="579.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="590.5" y="590.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.08%)</title><rect x="589.4" y="611.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="592.4" y="622.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="590.4" y="611.0" width="2.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="593.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.25%)</title><rect x="593.3" y="659.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="596.3" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="596.1" y="659.0" width="2.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="599.1" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.16%)</title><rect x="599.0" y="691.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="602.0" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="599.0" y="675.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="602.0" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="599.0" y="659.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="602.0" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="599.0" y="643.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="602.0" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="600.0" y="675.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="603.0" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.08%)</title><rect x="600.0" y="659.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="603.0" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="600.0" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="603.0" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="600.0" y="627.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="603.0" y="638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.49%)</title><rect x="601.0" y="691.0" width="5.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="604.0" y="702.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.65%)</title><rect x="606.7" y="707.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="609.7" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.65%)</title><rect x="606.7" y="691.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="609.7" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.65%)</title><rect x="606.7" y="675.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="609.7" y="686.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (64 samples, 5.23%)</title><rect x="614.5" y="707.0" width="61.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="617.5" y="718.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (62 samples, 5.07%)</title><rect x="616.4" y="691.0" width="59.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="619.4" y="702.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.41%)</title><rect x="616.4" y="675.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="619.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.41%)</title><rect x="616.4" y="659.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="619.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.41%)</title><rect x="616.4" y="643.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="619.4" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.41%)</title><rect x="616.4" y="627.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="619.4" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.08%)</title><rect x="620.2" y="611.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.2" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="620.2" y="595.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.2" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (57 samples, 4.66%)</title><rect x="621.2" y="675.0" width="55.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="624.2" y="686.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (52 samples, 4.25%)</title><rect x="626.0" y="659.0" width="50.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="629.0" y="670.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (23 samples, 1.88%)</title><rect x="654.0" y="643.0" width="22.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="657.0" y="654.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.16%)</title><rect x="664.6" y="627.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="667.6" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.65%)</title><rect x="666.5" y="627.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="669.5" y="638.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.16%)</title><rect x="674.2" y="627.0" width="2.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="677.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (65 samples, 5.31%)</title><rect x="676.2" y="739.0" width="62.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="679.2" y="750.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (4 samples, 0.33%)</title><rect x="676.2" y="723.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="679.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (61 samples, 4.98%)</title><rect x="680.0" y="723.0" width="58.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="683.0" y="734.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1895118244.process (28 samples, 2.29%)</title><rect x="681.9" y="707.0" width="27.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="684.9" y="718.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (26 samples, 2.12%)</title><rect x="683.9" y="691.0" width="25.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="686.9" y="702.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (24 samples, 1.96%)</title><rect x="684.8" y="675.0" width="23.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="687.8" y="686.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.25%)</title><rect x="684.8" y="659.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="687.8" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.25%)</title><rect x="684.8" y="643.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="687.8" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.25%)</title><rect x="684.8" y="627.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="687.8" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.25%)</title><rect x="684.8" y="611.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="687.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.25%)</title><rect x="684.8" y="595.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="687.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.74%)</title><rect x="687.7" y="659.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="690.7" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="688.7" y="643.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="691.7" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="688.7" y="627.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="691.7" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="689.7" y="643.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="692.7" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.49%)</title><rect x="690.6" y="643.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="693.6" y="654.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.49%)</title><rect x="690.6" y="627.0" width="5.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="693.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.25%)</title><rect x="696.4" y="659.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="699.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.74%)</title><rect x="699.3" y="659.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="702.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="707.0" y="643.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="710.0" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="707.0" y="627.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="710.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="708.0" y="675.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="711.0" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="708.0" y="659.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="711.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="708.0" y="643.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="711.0" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="708.0" y="627.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="711.0" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="708.0" y="611.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="711.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/885210879.complete (1 samples, 0.08%)</title><rect x="708.9" y="707.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="711.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$64 (1 samples, 0.08%)</title><rect x="708.9" y="691.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="711.9" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="708.9" y="675.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="711.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.65%)</title><rect x="709.9" y="707.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="712.9" y="718.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.65%)</title><rect x="709.9" y="691.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="712.9" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="717.6" y="707.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="720.6" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="717.6" y="691.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="720.6" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 0.90%)</title><rect x="718.6" y="707.0" width="10.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="721.6" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.49%)</title><rect x="723.4" y="691.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="726.4" y="702.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.33%)</title><rect x="723.4" y="675.0" width="3.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="726.4" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.16%)</title><rect x="727.3" y="675.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="730.3" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (8 samples, 0.65%)</title><rect x="729.2" y="707.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="732.2" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (8 samples, 0.65%)</title><rect x="729.2" y="691.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="732.2" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.16%)</title><rect x="736.9" y="707.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="739.9" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="737.9" y="691.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="740.9" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="737.9" y="675.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="740.9" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="737.9" y="659.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="740.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.39%)</title><rect x="738.8" y="739.0" width="16.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="741.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.39%)</title><rect x="738.8" y="723.0" width="16.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.8" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="744.6" y="707.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="747.6" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="745.6" y="707.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="748.6" y="718.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="745.6" y="691.0" width="1.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="748.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.57%)</title><rect x="747.5" y="707.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="750.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/1035447111.accept (7 samples, 0.57%)</title><rect x="747.5" y="691.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="750.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (7 samples, 0.57%)</title><rect x="747.5" y="675.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="750.5" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1796468334.complete (7 samples, 0.57%)</title><rect x="747.5" y="659.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="750.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (7 samples, 0.57%)</title><rect x="747.5" y="643.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="750.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1573673334.complete (7 samples, 0.57%)</title><rect x="747.5" y="627.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="750.5" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (7 samples, 0.57%)</title><rect x="747.5" y="611.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="750.5" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (7 samples, 0.57%)</title><rect x="747.5" y="595.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="750.5" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 0.57%)</title><rect x="747.5" y="579.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="750.5" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 0.57%)</title><rect x="747.5" y="563.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="750.5" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (7 samples, 0.57%)</title><rect x="747.5" y="547.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="750.5" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="752.3" y="531.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="755.3" y="542.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="752.3" y="515.0" width="1.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="755.3" y="526.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="754.2" y="707.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="757.2" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/831236296.linkToTargetMethod (2 samples, 0.16%)</title><rect x="755.2" y="755.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="758.2" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (2 samples, 0.16%)</title><rect x="755.2" y="739.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="758.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/1035447111.get$Lambda (2 samples, 0.16%)</title><rect x="755.2" y="723.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="758.2" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="755.2" y="707.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="758.2" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="755.2" y="691.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="758.2" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="755.2" y="675.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="758.2" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="756.2" y="691.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="759.2" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="756.2" y="675.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="759.2" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="756.2" y="659.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="759.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 2.61%)</title><rect x="757.1" y="755.0" width="30.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="760.1" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (32 samples, 2.61%)</title><rect x="757.1" y="739.0" width="30.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="760.1" y="750.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="758.1" y="723.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="761.1" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="758.1" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="761.1" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="758.1" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="761.1" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="758.1" y="675.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="761.1" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="758.1" y="659.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="761.1" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="758.1" y="643.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="761.1" y="654.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="758.1" y="627.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="761.1" y="638.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.08%)</title><rect x="758.1" y="611.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="761.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (30 samples, 2.45%)</title><rect x="759.1" y="723.0" width="28.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="762.1" y="734.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/1035447111.accept (30 samples, 2.45%)</title><rect x="759.1" y="707.0" width="28.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="762.1" y="718.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (30 samples, 2.45%)</title><rect x="759.1" y="691.0" width="28.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="762.1" y="702.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1796468334.complete (30 samples, 2.45%)</title><rect x="759.1" y="675.0" width="28.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="762.1" y="686.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (30 samples, 2.45%)</title><rect x="759.1" y="659.0" width="28.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="762.1" y="670.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1573673334.complete (25 samples, 2.04%)</title><rect x="759.1" y="643.0" width="24.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="762.1" y="654.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (25 samples, 2.04%)</title><rect x="759.1" y="627.0" width="24.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="762.1" y="638.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (25 samples, 2.04%)</title><rect x="759.1" y="611.0" width="24.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="762.1" y="622.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (25 samples, 2.04%)</title><rect x="759.1" y="595.0" width="24.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="762.1" y="606.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (25 samples, 2.04%)</title><rect x="759.1" y="579.0" width="24.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="762.1" y="590.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (25 samples, 2.04%)</title><rect x="759.1" y="563.0" width="24.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="762.1" y="574.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/1019043205.complete (5 samples, 0.41%)</title><rect x="783.2" y="643.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="786.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$67 (5 samples, 0.41%)</title><rect x="783.2" y="627.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="786.2" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="787.0" y="611.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="790.0" y="622.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.49%)</title><rect x="788.0" y="755.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="791.0" y="766.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.49%)</title><rect x="788.0" y="739.0" width="5.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="791.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 0.33%)</title><rect x="793.8" y="771.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.8" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="795.7" y="755.0" width="1.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="798.7" y="766.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="795.7" y="739.0" width="1.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="798.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.08%)</title><rect x="797.6" y="819.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="800.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.33%)</title><rect x="798.6" y="819.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="801.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.33%)</title><rect x="798.6" y="803.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="801.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.33%)</title><rect x="798.6" y="787.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="801.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.33%)</title><rect x="798.6" y="771.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="801.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/452158485.run (1 samples, 0.08%)</title><rect x="801.5" y="755.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="804.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (244 samples, 19.93%)</title><rect x="802.5" y="819.0" width="235.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="805.5" y="830.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (243 samples, 19.85%)</title><rect x="803.4" y="803.0" width="234.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="806.4" y="814.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (223 samples, 18.22%)</title><rect x="807.3" y="787.0" width="215.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="810.3" y="798.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.16%)</title><rect x="824.6" y="771.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="827.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.16%)</title><rect x="824.6" y="755.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="827.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (19 samples, 1.55%)</title><rect x="826.6" y="771.0" width="18.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="829.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.49%)</title><rect x="844.9" y="771.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="847.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.49%)</title><rect x="844.9" y="755.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="847.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.49%)</title><rect x="844.9" y="739.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="847.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.49%)</title><rect x="844.9" y="723.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="847.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (178 samples, 14.54%)</title><rect x="850.7" y="771.0" width="171.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="853.7" y="782.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (178 samples, 14.54%)</title><rect x="850.7" y="755.0" width="171.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="853.7" y="766.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.25%)</title><rect x="854.5" y="739.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="857.5" y="750.0"></text>
</g>
<g>
<title>Unsafe_Park (169 samples, 13.81%)</title><rect x="857.4" y="739.0" width="162.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="860.4" y="750.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.41%)</title><rect x="863.2" y="723.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="866.2" y="734.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.08%)</title><rect x="868.0" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="871.0" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (36 samples, 2.94%)</title><rect x="869.0" y="723.0" width="34.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="872.0" y="734.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (15 samples, 1.23%)</title><rect x="881.5" y="707.0" width="14.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="884.5" y="718.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.41%)</title><rect x="885.4" y="691.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="888.4" y="702.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.16%)</title><rect x="888.3" y="675.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="891.3" y="686.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.25%)</title><rect x="890.2" y="691.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="893.2" y="702.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.25%)</title><rect x="893.1" y="691.0" width="2.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="896.1" y="702.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.16%)</title><rect x="896.0" y="707.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="899.0" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.49%)</title><rect x="897.9" y="707.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="900.9" y="718.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="903.7" y="723.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="906.7" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.25%)</title><rect x="904.6" y="723.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="907.6" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="907.5" y="723.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="910.5" y="734.0"></text>
</g>
<g>
<title>__lll_lock_wait (14 samples, 1.14%)</title><rect x="909.5" y="723.0" width="13.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="912.5" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (29 samples, 2.37%)</title><rect x="923.0" y="723.0" width="27.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="926.0" y="734.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (61 samples, 4.98%)</title><rect x="950.9" y="723.0" width="58.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="953.9" y="734.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.25%)</title><rect x="1009.7" y="723.0" width="2.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1012.7" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.16%)</title><rect x="1012.6" y="723.0" width="1.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1015.6" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.33%)</title><rect x="1014.5" y="723.0" width="3.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1017.5" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="1018.4" y="723.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1021.4" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="1019.4" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1022.4" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.16%)</title><rect x="1020.3" y="739.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1023.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (16 samples, 1.31%)</title><rect x="1022.3" y="787.0" width="15.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1025.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.31%)</title><rect x="1022.3" y="771.0" width="15.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1025.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 1.31%)</title><rect x="1022.3" y="755.0" width="15.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1025.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 1.31%)</title><rect x="1022.3" y="739.0" width="15.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1025.3" y="750.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.08%)</title><rect x="1037.7" y="867.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1040.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1038.6" y="867.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1041.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1038.6" y="851.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1041.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1038.6" y="835.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1041.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="1038.6" y="819.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1041.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="1038.6" y="803.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1041.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="1038.6" y="787.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1041.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="1038.6" y="771.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1041.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="1038.6" y="755.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1041.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="1038.6" y="739.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1041.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.08%)</title><rect x="1038.6" y="723.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1041.6" y="734.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.08%)</title><rect x="1038.6" y="707.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1041.6" y="718.0"></text>
</g>
<g>
<title>start_thread (156 samples, 12.75%)</title><rect x="1039.6" y="867.0" width="150.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1042.6" y="878.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (156 samples, 12.75%)</title><rect x="1039.6" y="851.0" width="150.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1042.6" y="862.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (27 samples, 2.21%)</title><rect x="1039.6" y="835.0" width="26.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1042.6" y="846.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.08%)</title><rect x="1039.6" y="819.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1042.6" y="830.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1039.6" y="803.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1042.6" y="814.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.49%)</title><rect x="1040.6" y="819.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1043.6" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.41%)</title><rect x="1040.6" y="803.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1043.6" y="814.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1040.6" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1043.6" y="798.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.33%)</title><rect x="1041.5" y="787.0" width="3.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1044.5" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.08%)</title><rect x="1045.4" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1048.4" y="814.0"></text>
</g>
<g>
<title>G1DefaultParGCAllocator::retire_alloc_buffers() (1 samples, 0.08%)</title><rect x="1045.4" y="787.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1048.4" y="798.0"></text>
</g>
<g>
<title>ParGCAllocBuffer::flush_stats(PLABStats*) (1 samples, 0.08%)</title><rect x="1045.4" y="771.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1048.4" y="782.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 1.63%)</title><rect x="1046.4" y="819.0" width="19.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1049.4" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.25%)</title><rect x="1046.4" y="803.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1049.4" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="1046.4" y="787.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1049.4" y="798.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.16%)</title><rect x="1047.3" y="787.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1050.3" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.33%)</title><rect x="1049.2" y="803.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1052.2" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="1049.2" y="787.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1052.2" y="798.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="1049.2" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1052.2" y="782.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="1049.2" y="755.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1052.2" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.25%)</title><rect x="1050.2" y="787.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1053.2" y="798.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.16%)</title><rect x="1050.2" y="771.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1053.2" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1052.1" y="771.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1055.1" y="782.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1052.1" y="755.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.1" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (12 samples, 0.98%)</title><rect x="1053.1" y="803.0" width="11.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.1" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (12 samples, 0.98%)</title><rect x="1053.1" y="787.0" width="11.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1056.1" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (11 samples, 0.90%)</title><rect x="1053.1" y="771.0" width="10.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.1" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (11 samples, 0.90%)</title><rect x="1053.1" y="755.0" width="10.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.1" y="766.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (11 samples, 0.90%)</title><rect x="1053.1" y="739.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1056.1" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (11 samples, 0.90%)</title><rect x="1053.1" y="723.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1056.1" y="734.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.25%)</title><rect x="1060.8" y="707.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1063.8" y="718.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.16%)</title><rect x="1060.8" y="691.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1063.8" y="702.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.08%)</title><rect x="1062.7" y="691.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1065.7" y="702.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="1063.7" y="771.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1066.7" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="1063.7" y="755.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.7" y="766.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.08%)</title><rect x="1063.7" y="739.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1066.7" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="1064.7" y="803.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1067.7" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (126 samples, 10.29%)</title><rect x="1065.6" y="835.0" width="121.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1068.6" y="846.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (126 samples, 10.29%)</title><rect x="1065.6" y="819.0" width="121.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1068.6" y="830.0">JavaThread::thr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (126 samples, 10.29%)</title><rect x="1065.6" y="803.0" width="121.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1068.6" y="814.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (125 samples, 10.21%)</title><rect x="1065.6" y="787.0" width="120.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1068.6" y="798.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (125 samples, 10.21%)</title><rect x="1065.6" y="771.0" width="120.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1068.6" y="782.0">C2Compiler::com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (125 samples, 10.21%)</title><rect x="1065.6" y="755.0" width="120.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1068.6" y="766.0">Compile::Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (55 samples, 4.49%)</title><rect x="1065.6" y="739.0" width="53.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1068.6" y="750.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.25%)</title><rect x="1065.6" y="723.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1068.6" y="734.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.16%)</title><rect x="1065.6" y="707.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1068.6" y="718.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1065.6" y="691.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1068.6" y="702.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="1066.6" y="691.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.6" y="702.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="1067.6" y="707.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1070.6" y="718.0"></text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.08%)</title><rect x="1067.6" y="691.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.6" y="702.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.16%)</title><rect x="1068.5" y="723.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1071.5" y="734.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.08%)</title><rect x="1069.5" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.5" y="718.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="1069.5" y="691.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1072.5" y="702.0"></text>
</g>
<g>
<title>GrowableArray&lt;ScopeValue*&gt;::append(ScopeValue* const&amp;) (1 samples, 0.08%)</title><rect x="1069.5" y="675.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1072.5" y="686.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.41%)</title><rect x="1070.5" y="723.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.5" y="734.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.16%)</title><rect x="1070.5" y="707.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1073.5" y="718.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.25%)</title><rect x="1072.4" y="707.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1075.4" y="718.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1072.4" y="691.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1075.4" y="702.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.16%)</title><rect x="1073.3" y="691.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1076.3" y="702.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1074.3" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.3" y="686.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.08%)</title><rect x="1074.3" y="659.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1077.3" y="670.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1074.3" y="643.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1077.3" y="654.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1074.3" y="627.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1077.3" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.41%)</title><rect x="1075.3" y="723.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1078.3" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.41%)</title><rect x="1075.3" y="707.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1078.3" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1075.3" y="691.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.3" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.25%)</title><rect x="1076.2" y="691.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.2" y="702.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="1077.2" y="675.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1080.2" y="686.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1077.2" y="659.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.2" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.08%)</title><rect x="1078.2" y="675.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.2" y="686.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.08%)</title><rect x="1078.2" y="659.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.2" y="670.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1078.2" y="643.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.2" y="654.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1078.2" y="627.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.2" y="638.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1078.2" y="611.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.2" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1079.1" y="691.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.1" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.08%)</title><rect x="1079.1" y="675.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1082.1" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (40 samples, 3.27%)</title><rect x="1080.1" y="723.0" width="38.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1083.1" y="734.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1081.1" y="707.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1084.1" y="718.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.08%)</title><rect x="1082.0" y="707.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1085.0" y="718.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1083.0" y="707.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1086.0" y="718.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="1084.0" y="707.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1087.0" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="1084.9" y="707.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1087.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.16%)</title><rect x="1085.9" y="707.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1088.9" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1086.8" y="691.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1089.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.08%)</title><rect x="1087.8" y="707.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.8" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.08%)</title><rect x="1087.8" y="691.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.8" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1087.8" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.8" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.33%)</title><rect x="1088.8" y="707.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1091.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.08%)</title><rect x="1091.7" y="691.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1091.7" y="675.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.7" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 0.90%)</title><rect x="1092.6" y="707.0" width="10.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.6" y="718.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.08%)</title><rect x="1096.5" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.5" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.33%)</title><rect x="1097.5" y="691.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1100.5" y="702.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1101.3" y="691.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.3" y="702.0"></text>
</g>
<g>
<title>shrL_rReg_immNode::rule() const (1 samples, 0.08%)</title><rect x="1102.3" y="691.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.3" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.33%)</title><rect x="1103.2" y="707.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.2" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1105.2" y="691.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.2" y="702.0"></text>
</g>
<g>
<title>rRegLOper::type() const (1 samples, 0.08%)</title><rect x="1106.1" y="691.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.16%)</title><rect x="1107.1" y="707.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1108.1" y="691.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.1" y="702.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.33%)</title><rect x="1109.0" y="707.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.0" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.16%)</title><rect x="1109.0" y="691.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1112.0" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.16%)</title><rect x="1110.9" y="691.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.9" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.08%)</title><rect x="1111.9" y="675.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.9" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.16%)</title><rect x="1112.9" y="707.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.9" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1112.9" y="691.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.9" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="1114.8" y="707.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.8" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.16%)</title><rect x="1115.8" y="707.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.8" y="718.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.16%)</title><rect x="1115.8" y="691.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.8" y="702.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="1116.7" y="675.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1119.7" y="686.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.08%)</title><rect x="1117.7" y="707.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1120.7" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (60 samples, 4.90%)</title><rect x="1118.7" y="739.0" width="57.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.7" y="750.0">Compil..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.16%)</title><rect x="1118.7" y="723.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.16%)</title><rect x="1118.7" y="707.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1118.7" y="691.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1119.6" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1119.6" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1119.6" y="659.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1119.6" y="643.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1119.6" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1119.6" y="611.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1119.6" y="595.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1119.6" y="579.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.6" y="590.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1119.6" y="563.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.6" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (48 samples, 3.92%)</title><rect x="1120.6" y="723.0" width="46.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.6" y="734.0">Phas..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1120.6" y="707.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.08%)</title><rect x="1120.6" y="691.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.16%)</title><rect x="1121.6" y="707.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.16%)</title><rect x="1123.5" y="707.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1124.4" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (41 samples, 3.35%)</title><rect x="1125.4" y="707.0" width="39.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.4" y="718.0">Pha..</text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.08%)</title><rect x="1128.3" y="691.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.3" y="702.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1128.3" y="675.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.3" y="686.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1128.3" y="659.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.3" y="670.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1128.3" y="643.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.3" y="654.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.08%)</title><rect x="1128.3" y="627.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.3" y="638.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1128.3" y="611.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.3" y="622.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="1128.3" y="595.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1131.3" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (37 samples, 3.02%)</title><rect x="1129.3" y="691.0" width="35.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.3" y="702.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1129.3" y="675.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (36 samples, 2.94%)</title><rect x="1130.2" y="675.0" width="34.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.2" y="686.0">Ph..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1158.2" y="659.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.2" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1158.2" y="643.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1161.2" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.49%)</title><rect x="1159.2" y="659.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.2" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1164.9" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.9" y="718.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.08%)</title><rect x="1165.9" y="707.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.9" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1166.9" y="723.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.9" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1166.9" y="707.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.9" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.65%)</title><rect x="1167.8" y="723.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.8" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.65%)</title><rect x="1167.8" y="707.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.8" y="718.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1167.8" y="691.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.8" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1167.8" y="675.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.8" y="686.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1167.8" y="659.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.8" y="670.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1167.8" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.8" y="654.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1167.8" y="627.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.8" y="638.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.08%)</title><rect x="1167.8" y="611.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.8" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1168.8" y="691.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.8" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1169.8" y="691.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.8" y="702.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.08%)</title><rect x="1169.8" y="675.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.8" y="686.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1170.7" y="691.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.7" y="702.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1170.7" y="675.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.7" y="686.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1171.7" y="691.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.7" y="702.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.6" y="691.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="702.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1172.6" y="675.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="659.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.6" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="627.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="611.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="595.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.6" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="579.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.6" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="563.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.6" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="547.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.6" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="531.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.6" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="515.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.6" y="526.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1172.6" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="510.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="483.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="494.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1173.6" y="691.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.6" y="702.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1173.6" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.6" y="686.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1173.6" y="659.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.6" y="670.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1173.6" y="643.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.6" y="654.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1173.6" y="627.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.6" y="638.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1173.6" y="611.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.6" y="622.0"></text>
</g>
<g>
<title>URShiftLNode::Opcode() const (1 samples, 0.08%)</title><rect x="1174.6" y="691.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.6" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1175.5" y="723.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1175.5" y="707.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.5" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1175.5" y="691.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.5" y="702.0"></text>
</g>
<g>
<title>ClearArrayNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1175.5" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.5" y="686.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1175.5" y="659.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.5" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1175.5" y="643.0" width="1.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1178.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.74%)</title><rect x="1176.5" y="739.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.5" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.74%)</title><rect x="1176.5" y="723.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.74%)</title><rect x="1176.5" y="707.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.74%)</title><rect x="1176.5" y="691.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1176.5" y="675.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.5" y="686.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.08%)</title><rect x="1176.5" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.5" y="670.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.08%)</title><rect x="1176.5" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.5" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1176.5" y="627.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.5" y="638.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1176.5" y="611.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.5" y="622.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1176.5" y="595.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.5" y="606.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.08%)</title><rect x="1176.5" y="579.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.5" y="590.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1176.5" y="563.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.5" y="574.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="1176.5" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.5" y="558.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1176.5" y="531.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.5" y="542.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1176.5" y="515.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.5" y="526.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.08%)</title><rect x="1176.5" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.65%)</title><rect x="1177.5" y="675.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.57%)</title><rect x="1177.5" y="659.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.5" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.49%)</title><rect x="1177.5" y="643.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.49%)</title><rect x="1177.5" y="627.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.49%)</title><rect x="1177.5" y="611.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.49%)</title><rect x="1177.5" y="595.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.49%)</title><rect x="1177.5" y="579.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.49%)</title><rect x="1177.5" y="563.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.41%)</title><rect x="1177.5" y="547.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.41%)</title><rect x="1177.5" y="531.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1177.5" y="515.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1177.5" y="499.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1177.5" y="483.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="494.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.08%)</title><rect x="1177.5" y="467.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="478.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.08%)</title><rect x="1177.5" y="451.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="462.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.08%)</title><rect x="1177.5" y="435.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="446.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1177.5" y="419.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="430.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1177.5" y="403.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="414.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.08%)</title><rect x="1177.5" y="387.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="398.0"></text>
</g>
<g>
<title>Compile::set_node_notes_at(int, Node_Notes*) (1 samples, 0.08%)</title><rect x="1177.5" y="371.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.25%)</title><rect x="1178.4" y="483.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.25%)</title><rect x="1178.4" y="467.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1178.4" y="451.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.25%)</title><rect x="1178.4" y="435.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.25%)</title><rect x="1178.4" y="419.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.25%)</title><rect x="1178.4" y="403.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.25%)</title><rect x="1178.4" y="387.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1178.4" y="371.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1178.4" y="355.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.4" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1178.4" y="339.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="350.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1178.4" y="323.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="334.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1178.4" y="307.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="318.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1178.4" y="291.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.4" y="323.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.4" y="307.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.4" y="291.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1179.4" y="275.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1179.4" y="259.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="270.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.08%)</title><rect x="1179.4" y="243.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.4" y="254.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1179.4" y="227.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.4" y="238.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1179.4" y="211.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="222.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1179.4" y="195.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1179.4" y="179.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.4" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1179.4" y="163.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.4" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1179.4" y="147.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.4" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1179.4" y="131.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.4" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1179.4" y="115.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1179.4" y="99.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="110.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1179.4" y="83.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.4" y="94.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1179.4" y="67.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="78.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1179.4" y="51.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="62.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1179.4" y="35.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="371.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="355.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="366.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="339.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="350.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1180.4" y="323.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="334.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1180.4" y="307.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="318.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="291.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="302.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="275.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="286.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.08%)</title><rect x="1180.4" y="259.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="270.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1180.4" y="243.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="254.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.08%)</title><rect x="1180.4" y="227.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="238.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1180.4" y="211.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="222.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.08%)</title><rect x="1181.3" y="515.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="526.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.08%)</title><rect x="1181.3" y="499.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="510.0"></text>
</g>
<g>
<title>ciVirtualCallData::translate_from(ProfileData const*) (1 samples, 0.08%)</title><rect x="1181.3" y="483.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1181.3" y="467.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="547.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="531.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.3" y="515.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.3" y="499.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.3" y="483.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.3" y="467.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.3" y="451.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="435.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.3" y="419.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.3" y="403.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.3" y="387.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.3" y="371.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.3" y="355.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.3" y="339.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.3" y="323.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.3" y="307.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.3" y="291.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.3" y="275.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1182.3" y="259.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1182.3" y="243.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="254.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1182.3" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="238.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="1182.3" y="211.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="643.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.3" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="627.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.3" y="611.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.3" y="595.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.3" y="579.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.3" y="563.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.3" y="547.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.3" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="531.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.3" y="515.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.3" y="499.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.3" y="483.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.3" y="467.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.3" y="451.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="462.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.08%)</title><rect x="1183.3" y="435.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.3" y="446.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.08%)</title><rect x="1183.3" y="419.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.3" y="430.0"></text>
</g>
<g>
<title>TypeTuple::make_range(ciSignature*) (1 samples, 0.08%)</title><rect x="1183.3" y="403.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.3" y="414.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.08%)</title><rect x="1183.3" y="387.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.08%)</title><rect x="1184.2" y="659.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="670.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.08%)</title><rect x="1184.2" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.2" y="654.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.08%)</title><rect x="1184.2" y="627.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="638.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.08%)</title><rect x="1184.2" y="611.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.2" y="622.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.08%)</title><rect x="1184.2" y="595.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="606.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.08%)</title><rect x="1185.2" y="739.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.2" y="750.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.08%)</title><rect x="1185.2" y="723.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.2" y="734.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.08%)</title><rect x="1185.2" y="707.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="718.0"></text>
</g>
<g>
<title>elapsedTimer::start() (1 samples, 0.08%)</title><rect x="1186.1" y="787.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.1" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="1186.1" y="771.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1189.1" y="782.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.25%)</title><rect x="1187.1" y="835.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.25%)</title><rect x="1187.1" y="819.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.1" y="830.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.08%)</title><rect x="1187.1" y="803.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.1" y="814.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.16%)</title><rect x="1188.1" y="803.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.1" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.16%)</title><rect x="1188.1" y="787.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.1" y="798.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.16%)</title><rect x="1188.1" y="771.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.1" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.16%)</title><rect x="1188.1" y="755.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.1" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1188.1" y="739.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.1" y="750.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.08%)</title><rect x="1188.1" y="723.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.1" y="734.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (1 samples, 0.08%)</title><rect x="1188.1" y="707.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.1" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="739.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="750.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.08%)</title><rect x="1189.0" y="723.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="734.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.08%)</title><rect x="1189.0" y="707.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.0" y="718.0"></text>
</g>
<g>
<title>OtherRegionsTable::clear() (1 samples, 0.08%)</title><rect x="1189.0" y="691.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.0" y="702.0"></text>
</g>
<g>
<title>SparsePRT::clear() (1 samples, 0.08%)</title><rect x="1189.0" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="686.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1189.0" y="659.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1192.0" y="670.0"></text>
</g>
</g>
</svg>
