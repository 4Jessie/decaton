<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1125"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1125"> </text>
<g id="frames">
<g>
<title>all (420 samples, 100.00%)</title><rect x="10.0" y="1091.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.24%)</title><rect x="10.0" y="1075.0" width="2.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.24%)</title><rect x="10.0" y="1059.0" width="2.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (30 samples, 7.14%)</title><rect x="12.8" y="1075.0" width="84.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.8" y="1086.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (30 samples, 7.14%)</title><rect x="12.8" y="1059.0" width="84.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.8" y="1070.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.24%)</title><rect x="12.8" y="1043.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.24%)</title><rect x="12.8" y="1027.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.24%)</title><rect x="12.8" y="1011.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.24%)</title><rect x="12.8" y="995.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.8" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.24%)</title><rect x="12.8" y="979.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.8" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.24%)</title><rect x="12.8" y="963.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.8" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.24%)</title><rect x="12.8" y="947.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.8" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.24%)</title><rect x="12.8" y="931.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.8" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.24%)</title><rect x="12.8" y="915.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.24%)</title><rect x="12.8" y="899.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.24%)</title><rect x="12.8" y="883.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/744077159.get (1 samples, 0.24%)</title><rect x="12.8" y="867.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.8" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.24%)</title><rect x="15.6" y="1043.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.6" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.24%)</title><rect x="15.6" y="1027.0" width="2.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="18.6" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="15.6" y="1011.0" width="2.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="18.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (15 samples, 3.57%)</title><rect x="18.4" y="1043.0" width="42.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.4" y="1054.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/222822962.accept (15 samples, 3.57%)</title><rect x="18.4" y="1027.0" width="42.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.4" y="1038.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$68 (15 samples, 3.57%)</title><rect x="18.4" y="1011.0" width="42.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.4" y="1022.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (6 samples, 1.43%)</title><rect x="18.4" y="995.0" width="16.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (6 samples, 1.43%)</title><rect x="18.4" y="979.0" width="16.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (6 samples, 1.43%)</title><rect x="18.4" y="963.0" width="16.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (6 samples, 1.43%)</title><rect x="18.4" y="947.0" width="16.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 1.43%)</title><rect x="18.4" y="931.0" width="16.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (6 samples, 1.43%)</title><rect x="18.4" y="915.0" width="16.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 1.43%)</title><rect x="18.4" y="899.0" width="16.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (6 samples, 1.43%)</title><rect x="18.4" y="883.0" width="16.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 1.43%)</title><rect x="18.4" y="867.0" width="16.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.4" y="878.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.48%)</title><rect x="29.7" y="851.0" width="5.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="32.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.24%)</title><rect x="35.3" y="995.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.24%)</title><rect x="35.3" y="979.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.24%)</title><rect x="35.3" y="963.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (8 samples, 1.90%)</title><rect x="38.1" y="995.0" width="22.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="41.1" y="1006.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 1.90%)</title><rect x="38.1" y="979.0" width="22.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.1" y="990.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.95%)</title><rect x="46.5" y="963.0" width="11.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.5" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.48%)</title><rect x="46.5" y="947.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="49.5" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.48%)</title><rect x="46.5" y="931.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.5" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.48%)</title><rect x="46.5" y="915.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="49.5" y="926.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.48%)</title><rect x="52.1" y="947.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.1" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="57.8" y="963.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="60.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 3.10%)</title><rect x="60.6" y="1043.0" width="36.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.6" y="1054.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 3.10%)</title><rect x="60.6" y="1027.0" width="36.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.6" y="1038.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (12 samples, 2.86%)</title><rect x="60.6" y="1011.0" width="33.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.6" y="1022.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.24%)</title><rect x="60.6" y="995.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.6" y="1006.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.24%)</title><rect x="60.6" y="979.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.24%)</title><rect x="63.4" y="995.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="66.4" y="1006.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.24%)</title><rect x="63.4" y="979.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="66.4" y="990.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.24%)</title><rect x="63.4" y="963.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="66.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.19%)</title><rect x="66.2" y="995.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="69.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.19%)</title><rect x="66.2" y="979.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.24%)</title><rect x="66.2" y="963.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.24%)</title><rect x="66.2" y="947.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.2" y="958.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.24%)</title><rect x="66.2" y="931.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$85/1376268391.get (1 samples, 0.24%)</title><rect x="66.2" y="915.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="69.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.71%)</title><rect x="69.0" y="963.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.71%)</title><rect x="69.0" y="947.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.48%)</title><rect x="69.0" y="931.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.48%)</title><rect x="69.0" y="915.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="72.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.48%)</title><rect x="69.0" y="899.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.0" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.24%)</title><rect x="69.0" y="883.0" width="2.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="72.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.24%)</title><rect x="71.8" y="883.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.24%)</title><rect x="74.6" y="931.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="77.6" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.24%)</title><rect x="74.6" y="915.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="77.6" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.24%)</title><rect x="74.6" y="899.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="77.6" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.24%)</title><rect x="74.6" y="883.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.6" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.24%)</title><rect x="74.6" y="867.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.6" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.24%)</title><rect x="74.6" y="851.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.6" y="862.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_epollWait (1 samples, 0.24%)</title><rect x="74.6" y="835.0" width="2.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="77.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$260/1196030047.shouldBlock (1 samples, 0.24%)</title><rect x="77.4" y="963.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.24%)</title><rect x="77.4" y="947.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.24%)</title><rect x="77.4" y="931.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.24%)</title><rect x="77.4" y="915.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="80.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.24%)</title><rect x="77.4" y="899.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.24%)</title><rect x="77.4" y="883.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="80.4" y="894.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.24%)</title><rect x="77.4" y="867.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.24%)</title><rect x="77.4" y="851.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.24%)</title><rect x="77.4" y="835.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.24%)</title><rect x="77.4" y="819.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.4" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.24%)</title><rect x="77.4" y="803.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.24%)</title><rect x="77.4" y="787.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.24%)</title><rect x="77.4" y="771.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$261/1306715036.test (1 samples, 0.24%)</title><rect x="77.4" y="755.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="80.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$hasAvailableFetches$0 (1 samples, 0.24%)</title><rect x="77.4" y="739.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.24%)</title><rect x="77.4" y="723.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$FetchStates$2.hasValidPosition (1 samples, 0.24%)</title><rect x="77.4" y="707.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.19%)</title><rect x="80.2" y="995.0" width="14.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.19%)</title><rect x="80.2" y="979.0" width="14.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 1.19%)</title><rect x="80.2" y="963.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 1.19%)</title><rect x="80.2" y="947.0" width="14.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.2" y="958.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="80.2" y="931.0" width="2.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="83.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.48%)</title><rect x="83.0" y="931.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.48%)</title><rect x="88.7" y="931.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.48%)</title><rect x="88.7" y="915.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="91.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.24%)</title><rect x="88.7" y="899.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="91.7" y="910.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.24%)</title><rect x="88.7" y="883.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="91.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.24%)</title><rect x="91.5" y="899.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.5" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.24%)</title><rect x="91.5" y="883.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="94.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.24%)</title><rect x="94.3" y="1011.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.24%)</title><rect x="94.3" y="995.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="97.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.24%)</title><rect x="94.3" y="979.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.3" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.24%)</title><rect x="94.3" y="963.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="97.3" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.24%)</title><rect x="94.3" y="947.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.3" y="958.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.24%)</title><rect x="94.3" y="931.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.3" y="942.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.24%)</title><rect x="94.3" y="915.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="97.3" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.run (228 samples, 54.29%)</title><rect x="97.1" y="1075.0" width="640.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="100.1" y="1086.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (228 samples, 54.29%)</title><rect x="97.1" y="1059.0" width="640.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.1" y="1070.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (228 samples, 54.29%)</title><rect x="97.1" y="1043.0" width="640.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="100.1" y="1054.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/707036429.run (213 samples, 50.71%)</title><rect x="99.9" y="1027.0" width="598.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.9" y="1038.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/707036429.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (213 samples, 50.71%)</title><rect x="99.9" y="1011.0" width="598.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.9" y="1022.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (213 samples, 50.71%)</title><rect x="99.9" y="995.0" width="598.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.9" y="1006.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (207 samples, 49.29%)</title><rect x="99.9" y="979.0" width="581.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.9" y="990.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (42 samples, 10.00%)</title><rect x="122.4" y="963.0" width="118.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="125.4" y="974.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/580718781.extract (42 samples, 10.00%)</title><rect x="122.4" y="947.0" width="118.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="125.4" y="958.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (42 samples, 10.00%)</title><rect x="122.4" y="931.0" width="118.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="125.4" y="942.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (42 samples, 10.00%)</title><rect x="122.4" y="915.0" width="118.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="125.4" y="926.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (42 samples, 10.00%)</title><rect x="122.4" y="899.0" width="118.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="125.4" y="910.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (42 samples, 10.00%)</title><rect x="122.4" y="883.0" width="118.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="125.4" y="894.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (18 samples, 4.29%)</title><rect x="122.4" y="867.0" width="50.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="125.4" y="878.0">com/f..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.24%)</title><rect x="147.7" y="851.0" width="2.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="150.7" y="862.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.24%)</title><rect x="147.7" y="835.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="150.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.24%)</title><rect x="150.5" y="851.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.24%)</title><rect x="150.5" y="835.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="153.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.24%)</title><rect x="150.5" y="819.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="153.5" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.24%)</title><rect x="150.5" y="803.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="153.5" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.24%)</title><rect x="150.5" y="787.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="153.5" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.24%)</title><rect x="150.5" y="771.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="153.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.24%)</title><rect x="150.5" y="755.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="153.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 1.67%)</title><rect x="153.3" y="851.0" width="19.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="156.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 1.43%)</title><rect x="153.3" y="835.0" width="16.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="156.3" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.48%)</title><rect x="158.9" y="819.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="161.9" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.48%)</title><rect x="158.9" y="803.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="161.9" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.48%)</title><rect x="158.9" y="787.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="161.9" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.48%)</title><rect x="158.9" y="771.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="161.9" y="782.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.24%)</title><rect x="158.9" y="755.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="161.9" y="766.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.24%)</title><rect x="161.7" y="755.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="164.7" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.24%)</title><rect x="161.7" y="739.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="164.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.48%)</title><rect x="164.5" y="819.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="167.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.48%)</title><rect x="164.5" y="803.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="167.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.48%)</title><rect x="164.5" y="787.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="167.5" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.48%)</title><rect x="164.5" y="771.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="167.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.48%)</title><rect x="164.5" y="755.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="167.5" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.48%)</title><rect x="164.5" y="739.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="167.5" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.48%)</title><rect x="164.5" y="723.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="167.5" y="734.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.24%)</title><rect x="164.5" y="707.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="167.5" y="718.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.24%)</title><rect x="167.3" y="707.0" width="2.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="170.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.24%)</title><rect x="170.1" y="835.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="173.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (19 samples, 4.52%)</title><rect x="173.0" y="867.0" width="53.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.0" y="878.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.71%)</title><rect x="175.8" y="851.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.71%)</title><rect x="175.8" y="835.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.48%)</title><rect x="178.6" y="819.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="181.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.48%)</title><rect x="178.6" y="803.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="181.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.24%)</title><rect x="181.4" y="787.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="184.4" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.24%)</title><rect x="181.4" y="771.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="184.4" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.24%)</title><rect x="181.4" y="755.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="184.4" y="766.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.24%)</title><rect x="181.4" y="739.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="184.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.24%)</title><rect x="184.2" y="851.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="187.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.24%)</title><rect x="184.2" y="835.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="187.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (14 samples, 3.33%)</title><rect x="187.0" y="851.0" width="39.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="190.0" y="862.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.95%)</title><rect x="187.0" y="835.0" width="11.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="190.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.24%)</title><rect x="189.8" y="819.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="192.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.24%)</title><rect x="189.8" y="803.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="192.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.24%)</title><rect x="189.8" y="787.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.48%)</title><rect x="192.6" y="819.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (10 samples, 2.38%)</title><rect x="198.2" y="835.0" width="28.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="201.2" y="846.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (10 samples, 2.38%)</title><rect x="198.2" y="819.0" width="28.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="201.2" y="830.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 2.38%)</title><rect x="198.2" y="803.0" width="28.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="201.2" y="814.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.24%)</title><rect x="198.2" y="787.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="201.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.71%)</title><rect x="201.0" y="787.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.71%)</title><rect x="201.0" y="771.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="204.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.71%)</title><rect x="201.0" y="755.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.71%)</title><rect x="201.0" y="739.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.71%)</title><rect x="201.0" y="723.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.48%)</title><rect x="209.5" y="787.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.48%)</title><rect x="209.5" y="771.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="212.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.48%)</title><rect x="209.5" y="755.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.48%)</title><rect x="209.5" y="739.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.5" y="750.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.48%)</title><rect x="209.5" y="723.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="212.5" y="734.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.24%)</title><rect x="212.3" y="707.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="215.3" y="718.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.24%)</title><rect x="212.3" y="691.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="215.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.24%)</title><rect x="215.1" y="787.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.24%)</title><rect x="215.1" y="771.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.24%)</title><rect x="215.1" y="755.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.71%)</title><rect x="217.9" y="787.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 1.19%)</title><rect x="226.3" y="867.0" width="14.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 1.19%)</title><rect x="226.3" y="851.0" width="14.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="229.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 1.19%)</title><rect x="226.3" y="835.0" width="14.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 1.19%)</title><rect x="226.3" y="819.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 1.19%)</title><rect x="226.3" y="803.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (150 samples, 35.71%)</title><rect x="240.4" y="963.0" width="421.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.4" y="974.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (34 samples, 8.10%)</title><rect x="240.4" y="947.0" width="95.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="243.4" y="958.0">com/linecor..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (29 samples, 6.90%)</title><rect x="254.4" y="931.0" width="81.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.4" y="942.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (25 samples, 5.95%)</title><rect x="265.7" y="915.0" width="70.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.7" y="926.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.48%)</title><rect x="271.3" y="899.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.3" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.48%)</title><rect x="271.3" y="883.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.3" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.48%)</title><rect x="271.3" y="867.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.3" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.48%)</title><rect x="271.3" y="851.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.3" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (21 samples, 5.00%)</title><rect x="276.9" y="899.0" width="59.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.9" y="910.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (20 samples, 4.76%)</title><rect x="279.7" y="883.0" width="56.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.7" y="894.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 2.62%)</title><rect x="305.0" y="867.0" width="30.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.0" y="878.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.24%)</title><rect x="335.9" y="947.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="338.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.24%)</title><rect x="335.9" y="931.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="338.9" y="942.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.24%)</title><rect x="335.9" y="915.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="338.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (29 samples, 6.90%)</title><rect x="338.7" y="947.0" width="81.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="341.7" y="958.0">com/linec..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.24%)</title><rect x="341.5" y="931.0" width="2.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="344.5" y="942.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="341.5" y="915.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="344.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (27 samples, 6.43%)</title><rect x="344.3" y="931.0" width="75.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="347.3" y="942.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 1.67%)</title><rect x="344.3" y="915.0" width="19.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="347.3" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 1.67%)</title><rect x="344.3" y="899.0" width="19.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="347.3" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.19%)</title><rect x="350.0" y="883.0" width="14.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.0" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.71%)</title><rect x="350.0" y="867.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="353.0" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.71%)</title><rect x="350.0" y="851.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="353.0" y="862.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.71%)</title><rect x="350.0" y="835.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="353.0" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.24%)</title><rect x="355.6" y="819.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="358.6" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.24%)</title><rect x="355.6" y="803.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="358.6" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.24%)</title><rect x="355.6" y="787.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="358.6" y="798.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.24%)</title><rect x="355.6" y="771.0" width="2.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="358.6" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.48%)</title><rect x="358.4" y="867.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="361.4" y="878.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.95%)</title><rect x="364.0" y="915.0" width="11.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="367.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.24%)</title><rect x="364.0" y="899.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="367.0" y="910.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.24%)</title><rect x="364.0" y="883.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="367.0" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.71%)</title><rect x="366.8" y="899.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="369.8" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.24%)</title><rect x="366.8" y="883.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="369.8" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.24%)</title><rect x="366.8" y="867.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="369.8" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.24%)</title><rect x="366.8" y="851.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="369.8" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.48%)</title><rect x="369.6" y="883.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="372.6" y="894.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (16 samples, 3.81%)</title><rect x="375.2" y="915.0" width="45.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="378.2" y="926.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 3.10%)</title><rect x="378.0" y="899.0" width="36.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="381.0" y="910.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.48%)</title><rect x="383.7" y="883.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="386.7" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.48%)</title><rect x="383.7" y="867.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="386.7" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.48%)</title><rect x="383.7" y="851.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="386.7" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.48%)</title><rect x="383.7" y="835.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="386.7" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.24%)</title><rect x="386.5" y="819.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="389.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.24%)</title><rect x="386.5" y="803.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="389.5" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 2.14%)</title><rect x="389.3" y="883.0" width="25.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="392.3" y="894.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 1.90%)</title><rect x="392.1" y="867.0" width="22.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="395.1" y="878.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.95%)</title><rect x="403.3" y="851.0" width="11.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="406.3" y="862.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.24%)</title><rect x="411.8" y="835.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="414.8" y="846.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="414.6" y="899.0" width="2.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="417.6" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="417.4" y="899.0" width="2.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="420.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (69 samples, 16.43%)</title><rect x="420.2" y="947.0" width="193.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="423.2" y="958.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (69 samples, 16.43%)</title><rect x="420.2" y="931.0" width="193.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="423.2" y="942.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/897012833.process (64 samples, 15.24%)</title><rect x="420.2" y="915.0" width="179.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="423.2" y="926.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (63 samples, 15.00%)</title><rect x="423.0" y="899.0" width="177.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="426.0" y="910.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (63 samples, 15.00%)</title><rect x="423.0" y="883.0" width="177.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="426.0" y="894.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.48%)</title><rect x="431.4" y="867.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="434.4" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.48%)</title><rect x="431.4" y="851.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="434.4" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.48%)</title><rect x="431.4" y="835.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="434.4" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.48%)</title><rect x="431.4" y="819.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="434.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.48%)</title><rect x="431.4" y="803.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="434.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.24%)</title><rect x="434.2" y="787.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="437.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (58 samples, 13.81%)</title><rect x="437.0" y="867.0" width="163.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="440.0" y="878.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (57 samples, 13.57%)</title><rect x="437.0" y="851.0" width="160.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="440.0" y="862.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (46 samples, 10.95%)</title><rect x="462.3" y="835.0" width="129.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="465.3" y="846.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.48%)</title><rect x="473.6" y="819.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="476.6" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="479.2" y="819.0" width="2.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="482.2" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.48%)</title><rect x="482.0" y="819.0" width="5.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="485.0" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="484.8" y="803.0" width="2.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="487.8" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 1.19%)</title><rect x="487.6" y="819.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="490.6" y="830.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (32 samples, 7.62%)</title><rect x="501.7" y="819.0" width="89.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="504.7" y="830.0">os::sleep(..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.24%)</title><rect x="515.7" y="803.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="518.7" y="814.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.24%)</title><rect x="515.7" y="787.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="518.7" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.24%)</title><rect x="518.5" y="803.0" width="2.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="521.5" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="518.5" y="787.0" width="2.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="521.5" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.19%)</title><rect x="521.3" y="803.0" width="14.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="524.3" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_init (4 samples, 0.95%)</title><rect x="535.4" y="803.0" width="11.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="538.4" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 2.14%)</title><rect x="546.6" y="803.0" width="25.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="549.6" y="814.0">_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.24%)</title><rect x="571.9" y="803.0" width="2.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="574.9" y="814.0"></text>
</g>
<g>
<title>_init (1 samples, 0.24%)</title><rect x="574.7" y="803.0" width="2.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="577.7" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.71%)</title><rect x="577.5" y="803.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="580.5" y="814.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.24%)</title><rect x="586.0" y="803.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="589.0" y="814.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.24%)</title><rect x="588.8" y="803.0" width="2.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="591.8" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.48%)</title><rect x="591.6" y="835.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="594.6" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.24%)</title><rect x="597.2" y="851.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="600.2" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="597.2" y="835.0" width="2.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="600.2" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 1.19%)</title><rect x="600.0" y="915.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="603.0" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.71%)</title><rect x="605.6" y="899.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="608.6" y="910.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.48%)</title><rect x="605.6" y="883.0" width="5.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="608.6" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.24%)</title><rect x="611.2" y="883.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="614.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 4.05%)</title><rect x="614.0" y="947.0" width="47.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="617.0" y="958.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 4.05%)</title><rect x="614.0" y="931.0" width="47.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="617.0" y="942.0">java..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.24%)</title><rect x="645.0" y="915.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="648.0" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.24%)</title><rect x="645.0" y="899.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="648.0" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.24%)</title><rect x="645.0" y="883.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="648.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.95%)</title><rect x="647.8" y="915.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="650.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/224606054.accept (4 samples, 0.95%)</title><rect x="647.8" y="899.0" width="11.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="650.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (4 samples, 0.95%)</title><rect x="647.8" y="883.0" width="11.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="650.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1485612355.complete (4 samples, 0.95%)</title><rect x="647.8" y="867.0" width="11.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="650.8" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (4 samples, 0.95%)</title><rect x="647.8" y="851.0" width="11.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="650.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1131099546.complete (4 samples, 0.95%)</title><rect x="647.8" y="835.0" width="11.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="650.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (4 samples, 0.95%)</title><rect x="647.8" y="819.0" width="11.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="650.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (4 samples, 0.95%)</title><rect x="647.8" y="803.0" width="11.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="650.8" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 0.95%)</title><rect x="647.8" y="787.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="650.8" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 0.95%)</title><rect x="647.8" y="771.0" width="11.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="650.8" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.95%)</title><rect x="647.8" y="755.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="650.8" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.24%)</title><rect x="656.2" y="739.0" width="2.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="659.2" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="656.2" y="723.0" width="2.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="659.2" y="734.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.24%)</title><rect x="659.0" y="915.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="662.0" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/831236296.linkToTargetMethod (1 samples, 0.24%)</title><rect x="661.8" y="963.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="664.8" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.24%)</title><rect x="661.8" y="947.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="664.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/224606054.get$Lambda (1 samples, 0.24%)</title><rect x="661.8" y="931.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="664.8" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.24%)</title><rect x="661.8" y="915.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="664.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.43%)</title><rect x="664.6" y="963.0" width="16.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="667.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 1.43%)</title><rect x="664.6" y="947.0" width="16.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="667.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 1.43%)</title><rect x="664.6" y="931.0" width="16.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/224606054.accept (6 samples, 1.43%)</title><rect x="664.6" y="915.0" width="16.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="667.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (6 samples, 1.43%)</title><rect x="664.6" y="899.0" width="16.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="667.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1485612355.complete (6 samples, 1.43%)</title><rect x="664.6" y="883.0" width="16.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="667.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (6 samples, 1.43%)</title><rect x="664.6" y="867.0" width="16.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="667.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1131099546.complete (6 samples, 1.43%)</title><rect x="664.6" y="851.0" width="16.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="667.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (6 samples, 1.43%)</title><rect x="664.6" y="835.0" width="16.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (6 samples, 1.43%)</title><rect x="664.6" y="819.0" width="16.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="667.6" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 1.43%)</title><rect x="664.6" y="803.0" width="16.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="667.6" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 1.43%)</title><rect x="664.6" y="787.0" width="16.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="667.6" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (6 samples, 1.43%)</title><rect x="664.6" y="771.0" width="16.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="667.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 1.43%)</title><rect x="681.5" y="979.0" width="16.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="684.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.24%)</title><rect x="695.5" y="963.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="698.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.24%)</title><rect x="698.3" y="1027.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="701.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.48%)</title><rect x="701.1" y="1027.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="704.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.48%)</title><rect x="701.1" y="1011.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="704.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.48%)</title><rect x="701.1" y="995.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="704.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.48%)</title><rect x="701.1" y="979.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="704.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 2.62%)</title><rect x="706.8" y="1027.0" width="30.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="709.8" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (11 samples, 2.62%)</title><rect x="706.8" y="1011.0" width="30.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="709.8" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (5 samples, 1.19%)</title><rect x="706.8" y="995.0" width="14.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="709.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 1.19%)</title><rect x="706.8" y="979.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="709.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.19%)</title><rect x="706.8" y="963.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="709.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.19%)</title><rect x="706.8" y="947.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="709.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.19%)</title><rect x="706.8" y="931.0" width="14.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="709.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 1.43%)</title><rect x="720.8" y="995.0" width="16.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="723.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 1.43%)</title><rect x="720.8" y="979.0" width="16.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="723.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 1.43%)</title><rect x="720.8" y="963.0" width="16.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="723.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 1.43%)</title><rect x="720.8" y="947.0" width="16.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="723.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (3 samples, 0.71%)</title><rect x="737.7" y="1075.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="740.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/Object.wait (2 samples, 0.48%)</title><rect x="737.7" y="1059.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="740.7" y="1070.0"></text>
</g>
<g>
<title>JVM_MonitorWait (2 samples, 0.48%)</title><rect x="737.7" y="1043.0" width="5.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="740.7" y="1054.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.24%)</title><rect x="740.5" y="1027.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="743.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.24%)</title><rect x="743.3" y="1059.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="746.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.24%)</title><rect x="743.3" y="1043.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="746.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.24%)</title><rect x="743.3" y="1027.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="746.3" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.24%)</title><rect x="743.3" y="1011.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="746.3" y="1022.0"></text>
</g>
<g>
<title>start_thread (158 samples, 37.62%)</title><rect x="746.1" y="1075.0" width="443.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="749.1" y="1086.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (158 samples, 37.62%)</title><rect x="746.1" y="1059.0" width="443.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="749.1" y="1070.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 5.24%)</title><rect x="746.1" y="1043.0" width="61.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="749.1" y="1054.0">GangWo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.24%)</title><rect x="746.1" y="1027.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="749.1" y="1038.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.24%)</title><rect x="746.1" y="1011.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="749.1" y="1022.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.24%)</title><rect x="746.1" y="995.0" width="2.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="749.1" y="1006.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (21 samples, 5.00%)</title><rect x="748.9" y="1027.0" width="59.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="751.9" y="1038.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (19 samples, 4.52%)</title><rect x="751.7" y="1011.0" width="53.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="754.7" y="1022.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.48%)</title><rect x="751.7" y="995.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="754.7" y="1006.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (11 samples, 2.62%)</title><rect x="757.3" y="995.0" width="30.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="760.3" y="1006.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 1.67%)</title><rect x="763.0" y="979.0" width="19.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="766.0" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.24%)</title><rect x="777.0" y="963.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="780.0" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.24%)</title><rect x="779.8" y="963.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="782.8" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.24%)</title><rect x="782.6" y="979.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="785.6" y="990.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.24%)</title><rect x="785.4" y="979.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="788.4" y="990.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.48%)</title><rect x="788.2" y="995.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="791.2" y="1006.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.95%)</title><rect x="793.9" y="995.0" width="11.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="796.9" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.24%)</title><rect x="805.1" y="1011.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="808.1" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.24%)</title><rect x="805.1" y="995.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="808.1" y="1006.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.24%)</title><rect x="805.1" y="979.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="808.1" y="990.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.24%)</title><rect x="805.1" y="963.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="808.1" y="974.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.24%)</title><rect x="805.1" y="947.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="808.1" y="958.0"></text>
</g>
<g>
<title>JavaThread::run() (135 samples, 32.14%)</title><rect x="807.9" y="1043.0" width="379.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="810.9" y="1054.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (135 samples, 32.14%)</title><rect x="807.9" y="1027.0" width="379.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="810.9" y="1038.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (135 samples, 32.14%)</title><rect x="807.9" y="1011.0" width="379.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="810.9" y="1022.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (135 samples, 32.14%)</title><rect x="807.9" y="995.0" width="379.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="810.9" y="1006.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (131 samples, 31.19%)</title><rect x="807.9" y="979.0" width="368.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="810.9" y="990.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (131 samples, 31.19%)</title><rect x="807.9" y="963.0" width="368.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="810.9" y="974.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, i..</text>
</g>
<g>
<title>Compile::Code_Gen() (54 samples, 12.86%)</title><rect x="807.9" y="947.0" width="151.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="810.9" y="958.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.71%)</title><rect x="807.9" y="931.0" width="8.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="810.9" y="942.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.24%)</title><rect x="807.9" y="915.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="810.9" y="926.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.48%)</title><rect x="810.7" y="915.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="813.7" y="926.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.24%)</title><rect x="810.7" y="899.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="813.7" y="910.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.24%)</title><rect x="810.7" y="883.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="813.7" y="894.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.24%)</title><rect x="810.7" y="867.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="813.7" y="878.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.24%)</title><rect x="810.7" y="851.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="813.7" y="862.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.24%)</title><rect x="813.5" y="899.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="816.5" y="910.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.24%)</title><rect x="813.5" y="883.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="816.5" y="894.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.24%)</title><rect x="813.5" y="867.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="816.5" y="878.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.48%)</title><rect x="816.3" y="931.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="819.3" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.48%)</title><rect x="816.3" y="915.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="819.3" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.48%)</title><rect x="816.3" y="899.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="819.3" y="910.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.95%)</title><rect x="822.0" y="931.0" width="11.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="825.0" y="942.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.24%)</title><rect x="822.0" y="915.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="825.0" y="926.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.71%)</title><rect x="824.8" y="915.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="827.8" y="926.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.48%)</title><rect x="824.8" y="899.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="827.8" y="910.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.24%)</title><rect x="830.4" y="899.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="833.4" y="910.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.24%)</title><rect x="830.4" y="883.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="833.4" y="894.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.24%)</title><rect x="830.4" y="867.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="833.4" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.24%)</title><rect x="830.4" y="851.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.4" y="862.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.24%)</title><rect x="830.4" y="835.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="833.4" y="846.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.24%)</title><rect x="830.4" y="819.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="833.4" y="830.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.24%)</title><rect x="830.4" y="803.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="833.4" y="814.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.24%)</title><rect x="833.2" y="931.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="836.2" y="942.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.24%)</title><rect x="833.2" y="915.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="836.2" y="926.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.24%)</title><rect x="833.2" y="899.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="836.2" y="910.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.24%)</title><rect x="833.2" y="883.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="836.2" y="894.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.24%)</title><rect x="833.2" y="867.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="836.2" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.24%)</title><rect x="836.0" y="931.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="839.0" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.24%)</title><rect x="836.0" y="915.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="839.0" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.24%)</title><rect x="836.0" y="899.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="839.0" y="910.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.24%)</title><rect x="836.0" y="883.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="839.0" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.24%)</title><rect x="838.8" y="931.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="841.8" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (42 samples, 10.00%)</title><rect x="841.6" y="931.0" width="118.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="844.6" y="942.0">PhaseChaitin::..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.24%)</title><rect x="841.6" y="915.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="844.6" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.95%)</title><rect x="844.4" y="915.0" width="11.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="847.4" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="844.4" y="899.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="847.4" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.71%)</title><rect x="847.2" y="899.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="850.2" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.48%)</title><rect x="850.0" y="883.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="853.0" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.24%)</title><rect x="855.7" y="915.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="858.7" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.24%)</title><rect x="855.7" y="899.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="858.7" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.95%)</title><rect x="858.5" y="915.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="861.5" y="926.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.24%)</title><rect x="866.9" y="899.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="869.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 1.67%)</title><rect x="869.7" y="915.0" width="19.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="872.7" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.48%)</title><rect x="878.1" y="899.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="881.1" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="881.0" y="883.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="884.0" y="894.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.48%)</title><rect x="883.8" y="899.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="886.8" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.24%)</title><rect x="889.4" y="915.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="892.4" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.95%)</title><rect x="892.2" y="915.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="895.2" y="926.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.24%)</title><rect x="897.8" y="899.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="900.8" y="910.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.24%)</title><rect x="900.6" y="899.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="903.6" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.48%)</title><rect x="903.4" y="915.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="906.4" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.48%)</title><rect x="903.4" y="899.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="906.4" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.24%)</title><rect x="906.2" y="883.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="909.2" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.24%)</title><rect x="906.2" y="867.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="909.2" y="878.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.24%)</title><rect x="906.2" y="851.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="909.2" y="862.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (14 samples, 3.33%)</title><rect x="909.0" y="915.0" width="39.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="912.0" y="926.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (14 samples, 3.33%)</title><rect x="909.0" y="899.0" width="39.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="912.0" y="910.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (14 samples, 3.33%)</title><rect x="909.0" y="883.0" width="39.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="912.0" y="894.0">Pha..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (7 samples, 1.67%)</title><rect x="909.0" y="867.0" width="19.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="912.0" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (7 samples, 1.67%)</title><rect x="928.7" y="867.0" width="19.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="931.7" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.24%)</title><rect x="948.4" y="915.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="951.4" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.24%)</title><rect x="951.2" y="915.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="954.2" y="926.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.48%)</title><rect x="954.0" y="915.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="957.0" y="926.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.48%)</title><rect x="954.0" y="899.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="957.0" y="910.0"></text>
</g>
<g>
<title>Compile::Optimize() (73 samples, 17.38%)</title><rect x="959.6" y="947.0" width="205.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="962.6" y="958.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.24%)</title><rect x="959.6" y="931.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="962.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.24%)</title><rect x="962.4" y="931.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="965.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.24%)</title><rect x="962.4" y="915.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="965.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="899.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="965.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="883.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="965.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="867.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="851.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="965.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="835.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="965.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="819.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="965.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="803.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="965.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="787.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="965.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="771.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="965.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="755.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="965.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="739.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="965.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="723.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="965.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="707.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="965.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="691.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="965.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="675.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="965.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="659.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="965.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="643.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="627.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="611.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="965.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="595.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="579.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="965.4" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="563.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="965.4" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="547.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="965.4" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="531.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="965.4" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="515.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="965.4" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="499.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="965.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.24%)</title><rect x="962.4" y="483.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="965.4" y="494.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.24%)</title><rect x="965.2" y="931.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="968.2" y="942.0"></text>
</g>
<g>
<title>EncodePNode::Value(PhaseTransform*) const (1 samples, 0.24%)</title><rect x="965.2" y="915.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="968.2" y="926.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.24%)</title><rect x="965.2" y="899.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="968.2" y="910.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.24%)</title><rect x="965.2" y="883.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="968.2" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.24%)</title><rect x="968.0" y="931.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="971.0" y="942.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.24%)</title><rect x="968.0" y="915.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="971.0" y="926.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::push(Node* const&amp;) (1 samples, 0.24%)</title><rect x="968.0" y="899.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="971.0" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (65 samples, 15.48%)</title><rect x="970.9" y="931.0" width="182.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="973.9" y="942.0">PhaseIdealLoop::build_an..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.48%)</title><rect x="970.9" y="915.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="973.9" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (61 samples, 14.52%)</title><rect x="976.5" y="915.0" width="171.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.5" y="926.0">PhaseIdealLoop::build_..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (59 samples, 14.05%)</title><rect x="982.1" y="899.0" width="165.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.1" y="910.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.24%)</title><rect x="987.7" y="883.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="990.7" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (56 samples, 13.33%)</title><rect x="990.5" y="883.0" width="157.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="993.5" y="894.0">PhaseIdealLoop::get_..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.24%)</title><rect x="1131.0" y="867.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.0" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.24%)</title><rect x="1131.0" y="851.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.0" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 1.19%)</title><rect x="1133.8" y="867.0" width="14.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.24%)</title><rect x="1147.9" y="915.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.9" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.24%)</title><rect x="1150.7" y="915.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.24%)</title><rect x="1150.7" y="899.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.7" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.24%)</title><rect x="1150.7" y="883.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.7" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.24%)</title><rect x="1150.7" y="867.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.7" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.71%)</title><rect x="1153.5" y="931.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.5" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.71%)</title><rect x="1153.5" y="915.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.5" y="926.0"></text>
</g>
<g>
<title>LoadNKlassNode::Value(PhaseTransform*) const (1 samples, 0.24%)</title><rect x="1153.5" y="899.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.5" y="910.0"></text>
</g>
<g>
<title>LoadNode::klass_value_common(PhaseTransform*) const (1 samples, 0.24%)</title><rect x="1153.5" y="883.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.5" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.48%)</title><rect x="1156.3" y="899.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.3" y="910.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.48%)</title><rect x="1156.3" y="883.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.3" y="894.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.24%)</title><rect x="1161.9" y="931.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.9" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.24%)</title><rect x="1161.9" y="915.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.9" y="926.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="1161.9" y="899.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.9" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.24%)</title><rect x="1161.9" y="883.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.9" y="894.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.24%)</title><rect x="1161.9" y="867.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.9" y="878.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.24%)</title><rect x="1161.9" y="851.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.95%)</title><rect x="1164.7" y="947.0" width="11.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.7" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.95%)</title><rect x="1164.7" y="931.0" width="11.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.95%)</title><rect x="1164.7" y="915.0" width="11.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.95%)</title><rect x="1164.7" y="899.0" width="11.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.95%)</title><rect x="1164.7" y="883.0" width="11.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.95%)</title><rect x="1164.7" y="867.0" width="11.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.7" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.95%)</title><rect x="1164.7" y="851.0" width="11.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.7" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.95%)</title><rect x="1164.7" y="835.0" width="11.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.95%)</title><rect x="1164.7" y="819.0" width="11.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.95%)</title><rect x="1164.7" y="803.0" width="11.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.95%)</title><rect x="1164.7" y="787.0" width="11.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.95%)</title><rect x="1164.7" y="771.0" width="11.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.7" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1164.7" y="755.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1164.7" y="739.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.24%)</title><rect x="1164.7" y="723.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.7" y="734.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.24%)</title><rect x="1164.7" y="707.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.7" y="718.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.24%)</title><rect x="1164.7" y="691.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.71%)</title><rect x="1167.5" y="755.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.71%)</title><rect x="1167.5" y="739.0" width="8.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.5" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.71%)</title><rect x="1167.5" y="723.0" width="8.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.71%)</title><rect x="1167.5" y="707.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.71%)</title><rect x="1167.5" y="691.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.71%)</title><rect x="1167.5" y="675.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.71%)</title><rect x="1167.5" y="659.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.71%)</title><rect x="1167.5" y="643.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.5" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.71%)</title><rect x="1167.5" y="627.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.71%)</title><rect x="1167.5" y="611.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.71%)</title><rect x="1167.5" y="595.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.71%)</title><rect x="1167.5" y="579.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.71%)</title><rect x="1167.5" y="563.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.71%)</title><rect x="1167.5" y="547.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.71%)</title><rect x="1167.5" y="531.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.71%)</title><rect x="1167.5" y="515.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.71%)</title><rect x="1167.5" y="499.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.71%)</title><rect x="1167.5" y="483.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.71%)</title><rect x="1167.5" y="467.0" width="8.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.71%)</title><rect x="1167.5" y="451.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.5" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.71%)</title><rect x="1167.5" y="435.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.48%)</title><rect x="1167.5" y="419.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.48%)</title><rect x="1167.5" y="403.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.48%)</title><rect x="1167.5" y="387.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.48%)</title><rect x="1167.5" y="371.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.5" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.48%)</title><rect x="1167.5" y="355.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.5" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.48%)</title><rect x="1167.5" y="339.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.48%)</title><rect x="1167.5" y="323.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.48%)</title><rect x="1167.5" y="307.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.48%)</title><rect x="1167.5" y="291.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.48%)</title><rect x="1167.5" y="275.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.5" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.48%)</title><rect x="1167.5" y="259.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.5" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.48%)</title><rect x="1167.5" y="243.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.48%)</title><rect x="1167.5" y="227.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.48%)</title><rect x="1167.5" y="211.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.48%)</title><rect x="1167.5" y="195.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.48%)</title><rect x="1167.5" y="179.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="190.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.48%)</title><rect x="1167.5" y="163.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.5" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1167.5" y="147.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.5" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1167.5" y="131.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1167.5" y="115.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1167.5" y="99.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.5" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1167.5" y="83.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.5" y="94.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1167.5" y="67.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.5" y="78.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1167.5" y="51.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.5" y="62.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1167.5" y="35.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="46.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1170.3" y="147.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.3" y="158.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.24%)</title><rect x="1170.3" y="131.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.3" y="142.0"></text>
</g>
<g>
<title>OptoRuntime::uncommon_trap_Type() (1 samples, 0.24%)</title><rect x="1170.3" y="115.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.3" y="126.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.24%)</title><rect x="1170.3" y="99.0" width="2.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1173.3" y="110.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.24%)</title><rect x="1173.1" y="419.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.1" y="430.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.24%)</title><rect x="1173.1" y="403.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.1" y="414.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 0.95%)</title><rect x="1176.0" y="979.0" width="11.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="990.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 0.95%)</title><rect x="1176.0" y="963.0" width="11.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="974.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 0.95%)</title><rect x="1176.0" y="947.0" width="11.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="958.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 0.95%)</title><rect x="1176.0" y="931.0" width="11.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="942.0"></text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 0.71%)</title><rect x="1176.0" y="915.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.0" y="926.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 0.71%)</title><rect x="1176.0" y="899.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.0" y="910.0"></text>
</g>
<g>
<title>BitMap::BitMap(unsigned long, bool) (1 samples, 0.24%)</title><rect x="1176.0" y="883.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="894.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.48%)</title><rect x="1178.8" y="883.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.48%)</title><rect x="1178.8" y="867.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.48%)</title><rect x="1178.8" y="851.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.8" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.48%)</title><rect x="1178.8" y="835.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.48%)</title><rect x="1178.8" y="819.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.24%)</title><rect x="1178.8" y="803.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.24%)</title><rect x="1178.8" y="787.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.24%)</title><rect x="1178.8" y="771.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.24%)</title><rect x="1178.8" y="755.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.8" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.24%)</title><rect x="1178.8" y="739.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.8" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.24%)</title><rect x="1178.8" y="723.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.24%)</title><rect x="1178.8" y="707.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.24%)</title><rect x="1178.8" y="691.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.24%)</title><rect x="1178.8" y="675.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="686.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.24%)</title><rect x="1178.8" y="659.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.8" y="670.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.24%)</title><rect x="1181.6" y="803.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="814.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.24%)</title><rect x="1181.6" y="787.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.6" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.24%)</title><rect x="1181.6" y="771.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.6" y="782.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.24%)</title><rect x="1181.6" y="755.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.6" y="766.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_virtual_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.24%)</title><rect x="1181.6" y="739.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="750.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.24%)</title><rect x="1184.4" y="915.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.4" y="926.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.24%)</title><rect x="1184.4" y="899.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="910.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.24%)</title><rect x="1184.4" y="883.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="894.0"></text>
</g>
<g>
<title>LIR_List::move(LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*) (1 samples, 0.24%)</title><rect x="1184.4" y="867.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.4" y="878.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.24%)</title><rect x="1187.2" y="1043.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.2" y="1054.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.24%)</title><rect x="1187.2" y="1027.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.2" y="1038.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.24%)</title><rect x="1187.2" y="1011.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.2" y="1022.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.24%)</title><rect x="1187.2" y="995.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.2" y="1006.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.24%)</title><rect x="1187.2" y="979.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.2" y="990.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.24%)</title><rect x="1187.2" y="963.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.2" y="974.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.24%)</title><rect x="1187.2" y="947.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.2" y="958.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.24%)</title><rect x="1187.2" y="931.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.2" y="942.0"></text>
</g>
</g>
</svg>
