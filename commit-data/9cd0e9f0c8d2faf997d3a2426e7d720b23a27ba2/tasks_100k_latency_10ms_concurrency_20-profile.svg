<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1526" onload="init(evt)" viewBox="0 0 1200 1526" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1509"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1509"> </text>
<g id="frames">
<g>
<title>all (327 samples, 100.00%)</title><rect x="10.0" y="1475.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1486.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 7.03%)</title><rect x="10.0" y="1459.0" width="83.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1470.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.61%)</title><rect x="10.0" y="1443.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.61%)</title><rect x="10.0" y="1427.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.61%)</title><rect x="10.0" y="1411.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (2 samples, 0.61%)</title><rect x="10.0" y="1395.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (2 samples, 0.61%)</title><rect x="10.0" y="1379.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.61%)</title><rect x="10.0" y="1363.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.61%)</title><rect x="10.0" y="1347.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.61%)</title><rect x="10.0" y="1331.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.31%)</title><rect x="10.0" y="1315.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.31%)</title><rect x="10.0" y="1299.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.31%)</title><rect x="10.0" y="1283.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.31%)</title><rect x="10.0" y="1267.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.31%)</title><rect x="10.0" y="1251.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.31%)</title><rect x="10.0" y="1235.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.31%)</title><rect x="10.0" y="1219.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.31%)</title><rect x="10.0" y="1203.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.31%)</title><rect x="10.0" y="1187.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.31%)</title><rect x="10.0" y="1171.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.update (1 samples, 0.31%)</title><rect x="13.6" y="1315.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.6" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 6.42%)</title><rect x="17.2" y="1443.0" width="75.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.2" y="1454.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.61%)</title><rect x="17.2" y="1427.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.2" y="1438.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.31%)</title><rect x="17.2" y="1411.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="20.2" y="1422.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.31%)</title><rect x="17.2" y="1395.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="20.2" y="1406.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.31%)</title><rect x="17.2" y="1379.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="20.2" y="1390.0"></text>
</g>
<g>
<title>JavaThread::last_frame() (1 samples, 0.31%)</title><rect x="17.2" y="1363.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="20.2" y="1374.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.31%)</title><rect x="17.2" y="1347.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="20.2" y="1358.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.31%)</title><rect x="17.2" y="1331.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="20.2" y="1342.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.31%)</title><rect x="20.8" y="1411.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.8" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$294/1207450613.accept (1 samples, 0.31%)</title><rect x="20.8" y="1395.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.8" y="1406.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 2.75%)</title><rect x="24.4" y="1427.0" width="32.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.4" y="1438.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1016149642.accept (8 samples, 2.45%)</title><rect x="24.4" y="1411.0" width="28.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.4" y="1422.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$70 (8 samples, 2.45%)</title><rect x="24.4" y="1395.0" width="28.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.4" y="1406.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.31%)</title><rect x="24.4" y="1379.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.4" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (4 samples, 1.22%)</title><rect x="28.0" y="1379.0" width="14.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.0" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (4 samples, 1.22%)</title><rect x="28.0" y="1363.0" width="14.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.0" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (4 samples, 1.22%)</title><rect x="28.0" y="1347.0" width="14.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.0" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.22%)</title><rect x="28.0" y="1331.0" width="14.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.0" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.22%)</title><rect x="28.0" y="1315.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.0" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.22%)</title><rect x="28.0" y="1299.0" width="14.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.0" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 1.22%)</title><rect x="28.0" y="1283.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.0" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 1.22%)</title><rect x="28.0" y="1267.0" width="14.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 1.22%)</title><rect x="28.0" y="1251.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 0.92%)</title><rect x="42.5" y="1379.0" width="10.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.5" y="1390.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.92%)</title><rect x="42.5" y="1363.0" width="10.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.31%)</title><rect x="53.3" y="1411.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.3" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 3.06%)</title><rect x="56.9" y="1427.0" width="36.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.9" y="1438.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 3.06%)</title><rect x="56.9" y="1411.0" width="36.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="59.9" y="1422.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 1.83%)</title><rect x="56.9" y="1395.0" width="21.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="59.9" y="1406.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.31%)</title><rect x="56.9" y="1379.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.9" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.31%)</title><rect x="56.9" y="1363.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="59.9" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.31%)</title><rect x="56.9" y="1347.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.9" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.92%)</title><rect x="60.5" y="1379.0" width="10.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.5" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.92%)</title><rect x="60.5" y="1363.0" width="10.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.61%)</title><rect x="60.5" y="1347.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.31%)</title><rect x="60.5" y="1331.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.5" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.31%)</title><rect x="60.5" y="1315.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="63.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.31%)</title><rect x="60.5" y="1299.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getOrElse (1 samples, 0.31%)</title><rect x="60.5" y="1283.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.31%)</title><rect x="60.5" y="1267.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.31%)</title><rect x="60.5" y="1251.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/Errors.forCode (1 samples, 0.31%)</title><rect x="60.5" y="1235.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.31%)</title><rect x="64.1" y="1331.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.31%)</title><rect x="64.1" y="1315.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.1" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.31%)</title><rect x="64.1" y="1299.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="67.1" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.31%)</title><rect x="64.1" y="1283.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.1" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.31%)</title><rect x="64.1" y="1267.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.1" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.31%)</title><rect x="64.1" y="1251.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$260/72457299.shouldBlock (1 samples, 0.31%)</title><rect x="67.7" y="1347.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.31%)</title><rect x="67.7" y="1331.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.31%)</title><rect x="67.7" y="1315.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.7" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.31%)</title><rect x="67.7" y="1299.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.7" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.31%)</title><rect x="67.7" y="1283.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.7" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.31%)</title><rect x="67.7" y="1267.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 0.31%)</title><rect x="71.3" y="1379.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="74.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.31%)</title><rect x="71.3" y="1363.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.31%)</title><rect x="71.3" y="1347.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.31%)</title><rect x="71.3" y="1331.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.31%)</title><rect x="71.3" y="1315.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.31%)</title><rect x="71.3" y="1299.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.31%)</title><rect x="71.3" y="1283.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.3" y="1294.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.31%)</title><rect x="71.3" y="1267.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.31%)</title><rect x="75.0" y="1379.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.31%)</title><rect x="75.0" y="1363.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.31%)</title><rect x="75.0" y="1347.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="78.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.31%)</title><rect x="75.0" y="1331.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.31%)</title><rect x="78.6" y="1395.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.6" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.31%)</title><rect x="78.6" y="1379.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.6" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.31%)</title><rect x="78.6" y="1363.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.6" y="1374.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.31%)</title><rect x="78.6" y="1347.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="81.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/1469916565.accept (1 samples, 0.31%)</title><rect x="78.6" y="1331.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="81.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.31%)</title><rect x="78.6" y="1315.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.6" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.31%)</title><rect x="78.6" y="1299.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="81.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.31%)</title><rect x="78.6" y="1283.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.31%)</title><rect x="82.2" y="1395.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.2" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.31%)</title><rect x="82.2" y="1379.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="85.2" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.31%)</title><rect x="82.2" y="1363.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="85.2" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.31%)</title><rect x="82.2" y="1347.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.2" y="1358.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.31%)</title><rect x="82.2" y="1331.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.2" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.31%)</title><rect x="82.2" y="1315.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.2" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.31%)</title><rect x="82.2" y="1299.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.2" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.31%)</title><rect x="82.2" y="1283.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="85.2" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.31%)</title><rect x="82.2" y="1267.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.2" y="1278.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_epollWait (1 samples, 0.31%)</title><rect x="82.2" y="1251.0" width="3.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="85.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.61%)</title><rect x="85.8" y="1395.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.8" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.61%)</title><rect x="85.8" y="1379.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.8" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.31%)</title><rect x="85.8" y="1363.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.8" y="1374.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.31%)</title><rect x="85.8" y="1347.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.8" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.31%)</title><rect x="85.8" y="1331.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.8" y="1342.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.31%)</title><rect x="85.8" y="1315.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="88.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.31%)</title><rect x="89.4" y="1363.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.4" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.31%)</title><rect x="89.4" y="1347.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.4" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.31%)</title><rect x="89.4" y="1331.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.4" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.31%)</title><rect x="89.4" y="1315.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.4" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.31%)</title><rect x="89.4" y="1299.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.4" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.31%)</title><rect x="89.4" y="1283.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="92.4" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.31%)</title><rect x="89.4" y="1267.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.4" y="1278.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.31%)</title><rect x="89.4" y="1251.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.4" y="1262.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.31%)</title><rect x="89.4" y="1235.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.4" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.31%)</title><rect x="89.4" y="1219.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.4" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.31%)</title><rect x="89.4" y="1203.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/1556825584.test (1 samples, 0.31%)</title><rect x="89.4" y="1187.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.31%)</title><rect x="89.4" y="1171.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2300 (1 samples, 0.31%)</title><rect x="89.4" y="1155.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="92.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.isFetchable (1 samples, 0.31%)</title><rect x="89.4" y="1139.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.4" y="1150.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.31%)</title><rect x="89.4" y="1123.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="92.4" y="1134.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.31%)</title><rect x="89.4" y="1107.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="92.4" y="1118.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.31%)</title><rect x="89.4" y="1091.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="92.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (169 samples, 51.68%)</title><rect x="93.0" y="1459.0" width="609.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="96.0" y="1470.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (169 samples, 51.68%)</title><rect x="93.0" y="1443.0" width="609.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.0" y="1454.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (169 samples, 51.68%)</title><rect x="93.0" y="1427.0" width="609.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.0" y="1438.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1106823921.run (157 samples, 48.01%)</title><rect x="93.0" y="1411.0" width="566.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="96.0" y="1422.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1106823921.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (157 samples, 48.01%)</title><rect x="93.0" y="1395.0" width="566.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.0" y="1406.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (157 samples, 48.01%)</title><rect x="93.0" y="1379.0" width="566.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.0" y="1390.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (153 samples, 46.79%)</title><rect x="93.0" y="1363.0" width="552.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="96.0" y="1374.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (37 samples, 11.31%)</title><rect x="103.8" y="1347.0" width="133.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="106.8" y="1358.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (37 samples, 11.31%)</title><rect x="103.8" y="1331.0" width="133.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.8" y="1342.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (37 samples, 11.31%)</title><rect x="103.8" y="1315.0" width="133.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="106.8" y="1326.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 11.31%)</title><rect x="103.8" y="1299.0" width="133.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.8" y="1310.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 11.31%)</title><rect x="103.8" y="1283.0" width="133.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="106.8" y="1294.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (37 samples, 11.31%)</title><rect x="103.8" y="1267.0" width="133.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="106.8" y="1278.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (9 samples, 2.75%)</title><rect x="103.8" y="1251.0" width="32.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="106.8" y="1262.0">co..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.31%)</title><rect x="118.3" y="1235.0" width="3.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="121.3" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="118.3" y="1219.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="121.3" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.61%)</title><rect x="121.9" y="1235.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="124.9" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.61%)</title><rect x="121.9" y="1219.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="124.9" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.61%)</title><rect x="121.9" y="1203.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="124.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.61%)</title><rect x="121.9" y="1187.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="124.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.61%)</title><rect x="121.9" y="1171.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="124.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.61%)</title><rect x="121.9" y="1155.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="124.9" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.61%)</title><rect x="129.1" y="1235.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.61%)</title><rect x="129.1" y="1219.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.1" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.61%)</title><rect x="129.1" y="1203.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.1" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.61%)</title><rect x="129.1" y="1187.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.1" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.61%)</title><rect x="129.1" y="1171.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.1" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.61%)</title><rect x="129.1" y="1155.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="132.1" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.61%)</title><rect x="129.1" y="1139.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="132.1" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.61%)</title><rect x="129.1" y="1123.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="132.1" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (26 samples, 7.95%)</title><rect x="136.3" y="1251.0" width="93.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="139.3" y="1262.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 1.22%)</title><rect x="136.3" y="1235.0" width="14.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="139.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 1.22%)</title><rect x="136.3" y="1219.0" width="14.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="139.3" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.61%)</title><rect x="150.7" y="1235.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="153.7" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.61%)</title><rect x="150.7" y="1219.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="153.7" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.31%)</title><rect x="154.3" y="1203.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="157.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (20 samples, 6.12%)</title><rect x="158.0" y="1235.0" width="72.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.0" y="1246.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.92%)</title><rect x="158.0" y="1219.0" width="10.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="161.0" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.61%)</title><rect x="161.6" y="1203.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="164.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.61%)</title><rect x="161.6" y="1187.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="164.6" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.61%)</title><rect x="161.6" y="1171.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="164.6" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (17 samples, 5.20%)</title><rect x="168.8" y="1219.0" width="61.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="171.8" y="1230.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (17 samples, 5.20%)</title><rect x="168.8" y="1203.0" width="61.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="171.8" y="1214.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (17 samples, 5.20%)</title><rect x="168.8" y="1187.0" width="61.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="171.8" y="1198.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.22%)</title><rect x="172.4" y="1171.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.92%)</title><rect x="176.0" y="1155.0" width="10.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="179.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.92%)</title><rect x="176.0" y="1139.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="179.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.92%)</title><rect x="176.0" y="1123.0" width="10.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.31%)</title><rect x="183.2" y="1107.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="186.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.61%)</title><rect x="186.8" y="1171.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.8" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.61%)</title><rect x="186.8" y="1155.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="189.8" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.61%)</title><rect x="186.8" y="1139.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.61%)</title><rect x="186.8" y="1123.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="189.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.61%)</title><rect x="186.8" y="1107.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.31%)</title><rect x="194.0" y="1171.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.0" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 2.14%)</title><rect x="197.6" y="1171.0" width="25.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.6" y="1182.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 2.14%)</title><rect x="197.6" y="1155.0" width="25.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.6" y="1166.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 2.14%)</title><rect x="197.6" y="1139.0" width="25.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.6" y="1150.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 2.14%)</title><rect x="197.6" y="1123.0" width="25.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.6" y="1134.0">c..</text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 2.14%)</title><rect x="197.6" y="1107.0" width="25.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.6" y="1118.0">j..</text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 2.14%)</title><rect x="197.6" y="1091.0" width="25.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="200.6" y="1102.0">s..</text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor8.newInstance (1 samples, 0.31%)</title><rect x="219.3" y="1075.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.31%)</title><rect x="222.9" y="1171.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.31%)</title><rect x="222.9" y="1155.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.9" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.31%)</title><rect x="222.9" y="1139.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.9" y="1150.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor8.newInstance (1 samples, 0.31%)</title><rect x="226.5" y="1171.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="229.5" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.61%)</title><rect x="230.1" y="1251.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.1" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.61%)</title><rect x="230.1" y="1235.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.61%)</title><rect x="230.1" y="1219.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.1" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.61%)</title><rect x="230.1" y="1203.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.61%)</title><rect x="230.1" y="1187.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (104 samples, 31.80%)</title><rect x="237.3" y="1347.0" width="375.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.3" y="1358.0">com/linecorp/decaton/processor/runtime/ProcessPipel..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (18 samples, 5.50%)</title><rect x="237.3" y="1331.0" width="65.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.3" y="1342.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (17 samples, 5.20%)</title><rect x="240.9" y="1315.0" width="61.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.9" y="1326.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (13 samples, 3.98%)</title><rect x="255.4" y="1299.0" width="46.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.4" y="1310.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.31%)</title><rect x="259.0" y="1283.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.0" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.31%)</title><rect x="259.0" y="1267.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.0" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.31%)</title><rect x="259.0" y="1251.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.0" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.31%)</title><rect x="259.0" y="1235.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.0" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 3.36%)</title><rect x="262.6" y="1283.0" width="39.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.6" y="1294.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 3.36%)</title><rect x="262.6" y="1267.0" width="39.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.6" y="1278.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 1.83%)</title><rect x="280.6" y="1251.0" width="21.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.6" y="1262.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.61%)</title><rect x="302.3" y="1331.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="305.3" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.61%)</title><rect x="302.3" y="1315.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="305.3" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.61%)</title><rect x="302.3" y="1299.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="305.3" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (15 samples, 4.59%)</title><rect x="309.5" y="1331.0" width="54.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="312.5" y="1342.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (14 samples, 4.28%)</title><rect x="309.5" y="1315.0" width="50.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.5" y="1326.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 1.83%)</title><rect x="316.7" y="1299.0" width="21.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.7" y="1310.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.53%)</title><rect x="316.7" y="1283.0" width="18.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.7" y="1294.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.53%)</title><rect x="316.7" y="1267.0" width="18.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.7" y="1278.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.22%)</title><rect x="316.7" y="1251.0" width="14.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="319.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.22%)</title><rect x="316.7" y="1235.0" width="14.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.7" y="1246.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.22%)</title><rect x="316.7" y="1219.0" width="14.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.7" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.31%)</title><rect x="323.9" y="1203.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="326.9" y="1214.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.31%)</title><rect x="323.9" y="1187.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="326.9" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.31%)</title><rect x="323.9" y="1171.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="326.9" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.31%)</title><rect x="323.9" y="1155.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="326.9" y="1166.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.31%)</title><rect x="327.6" y="1203.0" width="3.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="330.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.31%)</title><rect x="331.2" y="1251.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="334.2" y="1262.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.31%)</title><rect x="331.2" y="1235.0" width="3.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="334.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.31%)</title><rect x="334.8" y="1283.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="337.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.31%)</title><rect x="334.8" y="1267.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="337.8" y="1278.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.31%)</title><rect x="334.8" y="1251.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="337.8" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.31%)</title><rect x="334.8" y="1235.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="337.8" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.31%)</title><rect x="334.8" y="1219.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="337.8" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.31%)</title><rect x="334.8" y="1203.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="337.8" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.31%)</title><rect x="334.8" y="1187.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="337.8" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.31%)</title><rect x="334.8" y="1171.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="337.8" y="1182.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 1.83%)</title><rect x="338.4" y="1299.0" width="21.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="341.4" y="1310.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 1.83%)</title><rect x="338.4" y="1283.0" width="21.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="341.4" y="1294.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.92%)</title><rect x="338.4" y="1267.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="341.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.92%)</title><rect x="338.4" y="1251.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="341.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.92%)</title><rect x="338.4" y="1235.0" width="10.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="341.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.92%)</title><rect x="338.4" y="1219.0" width="10.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="341.4" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 0.92%)</title><rect x="349.2" y="1267.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="352.2" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.61%)</title><rect x="352.8" y="1251.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="355.8" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.61%)</title><rect x="352.8" y="1235.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="355.8" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.31%)</title><rect x="360.0" y="1315.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="363.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (58 samples, 17.74%)</title><rect x="363.6" y="1331.0" width="209.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="366.6" y="1342.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.31%)</title><rect x="367.2" y="1315.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="370.2" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (56 samples, 17.13%)</title><rect x="370.9" y="1315.0" width="202.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="373.9" y="1326.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/173717178.process (50 samples, 15.29%)</title><rect x="378.1" y="1299.0" width="180.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.1" y="1310.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (50 samples, 15.29%)</title><rect x="378.1" y="1283.0" width="180.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="381.1" y="1294.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (50 samples, 15.29%)</title><rect x="378.1" y="1267.0" width="180.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="381.1" y="1278.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (48 samples, 14.68%)</title><rect x="378.1" y="1251.0" width="173.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.1" y="1262.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.61%)</title><rect x="378.1" y="1235.0" width="7.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="381.1" y="1246.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.61%)</title><rect x="378.1" y="1219.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="381.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (45 samples, 13.76%)</title><rect x="385.3" y="1235.0" width="162.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.3" y="1246.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (39 samples, 11.93%)</title><rect x="396.1" y="1219.0" width="140.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="399.1" y="1230.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.31%)</title><rect x="410.6" y="1203.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="413.6" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="414.2" y="1203.0" width="3.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="417.2" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.61%)</title><rect x="417.8" y="1203.0" width="7.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="420.8" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="421.4" y="1187.0" width="3.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="424.4" y="1198.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.61%)</title><rect x="425.0" y="1203.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="428.0" y="1214.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (29 samples, 8.87%)</title><rect x="432.2" y="1203.0" width="104.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="435.2" y="1214.0">os::sleep(Th..</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.31%)</title><rect x="443.0" y="1187.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="446.0" y="1198.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.61%)</title><rect x="446.6" y="1187.0" width="7.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="449.6" y="1198.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 4.28%)</title><rect x="453.9" y="1187.0" width="50.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="456.9" y="1198.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 1.22%)</title><rect x="504.4" y="1187.0" width="14.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="507.4" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.31%)</title><rect x="518.8" y="1187.0" width="3.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="521.8" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.92%)</title><rect x="522.4" y="1187.0" width="10.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="525.4" y="1198.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.31%)</title><rect x="533.2" y="1187.0" width="3.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="536.2" y="1198.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.31%)</title><rect x="536.9" y="1219.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="539.9" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.31%)</title><rect x="540.5" y="1219.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="543.5" y="1230.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.31%)</title><rect x="544.1" y="1219.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="547.1" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.31%)</title><rect x="547.7" y="1235.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="550.7" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="547.7" y="1219.0" width="3.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="550.7" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.61%)</title><rect x="551.3" y="1251.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="554.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.31%)</title><rect x="554.9" y="1235.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="557.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.31%)</title><rect x="554.9" y="1219.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="557.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.31%)</title><rect x="554.9" y="1203.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="557.9" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.31%)</title><rect x="558.5" y="1299.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="561.5" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.31%)</title><rect x="558.5" y="1283.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="561.5" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.61%)</title><rect x="562.1" y="1299.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="565.1" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.61%)</title><rect x="562.1" y="1283.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="565.1" y="1294.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.61%)</title><rect x="562.1" y="1267.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="565.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.31%)</title><rect x="569.3" y="1299.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="572.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.31%)</title><rect x="572.9" y="1331.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="575.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 3.06%)</title><rect x="576.5" y="1331.0" width="36.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="579.5" y="1342.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 3.06%)</title><rect x="576.5" y="1315.0" width="36.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="579.5" y="1326.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.92%)</title><rect x="601.8" y="1299.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="604.8" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1044983158.accept (2 samples, 0.61%)</title><rect x="601.8" y="1283.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="604.8" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (2 samples, 0.61%)</title><rect x="601.8" y="1267.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="604.8" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.61%)</title><rect x="601.8" y="1251.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="604.8" y="1262.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.61%)</title><rect x="601.8" y="1235.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="604.8" y="1246.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.61%)</title><rect x="601.8" y="1219.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="604.8" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/504637322.accept (1 samples, 0.31%)</title><rect x="609.0" y="1283.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="612.0" y="1294.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.31%)</title><rect x="609.0" y="1267.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="612.0" y="1278.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.31%)</title><rect x="609.0" y="1251.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="612.0" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.31%)</title><rect x="609.0" y="1235.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="612.0" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.31%)</title><rect x="609.0" y="1219.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="612.0" y="1230.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.31%)</title><rect x="609.0" y="1203.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="612.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 2.75%)</title><rect x="612.6" y="1347.0" width="32.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="615.6" y="1358.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 2.75%)</title><rect x="612.6" y="1331.0" width="32.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="615.6" y="1342.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.31%)</title><rect x="616.2" y="1315.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="619.2" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 2.14%)</title><rect x="619.8" y="1315.0" width="25.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="622.8" y="1326.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1044983158.accept (7 samples, 2.14%)</title><rect x="619.8" y="1299.0" width="25.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="622.8" y="1310.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (7 samples, 2.14%)</title><rect x="619.8" y="1283.0" width="25.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="622.8" y="1294.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (7 samples, 2.14%)</title><rect x="619.8" y="1267.0" width="25.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="622.8" y="1278.0">c..</text>
</g>
<g>
<title>java/time/Duration.ofNanos (7 samples, 2.14%)</title><rect x="619.8" y="1251.0" width="25.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="622.8" y="1262.0">j..</text>
</g>
<g>
<title>java/time/Duration.create (7 samples, 2.14%)</title><rect x="619.8" y="1235.0" width="25.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="622.8" y="1246.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 1.22%)</title><rect x="645.1" y="1363.0" width="14.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="648.1" y="1374.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.31%)</title><rect x="655.9" y="1347.0" width="3.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="658.9" y="1358.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="655.9" y="1331.0" width="3.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="658.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (12 samples, 3.67%)</title><rect x="659.5" y="1411.0" width="43.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="662.5" y="1422.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (9 samples, 2.75%)</title><rect x="670.4" y="1395.0" width="32.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="673.4" y="1406.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 2.14%)</title><rect x="677.6" y="1379.0" width="25.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="680.6" y="1390.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 2.14%)</title><rect x="677.6" y="1363.0" width="25.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="680.6" y="1374.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 2.14%)</title><rect x="677.6" y="1347.0" width="25.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="680.6" y="1358.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 2.14%)</title><rect x="677.6" y="1331.0" width="25.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="680.6" y="1342.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.31%)</title><rect x="702.8" y="1459.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="705.8" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.sessionTimeoutExpired (1 samples, 0.31%)</title><rect x="702.8" y="1443.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="705.8" y="1454.0"></text>
</g>
<g>
<title>start_thread (134 samples, 40.98%)</title><rect x="706.5" y="1459.0" width="483.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="709.5" y="1470.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (134 samples, 40.98%)</title><rect x="706.5" y="1443.0" width="483.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="709.5" y="1454.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 3.06%)</title><rect x="706.5" y="1427.0" width="36.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="709.5" y="1438.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 3.06%)</title><rect x="706.5" y="1411.0" width="36.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="709.5" y="1422.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 2.45%)</title><rect x="706.5" y="1395.0" width="28.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="709.5" y="1406.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 2.45%)</title><rect x="706.5" y="1379.0" width="28.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="709.5" y="1390.0">G1..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.31%)</title><rect x="713.7" y="1363.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="716.7" y="1374.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.61%)</title><rect x="717.3" y="1363.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="720.3" y="1374.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.31%)</title><rect x="720.9" y="1347.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="723.9" y="1358.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.31%)</title><rect x="724.5" y="1363.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="727.5" y="1374.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.61%)</title><rect x="728.1" y="1363.0" width="7.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="731.1" y="1374.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.31%)</title><rect x="735.3" y="1395.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="738.3" y="1406.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.31%)</title><rect x="735.3" y="1379.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="738.3" y="1390.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.31%)</title><rect x="735.3" y="1363.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="738.3" y="1374.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.31%)</title><rect x="738.9" y="1395.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="741.9" y="1406.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.31%)</title><rect x="738.9" y="1379.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="741.9" y="1390.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.31%)</title><rect x="738.9" y="1363.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="741.9" y="1374.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.31%)</title><rect x="738.9" y="1347.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="741.9" y="1358.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.31%)</title><rect x="738.9" y="1331.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="741.9" y="1342.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.31%)</title><rect x="738.9" y="1315.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="741.9" y="1326.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.31%)</title><rect x="738.9" y="1299.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="741.9" y="1310.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.31%)</title><rect x="738.9" y="1283.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="741.9" y="1294.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.31%)</title><rect x="738.9" y="1267.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="741.9" y="1278.0"></text>
</g>
<g>
<title>JavaThread::run() (124 samples, 37.92%)</title><rect x="742.5" y="1427.0" width="447.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="745.5" y="1438.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (124 samples, 37.92%)</title><rect x="742.5" y="1411.0" width="447.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="745.5" y="1422.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (124 samples, 37.92%)</title><rect x="742.5" y="1395.0" width="447.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="745.5" y="1406.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (124 samples, 37.92%)</title><rect x="742.5" y="1379.0" width="447.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="745.5" y="1390.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (121 samples, 37.00%)</title><rect x="742.5" y="1363.0" width="436.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="745.5" y="1374.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (121 samples, 37.00%)</title><rect x="742.5" y="1347.0" width="436.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="745.5" y="1358.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (59 samples, 18.04%)</title><rect x="742.5" y="1331.0" width="212.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="745.5" y="1342.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.31%)</title><rect x="742.5" y="1315.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="745.5" y="1326.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.31%)</title><rect x="742.5" y="1299.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="745.5" y="1310.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.92%)</title><rect x="746.1" y="1315.0" width="10.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="749.1" y="1326.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.31%)</title><rect x="749.8" y="1299.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="752.8" y="1310.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.31%)</title><rect x="749.8" y="1283.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="752.8" y="1294.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.31%)</title><rect x="749.8" y="1267.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="752.8" y="1278.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.31%)</title><rect x="753.4" y="1299.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="756.4" y="1310.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.31%)</title><rect x="753.4" y="1283.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="756.4" y="1294.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 2.14%)</title><rect x="757.0" y="1315.0" width="25.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="760.0" y="1326.0">M..</text>
</g>
<g>
<title>Matcher::Fixup_Save_On_Entry() (1 samples, 0.31%)</title><rect x="757.0" y="1299.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="760.0" y="1310.0"></text>
</g>
<g>
<title>Matcher::init_first_stack_mask() (1 samples, 0.31%)</title><rect x="757.0" y="1283.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="760.0" y="1294.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.31%)</title><rect x="760.6" y="1299.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="763.6" y="1310.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.31%)</title><rect x="760.6" y="1283.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="763.6" y="1294.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.53%)</title><rect x="764.2" y="1299.0" width="18.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="767.2" y="1310.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.92%)</title><rect x="764.2" y="1283.0" width="10.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="767.2" y="1294.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.61%)</title><rect x="775.0" y="1283.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="778.0" y="1294.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.31%)</title><rect x="778.6" y="1267.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="781.6" y="1278.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.31%)</title><rect x="778.6" y="1251.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="781.6" y="1262.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.31%)</title><rect x="778.6" y="1235.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="781.6" y="1246.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.31%)</title><rect x="778.6" y="1219.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="781.6" y="1230.0"></text>
</g>
<g>
<title>TypeLong::singleton() const (1 samples, 0.31%)</title><rect x="778.6" y="1203.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="781.6" y="1214.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.31%)</title><rect x="782.2" y="1315.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="785.2" y="1326.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 0.31%)</title><rect x="782.2" y="1299.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="785.2" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.61%)</title><rect x="785.8" y="1315.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="788.8" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.31%)</title><rect x="785.8" y="1299.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="788.8" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::create_loop_tree() (1 samples, 0.31%)</title><rect x="785.8" y="1283.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="788.8" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.31%)</title><rect x="789.4" y="1299.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="792.4" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.31%)</title><rect x="789.4" y="1283.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="792.4" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (44 samples, 13.46%)</title><rect x="793.1" y="1315.0" width="158.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="796.1" y="1326.0">PhaseChaitin::Regist..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.31%)</title><rect x="793.1" y="1299.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="796.1" y="1310.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.31%)</title><rect x="796.7" y="1299.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="799.7" y="1310.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.31%)</title><rect x="796.7" y="1283.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="799.7" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.92%)</title><rect x="800.3" y="1299.0" width="10.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="803.3" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.31%)</title><rect x="803.9" y="1283.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="806.9" y="1294.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.31%)</title><rect x="807.5" y="1283.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="810.5" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.31%)</title><rect x="811.1" y="1299.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="814.1" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.31%)</title><rect x="811.1" y="1283.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="814.1" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.53%)</title><rect x="814.7" y="1299.0" width="18.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="817.7" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (2 samples, 0.61%)</title><rect x="825.5" y="1283.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="828.5" y="1294.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.31%)</title><rect x="825.5" y="1267.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="828.5" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.31%)</title><rect x="829.1" y="1267.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="832.1" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 3.06%)</title><rect x="832.8" y="1299.0" width="36.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="835.8" y="1310.0">Pha..</text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.31%)</title><rect x="840.0" y="1283.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="843.0" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 1.53%)</title><rect x="843.6" y="1283.0" width="18.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="846.6" y="1294.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.31%)</title><rect x="858.0" y="1267.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="861.0" y="1278.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.61%)</title><rect x="861.6" y="1283.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="864.6" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.61%)</title><rect x="868.8" y="1299.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="871.8" y="1310.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.31%)</title><rect x="868.8" y="1283.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="871.8" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.31%)</title><rect x="872.4" y="1283.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="875.4" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.61%)</title><rect x="876.1" y="1299.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="879.1" y="1310.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.31%)</title><rect x="879.7" y="1283.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="882.7" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.31%)</title><rect x="883.3" y="1299.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="886.3" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.31%)</title><rect x="883.3" y="1283.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="886.3" y="1294.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.31%)</title><rect x="883.3" y="1267.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="886.3" y="1278.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (11 samples, 3.36%)</title><rect x="886.9" y="1299.0" width="39.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="889.9" y="1310.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (11 samples, 3.36%)</title><rect x="886.9" y="1283.0" width="39.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="889.9" y="1294.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (11 samples, 3.36%)</title><rect x="886.9" y="1267.0" width="39.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="889.9" y="1278.0">Pha..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.92%)</title><rect x="886.9" y="1251.0" width="10.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="889.9" y="1262.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (1 samples, 0.31%)</title><rect x="897.7" y="1251.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="900.7" y="1262.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.31%)</title><rect x="897.7" y="1235.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="900.7" y="1246.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (6 samples, 1.83%)</title><rect x="901.3" y="1251.0" width="21.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="904.3" y="1262.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.31%)</title><rect x="919.4" y="1235.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="922.4" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.31%)</title><rect x="923.0" y="1251.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="926.0" y="1262.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.31%)</title><rect x="926.6" y="1299.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="929.6" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.31%)</title><rect x="926.6" y="1283.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="929.6" y="1294.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.31%)</title><rect x="930.2" y="1299.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="933.2" y="1310.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.31%)</title><rect x="930.2" y="1283.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="933.2" y="1294.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.22%)</title><rect x="933.8" y="1299.0" width="14.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="936.8" y="1310.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.92%)</title><rect x="937.4" y="1283.0" width="10.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="940.4" y="1294.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.31%)</title><rect x="941.0" y="1267.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.0" y="1278.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.31%)</title><rect x="941.0" y="1251.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="944.0" y="1262.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.31%)</title><rect x="944.6" y="1267.0" width="3.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="947.6" y="1278.0"></text>
</g>
<g>
<title>testP_regNode::out_RegMask() const (1 samples, 0.31%)</title><rect x="948.2" y="1299.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="951.2" y="1310.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.31%)</title><rect x="951.8" y="1315.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="954.8" y="1326.0"></text>
</g>
<g>
<title>Compile::Optimize() (55 samples, 16.82%)</title><rect x="955.4" y="1331.0" width="198.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="958.4" y="1342.0">Compile::Optimize()</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (46 samples, 14.07%)</title><rect x="955.4" y="1315.0" width="166.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="958.4" y="1326.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.31%)</title><rect x="955.4" y="1299.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="958.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.61%)</title><rect x="959.1" y="1299.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="962.1" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.31%)</title><rect x="966.3" y="1299.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="969.3" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (41 samples, 12.54%)</title><rect x="969.9" y="1299.0" width="147.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.9" y="1310.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (40 samples, 12.23%)</title><rect x="969.9" y="1283.0" width="144.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="972.9" y="1294.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 2.14%)</title><rect x="969.9" y="1267.0" width="25.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.9" y="1278.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (33 samples, 10.09%)</title><rect x="995.1" y="1267.0" width="119.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="998.1" y="1278.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.61%)</title><rect x="1089.0" y="1251.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1092.0" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.61%)</title><rect x="1089.0" y="1235.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.0" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.31%)</title><rect x="1092.6" y="1219.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.6" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 1.53%)</title><rect x="1096.2" y="1251.0" width="18.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.2" y="1262.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.31%)</title><rect x="1114.2" y="1283.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.2" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.31%)</title><rect x="1117.8" y="1299.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.8" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.31%)</title><rect x="1117.8" y="1283.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.8" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.31%)</title><rect x="1117.8" y="1267.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1120.8" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.31%)</title><rect x="1117.8" y="1251.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.8" y="1262.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.31%)</title><rect x="1117.8" y="1235.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1120.8" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 2.75%)</title><rect x="1121.4" y="1315.0" width="32.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.4" y="1326.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 2.75%)</title><rect x="1121.4" y="1299.0" width="32.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.4" y="1310.0">Ph..</text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1125.0" y="1283.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.0" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.92%)</title><rect x="1128.7" y="1283.0" width="10.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.7" y="1294.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.31%)</title><rect x="1135.9" y="1267.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.9" y="1278.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.92%)</title><rect x="1139.5" y="1283.0" width="10.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.5" y="1294.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.31%)</title><rect x="1143.1" y="1267.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.1" y="1278.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.31%)</title><rect x="1143.1" y="1251.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.1" y="1262.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.31%)</title><rect x="1143.1" y="1235.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.1" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.31%)</title><rect x="1146.7" y="1267.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.7" y="1278.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.31%)</title><rect x="1146.7" y="1251.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.7" y="1262.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1150.3" y="1283.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.3" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.31%)</title><rect x="1150.3" y="1267.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.3" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.31%)</title><rect x="1150.3" y="1251.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.3" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.31%)</title><rect x="1150.3" y="1235.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.3" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.31%)</title><rect x="1150.3" y="1219.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.3" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.31%)</title><rect x="1150.3" y="1203.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.3" y="1214.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.31%)</title><rect x="1150.3" y="1187.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.3" y="1198.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.31%)</title><rect x="1150.3" y="1171.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.3" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.22%)</title><rect x="1153.9" y="1331.0" width="14.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.9" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.22%)</title><rect x="1153.9" y="1315.0" width="14.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.9" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.22%)</title><rect x="1153.9" y="1299.0" width="14.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.22%)</title><rect x="1153.9" y="1283.0" width="14.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.22%)</title><rect x="1153.9" y="1267.0" width="14.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.22%)</title><rect x="1153.9" y="1251.0" width="14.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.9" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1153.9" y="1235.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.9" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1153.9" y="1219.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.9" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1153.9" y="1203.0" width="7.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1153.9" y="1187.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1153.9" y="1171.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1153.9" y="1155.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.9" y="1166.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1153.9" y="1139.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.9" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1153.9" y="1123.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.9" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1153.9" y="1107.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1153.9" y="1091.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1153.9" y="1075.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1153.9" y="1059.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1153.9" y="1043.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.9" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1153.9" y="1027.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.9" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1153.9" y="1011.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1153.9" y="995.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1153.9" y="979.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1153.9" y="963.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1153.9" y="947.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.9" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1153.9" y="931.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.9" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1153.9" y="915.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1153.9" y="899.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1153.9" y="883.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1153.9" y="867.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1153.9" y="851.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1153.9" y="835.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1153.9" y="819.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1153.9" y="803.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1153.9" y="787.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1153.9" y="771.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1153.9" y="755.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1153.9" y="739.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1153.9" y="723.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1153.9" y="707.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1153.9" y="691.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1153.9" y="675.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1153.9" y="659.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1153.9" y="643.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1153.9" y="627.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1153.9" y="611.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1153.9" y="595.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1153.9" y="579.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1153.9" y="563.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.9" y="574.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.31%)</title><rect x="1153.9" y="547.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.9" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.31%)</title><rect x="1153.9" y="531.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.9" y="542.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.31%)</title><rect x="1153.9" y="515.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.9" y="526.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.31%)</title><rect x="1153.9" y="499.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.9" y="510.0"></text>
</g>
<g>
<title>is_init_with_ea(ciMethod*, ciMethod*, Compile*) (1 samples, 0.31%)</title><rect x="1153.9" y="483.0" width="3.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1156.9" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1157.5" y="547.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.5" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1157.5" y="531.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.5" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1157.5" y="515.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.5" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1157.5" y="499.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1157.5" y="483.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1157.5" y="467.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1157.5" y="451.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1157.5" y="435.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1157.5" y="419.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1157.5" y="403.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1157.5" y="387.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1157.5" y="371.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1157.5" y="355.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1157.5" y="339.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.5" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.31%)</title><rect x="1157.5" y="323.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.5" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.31%)</title><rect x="1157.5" y="307.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.5" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.31%)</title><rect x="1157.5" y="291.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.5" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.31%)</title><rect x="1157.5" y="275.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.5" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.31%)</title><rect x="1157.5" y="259.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.5" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.31%)</title><rect x="1157.5" y="243.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.5" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.31%)</title><rect x="1157.5" y="227.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.31%)</title><rect x="1157.5" y="211.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.5" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.31%)</title><rect x="1157.5" y="195.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.5" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.31%)</title><rect x="1157.5" y="179.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.5" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1157.5" y="163.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.31%)</title><rect x="1157.5" y="147.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.5" y="158.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.31%)</title><rect x="1157.5" y="131.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.5" y="142.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.31%)</title><rect x="1157.5" y="115.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.5" y="126.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.31%)</title><rect x="1157.5" y="99.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="110.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.31%)</title><rect x="1157.5" y="83.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.5" y="94.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.31%)</title><rect x="1157.5" y="67.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.5" y="78.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.31%)</title><rect x="1157.5" y="51.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.5" y="62.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.31%)</title><rect x="1157.5" y="35.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.5" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1161.1" y="1235.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.1" y="1246.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.31%)</title><rect x="1161.1" y="1219.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.1" y="1230.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.31%)</title><rect x="1161.1" y="1203.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.1" y="1214.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.31%)</title><rect x="1161.1" y="1187.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.1" y="1198.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.31%)</title><rect x="1161.1" y="1171.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.1" y="1182.0"></text>
</g>
<g>
<title>ciKlass::is_subtype_of(ciKlass*) (1 samples, 0.31%)</title><rect x="1161.1" y="1155.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.1" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1164.7" y="1219.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.7" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1164.7" y="1203.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.7" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1164.7" y="1187.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1164.7" y="1171.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1164.7" y="1155.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1164.7" y="1139.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.7" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1164.7" y="1123.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.7" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1164.7" y="1107.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1164.7" y="1091.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1164.7" y="1075.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1164.7" y="1059.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1164.7" y="1043.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.7" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1164.7" y="1027.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.7" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1164.7" y="1011.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1164.7" y="995.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1164.7" y="979.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1164.7" y="963.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.31%)</title><rect x="1164.7" y="947.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="958.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.31%)</title><rect x="1164.7" y="931.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.7" y="942.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.31%)</title><rect x="1164.7" y="915.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.7" y="926.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.31%)</title><rect x="1164.7" y="899.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.7" y="910.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.31%)</title><rect x="1164.7" y="883.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.7" y="894.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.31%)</title><rect x="1164.7" y="867.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.7" y="878.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.61%)</title><rect x="1168.3" y="1331.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.3" y="1342.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.31%)</title><rect x="1172.0" y="1315.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.0" y="1326.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.31%)</title><rect x="1175.6" y="1331.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.6" y="1342.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.31%)</title><rect x="1175.6" y="1315.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.6" y="1326.0"></text>
</g>
<g>
<title>Dependencies::DepStream::context_type() (1 samples, 0.31%)</title><rect x="1175.6" y="1299.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.6" y="1310.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.92%)</title><rect x="1179.2" y="1363.0" width="10.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.2" y="1374.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.92%)</title><rect x="1179.2" y="1347.0" width="10.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.2" y="1358.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.92%)</title><rect x="1179.2" y="1331.0" width="10.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.2" y="1342.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.92%)</title><rect x="1179.2" y="1315.0" width="10.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="1326.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.31%)</title><rect x="1179.2" y="1299.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.2" y="1310.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.31%)</title><rect x="1179.2" y="1283.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.2" y="1294.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.31%)</title><rect x="1179.2" y="1267.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.2" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.31%)</title><rect x="1179.2" y="1251.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.2" y="1262.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.31%)</title><rect x="1179.2" y="1235.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.2" y="1246.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.31%)</title><rect x="1179.2" y="1219.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.2" y="1230.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.31%)</title><rect x="1179.2" y="1203.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.2" y="1214.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.31%)</title><rect x="1179.2" y="1187.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.2" y="1198.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.31%)</title><rect x="1182.8" y="1299.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="1310.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.31%)</title><rect x="1182.8" y="1283.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="1294.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.31%)</title><rect x="1182.8" y="1267.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="1278.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.31%)</title><rect x="1182.8" y="1251.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="1262.0"></text>
</g>
<g>
<title>LIR_OpVisitState::do_input(LIR_OprDesc*&amp;) (1 samples, 0.31%)</title><rect x="1182.8" y="1235.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="1246.0"></text>
</g>
<g>
<title>FrameMap::FrameMap(ciMethod*, int, int) (1 samples, 0.31%)</title><rect x="1186.4" y="1299.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.4" y="1310.0"></text>
</g>
<g>
<title>FrameMap::java_calling_convention(BasicTypeArray const*, bool) (1 samples, 0.31%)</title><rect x="1186.4" y="1283.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.4" y="1294.0"></text>
</g>
<g>
<title>SharedRuntime::java_calling_convention(BasicType const*, VMRegPair*, int, int) (1 samples, 0.31%)</title><rect x="1186.4" y="1267.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.4" y="1278.0"></text>
</g>
</g>
</svg>
