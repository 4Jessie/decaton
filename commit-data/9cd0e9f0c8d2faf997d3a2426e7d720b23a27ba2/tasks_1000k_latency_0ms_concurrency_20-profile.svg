<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,303 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2035.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2019.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2003.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1987.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1971.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1955.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1939.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1923.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1907.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1875.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1795.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1779.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1763.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1747.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1731.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1715.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1699.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1683.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1667.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1651.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1635.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1619.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1603.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1587.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1571.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1555.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1539.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1523.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1507.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1491.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1475.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1459.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1443.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1427.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1411.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1395.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1379.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1363.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1347.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1331.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1315.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1299.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1283.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1267.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1251.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1235.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1203.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1171.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1155.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1107.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1075.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1043.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1027.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1011.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="931.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="915.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="899.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="867.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="835.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="771.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="755.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="707.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="691.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="675.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="643.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="627.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="611.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="595.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="579.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="563.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="547.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="531.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="515.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="499.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="483.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="467.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="451.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="435.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="419.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="403.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="387.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="371.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="355.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="339.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="323.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="307.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="291.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="275.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="259.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="243.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="227.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="211.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="195.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="179.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="163.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="147.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="131.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="115.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="99.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="83.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="67.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="51.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="35.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (269 samples, 20.64%)</title><rect x="10.9" y="2035.0" width="243.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.9" y="2046.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (267 samples, 20.49%)</title><rect x="10.9" y="2019.0" width="241.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.9" y="2030.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (11 samples, 0.84%)</title><rect x="10.9" y="2003.0" width="10.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.9" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (11 samples, 0.84%)</title><rect x="10.9" y="1987.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.9" y="1998.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="11.8" y="1971.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="14.8" y="1982.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="11.8" y="1955.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="14.8" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1803073465.accept (9 samples, 0.69%)</title><rect x="12.7" y="1971.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.7" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (9 samples, 0.69%)</title><rect x="12.7" y="1955.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.7" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (9 samples, 0.69%)</title><rect x="12.7" y="1939.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.7" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.38%)</title><rect x="16.3" y="1923.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.3" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.08%)</title><rect x="20.9" y="2003.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.9" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.08%)</title><rect x="20.9" y="1987.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.9" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="20.9" y="1971.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.9" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="20.9" y="1955.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.9" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="20.9" y="1939.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.9" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.08%)</title><rect x="21.8" y="2003.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.8" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="21.8" y="1987.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.8" y="1998.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (206 samples, 15.81%)</title><rect x="22.7" y="2003.0" width="186.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="25.7" y="2014.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1760100634.accept (203 samples, 15.58%)</title><rect x="22.7" y="1987.0" width="183.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.7" y="1998.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$70 (203 samples, 15.58%)</title><rect x="22.7" y="1971.0" width="183.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.7" y="1982.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.08%)</title><rect x="22.7" y="1955.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.7" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (159 samples, 12.20%)</title><rect x="23.6" y="1955.0" width="144.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.6" y="1966.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (159 samples, 12.20%)</title><rect x="23.6" y="1939.0" width="144.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.6" y="1950.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (159 samples, 12.20%)</title><rect x="23.6" y="1923.0" width="144.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.6" y="1934.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (159 samples, 12.20%)</title><rect x="23.6" y="1907.0" width="144.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.6" y="1918.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (159 samples, 12.20%)</title><rect x="23.6" y="1891.0" width="144.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.6" y="1902.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (159 samples, 12.20%)</title><rect x="23.6" y="1875.0" width="144.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.6" y="1886.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (114 samples, 8.75%)</title><rect x="23.6" y="1859.0" width="103.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.6" y="1870.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (18 samples, 1.38%)</title><rect x="23.6" y="1843.0" width="16.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.6" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (18 samples, 1.38%)</title><rect x="23.6" y="1827.0" width="16.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.6" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (11 samples, 0.84%)</title><rect x="29.9" y="1811.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.9" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (11 samples, 0.84%)</title><rect x="29.9" y="1795.0" width="10.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.9" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.69%)</title><rect x="39.9" y="1843.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.9" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (9 samples, 0.69%)</title><rect x="39.9" y="1827.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.9" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.23%)</title><rect x="42.6" y="1811.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="45.6" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.23%)</title><rect x="42.6" y="1795.0" width="2.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="45.6" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.23%)</title><rect x="45.3" y="1811.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="48.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (87 samples, 6.68%)</title><rect x="48.0" y="1843.0" width="78.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.0" y="1854.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (87 samples, 6.68%)</title><rect x="48.0" y="1827.0" width="78.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="51.0" y="1838.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (84 samples, 6.45%)</title><rect x="48.9" y="1811.0" width="76.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.9" y="1822.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (84 samples, 6.45%)</title><rect x="48.9" y="1795.0" width="76.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.9" y="1806.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (83 samples, 6.37%)</title><rect x="49.8" y="1779.0" width="75.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.8" y="1790.0">sun/misc..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.15%)</title><rect x="49.8" y="1763.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="52.8" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (72 samples, 5.53%)</title><rect x="51.7" y="1763.0" width="65.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="54.7" y="1774.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.15%)</title><rect x="53.5" y="1747.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="56.5" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.15%)</title><rect x="55.3" y="1747.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="58.3" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="57.1" y="1747.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="60.1" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (43 samples, 3.30%)</title><rect x="58.0" y="1747.0" width="38.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="61.0" y="1758.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (6 samples, 0.46%)</title><rect x="96.9" y="1747.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="99.9" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (16 samples, 1.23%)</title><rect x="102.4" y="1747.0" width="14.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="105.4" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 0.54%)</title><rect x="116.9" y="1763.0" width="6.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="119.9" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.15%)</title><rect x="123.2" y="1763.0" width="1.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="126.2" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.15%)</title><rect x="125.0" y="1811.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="128.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.31%)</title><rect x="126.8" y="1859.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="129.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.31%)</title><rect x="126.8" y="1843.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="129.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.31%)</title><rect x="126.8" y="1827.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="129.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (41 samples, 3.15%)</title><rect x="130.4" y="1859.0" width="37.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="133.4" y="1870.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (41 samples, 3.15%)</title><rect x="130.4" y="1843.0" width="37.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="133.4" y="1854.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="130.4" y="1827.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="133.4" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="130.4" y="1811.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="133.4" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (40 samples, 3.07%)</title><rect x="131.4" y="1827.0" width="36.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="134.4" y="1838.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.08%)</title><rect x="166.7" y="1811.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="169.7" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (18 samples, 1.38%)</title><rect x="167.6" y="1955.0" width="16.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="170.6" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (14 samples, 1.07%)</title><rect x="171.2" y="1939.0" width="12.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="174.2" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.isRegressing (1 samples, 0.08%)</title><rect x="183.0" y="1923.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.0" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.15%)</title><rect x="183.9" y="1955.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.9" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.15%)</title><rect x="183.9" y="1939.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="186.9" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.15%)</title><rect x="183.9" y="1923.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.9" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (23 samples, 1.77%)</title><rect x="185.7" y="1955.0" width="20.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.7" y="1966.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="185.7" y="1939.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.7" y="1950.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (21 samples, 1.61%)</title><rect x="186.6" y="1939.0" width="19.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.6" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (16 samples, 1.23%)</title><rect x="189.3" y="1923.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.3" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.61%)</title><rect x="193.8" y="1907.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.8" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.61%)</title><rect x="193.8" y="1891.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.8" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.61%)</title><rect x="193.8" y="1875.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.8" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="199.3" y="1859.0" width="1.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="202.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="201.1" y="1907.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.1" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.08%)</title><rect x="202.0" y="1907.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.0" y="1918.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="202.9" y="1907.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="205.9" y="1918.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="203.8" y="1923.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="206.8" y="1934.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="204.7" y="1923.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="207.7" y="1934.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="205.6" y="1939.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="208.6" y="1950.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="206.5" y="1987.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="209.5" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.15%)</title><rect x="207.4" y="1987.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="210.4" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.15%)</title><rect x="207.4" y="1971.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="210.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.15%)</title><rect x="207.4" y="1955.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="210.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.15%)</title><rect x="207.4" y="1939.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.4" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.15%)</title><rect x="207.4" y="1923.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="210.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (48 samples, 3.68%)</title><rect x="209.2" y="2003.0" width="43.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="212.2" y="2014.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (47 samples, 3.61%)</title><rect x="209.2" y="1987.0" width="42.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="212.2" y="1998.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (31 samples, 2.38%)</title><rect x="209.2" y="1971.0" width="28.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="212.2" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.15%)</title><rect x="209.2" y="1955.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (2 samples, 0.15%)</title><rect x="209.2" y="1939.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="212.2" y="1950.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="209.2" y="1923.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="212.2" y="1934.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (1 samples, 0.08%)</title><rect x="209.2" y="1907.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="212.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="210.1" y="1923.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="213.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (29 samples, 2.23%)</title><rect x="211.0" y="1955.0" width="26.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="214.0" y="1966.0">o..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="211.0" y="1939.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="214.0" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="211.0" y="1923.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="214.0" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.08%)</title><rect x="211.0" y="1907.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="214.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (28 samples, 2.15%)</title><rect x="211.9" y="1939.0" width="25.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="214.9" y="1950.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 2.00%)</title><rect x="211.9" y="1923.0" width="23.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="214.9" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.00%)</title><rect x="211.9" y="1907.0" width="23.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="214.9" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (13 samples, 1.00%)</title><rect x="213.8" y="1891.0" width="11.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.23%)</title><rect x="222.8" y="1875.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.23%)</title><rect x="222.8" y="1859.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="225.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.23%)</title><rect x="222.8" y="1843.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="225.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.23%)</title><rect x="222.8" y="1827.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.23%)</title><rect x="222.8" y="1811.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="225.8" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.23%)</title><rect x="222.8" y="1795.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="225.8" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.23%)</title><rect x="222.8" y="1779.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.8" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 0.84%)</title><rect x="225.5" y="1891.0" width="10.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 0.84%)</title><rect x="225.5" y="1875.0" width="10.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.5" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="225.5" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="228.5" y="1870.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="225.5" y="1843.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="228.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (10 samples, 0.77%)</title><rect x="226.4" y="1859.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.4" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (10 samples, 0.77%)</title><rect x="226.4" y="1843.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="229.4" y="1854.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (9 samples, 0.69%)</title><rect x="227.3" y="1827.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.3" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (9 samples, 0.69%)</title><rect x="227.3" y="1811.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.3" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (9 samples, 0.69%)</title><rect x="227.3" y="1795.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="230.3" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (9 samples, 0.69%)</title><rect x="227.3" y="1779.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="230.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="235.5" y="1923.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="235.5" y="1907.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="235.5" y="1891.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="235.5" y="1875.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="235.5" y="1859.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="235.5" y="1843.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.08%)</title><rect x="236.4" y="1923.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="236.4" y="1907.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.46%)</title><rect x="237.3" y="1971.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.46%)</title><rect x="237.3" y="1955.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="240.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.31%)</title><rect x="237.3" y="1939.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.3" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.15%)</title><rect x="238.2" y="1923.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/1399062122.accept (2 samples, 0.15%)</title><rect x="238.2" y="1907.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.08%)</title><rect x="239.1" y="1891.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="239.1" y="1875.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="239.1" y="1859.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="239.1" y="1843.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="239.1" y="1827.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.1" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="239.1" y="1811.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.08%)</title><rect x="240.0" y="1923.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.08%)</title><rect x="240.0" y="1907.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.0" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="240.0" y="1891.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.0" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="240.0" y="1875.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="243.0" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="240.0" y="1859.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.0" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="240.0" y="1843.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.0" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="240.0" y="1827.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.0" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="240.0" y="1811.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.0" y="1822.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="240.0" y="1795.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="243.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.15%)</title><rect x="240.9" y="1939.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="243.9" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.15%)</title><rect x="240.9" y="1923.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.9" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="240.9" y="1907.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.9" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="241.8" y="1891.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.8" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="241.8" y="1875.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.8" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="241.8" y="1859.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="244.8" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="241.8" y="1843.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.8" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="241.8" y="1827.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="242.7" y="1971.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="245.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.08%)</title><rect x="242.7" y="1955.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="245.7" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.next (1 samples, 0.08%)</title><rect x="242.7" y="1939.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.31%)</title><rect x="243.6" y="1971.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.23%)</title><rect x="243.6" y="1955.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="243.6" y="1939.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.08%)</title><rect x="243.6" y="1923.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.08%)</title><rect x="243.6" y="1907.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="243.6" y="1891.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="243.6" y="1875.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="243.6" y="1859.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="246.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="243.6" y="1843.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="243.6" y="1827.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="246.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="243.6" y="1811.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.6" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="243.6" y="1795.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.6" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$16.read (1 samples, 0.08%)</title><rect x="243.6" y="1779.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.6" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.15%)</title><rect x="244.6" y="1939.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="244.6" y="1923.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="244.6" y="1907.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="244.6" y="1891.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.08%)</title><rect x="244.6" y="1875.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.08%)</title><rect x="245.5" y="1923.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.08%)</title><rect x="245.5" y="1907.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="248.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.08%)</title><rect x="245.5" y="1891.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="245.5" y="1875.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="245.5" y="1859.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="245.5" y="1843.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.5" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="245.5" y="1827.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.5" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="245.5" y="1811.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="248.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="246.4" y="1955.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="246.4" y="1939.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="246.4" y="1923.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="246.4" y="1907.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="246.4" y="1891.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="246.4" y="1875.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="249.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="246.4" y="1859.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.08%)</title><rect x="246.4" y="1843.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="249.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="246.4" y="1827.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.write (1 samples, 0.08%)</title><rect x="246.4" y="1811.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.4" y="1822.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putShort (1 samples, 0.08%)</title><rect x="246.4" y="1795.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.4" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.23%)</title><rect x="247.3" y="1971.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.23%)</title><rect x="247.3" y="1955.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.08%)</title><rect x="248.2" y="1939.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.08%)</title><rect x="248.2" y="1923.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="248.2" y="1907.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="248.2" y="1891.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.2" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="248.2" y="1875.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.2" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="248.2" y="1859.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.2" y="1870.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.08%)</title><rect x="248.2" y="1843.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="251.2" y="1854.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="248.2" y="1827.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="251.2" y="1838.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="248.2" y="1811.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="251.2" y="1822.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.08%)</title><rect x="248.2" y="1795.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="251.2" y="1806.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.08%)</title><rect x="248.2" y="1779.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="251.2" y="1790.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="249.1" y="1939.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="252.1" y="1950.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="249.1" y="1923.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="252.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.15%)</title><rect x="250.0" y="1971.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="250.0" y="1955.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="250.0" y="1939.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="250.0" y="1923.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="250.9" y="1907.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.08%)</title><rect x="251.8" y="1987.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.8" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="251.8" y="1971.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.8" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.15%)</title><rect x="252.7" y="2019.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.7" y="2030.0"></text>
</g>
<g>
<title>java/lang/Thread.run (712 samples, 54.64%)</title><rect x="254.5" y="2035.0" width="644.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.5" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (712 samples, 54.64%)</title><rect x="254.5" y="2019.0" width="644.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="257.5" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (712 samples, 54.64%)</title><rect x="254.5" y="2003.0" width="644.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.5" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1377692592.run (490 samples, 37.61%)</title><rect x="257.2" y="1987.0" width="443.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.2" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (490 samples, 37.61%)</title><rect x="257.2" y="1971.0" width="443.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.2" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (490 samples, 37.61%)</title><rect x="257.2" y="1955.0" width="443.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.2" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (485 samples, 37.22%)</title><rect x="257.2" y="1939.0" width="439.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.2" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sched..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (2 samples, 0.15%)</title><rect x="265.4" y="1923.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.4" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (2 samples, 0.15%)</title><rect x="265.4" y="1907.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.4" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/1813525992.get (2 samples, 0.15%)</title><rect x="265.4" y="1891.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.4" y="1902.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.15%)</title><rect x="265.4" y="1875.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.4" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="265.4" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="268.4" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="266.3" y="1859.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="269.3" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="266.3" y="1843.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="269.3" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="266.3" y="1827.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="269.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (160 samples, 12.28%)</title><rect x="267.2" y="1923.0" width="144.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.2" y="1934.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (160 samples, 12.28%)</title><rect x="267.2" y="1907.0" width="144.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.2" y="1918.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (160 samples, 12.28%)</title><rect x="267.2" y="1891.0" width="144.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.2" y="1902.0">com/linecorp/decat..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="272.6" y="1875.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="275.6" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="272.6" y="1859.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="275.6" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="272.6" y="1843.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="275.6" y="1854.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.31%)</title><rect x="273.5" y="1875.0" width="3.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="276.5" y="1886.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.38%)</title><rect x="277.2" y="1875.0" width="4.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="280.2" y="1886.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="279.9" y="1859.0" width="1.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="282.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (144 samples, 11.05%)</title><rect x="281.7" y="1875.0" width="130.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.7" y="1886.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (144 samples, 11.05%)</title><rect x="281.7" y="1859.0" width="130.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="284.7" y="1870.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (144 samples, 11.05%)</title><rect x="281.7" y="1843.0" width="130.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="284.7" y="1854.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (44 samples, 3.38%)</title><rect x="281.7" y="1827.0" width="39.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="284.7" y="1838.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (44 samples, 3.38%)</title><rect x="281.7" y="1811.0" width="39.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="284.7" y="1822.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="281.7" y="1795.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="284.7" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="281.7" y="1779.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="284.7" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="281.7" y="1763.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="284.7" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="281.7" y="1747.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="284.7" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="281.7" y="1731.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="284.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (43 samples, 3.30%)</title><rect x="282.6" y="1795.0" width="38.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.6" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (24 samples, 1.84%)</title><rect x="282.6" y="1779.0" width="21.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.6" y="1790.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (24 samples, 1.84%)</title><rect x="282.6" y="1763.0" width="21.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.6" y="1774.0">c..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.byteOffset (3 samples, 0.23%)</title><rect x="301.6" y="1747.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (19 samples, 1.46%)</title><rect x="304.3" y="1779.0" width="17.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="307.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (19 samples, 1.46%)</title><rect x="304.3" y="1763.0" width="17.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="307.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.23%)</title><rect x="304.3" y="1747.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.3" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.23%)</title><rect x="304.3" y="1731.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="307.3" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.23%)</title><rect x="304.3" y="1715.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="307.3" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.23%)</title><rect x="304.3" y="1699.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="307.3" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.15%)</title><rect x="304.3" y="1683.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="307.3" y="1694.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="305.2" y="1667.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="308.2" y="1678.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="305.2" y="1651.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="308.2" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="306.1" y="1683.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="309.1" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (16 samples, 1.23%)</title><rect x="307.0" y="1747.0" width="14.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (16 samples, 1.23%)</title><rect x="307.0" y="1731.0" width="14.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="310.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (16 samples, 1.23%)</title><rect x="307.0" y="1715.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="310.0" y="1726.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.08%)</title><rect x="320.6" y="1699.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.6" y="1710.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.08%)</title><rect x="320.6" y="1683.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="323.6" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (89 samples, 6.83%)</title><rect x="321.5" y="1827.0" width="80.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.5" y="1838.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.31%)</title><rect x="321.5" y="1811.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.31%)</title><rect x="321.5" y="1795.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (4 samples, 0.31%)</title><rect x="321.5" y="1779.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="324.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (4 samples, 0.31%)</title><rect x="321.5" y="1763.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (4 samples, 0.31%)</title><rect x="321.5" y="1747.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="324.5" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (4 samples, 0.31%)</title><rect x="321.5" y="1731.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="324.5" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (4 samples, 0.31%)</title><rect x="321.5" y="1715.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="324.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.08%)</title><rect x="323.3" y="1699.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="326.3" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.byteOffset (1 samples, 0.08%)</title><rect x="324.2" y="1699.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="327.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.54%)</title><rect x="325.1" y="1811.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.54%)</title><rect x="325.1" y="1795.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="328.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.31%)</title><rect x="327.9" y="1779.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="330.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 1.00%)</title><rect x="331.5" y="1811.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.00%)</title><rect x="331.5" y="1795.0" width="11.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="334.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (4 samples, 0.31%)</title><rect x="333.3" y="1779.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="336.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.54%)</title><rect x="336.9" y="1779.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="339.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.08%)</title><rect x="342.4" y="1763.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="345.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.54%)</title><rect x="343.3" y="1811.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="346.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="343.3" y="1795.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="346.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.46%)</title><rect x="344.2" y="1795.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="347.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="348.7" y="1779.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="351.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="348.7" y="1763.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="351.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="348.7" y="1747.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="351.7" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="348.7" y="1731.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="351.7" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="348.7" y="1715.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="351.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (58 samples, 4.45%)</title><rect x="349.6" y="1811.0" width="52.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="352.6" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.23%)</title><rect x="353.2" y="1795.0" width="14.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="356.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.46%)</title><rect x="354.1" y="1779.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="357.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.46%)</title><rect x="354.1" y="1763.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="357.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.46%)</title><rect x="354.1" y="1747.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="357.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.46%)</title><rect x="354.1" y="1731.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="357.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 0.31%)</title><rect x="355.9" y="1715.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="358.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 0.46%)</title><rect x="359.6" y="1779.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="362.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (3 samples, 0.23%)</title><rect x="359.6" y="1763.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="362.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.08%)</title><rect x="361.4" y="1747.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="364.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.23%)</title><rect x="362.3" y="1763.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="365.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.23%)</title><rect x="362.3" y="1747.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="365.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.23%)</title><rect x="362.3" y="1731.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="365.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.23%)</title><rect x="362.3" y="1715.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.23%)</title><rect x="365.0" y="1779.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.23%)</title><rect x="365.0" y="1763.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="368.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (38 samples, 2.92%)</title><rect x="367.7" y="1795.0" width="34.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="370.7" y="1806.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (38 samples, 2.92%)</title><rect x="367.7" y="1779.0" width="34.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="370.7" y="1790.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (37 samples, 2.84%)</title><rect x="368.6" y="1763.0" width="33.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="371.6" y="1774.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.92%)</title><rect x="372.2" y="1747.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="375.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.08%)</title><rect x="374.1" y="1731.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="377.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.15%)</title><rect x="375.0" y="1731.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="378.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.46%)</title><rect x="376.8" y="1731.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="379.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.46%)</title><rect x="376.8" y="1715.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="379.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.46%)</title><rect x="376.8" y="1699.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="379.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.46%)</title><rect x="376.8" y="1683.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="379.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.31%)</title><rect x="376.8" y="1667.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="379.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.23%)</title><rect x="377.7" y="1651.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="380.7" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.08%)</title><rect x="379.5" y="1635.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.5" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.15%)</title><rect x="380.4" y="1667.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="383.4" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="382.2" y="1731.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="382.2" y="1715.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="385.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.54%)</title><rect x="383.1" y="1747.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="386.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.38%)</title><rect x="384.9" y="1731.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="387.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.38%)</title><rect x="384.9" y="1715.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="387.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.38%)</title><rect x="384.9" y="1699.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="387.9" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.38%)</title><rect x="384.9" y="1683.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="387.9" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="389.4" y="1747.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="392.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (12 samples, 0.92%)</title><rect x="390.4" y="1747.0" width="10.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (12 samples, 0.92%)</title><rect x="390.4" y="1731.0" width="10.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="393.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (12 samples, 0.92%)</title><rect x="390.4" y="1715.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (12 samples, 0.92%)</title><rect x="390.4" y="1699.0" width="10.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="393.4" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (12 samples, 0.92%)</title><rect x="390.4" y="1683.0" width="10.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.4" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.69%)</title><rect x="391.3" y="1667.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="394.3" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (2 samples, 0.15%)</title><rect x="397.6" y="1651.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="400.6" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (2 samples, 0.15%)</title><rect x="399.4" y="1667.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="402.4" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.08%)</title><rect x="401.2" y="1747.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.2" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="401.2" y="1731.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="404.2" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="401.2" y="1715.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.84%)</title><rect x="402.1" y="1827.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="405.1" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 0.84%)</title><rect x="402.1" y="1811.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="405.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 0.84%)</title><rect x="402.1" y="1795.0" width="10.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="405.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (11 samples, 0.84%)</title><rect x="402.1" y="1779.0" width="10.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="405.1" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 0.84%)</title><rect x="402.1" y="1763.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="405.1" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (294 samples, 22.56%)</title><rect x="412.1" y="1923.0" width="266.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="415.1" y="1934.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (46 samples, 3.53%)</title><rect x="412.1" y="1907.0" width="41.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.1" y="1918.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (46 samples, 3.53%)</title><rect x="412.1" y="1891.0" width="41.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="415.1" y="1902.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (38 samples, 2.92%)</title><rect x="415.7" y="1875.0" width="34.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="418.7" y="1886.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.54%)</title><rect x="418.4" y="1859.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="421.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.08%)</title><rect x="419.3" y="1843.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="422.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="420.2" y="1843.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="423.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="420.2" y="1827.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="423.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="420.2" y="1811.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="423.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.31%)</title><rect x="421.1" y="1843.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="424.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.31%)</title><rect x="421.1" y="1827.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="424.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.31%)</title><rect x="421.1" y="1811.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="424.1" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.61%)</title><rect x="424.8" y="1859.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="427.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.15%)</title><rect x="427.5" y="1843.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="430.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="428.4" y="1827.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="431.4" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 0.23%)</title><rect x="429.3" y="1843.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="432.3" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (20 samples, 1.53%)</title><rect x="432.0" y="1859.0" width="18.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="435.0" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (13 samples, 1.00%)</title><rect x="438.3" y="1843.0" width="11.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="441.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="438.3" y="1827.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="441.3" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (12 samples, 0.92%)</title><rect x="439.3" y="1827.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="442.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="449.2" y="1811.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="452.2" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 0.31%)</title><rect x="450.1" y="1875.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="453.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (10 samples, 0.77%)</title><rect x="453.7" y="1907.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="456.7" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.69%)</title><rect x="454.7" y="1891.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="457.7" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="454.7" y="1875.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="457.7" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="454.7" y="1859.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="457.7" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="454.7" y="1843.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="457.7" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="454.7" y="1827.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="457.7" y="1838.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.08%)</title><rect x="454.7" y="1811.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="457.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.61%)</title><rect x="455.6" y="1875.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="458.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (165 samples, 12.66%)</title><rect x="462.8" y="1907.0" width="149.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="465.8" y="1918.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (165 samples, 12.66%)</title><rect x="462.8" y="1891.0" width="149.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.8" y="1902.0">com/linecorp/decato..</text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.77%)</title><rect x="464.6" y="1875.0" width="9.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="467.6" y="1886.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.69%)</title><rect x="465.5" y="1859.0" width="8.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="468.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (45 samples, 3.45%)</title><rect x="473.7" y="1875.0" width="40.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.7" y="1886.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (27 samples, 2.07%)</title><rect x="481.8" y="1859.0" width="24.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="484.8" y="1870.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (27 samples, 2.07%)</title><rect x="481.8" y="1843.0" width="24.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="484.8" y="1854.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (14 samples, 1.07%)</title><rect x="488.2" y="1827.0" width="12.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="491.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (14 samples, 1.07%)</title><rect x="488.2" y="1811.0" width="12.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="491.2" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (14 samples, 1.07%)</title><rect x="488.2" y="1795.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="491.2" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 0.84%)</title><rect x="489.1" y="1779.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="492.1" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.38%)</title><rect x="489.1" y="1763.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="492.1" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="489.1" y="1747.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="492.1" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="489.1" y="1731.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="492.1" y="1742.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.31%)</title><rect x="490.0" y="1747.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="493.0" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.31%)</title><rect x="490.0" y="1731.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="493.0" y="1742.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="490.9" y="1715.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="493.9" y="1726.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="490.9" y="1699.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="493.9" y="1710.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="491.8" y="1715.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="494.8" y="1726.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="492.7" y="1715.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="495.7" y="1726.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="493.6" y="1763.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="496.6" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.38%)</title><rect x="494.5" y="1763.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="497.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.15%)</title><rect x="494.5" y="1747.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="497.5" y="1758.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="495.4" y="1731.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="498.4" y="1742.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="495.4" y="1715.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="498.4" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (2 samples, 0.15%)</title><rect x="496.3" y="1747.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="499.3" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="498.1" y="1747.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="501.1" y="1758.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.08%)</title><rect x="499.0" y="1779.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="502.0" y="1790.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="499.9" y="1779.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="502.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.31%)</title><rect x="500.8" y="1827.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="503.8" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="504.5" y="1827.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="507.5" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="505.4" y="1827.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="508.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="506.3" y="1859.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="509.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="506.3" y="1843.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="509.3" y="1854.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.08%)</title><rect x="506.3" y="1827.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="509.3" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (4 samples, 0.31%)</title><rect x="507.2" y="1859.0" width="3.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="510.2" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.31%)</title><rect x="510.8" y="1859.0" width="3.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="513.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.23%)</title><rect x="514.4" y="1875.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="517.4" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.31%)</title><rect x="517.1" y="1875.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="520.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.08%)</title><rect x="517.1" y="1859.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="520.1" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="517.1" y="1843.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="520.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.23%)</title><rect x="518.0" y="1859.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="521.0" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="518.0" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="521.0" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="518.0" y="1827.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="521.0" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="518.0" y="1811.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="521.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.15%)</title><rect x="518.9" y="1843.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="521.9" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="519.9" y="1827.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="522.9" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="519.9" y="1811.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="522.9" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="519.9" y="1795.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="522.9" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="519.9" y="1779.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="522.9" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="519.9" y="1763.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="522.9" y="1774.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.15%)</title><rect x="520.8" y="1875.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="523.8" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.15%)</title><rect x="520.8" y="1859.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="523.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.15%)</title><rect x="520.8" y="1843.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="523.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.15%)</title><rect x="520.8" y="1827.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="523.8" y="1838.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.15%)</title><rect x="520.8" y="1811.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="523.8" y="1822.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (99 samples, 7.60%)</title><rect x="522.6" y="1875.0" width="89.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="525.6" y="1886.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (78 samples, 5.99%)</title><rect x="538.9" y="1859.0" width="70.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.9" y="1870.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.54%)</title><rect x="538.9" y="1843.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="541.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.54%)</title><rect x="538.9" y="1827.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="541.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.54%)</title><rect x="538.9" y="1811.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="541.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.54%)</title><rect x="538.9" y="1795.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="541.9" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.23%)</title><rect x="542.5" y="1779.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.5" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="544.3" y="1763.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="547.3" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (71 samples, 5.45%)</title><rect x="545.2" y="1843.0" width="64.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="548.2" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (63 samples, 4.83%)</title><rect x="552.5" y="1827.0" width="57.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="555.5" y="1838.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (33 samples, 2.53%)</title><rect x="579.6" y="1811.0" width="29.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="582.6" y="1822.0">ja..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.08%)</title><rect x="595.0" y="1795.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="598.0" y="1806.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.08%)</title><rect x="595.0" y="1779.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="598.0" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.15%)</title><rect x="595.9" y="1795.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="598.9" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.84%)</title><rect x="597.7" y="1795.0" width="10.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="600.7" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="605.9" y="1779.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="608.9" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.15%)</title><rect x="605.9" y="1763.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="608.9" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.15%)</title><rect x="605.9" y="1747.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="608.9" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.15%)</title><rect x="605.9" y="1731.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="608.9" y="1742.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="605.9" y="1715.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="608.9" y="1726.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="606.8" y="1715.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="609.8" y="1726.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.15%)</title><rect x="607.7" y="1795.0" width="1.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="610.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 0.23%)</title><rect x="609.5" y="1859.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="612.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (55 samples, 4.22%)</title><rect x="612.2" y="1907.0" width="49.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="615.2" y="1918.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (55 samples, 4.22%)</title><rect x="612.2" y="1891.0" width="49.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="615.2" y="1902.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/703875274.process (21 samples, 1.61%)</title><rect x="615.8" y="1875.0" width="19.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="618.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (19 samples, 1.46%)</title><rect x="617.7" y="1859.0" width="17.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="620.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (18 samples, 1.38%)</title><rect x="618.6" y="1843.0" width="16.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="621.6" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.08%)</title><rect x="619.5" y="1827.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="622.5" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.08%)</title><rect x="619.5" y="1811.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="622.5" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.08%)</title><rect x="619.5" y="1795.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="622.5" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.08%)</title><rect x="619.5" y="1779.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="622.5" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (1 samples, 0.08%)</title><rect x="619.5" y="1763.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="622.5" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.08%)</title><rect x="619.5" y="1747.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="622.5" y="1758.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (1 samples, 0.08%)</title><rect x="619.5" y="1731.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="622.5" y="1742.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (1 samples, 0.08%)</title><rect x="619.5" y="1715.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="622.5" y="1726.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (1 samples, 0.08%)</title><rect x="619.5" y="1699.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="622.5" y="1710.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (1 samples, 0.08%)</title><rect x="619.5" y="1683.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="622.5" y="1694.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/PatternLayout.doLayout (1 samples, 0.08%)</title><rect x="619.5" y="1667.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="622.5" y="1678.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/PatternLayout.doLayout (1 samples, 0.08%)</title><rect x="619.5" y="1651.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="622.5" y="1662.0"></text>
</g>
<g>
<title>ch/qos/logback/core/pattern/PatternLayoutBase.writeLoopOnConverters (1 samples, 0.08%)</title><rect x="619.5" y="1635.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="622.5" y="1646.0"></text>
</g>
<g>
<title>ch/qos/logback/core/pattern/FormattingConverter.write (1 samples, 0.08%)</title><rect x="619.5" y="1619.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="622.5" y="1630.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/NamedConverter.convert (1 samples, 0.08%)</title><rect x="619.5" y="1603.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="622.5" y="1614.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/NamedConverter.convert (1 samples, 0.08%)</title><rect x="619.5" y="1587.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="622.5" y="1598.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/TargetLengthBasedClassNameAbbreviator.abbreviate (1 samples, 0.08%)</title><rect x="619.5" y="1571.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="622.5" y="1582.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.08%)</title><rect x="619.5" y="1555.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="622.5" y="1566.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="620.4" y="1827.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="623.4" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="620.4" y="1811.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.4" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.08%)</title><rect x="620.4" y="1795.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="623.4" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="620.4" y="1779.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="623.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="620.4" y="1763.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="623.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="620.4" y="1747.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.4" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.46%)</title><rect x="621.3" y="1827.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="624.3" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.46%)</title><rect x="621.3" y="1811.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="624.3" y="1822.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.38%)</title><rect x="622.2" y="1795.0" width="4.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="625.2" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.69%)</title><rect x="626.7" y="1827.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="629.7" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.23%)</title><rect x="634.9" y="1875.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="637.9" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.15%)</title><rect x="635.8" y="1859.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/558187323.linkToTargetMethod (6 samples, 0.46%)</title><rect x="637.6" y="1875.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="640.6" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (6 samples, 0.46%)</title><rect x="637.6" y="1859.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/780601384.get$Lambda (6 samples, 0.46%)</title><rect x="637.6" y="1843.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="640.6" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/780601384.&lt;init&gt; (5 samples, 0.38%)</title><rect x="638.5" y="1827.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="641.5" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (3 samples, 0.23%)</title><rect x="643.0" y="1875.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="646.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (3 samples, 0.23%)</title><rect x="643.0" y="1859.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="646.0" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 0.84%)</title><rect x="645.7" y="1875.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="648.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 0.84%)</title><rect x="645.7" y="1859.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="648.7" y="1870.0"></text>
</g>
<g>
<title>itable stub (8 samples, 0.61%)</title><rect x="645.7" y="1843.0" width="7.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="648.7" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.23%)</title><rect x="653.0" y="1843.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="656.0" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.54%)</title><rect x="655.7" y="1875.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="658.7" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="660.2" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="663.2" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="660.2" y="1843.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="663.2" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="660.2" y="1827.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="663.2" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="660.2" y="1811.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="663.2" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="661.1" y="1859.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="664.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="662.0" y="1907.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="665.0" y="1918.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="662.0" y="1891.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="665.0" y="1902.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="662.0" y="1875.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="665.0" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="662.0" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="665.0" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="662.0" y="1843.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="665.0" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="662.0" y="1827.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="665.0" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="662.0" y="1811.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="665.0" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="662.0" y="1795.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="665.0" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="662.0" y="1779.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="665.0" y="1790.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="662.0" y="1763.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="665.0" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="662.0" y="1747.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="665.0" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.08%)</title><rect x="662.0" y="1731.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="665.0" y="1742.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.08%)</title><rect x="662.0" y="1715.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="665.0" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.30%)</title><rect x="662.9" y="1907.0" width="15.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="665.9" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.54%)</title><rect x="667.5" y="1891.0" width="6.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="670.5" y="1902.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.54%)</title><rect x="667.5" y="1875.0" width="6.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="670.5" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.38%)</title><rect x="673.8" y="1891.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="676.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.38%)</title><rect x="673.8" y="1875.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="676.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1371287211.accept (5 samples, 0.38%)</title><rect x="673.8" y="1859.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="676.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (5 samples, 0.38%)</title><rect x="673.8" y="1843.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="676.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.15%)</title><rect x="673.8" y="1827.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="676.8" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.15%)</title><rect x="673.8" y="1811.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="676.8" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.15%)</title><rect x="673.8" y="1795.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="676.8" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="673.8" y="1779.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="676.8" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="673.8" y="1763.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="676.8" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="673.8" y="1747.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="676.8" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="674.7" y="1763.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="677.7" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="674.7" y="1747.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="677.7" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="674.7" y="1731.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="677.7" y="1742.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="674.7" y="1715.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="677.7" y="1726.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 0.23%)</title><rect x="675.6" y="1827.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="678.6" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 0.23%)</title><rect x="675.6" y="1811.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="678.6" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="677.4" y="1795.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="680.4" y="1806.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="677.4" y="1779.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="680.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.07%)</title><rect x="678.3" y="1923.0" width="12.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="681.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 0.92%)</title><rect x="680.1" y="1907.0" width="10.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="683.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.77%)</title><rect x="682.0" y="1891.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="685.0" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1371287211.accept (1 samples, 0.08%)</title><rect x="682.0" y="1875.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="685.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (1 samples, 0.08%)</title><rect x="682.0" y="1859.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="685.0" y="1870.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.08%)</title><rect x="682.0" y="1843.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="685.0" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.08%)</title><rect x="682.0" y="1827.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="685.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/331194504.accept (9 samples, 0.69%)</title><rect x="682.9" y="1875.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="685.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$44 (9 samples, 0.69%)</title><rect x="682.9" y="1859.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="685.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/741815089.complete (9 samples, 0.69%)</title><rect x="682.9" y="1843.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="685.9" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$54 (9 samples, 0.69%)</title><rect x="682.9" y="1827.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="685.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (9 samples, 0.69%)</title><rect x="682.9" y="1811.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="685.9" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.69%)</title><rect x="682.9" y="1795.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="685.9" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.69%)</title><rect x="682.9" y="1779.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="685.9" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (9 samples, 0.69%)</title><rect x="682.9" y="1763.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="685.9" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (9 samples, 0.69%)</title><rect x="682.9" y="1747.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="685.9" y="1758.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.46%)</title><rect x="691.0" y="1923.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="694.0" y="1934.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.46%)</title><rect x="691.0" y="1907.0" width="5.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="694.0" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.38%)</title><rect x="696.4" y="1939.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="699.4" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.38%)</title><rect x="696.4" y="1923.0" width="4.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="699.4" y="1934.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.38%)</title><rect x="696.4" y="1907.0" width="4.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="699.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (8 samples, 0.61%)</title><rect x="701.0" y="1987.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="704.0" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.61%)</title><rect x="701.0" y="1971.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="704.0" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.61%)</title><rect x="701.0" y="1955.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="704.0" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.61%)</title><rect x="701.0" y="1939.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="704.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (211 samples, 16.19%)</title><rect x="708.2" y="1987.0" width="191.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="711.2" y="1998.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (209 samples, 16.04%)</title><rect x="710.0" y="1971.0" width="189.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="713.0" y="1982.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (6 samples, 0.46%)</title><rect x="714.6" y="1955.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="717.6" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.08%)</title><rect x="720.0" y="1955.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="723.0" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (189 samples, 14.50%)</title><rect x="720.9" y="1955.0" width="171.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="723.9" y="1966.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.15%)</title><rect x="729.0" y="1939.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="732.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.15%)</title><rect x="729.0" y="1923.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="732.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (10 samples, 0.77%)</title><rect x="730.9" y="1939.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="733.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.54%)</title><rect x="739.9" y="1939.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="742.9" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.08%)</title><rect x="739.9" y="1923.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="742.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.46%)</title><rect x="740.8" y="1923.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="743.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.46%)</title><rect x="740.8" y="1907.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="743.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.46%)</title><rect x="740.8" y="1891.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="743.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (160 samples, 12.28%)</title><rect x="746.3" y="1939.0" width="144.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="749.3" y="1950.0">java/util/concurre..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (160 samples, 12.28%)</title><rect x="746.3" y="1923.0" width="144.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="749.3" y="1934.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="749.9" y="1907.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="752.9" y="1918.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="750.8" y="1907.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="753.8" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="751.7" y="1907.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="754.7" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (148 samples, 11.36%)</title><rect x="752.6" y="1907.0" width="134.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="755.6" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="754.4" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="757.4" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (34 samples, 2.61%)</title><rect x="755.3" y="1891.0" width="30.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="758.3" y="1902.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.54%)</title><rect x="768.9" y="1875.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="771.9" y="1886.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="768.9" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="771.9" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.23%)</title><rect x="769.8" y="1859.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="772.8" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.15%)</title><rect x="770.7" y="1843.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="773.7" y="1854.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.23%)</title><rect x="772.5" y="1859.0" width="2.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="775.5" y="1870.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (12 samples, 0.92%)</title><rect x="775.2" y="1875.0" width="10.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="778.2" y="1886.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.54%)</title><rect x="786.1" y="1891.0" width="6.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="789.1" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (26 samples, 2.00%)</title><rect x="792.4" y="1891.0" width="23.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="795.4" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (63 samples, 4.83%)</title><rect x="816.0" y="1891.0" width="57.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="819.0" y="1902.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.23%)</title><rect x="873.0" y="1891.0" width="2.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="876.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="875.8" y="1891.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="878.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.31%)</title><rect x="876.7" y="1891.0" width="3.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="879.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.15%)</title><rect x="880.3" y="1891.0" width="1.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="883.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="882.1" y="1891.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="885.1" y="1902.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="883.0" y="1891.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="886.0" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.15%)</title><rect x="883.9" y="1891.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="886.9" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="885.7" y="1891.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="888.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="886.6" y="1907.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="889.6" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.31%)</title><rect x="887.5" y="1907.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="890.5" y="1918.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="891.2" y="1939.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="894.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (7 samples, 0.54%)</title><rect x="892.1" y="1955.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="895.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (7 samples, 0.54%)</title><rect x="892.1" y="1939.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="895.1" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (7 samples, 0.54%)</title><rect x="892.1" y="1923.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="895.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="898.4" y="1955.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="901.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="898.4" y="1939.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="901.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="899.3" y="2035.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="902.3" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="899.3" y="2019.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="902.3" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="899.3" y="2003.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="902.3" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="899.3" y="1987.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="902.3" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.08%)</title><rect x="899.3" y="1971.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="902.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="899.3" y="1955.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="902.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="899.3" y="1939.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="902.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.08%)</title><rect x="899.3" y="1923.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="902.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.08%)</title><rect x="899.3" y="1907.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="902.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="899.3" y="1891.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="902.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.08%)</title><rect x="899.3" y="1875.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="902.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedSum.update (1 samples, 0.08%)</title><rect x="899.3" y="1859.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="902.3" y="1870.0"></text>
</g>
<g>
<title>start_thread (320 samples, 24.56%)</title><rect x="900.2" y="2035.0" width="289.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="903.2" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (320 samples, 24.56%)</title><rect x="900.2" y="2019.0" width="289.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="903.2" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 1.69%)</title><rect x="900.2" y="2003.0" width="19.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="903.2" y="2014.0"></text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (2 samples, 0.15%)</title><rect x="900.2" y="1987.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="903.2" y="1998.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.15%)</title><rect x="900.2" y="1971.0" width="1.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="903.2" y="1982.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.15%)</title><rect x="902.0" y="1987.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="905.0" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.15%)</title><rect x="902.0" y="1971.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="905.0" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="902.0" y="1955.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="905.0" y="1966.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="902.9" y="1955.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="905.9" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 1.38%)</title><rect x="903.8" y="1987.0" width="16.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="906.8" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.38%)</title><rect x="903.8" y="1971.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="906.8" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.15%)</title><rect x="903.8" y="1955.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="906.8" y="1966.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.23%)</title><rect x="905.6" y="1955.0" width="2.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="908.6" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, unsigned int, ReferenceProcessor*) (1 samples, 0.08%)</title><rect x="908.4" y="1971.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="911.4" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.46%)</title><rect x="909.3" y="1971.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="912.3" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.23%)</title><rect x="909.3" y="1955.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="912.3" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.15%)</title><rect x="909.3" y="1939.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="912.3" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.15%)</title><rect x="909.3" y="1923.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="912.3" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.15%)</title><rect x="909.3" y="1907.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="912.3" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="911.1" y="1939.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="914.1" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="911.1" y="1923.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="914.1" y="1934.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="911.1" y="1907.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="914.1" y="1918.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.23%)</title><rect x="912.0" y="1955.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="915.0" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.15%)</title><rect x="912.0" y="1939.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.0" y="1950.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="913.8" y="1939.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="916.8" y="1950.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="913.8" y="1923.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="916.8" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.46%)</title><rect x="914.7" y="1971.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="917.7" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.46%)</title><rect x="914.7" y="1955.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="917.7" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.46%)</title><rect x="914.7" y="1939.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="917.7" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.46%)</title><rect x="914.7" y="1923.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="917.7" y="1934.0"></text>
</g>
<g>
<title>PtrQueueSet::deallocate_buffer(void**) (1 samples, 0.08%)</title><rect x="915.6" y="1907.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="918.6" y="1918.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.31%)</title><rect x="916.5" y="1907.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="919.5" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.31%)</title><rect x="916.5" y="1891.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="919.5" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.23%)</title><rect x="917.4" y="1875.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="920.4" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="917.4" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="920.4" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (2 samples, 0.15%)</title><rect x="918.3" y="1859.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="921.3" y="1870.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.08%)</title><rect x="919.2" y="1843.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="922.2" y="1854.0"></text>
</g>
<g>
<title>JavaThread::run() (296 samples, 22.72%)</title><rect x="920.1" y="2003.0" width="268.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="923.1" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (296 samples, 22.72%)</title><rect x="920.1" y="1987.0" width="268.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="923.1" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (296 samples, 22.72%)</title><rect x="920.1" y="1971.0" width="268.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="923.1" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (296 samples, 22.72%)</title><rect x="920.1" y="1955.0" width="268.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="923.1" y="1966.0">CompileBroker::invoke_compiler_on_me..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (295 samples, 22.64%)</title><rect x="920.1" y="1939.0" width="267.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="923.1" y="1950.0">C2Compiler::compile_method(ciEnv*, c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (295 samples, 22.64%)</title><rect x="920.1" y="1923.0" width="267.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="923.1" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*..</text>
</g>
<g>
<title>Compile::Code_Gen() (67 samples, 5.14%)</title><rect x="920.1" y="1907.0" width="60.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="923.1" y="1918.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.23%)</title><rect x="920.1" y="1891.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="923.1" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.15%)</title><rect x="920.1" y="1875.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="923.1" y="1886.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="921.0" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="924.0" y="1870.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.08%)</title><rect x="921.0" y="1843.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="924.0" y="1854.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="921.9" y="1875.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="924.9" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="921.9" y="1859.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="924.9" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.38%)</title><rect x="922.8" y="1891.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="925.8" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.15%)</title><rect x="922.8" y="1875.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="925.8" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="922.8" y="1859.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="925.8" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="922.8" y="1843.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="925.8" y="1854.0"></text>
</g>
<g>
<title>MachSpillCopyNode::bottom_type() const (1 samples, 0.08%)</title><rect x="923.8" y="1859.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="926.8" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.15%)</title><rect x="924.7" y="1875.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="927.7" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.15%)</title><rect x="924.7" y="1859.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="927.7" y="1870.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.08%)</title><rect x="926.5" y="1875.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="929.5" y="1886.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 0.69%)</title><rect x="927.4" y="1891.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="930.4" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="927.4" y="1875.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="930.4" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (8 samples, 0.61%)</title><rect x="928.3" y="1875.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="931.3" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.15%)</title><rect x="930.1" y="1859.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.1" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.23%)</title><rect x="931.9" y="1859.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="934.9" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="932.8" y="1843.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="935.8" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="932.8" y="1827.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="935.8" y="1838.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="932.8" y="1811.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="935.8" y="1822.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="932.8" y="1795.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="935.8" y="1806.0"></text>
</g>
<g>
<title>andI_rReg_immNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.08%)</title><rect x="933.7" y="1843.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="936.7" y="1854.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.08%)</title><rect x="934.6" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="937.6" y="1870.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="934.6" y="1843.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="937.6" y="1854.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="935.5" y="1891.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="938.5" y="1902.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.08%)</title><rect x="935.5" y="1875.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="938.5" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.23%)</title><rect x="936.4" y="1891.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="939.4" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.23%)</title><rect x="936.4" y="1875.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="939.4" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.15%)</title><rect x="936.4" y="1859.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="939.4" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.08%)</title><rect x="937.3" y="1843.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="940.3" y="1854.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.08%)</title><rect x="937.3" y="1827.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="940.3" y="1838.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.08%)</title><rect x="937.3" y="1811.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="940.3" y="1822.0"></text>
</g>
<g>
<title>loadBNode::memory_operand() const (1 samples, 0.08%)</title><rect x="937.3" y="1795.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="940.3" y="1806.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.08%)</title><rect x="938.2" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="941.2" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.08%)</title><rect x="939.1" y="1891.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="942.1" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (45 samples, 3.45%)</title><rect x="940.1" y="1891.0" width="40.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="943.1" y="1902.0">Pha..</text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.15%)</title><rect x="940.1" y="1875.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="943.1" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="941.9" y="1875.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="944.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.23%)</title><rect x="942.8" y="1875.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="945.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="942.8" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="945.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.08%)</title><rect x="943.7" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="946.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.08%)</title><rect x="944.6" y="1859.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="947.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.15%)</title><rect x="945.5" y="1875.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="948.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.46%)</title><rect x="947.3" y="1875.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="950.3" y="1886.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.08%)</title><rect x="950.0" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="953.0" y="1870.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.08%)</title><rect x="950.0" y="1843.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="953.0" y="1854.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.08%)</title><rect x="950.9" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="953.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.08%)</title><rect x="951.8" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="954.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="951.8" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="954.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 0.84%)</title><rect x="952.7" y="1875.0" width="10.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="955.7" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.08%)</title><rect x="955.4" y="1859.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="958.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="956.4" y="1859.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="959.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.46%)</title><rect x="957.3" y="1859.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.3" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.08%)</title><rect x="959.1" y="1843.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="962.1" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.23%)</title><rect x="960.0" y="1843.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="963.0" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.15%)</title><rect x="962.7" y="1875.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="965.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.15%)</title><rect x="962.7" y="1859.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="965.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.23%)</title><rect x="964.5" y="1875.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="967.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="967.2" y="1875.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="970.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.08%)</title><rect x="967.2" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="970.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.23%)</title><rect x="968.1" y="1875.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="969.9" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="972.9" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.15%)</title><rect x="970.8" y="1875.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="973.8" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="970.8" y="1859.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="973.8" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="971.7" y="1859.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="974.7" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.08%)</title><rect x="971.7" y="1843.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="974.7" y="1854.0"></text>
</g>
<g>
<title>LiveRangeMap::find(Node const*) (1 samples, 0.08%)</title><rect x="971.7" y="1827.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="972.7" y="1875.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="975.7" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="972.7" y="1859.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="975.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.15%)</title><rect x="973.6" y="1875.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="976.6" y="1886.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.08%)</title><rect x="973.6" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="976.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="974.5" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.15%)</title><rect x="975.4" y="1875.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="978.4" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="976.3" y="1859.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.3" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.23%)</title><rect x="977.2" y="1875.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.2" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="979.0" y="1859.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="982.0" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="979.0" y="1843.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="982.0" y="1854.0"></text>
</g>
<g>
<title>RootNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="979.9" y="1875.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="982.9" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (216 samples, 16.58%)</title><rect x="980.8" y="1907.0" width="195.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="983.8" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.08%)</title><rect x="980.8" y="1891.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="983.8" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="980.8" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="983.8" y="1886.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="981.7" y="1891.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="984.7" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (7 samples, 0.54%)</title><rect x="982.6" y="1891.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="985.6" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (7 samples, 0.54%)</title><rect x="982.6" y="1875.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="985.6" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="982.6" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.6" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::optimize_ideal_graph(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.08%)</title><rect x="983.5" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.5" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::optimize_ptr_compare(Node*) (1 samples, 0.08%)</title><rect x="983.5" y="1843.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="986.5" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (5 samples, 0.38%)</title><rect x="984.4" y="1859.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="987.4" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.31%)</title><rect x="985.3" y="1843.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="988.3" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1827.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.3" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1811.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.3" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1795.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.3" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1779.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="988.3" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1763.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="988.3" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1747.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="988.3" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1731.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.3" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1715.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.3" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1699.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="988.3" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1683.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="988.3" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1667.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="988.3" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1651.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="988.3" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1635.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.3" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1619.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="988.3" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1603.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.3" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1587.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="988.3" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1571.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.3" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1555.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="988.3" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1539.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="988.3" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1523.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.3" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1507.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="988.3" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1491.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="988.3" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1475.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.3" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1459.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="988.3" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1443.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.3" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1427.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.3" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1411.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="988.3" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1395.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="988.3" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1379.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.3" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1363.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.3" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1347.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.3" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1331.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.3" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1315.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="988.3" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1299.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="988.3" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1283.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="988.3" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1267.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.3" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1251.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="988.3" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1235.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="988.3" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1219.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="988.3" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1203.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="988.3" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1187.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="988.3" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1171.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.3" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1155.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.3" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1139.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.3" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="988.3" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1107.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="988.3" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1091.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.3" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1075.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="988.3" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="985.3" y="1059.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="988.3" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.23%)</title><rect x="986.2" y="1827.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="989.2" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.23%)</title><rect x="986.2" y="1811.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="989.2" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.23%)</title><rect x="986.2" y="1795.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="989.2" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.23%)</title><rect x="986.2" y="1779.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="989.2" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="986.2" y="1763.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="989.2" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1747.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="989.2" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1731.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="989.2" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1715.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="989.2" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1699.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="989.2" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1683.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="989.2" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1667.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="989.2" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1651.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1635.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="989.2" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1619.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="989.2" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1603.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="989.2" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1587.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="989.2" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1571.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="989.2" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1555.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="989.2" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1539.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="989.2" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1523.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="989.2" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1507.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="989.2" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1491.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="989.2" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1475.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="989.2" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1459.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="989.2" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1443.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="989.2" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1427.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="989.2" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1411.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.2" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1395.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="989.2" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1379.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="989.2" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1363.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="989.2" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1347.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.2" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1331.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="989.2" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1315.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.2" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1299.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="989.2" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1283.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="989.2" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1267.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.2" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1251.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="989.2" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1235.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.2" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1219.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="989.2" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1203.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="989.2" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1187.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="989.2" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1171.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="989.2" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1155.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="989.2" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1139.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="989.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1123.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="989.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1107.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="989.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1091.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="989.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1075.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="989.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1059.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="989.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1043.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="989.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1027.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="989.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="1011.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="989.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="995.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="979.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="989.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="963.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="989.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="989.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="931.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="989.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="915.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="989.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="899.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="989.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="883.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="989.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="867.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="989.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="835.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="989.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="819.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="989.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="803.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="989.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="787.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="989.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="986.2" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1747.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="990.1" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1731.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="990.1" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1715.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="990.1" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1699.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="990.1" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1683.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="990.1" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1667.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="990.1" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1651.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="990.1" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1635.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="990.1" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1619.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="990.1" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1603.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="990.1" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1587.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="990.1" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1571.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="990.1" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1555.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="990.1" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1539.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="990.1" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1523.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="990.1" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1507.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="990.1" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1491.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="990.1" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1475.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="990.1" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1459.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="990.1" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1443.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="990.1" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1427.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="990.1" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1411.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="990.1" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1395.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="990.1" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1379.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="990.1" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1363.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="990.1" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1347.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="990.1" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1331.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="990.1" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1315.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="990.1" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1299.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="990.1" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1283.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="990.1" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1267.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="990.1" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1251.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="990.1" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1235.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="990.1" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1219.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="990.1" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1203.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="990.1" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1187.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="990.1" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1171.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="990.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1155.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="990.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1139.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="990.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1123.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="990.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1107.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="990.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1091.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="990.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1075.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="990.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1059.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="990.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1043.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="990.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1027.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="990.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="1011.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="990.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="990.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="979.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="990.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="963.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="990.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="947.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="990.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="931.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="990.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="915.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="990.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="990.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="883.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="990.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="987.1" y="867.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="990.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="988.1" y="1763.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="991.1" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="988.1" y="1747.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="991.1" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="988.1" y="1731.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="991.1" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="988.1" y="1715.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="991.1" y="1726.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.08%)</title><rect x="988.1" y="1699.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="991.1" y="1710.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.23%)</title><rect x="989.0" y="1891.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="992.0" y="1902.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="989.9" y="1875.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.9" y="1886.0"></text>
</g>
<g>
<title>Type::filter_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="989.9" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.9" y="1870.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="989.9" y="1843.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.9" y="1854.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="989.9" y="1827.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.9" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="989.9" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.9" y="1822.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="989.9" y="1795.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.9" y="1806.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="989.9" y="1779.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.9" y="1790.0"></text>
</g>
<g>
<title>RegionNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="990.8" y="1875.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="993.8" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.15%)</title><rect x="991.7" y="1891.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="994.7" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.15%)</title><rect x="991.7" y="1875.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.7" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (2 samples, 0.15%)</title><rect x="991.7" y="1859.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (183 samples, 14.04%)</title><rect x="993.5" y="1891.0" width="165.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.5" y="1902.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="994.4" y="1875.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="997.4" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="994.4" y="1859.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="997.4" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="994.4" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="997.4" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="994.4" y="1827.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="997.4" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="994.4" y="1811.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="997.4" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="994.4" y="1795.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="997.4" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="994.4" y="1779.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="997.4" y="1790.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="994.4" y="1763.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="997.4" y="1774.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="994.4" y="1747.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="997.4" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.08%)</title><rect x="994.4" y="1731.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="997.4" y="1742.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.08%)</title><rect x="994.4" y="1715.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="997.4" y="1726.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.08%)</title><rect x="994.4" y="1699.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="997.4" y="1710.0"></text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.08%)</title><rect x="995.3" y="1875.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="998.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.31%)</title><rect x="996.2" y="1875.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.2" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="998.9" y="1859.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1001.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.31%)</title><rect x="999.8" y="1875.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1002.8" y="1886.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.08%)</title><rect x="1002.5" y="1859.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1005.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (162 samples, 12.43%)</title><rect x="1003.4" y="1875.0" width="146.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1006.4" y="1886.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.08%)</title><rect x="1006.2" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1009.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (158 samples, 12.13%)</title><rect x="1007.1" y="1859.0" width="143.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1010.1" y="1870.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.46%)</title><rect x="1008.9" y="1843.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1011.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (150 samples, 11.51%)</title><rect x="1014.3" y="1843.0" width="135.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1017.3" y="1854.0">PhaseIdealLoop::g..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.15%)</title><rect x="1124.8" y="1827.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.15%)</title><rect x="1124.8" y="1811.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.8" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (25 samples, 1.92%)</title><rect x="1126.6" y="1827.0" width="22.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.6" y="1838.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1149.2" y="1827.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1149.2" y="1811.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.2" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.15%)</title><rect x="1150.2" y="1875.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.08%)</title><rect x="1151.1" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.31%)</title><rect x="1152.0" y="1875.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.08%)</title><rect x="1152.9" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.9" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.08%)</title><rect x="1152.9" y="1843.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.9" y="1854.0"></text>
</g>
<g>
<title>TypeRawPtr::hash() const (1 samples, 0.08%)</title><rect x="1152.9" y="1827.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.15%)</title><rect x="1153.8" y="1859.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.08%)</title><rect x="1154.7" y="1843.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.7" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find(Node const*) (1 samples, 0.08%)</title><rect x="1154.7" y="1827.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.31%)</title><rect x="1155.6" y="1875.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.31%)</title><rect x="1155.6" y="1859.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.6" y="1870.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1156.5" y="1843.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.5" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1156.5" y="1827.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.5" y="1838.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1157.4" y="1843.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.4" y="1854.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1157.4" y="1827.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.4" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1158.3" y="1843.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.3" y="1854.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1158.3" y="1827.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (18 samples, 1.38%)</title><rect x="1159.2" y="1891.0" width="16.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.2" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (18 samples, 1.38%)</title><rect x="1159.2" y="1875.0" width="16.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.2" y="1886.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1159.2" y="1859.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.2" y="1870.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1159.2" y="1843.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.2" y="1854.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.08%)</title><rect x="1159.2" y="1827.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.2" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1159.2" y="1811.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.2" y="1822.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1160.1" y="1859.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.1" y="1870.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1160.1" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.1" y="1854.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1160.1" y="1827.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.1" y="1838.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.08%)</title><rect x="1160.1" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.1" y="1822.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1161.0" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.0" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.15%)</title><rect x="1161.9" y="1859.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.9" y="1870.0"></text>
</g>
<g>
<title>NodeHash::grow() (2 samples, 0.15%)</title><rect x="1161.9" y="1843.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (6 samples, 0.46%)</title><rect x="1163.7" y="1859.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.15%)</title><rect x="1167.4" y="1843.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.4" y="1854.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.4" y="1827.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.4" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1168.3" y="1827.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.3" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1169.2" y="1859.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.2" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1170.1" y="1843.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.1" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1171.0" y="1859.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1171.0" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.0" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1171.9" y="1843.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.9" y="1854.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.8" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.8" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1173.7" y="1859.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.15%)</title><rect x="1173.7" y="1843.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.7" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.15%)</title><rect x="1173.7" y="1827.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.7" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.15%)</title><rect x="1173.7" y="1811.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.7" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.15%)</title><rect x="1173.7" y="1795.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.7" y="1779.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.7" y="1763.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.7" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.7" y="1747.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.7" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.7" y="1731.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.7" y="1715.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.7" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.7" y="1699.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.7" y="1710.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1173.7" y="1683.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.7" y="1694.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1173.7" y="1667.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.7" y="1678.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1174.6" y="1779.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.6" y="1790.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1174.6" y="1763.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.6" y="1774.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1175.5" y="1891.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1175.5" y="1875.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1175.5" y="1859.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="1870.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1175.5" y="1843.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.5" y="1854.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.54%)</title><rect x="1176.4" y="1907.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.4" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.54%)</title><rect x="1176.4" y="1891.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.4" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.54%)</title><rect x="1176.4" y="1875.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.54%)</title><rect x="1176.4" y="1859.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.4" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.54%)</title><rect x="1176.4" y="1843.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.54%)</title><rect x="1176.4" y="1827.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.54%)</title><rect x="1176.4" y="1811.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.4" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.54%)</title><rect x="1176.4" y="1795.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.4" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.54%)</title><rect x="1176.4" y="1779.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.54%)</title><rect x="1176.4" y="1763.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.4" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.54%)</title><rect x="1176.4" y="1747.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.4" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.54%)</title><rect x="1176.4" y="1731.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.4" y="1742.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1176.4" y="1715.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="1726.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1176.4" y="1699.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.4" y="1710.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1176.4" y="1683.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="1694.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1176.4" y="1667.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.4" y="1678.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1176.4" y="1651.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.4" y="1662.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.08%)</title><rect x="1176.4" y="1635.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.4" y="1646.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1176.4" y="1619.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="1630.0"></text>
</g>
<g>
<title>ciTypeFlow::JsrSet::JsrSet(Arena*, int) (1 samples, 0.08%)</title><rect x="1176.4" y="1603.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.4" y="1614.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.08%)</title><rect x="1176.4" y="1587.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.4" y="1598.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.46%)</title><rect x="1177.3" y="1715.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.3" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.46%)</title><rect x="1177.3" y="1699.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.3" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.46%)</title><rect x="1177.3" y="1683.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.3" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.46%)</title><rect x="1177.3" y="1667.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.3" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.46%)</title><rect x="1177.3" y="1651.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.3" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.46%)</title><rect x="1177.3" y="1635.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.3" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.46%)</title><rect x="1177.3" y="1619.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.3" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.46%)</title><rect x="1177.3" y="1603.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.3" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.46%)</title><rect x="1177.3" y="1587.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.46%)</title><rect x="1177.3" y="1571.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.46%)</title><rect x="1177.3" y="1555.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.38%)</title><rect x="1177.3" y="1539.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.3" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1177.3" y="1523.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.3" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1177.3" y="1507.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.3" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1177.3" y="1491.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1177.3" y="1475.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1177.3" y="1459.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1177.3" y="1443.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1177.3" y="1427.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.3" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1177.3" y="1411.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.3" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1177.3" y="1395.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1177.3" y="1379.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1177.3" y="1363.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1177.3" y="1347.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.3" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.3" y="1331.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.3" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.3" y="1315.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.3" y="1299.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.3" y="1283.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.3" y="1267.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.3" y="1251.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.3" y="1262.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.3" y="1235.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.3" y="1246.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1177.3" y="1219.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="1230.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1177.3" y="1203.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.3" y="1214.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1177.3" y="1187.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.3" y="1198.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1177.3" y="1171.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.3" y="1182.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1178.2" y="1331.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="1342.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1178.2" y="1315.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.2" y="1326.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1178.2" y="1299.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.2" y="1310.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1178.2" y="1283.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.2" y="1294.0"></text>
</g>
<g>
<title>ciInstanceKlass::loader() (1 samples, 0.08%)</title><rect x="1178.2" y="1267.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.2" y="1278.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.1" y="1427.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.1" y="1438.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.1" y="1411.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.1" y="1395.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.1" y="1379.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.1" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.1" y="1363.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.1" y="1347.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.1" y="1331.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.1" y="1315.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.1" y="1299.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.1" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.1" y="1283.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.1" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.1" y="1267.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.1" y="1251.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.1" y="1235.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.1" y="1219.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.1" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.1" y="1203.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.1" y="1187.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.1" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.1" y="1171.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.1" y="1155.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.1" y="1139.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.1" y="1123.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="1134.0"></text>
</g>
<g>
<title>GraphKit::round_double_result(ciMethod*) (1 samples, 0.08%)</title><rect x="1179.1" y="1107.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="1118.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.0" y="1523.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.0" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.0" y="1507.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.0" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.0" y="1491.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.0" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.0" y="1475.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.0" y="1459.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.0" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.0" y="1443.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.0" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.0" y="1427.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.0" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1180.0" y="1411.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.0" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1180.0" y="1395.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.0" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1180.0" y="1379.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.0" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1180.0" y="1363.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.0" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1180.0" y="1347.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.0" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1180.0" y="1331.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.0" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.0" y="1315.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.0" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.0" y="1299.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.0" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.0" y="1283.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.0" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.0" y="1267.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.0" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.0" y="1251.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.0" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.0" y="1235.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.0" y="1246.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.08%)</title><rect x="1180.0" y="1219.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.0" y="1230.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.9" y="1315.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.9" y="1299.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.9" y="1283.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.9" y="1267.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.9" y="1251.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.9" y="1235.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.9" y="1219.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.9" y="1203.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.9" y="1187.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.9" y="1171.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.9" y="1155.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.9" y="1139.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="1150.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1180.9" y="1123.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="1134.0"></text>
</g>
<g>
<title>ConstraintCastNode::ConstraintCastNode(Node*, Type const*) (1 samples, 0.08%)</title><rect x="1180.9" y="1107.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1181.8" y="1539.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.8" y="1550.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1181.8" y="1523.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.8" y="1534.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1181.8" y="1507.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="1518.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1181.8" y="1491.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="1502.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1181.8" y="1475.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.8" y="1486.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1181.8" y="1459.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.8" y="1470.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1181.8" y="1443.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.8" y="1454.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (4 samples, 0.31%)</title><rect x="1182.8" y="1907.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (3 samples, 0.23%)</title><rect x="1182.8" y="1891.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="1902.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1185.5" y="1891.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1188.5" y="1902.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.08%)</title><rect x="1186.4" y="1907.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.4" y="1918.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.08%)</title><rect x="1186.4" y="1891.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.4" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1186.4" y="1875.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.4" y="1886.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1187.3" y="1939.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.3" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1187.3" y="1923.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.3" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1187.3" y="1907.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.3" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1187.3" y="1891.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.3" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1187.3" y="1875.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.3" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1187.3" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.3" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1187.3" y="1843.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.3" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1187.3" y="1827.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.3" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1187.3" y="1811.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.3" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1187.3" y="1795.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.3" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1187.3" y="1779.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.3" y="1790.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1187.3" y="1763.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.3" y="1774.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1187.3" y="1747.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.3" y="1758.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1187.3" y="1731.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.3" y="1742.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1187.3" y="1715.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.3" y="1726.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1187.3" y="1699.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.3" y="1710.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1187.3" y="1683.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.3" y="1694.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.08%)</title><rect x="1187.3" y="1667.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.3" y="1678.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.15%)</title><rect x="1188.2" y="2003.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.2" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.15%)</title><rect x="1188.2" y="1987.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.2" y="1998.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.15%)</title><rect x="1188.2" y="1971.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.2" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.15%)</title><rect x="1188.2" y="1955.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.2" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.15%)</title><rect x="1188.2" y="1939.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.2" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.15%)</title><rect x="1188.2" y="1923.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.2" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::eagerly_reclaim_humongous_regions() (1 samples, 0.08%)</title><rect x="1188.2" y="1907.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.2" y="1918.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.08%)</title><rect x="1188.2" y="1891.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.2" y="1902.0"></text>
</g>
<g>
<title>G1FreeHumongousRegionClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1188.2" y="1875.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.2" y="1886.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_humongous_region(HeapRegion*, FreeRegionList*, bool) (1 samples, 0.08%)</title><rect x="1188.2" y="1859.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.2" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.08%)</title><rect x="1188.2" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.2" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="1188.2" y="1827.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.2" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.1" y="1907.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.1" y="1918.0"></text>
</g>
<g>
<title>FreeRegionList::add_ordered(FreeRegionList*) (1 samples, 0.08%)</title><rect x="1189.1" y="1891.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.1" y="1902.0"></text>
</g>
</g>
</svg>
