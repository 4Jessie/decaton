<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="677"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="677"> </text>
<g id="frames">
<g>
<title>all (1,170 samples, 100.00%)</title><rect x="10.0" y="643.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="654.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (298 samples, 25.47%)</title><rect x="10.0" y="627.0" width="300.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="638.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (296 samples, 25.30%)</title><rect x="10.0" y="611.0" width="298.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="622.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.26%)</title><rect x="10.0" y="595.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.26%)</title><rect x="10.0" y="579.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/51320506.accept (3 samples, 0.26%)</title><rect x="10.0" y="563.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.26%)</title><rect x="10.0" y="547.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.26%)</title><rect x="10.0" y="531.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.26%)</title><rect x="10.0" y="515.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.09%)</title><rect x="12.0" y="499.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.0" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (5 samples, 0.43%)</title><rect x="13.0" y="595.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (5 samples, 0.43%)</title><rect x="13.0" y="579.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.0" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (5 samples, 0.43%)</title><rect x="13.0" y="563.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (5 samples, 0.43%)</title><rect x="13.0" y="547.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (5 samples, 0.43%)</title><rect x="13.0" y="531.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.34%)</title><rect x="13.0" y="515.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.0" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="13.0" y="499.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="13.0" y="483.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.0" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="13.0" y="467.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.0" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="13.0" y="451.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.0" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$265/147037339.test (1 samples, 0.09%)</title><rect x="13.0" y="435.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.0" y="446.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="14.0" y="483.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.0" y="494.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="14.0" y="467.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="17.0" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="15.0" y="483.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.0" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="16.1" y="499.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="16.1" y="483.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.1" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="16.1" y="467.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.1" y="478.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="16.1" y="451.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.1" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.09%)</title><rect x="17.1" y="515.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.09%)</title><rect x="17.1" y="499.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.1" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="17.1" y="483.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.1" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.09%)</title><rect x="18.1" y="595.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="18.1" y="579.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.1" y="590.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (232 samples, 19.83%)</title><rect x="19.1" y="595.0" width="234.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.1" y="606.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1241035899.accept (230 samples, 19.66%)</title><rect x="19.1" y="579.0" width="231.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.1" y="590.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$68 (230 samples, 19.66%)</title><rect x="19.1" y="563.0" width="231.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="574.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (178 samples, 15.21%)</title><rect x="20.1" y="547.0" width="179.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.1" y="558.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (178 samples, 15.21%)</title><rect x="20.1" y="531.0" width="179.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.1" y="542.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (178 samples, 15.21%)</title><rect x="20.1" y="515.0" width="179.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.1" y="526.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (178 samples, 15.21%)</title><rect x="20.1" y="499.0" width="179.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.1" y="510.0">java/util/concurrent/Ex..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (178 samples, 15.21%)</title><rect x="20.1" y="483.0" width="179.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="494.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (178 samples, 15.21%)</title><rect x="20.1" y="467.0" width="179.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.1" y="478.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (115 samples, 9.83%)</title><rect x="20.1" y="451.0" width="116.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.1" y="462.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (31 samples, 2.65%)</title><rect x="20.1" y="435.0" width="31.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.1" y="446.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (31 samples, 2.65%)</title><rect x="20.1" y="419.0" width="31.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.1" y="430.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="37.2" y="403.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (13 samples, 1.11%)</title><rect x="38.2" y="403.0" width="13.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (13 samples, 1.11%)</title><rect x="38.2" y="387.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.60%)</title><rect x="51.4" y="435.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (7 samples, 0.60%)</title><rect x="51.4" y="419.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="54.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.17%)</title><rect x="52.4" y="403.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.4" y="414.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.17%)</title><rect x="52.4" y="387.0" width="2.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="55.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.34%)</title><rect x="54.4" y="403.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="57.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (77 samples, 6.58%)</title><rect x="58.4" y="435.0" width="77.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.4" y="446.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (77 samples, 6.58%)</title><rect x="58.4" y="419.0" width="77.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.4" y="430.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (76 samples, 6.50%)</title><rect x="58.4" y="403.0" width="76.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.4" y="414.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (75 samples, 6.41%)</title><rect x="58.4" y="387.0" width="75.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.4" y="398.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (72 samples, 6.15%)</title><rect x="61.4" y="371.0" width="72.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.4" y="382.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (64 samples, 5.47%)</title><rect x="61.4" y="355.0" width="64.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="64.4" y="366.0">Unsafe_..</text>
</g>
<g>
<title>__pthread_cond_signal (46 samples, 3.93%)</title><rect x="62.4" y="339.0" width="46.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="65.4" y="350.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.17%)</title><rect x="108.8" y="339.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="111.8" y="350.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.28%)</title><rect x="110.9" y="339.0" width="15.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="113.9" y="350.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.43%)</title><rect x="126.0" y="355.0" width="5.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="129.0" y="366.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.26%)</title><rect x="131.0" y="355.0" width="3.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="134.0" y="366.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.09%)</title><rect x="134.1" y="387.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="137.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="135.1" y="403.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="138.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (53 samples, 4.53%)</title><rect x="136.1" y="451.0" width="53.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="139.1" y="462.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (53 samples, 4.53%)</title><rect x="136.1" y="435.0" width="53.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="139.1" y="446.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (53 samples, 4.53%)</title><rect x="136.1" y="419.0" width="53.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="139.1" y="430.0">java/..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="187.5" y="403.0" width="2.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="190.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.43%)</title><rect x="189.5" y="451.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (5 samples, 0.43%)</title><rect x="189.5" y="435.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.43%)</title><rect x="189.5" y="419.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="193.6" y="403.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.43%)</title><rect x="194.6" y="451.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.43%)</title><rect x="194.6" y="435.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="197.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (5 samples, 0.43%)</title><rect x="194.6" y="419.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="197.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="195.6" y="403.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.26%)</title><rect x="196.6" y="403.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.6" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (3 samples, 0.26%)</title><rect x="199.6" y="547.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.6" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.26%)</title><rect x="199.6" y="531.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.6" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.17%)</title><rect x="202.6" y="547.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="202.6" y="531.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="202.6" y="515.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.6" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (46 samples, 3.93%)</title><rect x="204.6" y="547.0" width="46.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.6" y="558.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (45 samples, 3.85%)</title><rect x="205.7" y="531.0" width="45.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="208.7" y="542.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (17 samples, 1.45%)</title><rect x="229.9" y="515.0" width="17.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.9" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.85%)</title><rect x="229.9" y="499.0" width="10.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.9" y="510.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.85%)</title><rect x="229.9" y="483.0" width="10.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="232.9" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.85%)</title><rect x="229.9" y="467.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.9" y="478.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="238.9" y="451.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="241.9" y="462.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.26%)</title><rect x="239.9" y="499.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.9" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.34%)</title><rect x="243.0" y="499.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.0" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.34%)</title><rect x="247.0" y="515.0" width="4.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="250.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.17%)</title><rect x="251.0" y="579.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.17%)</title><rect x="251.0" y="563.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.17%)</title><rect x="251.0" y="547.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.17%)</title><rect x="251.0" y="531.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.09%)</title><rect x="252.1" y="515.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.1" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="252.1" y="499.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.70%)</title><rect x="253.1" y="595.0" width="55.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.1" y="606.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.70%)</title><rect x="253.1" y="579.0" width="55.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.1" y="590.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (34 samples, 2.91%)</title><rect x="253.1" y="563.0" width="34.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="256.1" y="574.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (34 samples, 2.91%)</title><rect x="253.1" y="547.0" width="34.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.1" y="558.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 2.91%)</title><rect x="253.1" y="531.0" width="34.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.1" y="542.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (29 samples, 2.48%)</title><rect x="253.1" y="515.0" width="29.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.1" y="526.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (29 samples, 2.48%)</title><rect x="253.1" y="499.0" width="29.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.1" y="510.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.20%)</title><rect x="254.1" y="483.0" width="14.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="257.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.43%)</title><rect x="263.1" y="467.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.43%)</title><rect x="263.1" y="451.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.43%)</title><rect x="263.1" y="435.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.43%)</title><rect x="263.1" y="419.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.1" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.43%)</title><rect x="263.1" y="403.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.1" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.43%)</title><rect x="263.1" y="387.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.1" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.43%)</title><rect x="263.1" y="371.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="266.1" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.20%)</title><rect x="268.2" y="483.0" width="14.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 1.20%)</title><rect x="268.2" y="467.0" width="14.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="271.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.60%)</title><rect x="268.2" y="451.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="271.2" y="462.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.60%)</title><rect x="268.2" y="435.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (7 samples, 0.60%)</title><rect x="275.2" y="451.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.2" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (7 samples, 0.60%)</title><rect x="275.2" y="435.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.2" y="446.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="281.3" y="419.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="284.3" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.09%)</title><rect x="282.3" y="515.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="282.3" y="499.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="282.3" y="483.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="282.3" y="467.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="285.3" y="478.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="282.3" y="451.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="285.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.26%)</title><rect x="283.3" y="515.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.26%)</title><rect x="283.3" y="499.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.09%)</title><rect x="283.3" y="483.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.3" y="494.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="283.3" y="467.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="286.3" y="478.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="283.3" y="451.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="284.3" y="483.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="284.3" y="467.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="287.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="285.3" y="483.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="285.3" y="467.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="288.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="285.3" y="451.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="285.3" y="435.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="288.3" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="286.3" y="515.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.09%)</title><rect x="286.3" y="499.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.77%)</title><rect x="287.4" y="563.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.77%)</title><rect x="287.4" y="547.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="290.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.60%)</title><rect x="287.4" y="531.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="290.4" y="542.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="287.4" y="515.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/811957465.accept (1 samples, 0.09%)</title><rect x="287.4" y="499.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="287.4" y="483.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="290.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="287.4" y="467.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="290.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="287.4" y="451.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.4" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="287.4" y="435.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.4" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="287.4" y="419.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.17%)</title><rect x="288.4" y="515.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.17%)</title><rect x="288.4" y="499.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.26%)</title><rect x="290.4" y="515.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.26%)</title><rect x="290.4" y="499.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.4" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (3 samples, 0.26%)</title><rect x="290.4" y="483.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.4" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.09%)</title><rect x="290.4" y="467.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.4" y="478.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.09%)</title><rect x="290.4" y="451.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.4" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="290.4" y="435.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.4" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.09%)</title><rect x="291.4" y="467.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="294.4" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="291.4" y="451.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.4" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.09%)</title><rect x="291.4" y="435.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.4" y="446.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="292.4" y="467.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.4" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="292.4" y="451.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="295.4" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="292.4" y="435.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.4" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.09%)</title><rect x="292.4" y="419.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.09%)</title><rect x="293.4" y="515.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="293.4" y="499.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.4" y="510.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.09%)</title><rect x="293.4" y="483.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.17%)</title><rect x="294.4" y="531.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.4" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.17%)</title><rect x="294.4" y="515.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.4" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="294.4" y="499.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.4" y="510.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="295.4" y="483.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.4" y="494.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="295.4" y="467.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="298.4" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="295.4" y="451.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.4" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="295.4" y="435.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.4" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="295.4" y="419.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="298.4" y="430.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="295.4" y="403.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.4" y="414.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="295.4" y="387.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="298.4" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.09%)</title><rect x="296.4" y="563.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.26%)</title><rect x="297.4" y="563.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.17%)</title><rect x="297.4" y="547.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.17%)</title><rect x="297.4" y="531.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="300.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.17%)</title><rect x="297.4" y="515.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="300.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.17%)</title><rect x="297.4" y="499.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="300.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.17%)</title><rect x="297.4" y="483.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.4" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.17%)</title><rect x="297.4" y="467.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="300.4" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.17%)</title><rect x="297.4" y="451.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="300.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="299.5" y="547.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="299.5" y="531.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="299.5" y="515.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="299.5" y="499.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClientRequest.makeHeader (1 samples, 0.09%)</title><rect x="299.5" y="483.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="302.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.51%)</title><rect x="300.5" y="563.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.43%)</title><rect x="301.5" y="547.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="304.5" y="558.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="301.5" y="531.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="304.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/183456992.accept (1 samples, 0.09%)</title><rect x="301.5" y="515.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="304.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="301.5" y="499.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="304.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="301.5" y="483.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="301.5" y="467.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="304.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="301.5" y="451.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="304.5" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="301.5" y="435.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.5" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="301.5" y="419.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="304.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.09%)</title><rect x="302.5" y="531.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.5" y="542.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="302.5" y="515.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.26%)</title><rect x="303.5" y="531.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="306.5" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.17%)</title><rect x="303.5" y="515.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="306.5" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="304.5" y="499.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="307.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="305.5" y="515.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.5" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="305.5" y="499.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.5" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="305.5" y="483.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.5" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="305.5" y="467.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.5" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="305.5" y="451.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.5" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="305.5" y="435.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.5" y="446.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="305.5" y="419.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.5" y="430.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="305.5" y="403.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.5" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="305.5" y="387.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.5" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="305.5" y="371.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.5" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="305.5" y="355.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.5" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="305.5" y="339.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.5" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.09%)</title><rect x="305.5" y="323.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.5" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.09%)</title><rect x="306.5" y="563.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="309.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="306.5" y="547.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="307.5" y="563.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="310.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="307.5" y="547.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="307.5" y="531.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="310.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="307.5" y="515.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="310.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="307.5" y="499.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="307.5" y="483.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.09%)</title><rect x="307.5" y="467.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.5" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="308.5" y="611.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.5" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="308.5" y="595.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="311.5" y="606.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.09%)</title><rect x="309.5" y="611.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="312.5" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (769 samples, 65.73%)</title><rect x="310.5" y="627.0" width="775.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.5" y="638.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (769 samples, 65.73%)</title><rect x="310.5" y="611.0" width="775.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="313.5" y="622.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (769 samples, 65.73%)</title><rect x="310.5" y="595.0" width="775.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="313.5" y="606.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1675355831.run (534 samples, 45.64%)</title><rect x="314.6" y="579.0" width="538.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="317.6" y="590.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/167535583..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (534 samples, 45.64%)</title><rect x="314.6" y="563.0" width="538.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="317.6" y="574.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (534 samples, 45.64%)</title><rect x="314.6" y="547.0" width="538.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.6" y="558.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (527 samples, 45.04%)</title><rect x="314.6" y="531.0" width="531.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="317.6" y="542.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.94%)</title><rect x="326.7" y="515.0" width="11.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="329.7" y="526.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.85%)</title><rect x="327.7" y="499.0" width="10.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="330.7" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (152 samples, 12.99%)</title><rect x="337.8" y="515.0" width="153.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="340.8" y="526.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/580718781.extract (152 samples, 12.99%)</title><rect x="337.8" y="499.0" width="153.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="340.8" y="510.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (152 samples, 12.99%)</title><rect x="337.8" y="483.0" width="153.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="340.8" y="494.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (152 samples, 12.99%)</title><rect x="337.8" y="467.0" width="153.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="340.8" y="478.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (152 samples, 12.99%)</title><rect x="337.8" y="451.0" width="153.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="340.8" y="462.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (152 samples, 12.99%)</title><rect x="337.8" y="435.0" width="153.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="340.8" y="446.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (44 samples, 3.76%)</title><rect x="337.8" y="419.0" width="44.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="340.8" y="430.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (11 samples, 0.94%)</title><rect x="337.8" y="403.0" width="11.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="340.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (11 samples, 0.94%)</title><rect x="337.8" y="387.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (11 samples, 0.94%)</title><rect x="337.8" y="371.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.8" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.94%)</title><rect x="337.8" y="355.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="340.8" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.26%)</title><rect x="344.8" y="339.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="347.8" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.26%)</title><rect x="344.8" y="323.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="347.8" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.26%)</title><rect x="344.8" y="307.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="347.8" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.09%)</title><rect x="347.9" y="339.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="350.9" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (33 samples, 2.82%)</title><rect x="348.9" y="403.0" width="33.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="351.9" y="414.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (33 samples, 2.82%)</title><rect x="348.9" y="387.0" width="33.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="351.9" y="398.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (10 samples, 0.85%)</title><rect x="348.9" y="371.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="351.9" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (10 samples, 0.85%)</title><rect x="348.9" y="355.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="351.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.09%)</title><rect x="357.9" y="339.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.9" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (13 samples, 1.11%)</title><rect x="359.0" y="371.0" width="13.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="362.0" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="359.0" y="355.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="362.0" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="360.0" y="339.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="363.0" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="360.0" y="323.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="363.0" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="360.0" y="307.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="363.0" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (11 samples, 0.94%)</title><rect x="361.0" y="355.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="364.0" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (1 samples, 0.09%)</title><rect x="367.0" y="339.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="370.0" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.26%)</title><rect x="368.0" y="339.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="371.0" y="350.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="371.1" y="339.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="374.1" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (10 samples, 0.85%)</title><rect x="372.1" y="371.0" width="10.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="375.1" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="372.1" y="355.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="375.1" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="372.1" y="339.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="375.1" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="372.1" y="323.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="375.1" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="372.1" y="307.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="375.1" y="318.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="372.1" y="291.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="375.1" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (5 samples, 0.43%)</title><rect x="373.1" y="355.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="376.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (2 samples, 0.17%)</title><rect x="376.1" y="339.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="379.1" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (4 samples, 0.34%)</title><rect x="378.1" y="355.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="381.1" y="366.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.17%)</title><rect x="380.1" y="339.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="383.1" y="350.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.17%)</title><rect x="380.1" y="323.0" width="2.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="383.1" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (96 samples, 8.21%)</title><rect x="382.2" y="419.0" width="96.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="385.2" y="430.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.34%)</title><rect x="382.2" y="403.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="385.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.34%)</title><rect x="382.2" y="387.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (4 samples, 0.34%)</title><rect x="382.2" y="371.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="385.2" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (4 samples, 0.34%)</title><rect x="382.2" y="355.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="385.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (2 samples, 0.17%)</title><rect x="382.2" y="339.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="385.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (2 samples, 0.17%)</title><rect x="382.2" y="323.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="385.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (2 samples, 0.17%)</title><rect x="382.2" y="307.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="385.2" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.resetWithEmpty (2 samples, 0.17%)</title><rect x="384.2" y="339.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="387.2" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (9 samples, 0.77%)</title><rect x="386.2" y="403.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="389.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.77%)</title><rect x="386.2" y="387.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.17%)</title><rect x="393.2" y="371.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="396.2" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.68%)</title><rect x="395.3" y="403.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="398.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.51%)</title><rect x="397.3" y="387.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="400.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.43%)</title><rect x="398.3" y="371.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="401.3" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.26%)</title><rect x="400.3" y="355.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="403.3" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.17%)</title><rect x="401.3" y="339.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.3" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (15 samples, 1.28%)</title><rect x="403.3" y="403.0" width="15.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="406.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="404.3" y="387.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="407.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (13 samples, 1.11%)</title><rect x="405.4" y="387.0" width="13.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="408.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (60 samples, 5.13%)</title><rect x="418.5" y="403.0" width="60.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="421.5" y="414.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.60%)</title><rect x="419.5" y="387.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="422.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="424.5" y="371.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="427.5" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="424.5" y="355.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="427.5" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="425.5" y="371.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="428.5" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (52 samples, 4.44%)</title><rect x="426.5" y="387.0" width="52.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="429.5" y="398.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (52 samples, 4.44%)</title><rect x="426.5" y="371.0" width="52.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="429.5" y="382.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (51 samples, 4.36%)</title><rect x="427.5" y="355.0" width="51.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="430.5" y="366.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.94%)</title><rect x="430.6" y="339.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.6" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.26%)</title><rect x="432.6" y="323.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="435.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.43%)</title><rect x="435.6" y="323.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="438.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.43%)</title><rect x="435.6" y="307.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="438.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.43%)</title><rect x="435.6" y="291.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="438.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.34%)</title><rect x="436.6" y="275.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="439.6" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="440.6" y="323.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="443.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="440.6" y="307.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="443.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="440.6" y="291.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.26%)</title><rect x="441.7" y="339.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="444.7" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.26%)</title><rect x="441.7" y="323.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="444.7" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.26%)</title><rect x="441.7" y="307.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="444.7" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.26%)</title><rect x="441.7" y="291.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="444.7" y="302.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.26%)</title><rect x="441.7" y="275.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="444.7" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.17%)</title><rect x="444.7" y="339.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="447.7" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (13 samples, 1.11%)</title><rect x="446.7" y="339.0" width="13.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.7" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (13 samples, 1.11%)</title><rect x="446.7" y="323.0" width="13.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="449.7" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (13 samples, 1.11%)</title><rect x="446.7" y="307.0" width="13.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="449.7" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (13 samples, 1.11%)</title><rect x="446.7" y="291.0" width="13.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="449.7" y="302.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (13 samples, 1.11%)</title><rect x="446.7" y="275.0" width="13.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="449.7" y="286.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (13 samples, 1.11%)</title><rect x="446.7" y="259.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="449.7" y="270.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (13 samples, 1.11%)</title><rect x="446.7" y="243.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="449.7" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="458.8" y="227.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="461.8" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (10 samples, 0.85%)</title><rect x="459.8" y="339.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="462.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.85%)</title><rect x="459.8" y="323.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="462.8" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.85%)</title><rect x="459.8" y="307.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="462.8" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.17%)</title><rect x="467.9" y="291.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="470.9" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (9 samples, 0.77%)</title><rect x="469.9" y="339.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="472.9" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 1.03%)</title><rect x="479.0" y="419.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="482.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 1.03%)</title><rect x="479.0" y="403.0" width="12.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="482.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 1.03%)</title><rect x="479.0" y="387.0" width="12.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="482.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (12 samples, 1.03%)</title><rect x="479.0" y="371.0" width="12.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="482.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (12 samples, 1.03%)</title><rect x="479.0" y="355.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="482.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.09%)</title><rect x="486.0" y="339.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="489.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (4 samples, 0.34%)</title><rect x="487.0" y="339.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.0" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (322 samples, 27.52%)</title><rect x="491.1" y="515.0" width="324.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="494.1" y="526.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (66 samples, 5.64%)</title><rect x="493.1" y="499.0" width="66.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="496.1" y="510.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.17%)</title><rect x="495.1" y="483.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="498.1" y="494.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (62 samples, 5.30%)</title><rect x="497.1" y="483.0" width="62.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="500.1" y="494.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (60 samples, 5.13%)</title><rect x="499.1" y="467.0" width="60.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="502.1" y="478.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.68%)</title><rect x="501.2" y="451.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="504.2" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.68%)</title><rect x="501.2" y="435.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="504.2" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.68%)</title><rect x="501.2" y="419.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="504.2" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.68%)</title><rect x="501.2" y="403.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="504.2" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="509.2" y="451.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="512.2" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="509.2" y="435.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.2" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="509.2" y="419.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="512.2" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="509.2" y="403.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="512.2" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.17%)</title><rect x="509.2" y="387.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="512.2" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (48 samples, 4.10%)</title><rect x="511.2" y="451.0" width="48.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="514.2" y="462.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (24 samples, 2.05%)</title><rect x="535.5" y="435.0" width="24.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="538.5" y="446.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="535.5" y="419.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="538.5" y="430.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="535.5" y="403.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="538.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (23 samples, 1.97%)</title><rect x="536.5" y="419.0" width="23.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="539.5" y="430.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (9 samples, 0.77%)</title><rect x="550.6" y="403.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="553.6" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.51%)</title><rect x="559.7" y="499.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="562.7" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.51%)</title><rect x="559.7" y="483.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="562.7" y="494.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.51%)</title><rect x="559.7" y="467.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="562.7" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (174 samples, 14.87%)</title><rect x="565.7" y="499.0" width="175.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="568.7" y="510.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="565.7" y="483.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="568.7" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="565.7" y="467.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="568.7" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="565.7" y="451.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="568.7" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="565.7" y="435.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="568.7" y="446.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="565.7" y="419.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="568.7" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (173 samples, 14.79%)</title><rect x="566.7" y="483.0" width="174.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="569.7" y="494.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.43%)</title><rect x="576.8" y="467.0" width="5.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="579.8" y="478.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="576.8" y="451.0" width="5.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="579.8" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (51 samples, 4.36%)</title><rect x="581.8" y="467.0" width="51.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="584.8" y="478.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (39 samples, 3.33%)</title><rect x="587.9" y="451.0" width="39.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="590.9" y="462.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (38 samples, 3.25%)</title><rect x="588.9" y="435.0" width="38.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="591.9" y="446.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (26 samples, 2.22%)</title><rect x="599.0" y="419.0" width="26.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="602.0" y="430.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (26 samples, 2.22%)</title><rect x="599.0" y="403.0" width="26.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="602.0" y="414.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (26 samples, 2.22%)</title><rect x="599.0" y="387.0" width="26.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="602.0" y="398.0">j..</text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="609.1" y="371.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="612.1" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.85%)</title><rect x="610.1" y="371.0" width="10.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="613.1" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.43%)</title><rect x="610.1" y="355.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="613.1" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="611.1" y="339.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="614.1" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="611.1" y="323.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="614.1" y="334.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="612.1" y="339.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="615.1" y="350.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.17%)</title><rect x="613.1" y="339.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="616.1" y="350.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.17%)</title><rect x="613.1" y="323.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="616.1" y="334.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="614.1" y="307.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="617.1" y="318.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.34%)</title><rect x="615.1" y="355.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="618.1" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.34%)</title><rect x="615.1" y="339.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="618.1" y="350.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="615.1" y="323.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="618.1" y="334.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="615.1" y="307.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="618.1" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="616.1" y="323.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="619.1" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="616.1" y="307.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="619.1" y="318.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="616.1" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="619.1" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="616.1" y="275.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="619.1" y="286.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="616.1" y="259.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="619.1" y="270.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="616.1" y="243.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="619.1" y="254.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="616.1" y="227.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="619.1" y="238.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="616.1" y="211.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="619.1" y="222.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.09%)</title><rect x="617.1" y="323.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="620.1" y="334.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="618.2" y="323.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="621.2" y="334.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.09%)</title><rect x="619.2" y="355.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="622.2" y="366.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.43%)</title><rect x="620.2" y="371.0" width="5.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="623.2" y="382.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.09%)</title><rect x="625.2" y="419.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="628.2" y="430.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="626.2" y="419.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="629.2" y="430.0"></text>
</g>
<g>
<title>jshort_arraycopy (4 samples, 0.34%)</title><rect x="627.2" y="451.0" width="4.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="630.2" y="462.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="631.3" y="451.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="634.3" y="462.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.77%)</title><rect x="633.3" y="467.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="636.3" y="478.0"></text>
</g>
<g>
<title>java/lang/Long.toString (9 samples, 0.77%)</title><rect x="633.3" y="451.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="636.3" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (9 samples, 0.77%)</title><rect x="633.3" y="435.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="636.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.09%)</title><rect x="641.4" y="419.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="644.4" y="430.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (98 samples, 8.38%)</title><rect x="642.4" y="467.0" width="98.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="645.4" y="478.0">org/slf4j/MD..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (97 samples, 8.29%)</title><rect x="643.4" y="451.0" width="97.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="646.4" y="462.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.26%)</title><rect x="643.4" y="435.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="646.4" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.26%)</title><rect x="643.4" y="419.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="646.4" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.26%)</title><rect x="643.4" y="403.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="646.4" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.26%)</title><rect x="643.4" y="387.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="646.4" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.26%)</title><rect x="646.4" y="435.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="649.4" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.26%)</title><rect x="646.4" y="419.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="649.4" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.26%)</title><rect x="646.4" y="403.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="649.4" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.26%)</title><rect x="646.4" y="387.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="649.4" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="648.4" y="371.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="651.4" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (91 samples, 7.78%)</title><rect x="649.4" y="435.0" width="91.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="652.4" y="446.0">java/util/C..</text>
</g>
<g>
<title>java/util/HashMap.put (81 samples, 6.92%)</title><rect x="659.5" y="419.0" width="81.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="662.5" y="430.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.putVal (35 samples, 2.99%)</title><rect x="705.9" y="403.0" width="35.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="708.9" y="414.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (7 samples, 0.60%)</title><rect x="728.1" y="387.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="731.1" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.51%)</title><rect x="735.1" y="387.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="738.1" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="737.2" y="371.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="740.2" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.26%)</title><rect x="738.2" y="371.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="741.2" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.26%)</title><rect x="738.2" y="355.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="741.2" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.26%)</title><rect x="738.2" y="339.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="741.2" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="739.2" y="323.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="742.2" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="739.2" y="307.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="742.2" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="739.2" y="291.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="742.2" y="302.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="739.2" y="275.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="742.2" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="739.2" y="259.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="742.2" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.09%)</title><rect x="739.2" y="243.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="742.2" y="254.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.09%)</title><rect x="739.2" y="227.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="742.2" y="238.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="740.2" y="307.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="743.2" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (56 samples, 4.79%)</title><rect x="741.2" y="499.0" width="56.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="744.2" y="510.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (56 samples, 4.79%)</title><rect x="741.2" y="483.0" width="56.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="744.2" y="494.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1895118244.process (23 samples, 1.97%)</title><rect x="743.2" y="467.0" width="23.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="746.2" y="478.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (21 samples, 1.79%)</title><rect x="744.2" y="451.0" width="21.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="747.2" y="462.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (19 samples, 1.62%)</title><rect x="744.2" y="435.0" width="19.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="747.2" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 0.43%)</title><rect x="746.2" y="419.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="749.2" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 0.43%)</title><rect x="746.2" y="403.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="749.2" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (5 samples, 0.43%)</title><rect x="746.2" y="387.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="749.2" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (5 samples, 0.43%)</title><rect x="746.2" y="371.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="749.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.26%)</title><rect x="748.3" y="355.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="751.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="750.3" y="339.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="753.3" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (2 samples, 0.17%)</title><rect x="751.3" y="419.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="754.3" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.17%)</title><rect x="751.3" y="403.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="754.3" y="414.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="751.3" y="387.0" width="2.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="754.3" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.85%)</title><rect x="753.3" y="419.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="756.3" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.17%)</title><rect x="763.4" y="435.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="766.4" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="764.4" y="419.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="767.4" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="764.4" y="403.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="767.4" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="764.4" y="387.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="767.4" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="765.4" y="451.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="768.4" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (2 samples, 0.17%)</title><rect x="766.4" y="467.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="769.4" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.43%)</title><rect x="768.4" y="467.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="771.4" y="478.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.43%)</title><rect x="768.4" y="451.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="771.4" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1172131546.linkToTargetMethod (5 samples, 0.43%)</title><rect x="773.5" y="467.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="776.5" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (5 samples, 0.43%)</title><rect x="773.5" y="451.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="776.5" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/1473661109.get$Lambda (5 samples, 0.43%)</title><rect x="773.5" y="435.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="776.5" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/1473661109.&lt;init&gt; (5 samples, 0.43%)</title><rect x="773.5" y="419.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="776.5" y="430.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.17%)</title><rect x="778.5" y="467.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="781.5" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.60%)</title><rect x="780.5" y="467.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="783.5" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.26%)</title><rect x="784.6" y="451.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="787.6" y="462.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.17%)</title><rect x="784.6" y="435.0" width="2.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="787.6" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.09%)</title><rect x="786.6" y="435.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="789.6" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.26%)</title><rect x="787.6" y="467.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="790.6" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.17%)</title><rect x="788.6" y="451.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="791.6" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.60%)</title><rect x="790.6" y="467.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="793.6" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.17%)</title><rect x="795.7" y="451.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="798.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.54%)</title><rect x="797.7" y="499.0" width="18.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="800.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 1.54%)</title><rect x="797.7" y="483.0" width="18.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="800.7" y="494.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="806.8" y="467.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="809.8" y="478.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="806.8" y="451.0" width="2.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="809.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.60%)</title><rect x="808.8" y="467.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="811.8" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/200018135.accept (7 samples, 0.60%)</title><rect x="808.8" y="451.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="811.8" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (7 samples, 0.60%)</title><rect x="808.8" y="435.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="811.8" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/329528017.complete (7 samples, 0.60%)</title><rect x="808.8" y="419.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="811.8" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (7 samples, 0.60%)</title><rect x="808.8" y="403.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="811.8" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1677017611.complete (7 samples, 0.60%)</title><rect x="808.8" y="387.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="811.8" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (7 samples, 0.60%)</title><rect x="808.8" y="371.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="811.8" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (7 samples, 0.60%)</title><rect x="808.8" y="355.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="811.8" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 0.60%)</title><rect x="808.8" y="339.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="811.8" y="350.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 0.60%)</title><rect x="808.8" y="323.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="811.8" y="334.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (7 samples, 0.60%)</title><rect x="808.8" y="307.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="811.8" y="318.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="811.8" y="291.0" width="4.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="814.8" y="302.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="811.8" y="275.0" width="4.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="814.8" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/831236296.linkToTargetMethod (1 samples, 0.09%)</title><rect x="815.8" y="515.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="818.8" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="815.8" y="499.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="818.8" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/200018135.get$Lambda (1 samples, 0.09%)</title><rect x="815.8" y="483.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="818.8" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="815.8" y="467.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="818.8" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="815.8" y="451.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="818.8" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="815.8" y="435.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="818.8" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="815.8" y="419.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="818.8" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="815.8" y="403.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="818.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 1.79%)</title><rect x="816.8" y="515.0" width="21.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="819.8" y="526.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 1.79%)</title><rect x="816.8" y="499.0" width="21.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="819.8" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 1.54%)</title><rect x="819.9" y="483.0" width="18.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="822.9" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/200018135.accept (18 samples, 1.54%)</title><rect x="819.9" y="467.0" width="18.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.9" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (18 samples, 1.54%)</title><rect x="819.9" y="451.0" width="18.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="822.9" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/329528017.complete (18 samples, 1.54%)</title><rect x="819.9" y="435.0" width="18.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="822.9" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (18 samples, 1.54%)</title><rect x="819.9" y="419.0" width="18.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="822.9" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1677017611.complete (18 samples, 1.54%)</title><rect x="819.9" y="403.0" width="18.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="822.9" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (18 samples, 1.54%)</title><rect x="819.9" y="387.0" width="18.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.9" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (18 samples, 1.54%)</title><rect x="819.9" y="371.0" width="18.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="822.9" y="382.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (18 samples, 1.54%)</title><rect x="819.9" y="355.0" width="18.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="822.9" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (18 samples, 1.54%)</title><rect x="819.9" y="339.0" width="18.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.9" y="350.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (18 samples, 1.54%)</title><rect x="819.9" y="323.0" width="18.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="822.9" y="334.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.60%)</title><rect x="838.0" y="515.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="841.0" y="526.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.60%)</title><rect x="838.0" y="499.0" width="7.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="841.0" y="510.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="845.1" y="515.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="848.1" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 0.60%)</title><rect x="846.1" y="531.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="849.1" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="849.1" y="515.0" width="3.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="852.1" y="526.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="849.1" y="499.0" width="3.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="852.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="852.1" y="515.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="855.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (8 samples, 0.68%)</title><rect x="853.1" y="579.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="856.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.68%)</title><rect x="853.1" y="563.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="856.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.68%)</title><rect x="853.1" y="547.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="856.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.68%)</title><rect x="853.1" y="531.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="856.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1675355831.run (2 samples, 0.17%)</title><rect x="859.2" y="515.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="862.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (223 samples, 19.06%)</title><rect x="861.2" y="579.0" width="224.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="864.2" y="590.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (223 samples, 19.06%)</title><rect x="861.2" y="563.0" width="224.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="864.2" y="574.0">java/util/concurrent/LinkedBlo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (190 samples, 16.24%)</title><rect x="877.4" y="547.0" width="191.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="880.4" y="558.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.85%)</title><rect x="889.5" y="531.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="892.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.85%)</title><rect x="889.5" y="515.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="892.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.85%)</title><rect x="889.5" y="499.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="892.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.85%)</title><rect x="889.5" y="483.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="892.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (168 samples, 14.36%)</title><rect x="899.5" y="531.0" width="169.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="902.5" y="542.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (168 samples, 14.36%)</title><rect x="899.5" y="515.0" width="169.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="902.5" y="526.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="904.6" y="499.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="907.6" y="510.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="905.6" y="499.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="908.6" y="510.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (4 samples, 0.34%)</title><rect x="906.6" y="499.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="909.6" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="910.6" y="499.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="913.6" y="510.0"></text>
</g>
<g>
<title>Unsafe_Park (152 samples, 12.99%)</title><rect x="911.6" y="499.0" width="153.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="914.6" y="510.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.34%)</title><rect x="913.7" y="483.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="916.7" y="494.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 2.05%)</title><rect x="917.7" y="483.0" width="24.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="920.7" y="494.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.68%)</title><rect x="923.7" y="467.0" width="8.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="926.7" y="478.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.34%)</title><rect x="924.8" y="451.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="927.8" y="462.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.34%)</title><rect x="924.8" y="435.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="927.8" y="446.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="928.8" y="451.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="931.8" y="462.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.17%)</title><rect x="929.8" y="451.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="932.8" y="462.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="931.8" y="467.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="934.8" y="478.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="932.8" y="467.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="935.8" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.68%)</title><rect x="933.8" y="467.0" width="8.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="936.8" y="478.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="941.9" y="483.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="944.9" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="942.9" y="483.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="945.9" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="943.9" y="483.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="946.9" y="494.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.51%)</title><rect x="946.9" y="483.0" width="6.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="949.9" y="494.0"></text>
</g>
<g>
<title>__lll_unlock_wake (41 samples, 3.50%)</title><rect x="953.0" y="483.0" width="41.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="956.0" y="494.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (55 samples, 4.70%)</title><rect x="994.3" y="483.0" width="55.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="997.3" y="494.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.34%)</title><rect x="1049.8" y="483.0" width="4.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1052.8" y="494.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.09%)</title><rect x="1053.8" y="483.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1056.8" y="494.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.26%)</title><rect x="1054.9" y="483.0" width="3.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1057.9" y="494.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="1057.9" y="483.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1060.9" y="494.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="1058.9" y="483.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1061.9" y="494.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.26%)</title><rect x="1059.9" y="483.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.9" y="494.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="1062.9" y="483.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1065.9" y="494.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.17%)</title><rect x="1064.9" y="499.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1067.9" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="1067.0" y="499.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.17%)</title><rect x="1069.0" y="547.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1072.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.17%)</title><rect x="1069.0" y="531.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1072.0" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="1069.0" y="515.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1072.0" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="1069.0" y="499.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1072.0" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="1069.0" y="483.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1072.0" y="494.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.09%)</title><rect x="1070.0" y="515.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1073.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 1.28%)</title><rect x="1071.0" y="547.0" width="15.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1074.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 1.28%)</title><rect x="1071.0" y="531.0" width="15.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1074.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 1.28%)</title><rect x="1071.0" y="515.0" width="15.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1074.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 1.28%)</title><rect x="1071.0" y="499.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1074.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1086.1" y="627.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1089.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1086.1" y="611.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1089.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1086.1" y="595.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1089.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1086.1" y="579.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1089.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.09%)</title><rect x="1086.1" y="563.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1089.1" y="574.0"></text>
</g>
<g>
<title>start_thread (102 samples, 8.72%)</title><rect x="1087.1" y="627.0" width="102.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1090.1" y="638.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (102 samples, 8.72%)</title><rect x="1087.1" y="611.0" width="102.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1090.1" y="622.0">java_start(T..</text>
</g>
<g>
<title>GangWorker::loop() (31 samples, 2.65%)</title><rect x="1087.1" y="595.0" width="31.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.1" y="606.0">Ga..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.09%)</title><rect x="1087.1" y="579.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.1" y="590.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (12 samples, 1.03%)</title><rect x="1088.1" y="579.0" width="12.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.1" y="590.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 1.03%)</title><rect x="1088.1" y="563.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.1" y="574.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (7 samples, 0.60%)</title><rect x="1088.1" y="547.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.1" y="558.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.43%)</title><rect x="1095.2" y="547.0" width="5.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1098.2" y="558.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 1.54%)</title><rect x="1100.2" y="579.0" width="18.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.2" y="590.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.51%)</title><rect x="1100.2" y="563.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.2" y="574.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1100.2" y="547.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.2" y="558.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1100.2" y="531.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.2" y="542.0"></text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.09%)</title><rect x="1100.2" y="515.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.2" y="526.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1101.2" y="547.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.2" y="558.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.34%)</title><rect x="1102.3" y="547.0" width="4.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1105.3" y="558.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.51%)</title><rect x="1106.3" y="563.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1109.3" y="574.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1106.3" y="547.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.3" y="558.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.26%)</title><rect x="1107.3" y="547.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.3" y="558.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.17%)</title><rect x="1107.3" y="531.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.3" y="542.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.17%)</title><rect x="1107.3" y="515.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.3" y="526.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.17%)</title><rect x="1107.3" y="499.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.3" y="510.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1109.3" y="531.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.3" y="542.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1109.3" y="515.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.3" y="526.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.09%)</title><rect x="1109.3" y="499.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.3" y="510.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.09%)</title><rect x="1109.3" y="483.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.3" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (1 samples, 0.09%)</title><rect x="1109.3" y="467.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.3" y="478.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (1 samples, 0.09%)</title><rect x="1109.3" y="451.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.3" y="462.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="1109.3" y="435.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.3" y="446.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="1110.3" y="547.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.3" y="558.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1110.3" y="531.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.3" y="542.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1111.3" y="531.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.3" y="542.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1111.3" y="515.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1114.3" y="526.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.51%)</title><rect x="1112.3" y="563.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.3" y="574.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.51%)</title><rect x="1112.3" y="547.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.3" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.43%)</title><rect x="1112.3" y="531.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.3" y="542.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.43%)</title><rect x="1112.3" y="515.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.3" y="526.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.43%)</title><rect x="1112.3" y="499.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.3" y="510.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.43%)</title><rect x="1112.3" y="483.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1115.3" y="494.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.26%)</title><rect x="1114.4" y="467.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.4" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1115.4" y="451.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.4" y="462.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.09%)</title><rect x="1116.4" y="451.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.4" y="462.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1117.4" y="531.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.4" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="1117.4" y="515.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.4" y="526.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1117.4" y="499.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.4" y="510.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.09%)</title><rect x="1117.4" y="483.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.4" y="494.0"></text>
</g>
<g>
<title>JavaThread::run() (68 samples, 5.81%)</title><rect x="1118.4" y="595.0" width="68.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.4" y="606.0">JavaThr..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (68 samples, 5.81%)</title><rect x="1118.4" y="579.0" width="68.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.4" y="590.0">JavaThr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (68 samples, 5.81%)</title><rect x="1118.4" y="563.0" width="68.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.4" y="574.0">Compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (66 samples, 5.64%)</title><rect x="1118.4" y="547.0" width="66.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.4" y="558.0">Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (66 samples, 5.64%)</title><rect x="1118.4" y="531.0" width="66.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.4" y="542.0">C2Compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (66 samples, 5.64%)</title><rect x="1118.4" y="515.0" width="66.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.4" y="526.0">Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (41 samples, 3.50%)</title><rect x="1118.4" y="499.0" width="41.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.4" y="510.0">Com..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="1118.4" y="483.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.4" y="494.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="1118.4" y="467.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.4" y="478.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1118.4" y="451.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.4" y="462.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="1118.4" y="435.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.4" y="446.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.09%)</title><rect x="1118.4" y="419.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.4" y="430.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.09%)</title><rect x="1118.4" y="403.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.4" y="414.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1119.4" y="483.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.4" y="494.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1119.4" y="467.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.4" y="478.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="1119.4" y="451.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.4" y="462.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1119.4" y="435.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.4" y="446.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.34%)</title><rect x="1120.4" y="483.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.4" y="494.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.17%)</title><rect x="1120.4" y="467.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.4" y="478.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.17%)</title><rect x="1122.4" y="467.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.4" y="478.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1122.4" y="451.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.4" y="462.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1123.4" y="451.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.4" y="462.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1123.4" y="435.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.4" y="446.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="1123.4" y="419.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.4" y="430.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.09%)</title><rect x="1123.4" y="403.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.4" y="414.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.26%)</title><rect x="1124.4" y="483.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.4" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.26%)</title><rect x="1124.4" y="467.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.4" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1124.4" y="451.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.4" y="462.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.09%)</title><rect x="1125.5" y="451.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.5" y="462.0"></text>
</g>
<g>
<title>membar_releaseNode::ideal_Opcode() const (1 samples, 0.09%)</title><rect x="1126.5" y="451.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.5" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (31 samples, 2.65%)</title><rect x="1127.5" y="483.0" width="31.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.5" y="494.0">Ph..</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.09%)</title><rect x="1127.5" y="467.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.5" y="478.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.09%)</title><rect x="1128.5" y="467.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.5" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1129.5" y="467.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.5" y="478.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.09%)</title><rect x="1129.5" y="451.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.5" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.51%)</title><rect x="1130.5" y="467.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.5" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1135.5" y="451.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.5" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.85%)</title><rect x="1136.5" y="467.0" width="10.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.5" y="478.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.17%)</title><rect x="1137.6" y="451.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.6" y="462.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1139.6" y="451.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.6" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.26%)</title><rect x="1141.6" y="451.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.6" y="462.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1142.6" y="435.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.6" y="446.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1143.6" y="435.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.6" y="446.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="1144.6" y="451.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.6" y="462.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.09%)</title><rect x="1145.6" y="451.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.6" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.17%)</title><rect x="1146.6" y="467.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.6" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.17%)</title><rect x="1148.6" y="467.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.6" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.17%)</title><rect x="1150.7" y="467.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.7" y="478.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1152.7" y="467.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.7" y="478.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1152.7" y="451.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.7" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.09%)</title><rect x="1152.7" y="435.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.7" y="446.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.17%)</title><rect x="1153.7" y="467.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.7" y="478.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1154.7" y="451.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.7" y="462.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.17%)</title><rect x="1155.7" y="467.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.7" y="478.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1156.7" y="451.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.7" y="462.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="1157.7" y="467.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.7" y="478.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.09%)</title><rect x="1158.7" y="483.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.7" y="494.0"></text>
</g>
<g>
<title>Compile::Optimize() (17 samples, 1.45%)</title><rect x="1159.7" y="499.0" width="17.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.26%)</title><rect x="1159.7" y="483.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.7" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.26%)</title><rect x="1159.7" y="467.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.7" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (2 samples, 0.17%)</title><rect x="1160.8" y="451.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (2 samples, 0.17%)</title><rect x="1160.8" y="435.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (2 samples, 0.17%)</title><rect x="1160.8" y="419.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.8" y="430.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (2 samples, 0.17%)</title><rect x="1160.8" y="403.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.8" y="414.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (2 samples, 0.17%)</title><rect x="1160.8" y="387.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.8" y="398.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1160.8" y="371.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.8" y="382.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1160.8" y="355.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.8" y="366.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.09%)</title><rect x="1160.8" y="339.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.8" y="350.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.09%)</title><rect x="1161.8" y="371.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.8" y="382.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1162.8" y="483.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.8" y="494.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1162.8" y="467.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.8" y="478.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.09%)</title><rect x="1162.8" y="451.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.8" y="462.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1162.8" y="435.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.8" y="446.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1162.8" y="419.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.8" y="430.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1162.8" y="403.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.8" y="414.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1162.8" y="387.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.8" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (8 samples, 0.68%)</title><rect x="1163.8" y="483.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.8" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.17%)</title><rect x="1163.8" y="467.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.8" y="478.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1164.8" y="451.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.8" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.34%)</title><rect x="1165.8" y="467.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.8" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.17%)</title><rect x="1167.8" y="451.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.8" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.17%)</title><rect x="1167.8" y="435.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.8" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1169.8" y="467.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.8" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.09%)</title><rect x="1170.8" y="451.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.8" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.34%)</title><rect x="1171.8" y="483.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.34%)</title><rect x="1171.8" y="467.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.8" y="478.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1171.8" y="451.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.8" y="462.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1171.8" y="435.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.8" y="446.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1171.8" y="419.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.8" y="430.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1172.9" y="451.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.9" y="462.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1173.9" y="451.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.9" y="462.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.9" y="451.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.9" y="462.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1174.9" y="435.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="446.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1175.9" y="483.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="494.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1175.9" y="467.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="478.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1175.9" y="451.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.9" y="462.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.09%)</title><rect x="1175.9" y="435.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="446.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.09%)</title><rect x="1175.9" y="419.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1178.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.60%)</title><rect x="1176.9" y="499.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.60%)</title><rect x="1176.9" y="483.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.60%)</title><rect x="1176.9" y="467.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.60%)</title><rect x="1176.9" y="451.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.60%)</title><rect x="1176.9" y="435.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.51%)</title><rect x="1176.9" y="419.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.43%)</title><rect x="1176.9" y="403.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.43%)</title><rect x="1176.9" y="387.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.43%)</title><rect x="1176.9" y="371.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.43%)</title><rect x="1176.9" y="355.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.43%)</title><rect x="1176.9" y="339.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1176.9" y="323.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1176.9" y="307.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.9" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1176.9" y="291.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1176.9" y="275.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1176.9" y="259.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1176.9" y="243.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1176.9" y="227.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.9" y="238.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1176.9" y="211.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="222.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1176.9" y="195.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="206.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1176.9" y="179.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1176.9" y="163.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1176.9" y="147.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1177.9" y="211.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1177.9" y="195.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1177.9" y="179.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1177.9" y="163.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1177.9" y="147.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1177.9" y="131.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.9" y="142.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.9" y="115.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="126.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1177.9" y="99.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="110.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.09%)</title><rect x="1177.9" y="83.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="94.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1178.9" y="115.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.9" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1178.9" y="99.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.9" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1178.9" y="83.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1178.9" y="67.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.9" y="78.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.09%)</title><rect x="1178.9" y="51.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.9" y="62.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.09%)</title><rect x="1178.9" y="35.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="323.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="307.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="318.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.09%)</title><rect x="1179.9" y="291.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="302.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1179.9" y="275.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="286.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1179.9" y="259.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="270.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1179.9" y="243.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.09%)</title><rect x="1180.9" y="323.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="334.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="307.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="318.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="291.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="403.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="387.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.9" y="371.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.9" y="355.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.9" y="339.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.9" y="323.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.9" y="307.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.9" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="291.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.9" y="275.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.9" y="259.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.9" y="243.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.9" y="227.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.9" y="211.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.9" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="195.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.9" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.9" y="179.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.9" y="163.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.9" y="147.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.9" y="131.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.9" y="115.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="99.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.9" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.9" y="83.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.9" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.9" y="67.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.9" y="78.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1182.9" y="419.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.9" y="430.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1182.9" y="403.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="414.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1182.9" y="387.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="398.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1182.9" y="371.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="382.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1182.9" y="355.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.9" y="366.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1182.9" y="339.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="350.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1182.9" y="323.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.9" y="334.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1183.9" y="499.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.9" y="510.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1183.9" y="483.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.9" y="494.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.09%)</title><rect x="1183.9" y="467.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.9" y="478.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="1183.9" y="451.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.9" y="462.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.17%)</title><rect x="1185.0" y="547.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.0" y="558.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.17%)</title><rect x="1185.0" y="531.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.0" y="542.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.17%)</title><rect x="1185.0" y="515.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.0" y="526.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.17%)</title><rect x="1185.0" y="499.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.0" y="510.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (2 samples, 0.17%)</title><rect x="1185.0" y="483.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.0" y="494.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="1186.0" y="467.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.0" y="478.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.26%)</title><rect x="1187.0" y="595.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.0" y="606.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.26%)</title><rect x="1187.0" y="579.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.0" y="590.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1187.0" y="563.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.0" y="574.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.09%)</title><rect x="1187.0" y="547.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.0" y="558.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.09%)</title><rect x="1187.0" y="531.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.0" y="542.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.0" y="515.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.0" y="526.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.09%)</title><rect x="1187.0" y="499.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.0" y="510.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.17%)</title><rect x="1188.0" y="563.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.0" y="574.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.17%)</title><rect x="1188.0" y="547.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.0" y="558.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.17%)</title><rect x="1188.0" y="531.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.0" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.17%)</title><rect x="1188.0" y="515.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.0" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (2 samples, 0.17%)</title><rect x="1188.0" y="499.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.0" y="510.0"></text>
</g>
<g>
<title>DerivedPointerTable::update_pointers() (1 samples, 0.09%)</title><rect x="1188.0" y="483.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.0" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.09%)</title><rect x="1189.0" y="483.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="494.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.09%)</title><rect x="1189.0" y="467.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="478.0"></text>
</g>
<g>
<title>JNIHandles::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1189.0" y="451.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.0" y="462.0"></text>
</g>
</g>
</svg>
