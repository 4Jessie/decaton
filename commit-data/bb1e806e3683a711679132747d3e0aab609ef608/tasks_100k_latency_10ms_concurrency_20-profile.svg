<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (482 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.21%)</title><rect x="10.0" y="995.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.21%)</title><rect x="10.0" y="979.0" width="2.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 5.60%)</title><rect x="12.4" y="995.0" width="66.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.4" y="1006.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.21%)</title><rect x="12.4" y="979.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.21%)</title><rect x="12.4" y="963.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.commitOffsets (1 samples, 0.21%)</title><rect x="12.4" y="947.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (26 samples, 5.39%)</title><rect x="14.9" y="979.0" width="63.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.9" y="990.0">com/lin..</text>
</g>
<g>
<title>Interpreter (1 samples, 0.21%)</title><rect x="14.9" y="963.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="17.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.41%)</title><rect x="17.3" y="963.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.21%)</title><rect x="19.8" y="947.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.21%)</title><rect x="19.8" y="931.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.21%)</title><rect x="19.8" y="915.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.8" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 1.87%)</title><rect x="22.2" y="963.0" width="22.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.2" y="974.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$267/1684052357.accept (7 samples, 1.45%)</title><rect x="22.2" y="947.0" width="17.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$68 (7 samples, 1.45%)</title><rect x="22.2" y="931.0" width="17.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.2" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (6 samples, 1.24%)</title><rect x="22.2" y="915.0" width="14.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (6 samples, 1.24%)</title><rect x="22.2" y="899.0" width="14.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (6 samples, 1.24%)</title><rect x="22.2" y="883.0" width="14.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (6 samples, 1.24%)</title><rect x="22.2" y="867.0" width="14.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 1.24%)</title><rect x="22.2" y="851.0" width="14.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (6 samples, 1.24%)</title><rect x="22.2" y="835.0" width="14.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.41%)</title><rect x="27.1" y="819.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.41%)</title><rect x="27.1" y="803.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.41%)</title><rect x="27.1" y="787.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.1" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.21%)</title><rect x="29.6" y="771.0" width="2.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="32.6" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.41%)</title><rect x="32.0" y="819.0" width="4.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="35.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.21%)</title><rect x="36.9" y="915.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.9" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.21%)</title><rect x="36.9" y="899.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.21%)</title><rect x="39.4" y="947.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.21%)</title><rect x="41.8" y="947.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.21%)</title><rect x="41.8" y="931.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="44.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.21%)</title><rect x="41.8" y="915.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.21%)</title><rect x="41.8" y="899.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.21%)</title><rect x="41.8" y="883.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.8" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.21%)</title><rect x="41.8" y="867.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.21%)</title><rect x="41.8" y="851.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="44.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 2.90%)</title><rect x="44.3" y="963.0" width="34.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.3" y="974.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 2.90%)</title><rect x="44.3" y="947.0" width="34.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.3" y="958.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 1.66%)</title><rect x="44.3" y="931.0" width="19.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.62%)</title><rect x="44.3" y="915.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.62%)</title><rect x="44.3" y="899.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.21%)</title><rect x="44.3" y="883.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.21%)</title><rect x="44.3" y="867.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.21%)</title><rect x="44.3" y="851.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.21%)</title><rect x="46.7" y="883.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.wakeup (1 samples, 0.21%)</title><rect x="46.7" y="867.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.wakeup (1 samples, 0.21%)</title><rect x="46.7" y="851.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.7" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (1 samples, 0.21%)</title><rect x="46.7" y="835.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.7" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 0.21%)</title><rect x="46.7" y="819.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="49.7" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 0.21%)</title><rect x="46.7" y="803.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.7" y="814.0"></text>
</g>
<g>
<title>__write (1 samples, 0.21%)</title><rect x="46.7" y="787.0" width="2.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="49.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.21%)</title><rect x="49.2" y="883.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="52.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.21%)</title><rect x="49.2" y="867.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.21%)</title><rect x="49.2" y="851.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="52.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.21%)</title><rect x="49.2" y="835.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.21%)</title><rect x="49.2" y="819.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.21%)</title><rect x="49.2" y="803.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.21%)</title><rect x="49.2" y="787.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.21%)</title><rect x="49.2" y="771.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.21%)</title><rect x="49.2" y="755.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.validate (1 samples, 0.21%)</title><rect x="49.2" y="739.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.04%)</title><rect x="51.6" y="915.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 0.83%)</title><rect x="51.6" y="899.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.62%)</title><rect x="51.6" y="883.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.62%)</title><rect x="51.6" y="867.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="54.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 0.62%)</title><rect x="51.6" y="851.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="54.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.41%)</title><rect x="51.6" y="835.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="54.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.41%)</title><rect x="51.6" y="819.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.41%)</title><rect x="51.6" y="803.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="54.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.41%)</title><rect x="51.6" y="787.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.41%)</title><rect x="51.6" y="771.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.41%)</title><rect x="51.6" y="755.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.41%)</title><rect x="51.6" y="739.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.21%)</title><rect x="56.5" y="835.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.21%)</title><rect x="56.5" y="819.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="59.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.21%)</title><rect x="56.5" y="803.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.21%)</title><rect x="59.0" y="883.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.21%)</title><rect x="59.0" y="867.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="62.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.21%)</title><rect x="59.0" y="851.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.0" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.21%)</title><rect x="59.0" y="835.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.0" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.21%)</title><rect x="59.0" y="819.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="62.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.21%)</title><rect x="61.4" y="899.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.62%)</title><rect x="63.9" y="931.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="66.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 0.62%)</title><rect x="63.9" y="915.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="66.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.62%)</title><rect x="63.9" y="899.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="66.9" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.21%)</title><rect x="63.9" y="883.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="66.9" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.21%)</title><rect x="63.9" y="867.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="66.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.21%)</title><rect x="63.9" y="851.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="66.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.21%)</title><rect x="63.9" y="835.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="66.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.21%)</title><rect x="63.9" y="819.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="66.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.21%)</title><rect x="63.9" y="803.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="66.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$79/392225855.get (1 samples, 0.21%)</title><rect x="63.9" y="787.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="66.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.41%)</title><rect x="66.3" y="883.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.41%)</title><rect x="66.3" y="867.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.3" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.21%)</title><rect x="68.8" y="851.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.21%)</title><rect x="68.8" y="835.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.21%)</title><rect x="68.8" y="819.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.21%)</title><rect x="68.8" y="803.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.21%)</title><rect x="68.8" y="787.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.21%)</title><rect x="68.8" y="771.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="71.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.41%)</title><rect x="71.2" y="931.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="74.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.21%)</title><rect x="71.2" y="915.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="74.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.21%)</title><rect x="71.2" y="899.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.21%)</title><rect x="73.7" y="915.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.21%)</title><rect x="73.7" y="899.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.21%)</title><rect x="73.7" y="883.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.21%)</title><rect x="73.7" y="867.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="76.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.21%)</title><rect x="73.7" y="851.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="76.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.21%)</title><rect x="73.7" y="835.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="76.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.toStruct (1 samples, 0.21%)</title><rect x="73.7" y="819.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="76.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.21%)</title><rect x="76.1" y="931.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="79.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.21%)</title><rect x="76.1" y="915.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.21%)</title><rect x="76.1" y="899.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.21%)</title><rect x="76.1" y="883.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.21%)</title><rect x="76.1" y="867.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.1" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (203 samples, 42.12%)</title><rect x="78.5" y="995.0" width="497.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="81.5" y="1006.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (203 samples, 42.12%)</title><rect x="78.5" y="979.0" width="497.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.5" y="990.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (203 samples, 42.12%)</title><rect x="78.5" y="963.0" width="497.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.5" y="974.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (2 samples, 0.41%)</title><rect x="83.4" y="947.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (2 samples, 0.41%)</title><rect x="83.4" y="931.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="86.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (2 samples, 0.41%)</title><rect x="83.4" y="915.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="86.4" y="926.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.41%)</title><rect x="83.4" y="899.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="86.4" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.41%)</title><rect x="83.4" y="883.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="86.4" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.41%)</title><rect x="83.4" y="867.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="86.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$272/1482684541.run (190 samples, 39.42%)</title><rect x="88.3" y="947.0" width="465.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="91.3" y="958.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$272..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (190 samples, 39.42%)</title><rect x="88.3" y="931.0" width="465.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="91.3" y="942.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (190 samples, 39.42%)</title><rect x="88.3" y="915.0" width="465.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="91.3" y="926.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (185 samples, 38.38%)</title><rect x="88.3" y="899.0" width="452.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.3" y="910.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.schedul..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.21%)</title><rect x="98.1" y="883.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="101.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (28 samples, 5.81%)</title><rect x="100.6" y="883.0" width="68.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.6" y="894.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/580718781.extract (28 samples, 5.81%)</title><rect x="100.6" y="867.0" width="68.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.6" y="878.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (28 samples, 5.81%)</title><rect x="100.6" y="851.0" width="68.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="103.6" y="862.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (28 samples, 5.81%)</title><rect x="100.6" y="835.0" width="68.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="103.6" y="846.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (28 samples, 5.81%)</title><rect x="100.6" y="819.0" width="68.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.6" y="830.0">com/lin..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (28 samples, 5.81%)</title><rect x="100.6" y="803.0" width="68.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="103.6" y="814.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (15 samples, 3.11%)</title><rect x="100.6" y="787.0" width="36.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="103.6" y="798.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 1.66%)</title><rect x="107.9" y="771.0" width="19.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="110.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 1.24%)</title><rect x="110.4" y="755.0" width="14.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 1.04%)</title><rect x="112.8" y="739.0" width="12.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.8" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 1.04%)</title><rect x="112.8" y="723.0" width="12.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="115.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 1.04%)</title><rect x="112.8" y="707.0" width="12.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="115.8" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 1.04%)</title><rect x="112.8" y="691.0" width="12.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="115.8" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 1.04%)</title><rect x="112.8" y="675.0" width="12.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="115.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.21%)</title><rect x="125.1" y="755.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="128.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 0.83%)</title><rect x="127.5" y="771.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="130.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 0.83%)</title><rect x="127.5" y="755.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="130.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.21%)</title><rect x="127.5" y="739.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="130.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.21%)</title><rect x="127.5" y="723.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="130.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.21%)</title><rect x="127.5" y="707.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="130.5" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.21%)</title><rect x="127.5" y="691.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="130.5" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.21%)</title><rect x="127.5" y="675.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="130.5" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.21%)</title><rect x="127.5" y="659.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="130.5" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.21%)</title><rect x="127.5" y="643.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="130.5" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.21%)</title><rect x="127.5" y="627.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="130.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (3 samples, 0.62%)</title><rect x="130.0" y="739.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="133.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (12 samples, 2.49%)</title><rect x="137.3" y="787.0" width="29.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="140.3" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.21%)</title><rect x="137.3" y="771.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="140.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.21%)</title><rect x="139.8" y="771.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="142.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.21%)</title><rect x="139.8" y="755.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="142.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.21%)</title><rect x="142.2" y="771.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="145.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.21%)</title><rect x="142.2" y="755.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="145.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.21%)</title><rect x="142.2" y="739.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="145.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.21%)</title><rect x="142.2" y="723.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="145.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.21%)</title><rect x="142.2" y="707.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (9 samples, 1.87%)</title><rect x="144.6" y="771.0" width="22.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="147.6" y="782.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.62%)</title><rect x="144.6" y="755.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="147.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.41%)</title><rect x="144.6" y="739.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="147.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.41%)</title><rect x="144.6" y="723.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="147.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.41%)</title><rect x="144.6" y="707.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="147.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.21%)</title><rect x="149.5" y="739.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 1.24%)</title><rect x="152.0" y="755.0" width="14.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="155.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 1.24%)</title><rect x="152.0" y="739.0" width="14.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="155.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 1.24%)</title><rect x="152.0" y="723.0" width="14.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="155.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.62%)</title><rect x="154.4" y="707.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="157.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.21%)</title><rect x="159.3" y="691.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="162.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.21%)</title><rect x="159.3" y="675.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="162.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.21%)</title><rect x="159.3" y="659.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="162.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.21%)</title><rect x="161.8" y="707.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="164.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.21%)</title><rect x="161.8" y="691.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="164.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.21%)</title><rect x="161.8" y="675.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="164.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.21%)</title><rect x="161.8" y="659.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="164.8" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.21%)</title><rect x="161.8" y="643.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="164.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.21%)</title><rect x="164.2" y="707.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="167.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.21%)</title><rect x="164.2" y="691.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="167.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.21%)</title><rect x="164.2" y="675.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="167.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.21%)</title><rect x="166.7" y="787.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="169.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.21%)</title><rect x="166.7" y="771.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.21%)</title><rect x="166.7" y="755.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="169.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.21%)</title><rect x="166.7" y="739.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="169.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.21%)</title><rect x="166.7" y="723.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="169.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (143 samples, 29.67%)</title><rect x="169.1" y="883.0" width="350.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.1" y="894.0">com/linecorp/decaton/processor/runtime/ProcessPi..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (26 samples, 5.39%)</title><rect x="169.1" y="867.0" width="63.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="172.1" y="878.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (25 samples, 5.19%)</title><rect x="171.6" y="851.0" width="61.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="174.6" y="862.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (20 samples, 4.15%)</title><rect x="183.8" y="835.0" width="49.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.8" y="846.0">ch/q..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.21%)</title><rect x="188.7" y="819.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="191.7" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.21%)</title><rect x="188.7" y="803.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.21%)</title><rect x="188.7" y="787.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.21%)</title><rect x="188.7" y="771.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.7" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (17 samples, 3.53%)</title><rect x="191.2" y="819.0" width="41.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.2" y="830.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 2.49%)</title><rect x="203.4" y="803.0" width="29.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.4" y="814.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (12 samples, 2.49%)</title><rect x="203.4" y="787.0" width="29.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.4" y="798.0">ja..</text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.83%)</title><rect x="223.0" y="771.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.41%)</title><rect x="232.8" y="867.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.8" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.21%)</title><rect x="235.2" y="851.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.2" y="862.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.21%)</title><rect x="235.2" y="835.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (24 samples, 4.98%)</title><rect x="237.7" y="867.0" width="58.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.7" y="878.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (24 samples, 4.98%)</title><rect x="237.7" y="851.0" width="58.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.7" y="862.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 1.45%)</title><rect x="242.6" y="835.0" width="17.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.6" y="846.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 1.24%)</title><rect x="242.6" y="819.0" width="14.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.6" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 1.24%)</title><rect x="242.6" y="803.0" width="14.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.6" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.83%)</title><rect x="245.0" y="787.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="248.0" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 0.83%)</title><rect x="245.0" y="771.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.0" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.83%)</title><rect x="245.0" y="755.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.0" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.83%)</title><rect x="245.0" y="739.0" width="9.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="248.0" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.21%)</title><rect x="245.0" y="723.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="248.0" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.21%)</title><rect x="245.0" y="707.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="248.0" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.62%)</title><rect x="247.5" y="723.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="250.5" y="734.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.21%)</title><rect x="247.5" y="707.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="250.5" y="718.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.21%)</title><rect x="247.5" y="691.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="250.5" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.41%)</title><rect x="249.9" y="707.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="252.9" y="718.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.21%)</title><rect x="252.4" y="691.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="255.4" y="702.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.21%)</title><rect x="254.8" y="787.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="257.8" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.21%)</title><rect x="257.3" y="819.0" width="2.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="260.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.21%)</title><rect x="259.7" y="835.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.7" y="846.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (14 samples, 2.90%)</title><rect x="262.2" y="835.0" width="34.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="265.2" y="846.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 2.49%)</title><rect x="267.1" y="819.0" width="29.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="270.1" y="830.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (12 samples, 2.49%)</title><rect x="267.1" y="803.0" width="29.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.1" y="814.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 2.28%)</title><rect x="269.5" y="787.0" width="26.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.5" y="798.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 1.87%)</title><rect x="274.4" y="771.0" width="22.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.4" y="782.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.41%)</title><rect x="279.3" y="755.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="282.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 1.04%)</title><rect x="284.2" y="755.0" width="12.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.2" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.21%)</title><rect x="294.0" y="739.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="297.0" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.21%)</title><rect x="294.0" y="723.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="297.0" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.21%)</title><rect x="294.0" y="707.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="297.0" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.21%)</title><rect x="294.0" y="691.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="297.0" y="702.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.21%)</title><rect x="294.0" y="675.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="297.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (81 samples, 16.80%)</title><rect x="296.4" y="867.0" width="198.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.4" y="878.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (81 samples, 16.80%)</title><rect x="296.4" y="851.0" width="198.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.4" y="862.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1522498522.process (64 samples, 13.28%)</title><rect x="308.7" y="835.0" width="156.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="311.7" y="846.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (64 samples, 13.28%)</title><rect x="308.7" y="819.0" width="156.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.7" y="830.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (64 samples, 13.28%)</title><rect x="308.7" y="803.0" width="156.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.7" y="814.0">com/linecorp/decaton..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.62%)</title><rect x="311.1" y="787.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.1" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.62%)</title><rect x="311.1" y="771.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.1" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.62%)</title><rect x="311.1" y="755.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.1" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.62%)</title><rect x="311.1" y="739.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.41%)</title><rect x="313.6" y="723.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="316.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.41%)</title><rect x="313.6" y="707.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="316.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (57 samples, 11.83%)</title><rect x="318.5" y="787.0" width="139.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="321.5" y="798.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/lang/Thread.sleep (54 samples, 11.20%)</title><rect x="323.4" y="771.0" width="132.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="326.4" y="782.0">java/lang/Thread..</text>
</g>
<g>
<title>JVM_Sleep (48 samples, 9.96%)</title><rect x="330.7" y="755.0" width="117.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="333.7" y="766.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.41%)</title><rect x="350.3" y="739.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="353.3" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.41%)</title><rect x="355.2" y="739.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="358.2" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.62%)</title><rect x="360.1" y="739.0" width="7.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="363.1" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.41%)</title><rect x="362.5" y="723.0" width="4.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="365.5" y="734.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (33 samples, 6.85%)</title><rect x="367.4" y="739.0" width="80.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="370.4" y="750.0">os::sleep..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.41%)</title><rect x="384.6" y="723.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="387.6" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.83%)</title><rect x="389.5" y="723.0" width="9.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="392.5" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 2.70%)</title><rect x="399.3" y="723.0" width="31.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="402.3" y="734.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.21%)</title><rect x="431.1" y="723.0" width="2.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="434.1" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.21%)</title><rect x="433.5" y="723.0" width="2.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="436.5" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.21%)</title><rect x="436.0" y="723.0" width="2.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="439.0" y="734.0"></text>
</g>
<g>
<title>_init (1 samples, 0.21%)</title><rect x="438.4" y="723.0" width="2.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="441.4" y="734.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.41%)</title><rect x="440.9" y="723.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="443.9" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.21%)</title><rect x="445.8" y="723.0" width="2.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="448.8" y="734.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.21%)</title><rect x="448.2" y="755.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="451.2" y="766.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.41%)</title><rect x="450.7" y="755.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="453.7" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.21%)</title><rect x="455.6" y="771.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="458.6" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.21%)</title><rect x="455.6" y="755.0" width="2.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="458.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.21%)</title><rect x="458.0" y="787.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="461.0" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.41%)</title><rect x="460.5" y="787.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="463.5" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1172131546.linkToTargetMethod (3 samples, 0.62%)</title><rect x="465.4" y="835.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="468.4" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (3 samples, 0.62%)</title><rect x="465.4" y="819.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="468.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$276/1679599088.get$Lambda (3 samples, 0.62%)</title><rect x="465.4" y="803.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="468.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$276/1679599088.&lt;init&gt; (3 samples, 0.62%)</title><rect x="465.4" y="787.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="468.4" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.83%)</title><rect x="472.7" y="835.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="475.7" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.83%)</title><rect x="472.7" y="819.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="475.7" y="830.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.21%)</title><rect x="472.7" y="803.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="475.7" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.62%)</title><rect x="475.1" y="803.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="478.1" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.21%)</title><rect x="482.5" y="835.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="485.5" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.21%)</title><rect x="482.5" y="819.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.5" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.62%)</title><rect x="484.9" y="835.0" width="7.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="487.9" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.21%)</title><rect x="489.8" y="819.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="492.8" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.21%)</title><rect x="489.8" y="803.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="492.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.21%)</title><rect x="492.3" y="835.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="495.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 2.07%)</title><rect x="494.7" y="867.0" width="24.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="497.7" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 2.07%)</title><rect x="494.7" y="851.0" width="24.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="497.7" y="862.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.21%)</title><rect x="511.9" y="835.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="514.9" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.21%)</title><rect x="511.9" y="819.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="514.9" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.21%)</title><rect x="514.3" y="835.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="517.3" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.21%)</title><rect x="514.3" y="819.0" width="2.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="517.3" y="830.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.21%)</title><rect x="516.8" y="835.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="519.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 1.87%)</title><rect x="519.2" y="883.0" width="22.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="522.2" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 1.87%)</title><rect x="519.2" y="867.0" width="22.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="522.2" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 1.66%)</title><rect x="521.7" y="851.0" width="19.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="524.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$278/343594018.accept (8 samples, 1.66%)</title><rect x="521.7" y="835.0" width="19.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="524.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (8 samples, 1.66%)</title><rect x="521.7" y="819.0" width="19.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="524.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$270/2110151120.complete (8 samples, 1.66%)</title><rect x="521.7" y="803.0" width="19.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="524.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (8 samples, 1.66%)</title><rect x="521.7" y="787.0" width="19.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="524.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$268/1502706566.complete (7 samples, 1.45%)</title><rect x="521.7" y="771.0" width="17.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="524.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (7 samples, 1.45%)</title><rect x="521.7" y="755.0" width="17.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="524.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (7 samples, 1.45%)</title><rect x="521.7" y="739.0" width="17.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="524.7" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 1.45%)</title><rect x="521.7" y="723.0" width="17.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="524.7" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 1.45%)</title><rect x="521.7" y="707.0" width="17.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="524.7" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (7 samples, 1.45%)</title><rect x="521.7" y="691.0" width="17.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="524.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$269/613603174.complete (1 samples, 0.21%)</title><rect x="538.8" y="771.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="541.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$67 (1 samples, 0.21%)</title><rect x="538.8" y="755.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="541.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 1.04%)</title><rect x="541.2" y="899.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="544.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (9 samples, 1.87%)</title><rect x="553.5" y="947.0" width="22.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="556.5" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (8 samples, 1.66%)</title><rect x="555.9" y="931.0" width="19.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="558.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.83%)</title><rect x="565.7" y="915.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="568.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.83%)</title><rect x="565.7" y="899.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="568.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.83%)</title><rect x="565.7" y="883.0" width="9.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="568.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.83%)</title><rect x="565.7" y="867.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="568.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.41%)</title><rect x="570.6" y="851.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="573.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.41%)</title><rect x="575.5" y="995.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="578.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.41%)</title><rect x="575.5" y="979.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="578.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.41%)</title><rect x="575.5" y="963.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="578.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.21%)</title><rect x="575.5" y="947.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="578.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.21%)</title><rect x="575.5" y="931.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="578.5" y="942.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.21%)</title><rect x="575.5" y="915.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="578.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$85/1691180826.get (1 samples, 0.21%)</title><rect x="575.5" y="899.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="578.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.21%)</title><rect x="578.0" y="947.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="581.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.nodes (1 samples, 0.21%)</title><rect x="578.0" y="931.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="581.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.keySet (1 samples, 0.21%)</title><rect x="578.0" y="915.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="581.0" y="926.0"></text>
</g>
<g>
<title>start_thread (249 samples, 51.66%)</title><rect x="580.4" y="995.0" width="609.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="583.4" y="1006.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (249 samples, 51.66%)</title><rect x="580.4" y="979.0" width="609.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="583.4" y="990.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (26 samples, 5.39%)</title><rect x="580.4" y="963.0" width="63.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="583.4" y="974.0">GangWor..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.21%)</title><rect x="580.4" y="947.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="583.4" y="958.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.21%)</title><rect x="580.4" y="931.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="583.4" y="942.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.21%)</title><rect x="580.4" y="915.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="583.4" y="926.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (25 samples, 5.19%)</title><rect x="582.9" y="947.0" width="61.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="585.9" y="958.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (25 samples, 5.19%)</title><rect x="582.9" y="931.0" width="61.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="585.9" y="942.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (20 samples, 4.15%)</title><rect x="585.3" y="915.0" width="49.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="588.3" y="926.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (9 samples, 1.87%)</title><rect x="604.9" y="899.0" width="22.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="607.9" y="910.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (4 samples, 0.83%)</title><rect x="614.7" y="883.0" width="9.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="617.7" y="894.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.21%)</title><rect x="624.5" y="883.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="627.5" y="894.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (3 samples, 0.62%)</title><rect x="626.9" y="899.0" width="7.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="629.9" y="910.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.21%)</title><rect x="634.3" y="915.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="637.3" y="926.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.62%)</title><rect x="636.7" y="915.0" width="7.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="639.7" y="926.0"></text>
</g>
<g>
<title>JavaThread::run() (222 samples, 46.06%)</title><rect x="644.1" y="963.0" width="543.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="647.1" y="974.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (222 samples, 46.06%)</title><rect x="644.1" y="947.0" width="543.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="647.1" y="958.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (222 samples, 46.06%)</title><rect x="644.1" y="931.0" width="543.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="647.1" y="942.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (221 samples, 45.85%)</title><rect x="644.1" y="915.0" width="541.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="647.1" y="926.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (217 samples, 45.02%)</title><rect x="644.1" y="899.0" width="531.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="647.1" y="910.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (217 samples, 45.02%)</title><rect x="644.1" y="883.0" width="531.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="647.1" y="894.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (44 samples, 9.13%)</title><rect x="644.1" y="867.0" width="107.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="647.1" y="878.0">Compile::Code..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.41%)</title><rect x="644.1" y="851.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="647.1" y="862.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.21%)</title><rect x="644.1" y="835.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="647.1" y="846.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.21%)</title><rect x="644.1" y="819.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="647.1" y="830.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.21%)</title><rect x="646.5" y="835.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="649.5" y="846.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.21%)</title><rect x="646.5" y="819.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="649.5" y="830.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.62%)</title><rect x="649.0" y="851.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="652.0" y="862.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.62%)</title><rect x="649.0" y="835.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="652.0" y="846.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.21%)</title><rect x="651.4" y="819.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="654.4" y="830.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.21%)</title><rect x="653.9" y="819.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="656.9" y="830.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.21%)</title><rect x="653.9" y="803.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="656.9" y="814.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.21%)</title><rect x="653.9" y="787.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="656.9" y="798.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.21%)</title><rect x="653.9" y="771.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="656.9" y="782.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.21%)</title><rect x="653.9" y="755.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="656.9" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.41%)</title><rect x="656.3" y="851.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="659.3" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.41%)</title><rect x="656.3" y="835.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="659.3" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.21%)</title><rect x="656.3" y="819.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="659.3" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.21%)</title><rect x="658.8" y="819.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="661.8" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.21%)</title><rect x="658.8" y="803.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="661.8" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.21%)</title><rect x="661.2" y="851.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="664.2" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (36 samples, 7.47%)</title><rect x="663.7" y="851.0" width="88.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="666.7" y="862.0">PhaseChait..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.21%)</title><rect x="663.7" y="835.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="666.7" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.41%)</title><rect x="666.1" y="835.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="669.1" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.41%)</title><rect x="666.1" y="819.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="669.1" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.21%)</title><rect x="668.5" y="803.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="671.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.62%)</title><rect x="671.0" y="835.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="674.0" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.21%)</title><rect x="671.0" y="819.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="674.0" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.41%)</title><rect x="673.4" y="819.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="676.4" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.04%)</title><rect x="678.3" y="835.0" width="12.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="681.3" y="846.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.21%)</title><rect x="683.2" y="819.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="686.2" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::new_lrg(Node const*, unsigned int) (1 samples, 0.21%)</title><rect x="685.7" y="819.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="688.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.21%)</title><rect x="688.1" y="819.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="691.1" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.21%)</title><rect x="688.1" y="803.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="691.1" y="814.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.21%)</title><rect x="688.1" y="787.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="691.1" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 1.66%)</title><rect x="690.6" y="835.0" width="19.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="693.6" y="846.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.21%)</title><rect x="697.9" y="819.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="700.9" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.21%)</title><rect x="700.4" y="819.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="703.4" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.21%)</title><rect x="702.8" y="819.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="705.8" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.21%)</title><rect x="702.8" y="803.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="705.8" y="814.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.41%)</title><rect x="705.3" y="819.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="708.3" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.21%)</title><rect x="710.2" y="835.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="713.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.62%)</title><rect x="712.6" y="835.0" width="7.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="715.6" y="846.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.21%)</title><rect x="715.1" y="819.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="718.1" y="830.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.21%)</title><rect x="717.5" y="819.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="720.5" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 1.04%)</title><rect x="720.0" y="835.0" width="12.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="723.0" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.41%)</title><rect x="727.3" y="819.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="730.3" y="830.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.62%)</title><rect x="732.2" y="835.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="735.2" y="846.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.62%)</title><rect x="732.2" y="819.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="735.2" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.21%)</title><rect x="732.2" y="803.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="735.2" y="814.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.41%)</title><rect x="734.6" y="803.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="737.6" y="814.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.41%)</title><rect x="734.6" y="787.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="737.6" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.21%)</title><rect x="737.1" y="771.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="740.1" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.21%)</title><rect x="739.5" y="835.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="742.5" y="846.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.62%)</title><rect x="742.0" y="835.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="745.0" y="846.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.41%)</title><rect x="744.4" y="819.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="747.4" y="830.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.21%)</title><rect x="749.3" y="835.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="752.3" y="846.0"></text>
</g>
<g>
<title>Compile::Optimize() (164 samples, 34.02%)</title><rect x="751.8" y="867.0" width="401.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="754.8" y="878.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.41%)</title><rect x="751.8" y="851.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="754.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 1.04%)</title><rect x="756.7" y="851.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="759.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 1.04%)</title><rect x="756.7" y="835.0" width="12.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="759.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (5 samples, 1.04%)</title><rect x="756.7" y="819.0" width="12.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="759.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 1.04%)</title><rect x="756.7" y="803.0" width="12.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="759.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="787.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="759.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="771.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="759.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="755.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="759.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="739.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="759.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="723.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="759.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="707.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="759.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="691.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="759.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="675.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="759.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="659.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="759.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="643.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="759.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="627.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="759.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="611.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="759.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="595.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="759.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="579.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="759.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="563.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="759.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="547.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="759.7" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="531.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="759.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="515.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="759.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.21%)</title><rect x="756.7" y="499.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="759.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.83%)</title><rect x="759.1" y="787.0" width="9.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="762.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.21%)</title><rect x="759.1" y="771.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="762.1" y="782.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.21%)</title><rect x="759.1" y="755.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="762.1" y="766.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.21%)</title><rect x="759.1" y="739.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="762.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.62%)</title><rect x="761.6" y="771.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="764.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="755.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="764.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="739.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="764.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="723.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="764.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="707.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="764.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="691.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="764.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="675.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="764.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="659.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="764.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="643.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="764.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="627.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="764.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="611.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="764.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="595.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="764.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="579.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="764.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="563.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="764.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="547.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="764.6" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="531.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="764.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="515.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="764.6" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.21%)</title><rect x="761.6" y="499.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="764.6" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.41%)</title><rect x="764.0" y="755.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="767.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.41%)</title><rect x="764.0" y="739.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="767.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.41%)</title><rect x="764.0" y="723.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="767.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.41%)</title><rect x="764.0" y="707.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="767.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="691.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="767.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="675.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="767.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="659.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="767.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="643.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="767.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="627.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="611.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="767.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="595.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="767.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="579.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="767.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="563.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="767.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="547.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="767.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="531.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="767.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="515.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="499.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="767.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="483.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="767.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="467.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="767.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="451.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="767.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="435.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="419.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="767.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="403.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="767.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.21%)</title><rect x="764.0" y="387.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="767.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="691.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="769.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="675.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="769.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="659.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="769.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="643.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="769.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="627.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="769.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="611.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="769.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="595.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="769.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="579.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="769.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="563.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="769.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="547.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="769.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="531.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="769.5" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="515.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="769.5" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="499.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="769.5" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="483.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="769.5" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="467.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="769.5" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="766.5" y="451.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="769.5" y="462.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.21%)</title><rect x="766.5" y="435.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="769.5" y="446.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.21%)</title><rect x="768.9" y="851.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="771.9" y="862.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.21%)</title><rect x="768.9" y="835.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="771.9" y="846.0"></text>
</g>
<g>
<title>TypeOopPtr::singleton() const (1 samples, 0.21%)</title><rect x="768.9" y="819.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="771.9" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (146 samples, 30.29%)</title><rect x="771.4" y="851.0" width="357.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="774.4" y="862.0">PhaseIdealLoop::build_and_optimize(bool, bool)</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.21%)</title><rect x="771.4" y="835.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="774.4" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.21%)</title><rect x="771.4" y="819.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="774.4" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (138 samples, 28.63%)</title><rect x="773.8" y="835.0" width="337.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="776.8" y="846.0">PhaseIdealLoop::build_loop_late(VectorSet&amp;, No..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (135 samples, 28.01%)</title><rect x="781.2" y="819.0" width="330.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="784.2" y="830.0">PhaseIdealLoop::build_loop_late_post(Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 1.45%)</title><rect x="786.1" y="803.0" width="17.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="789.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (126 samples, 26.14%)</title><rect x="803.2" y="803.0" width="308.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="806.2" y="814.0">PhaseIdealLoop::get_late_ctrl(Node*, Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (29 samples, 6.02%)</title><rect x="1038.2" y="787.0" width="71.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1041.2" y="798.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.21%)</title><rect x="1109.2" y="787.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.2" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.21%)</title><rect x="1109.2" y="771.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.62%)</title><rect x="1111.7" y="835.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.7" y="846.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.21%)</title><rect x="1114.1" y="819.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.1" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.21%)</title><rect x="1116.6" y="819.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.6" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.41%)</title><rect x="1119.0" y="835.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.0" y="846.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.21%)</title><rect x="1119.0" y="819.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.21%)</title><rect x="1121.5" y="819.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.5" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.21%)</title><rect x="1121.5" y="803.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.5" y="814.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.21%)</title><rect x="1121.5" y="787.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.5" y="798.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.21%)</title><rect x="1121.5" y="771.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.5" y="782.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.21%)</title><rect x="1121.5" y="755.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.5" y="766.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.21%)</title><rect x="1121.5" y="739.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.5" y="750.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.21%)</title><rect x="1121.5" y="723.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.21%)</title><rect x="1123.9" y="835.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.9" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.21%)</title><rect x="1123.9" y="819.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.9" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.21%)</title><rect x="1123.9" y="803.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.9" y="814.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.21%)</title><rect x="1123.9" y="787.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.9" y="798.0"></text>
</g>
<g>
<title>SuperWord::SuperWord(PhaseIdealLoop*) (1 samples, 0.21%)</title><rect x="1126.3" y="835.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.3" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 1.87%)</title><rect x="1128.8" y="851.0" width="22.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.8" y="862.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 1.87%)</title><rect x="1128.8" y="835.0" width="22.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.8" y="846.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.21%)</title><rect x="1128.8" y="819.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.8" y="830.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.21%)</title><rect x="1128.8" y="803.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.8" y="814.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.21%)</title><rect x="1131.2" y="819.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.2" y="830.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.21%)</title><rect x="1131.2" y="803.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.2" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.21%)</title><rect x="1131.2" y="787.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.2" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.21%)</title><rect x="1131.2" y="771.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.2" y="782.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.21%)</title><rect x="1133.7" y="819.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.7" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.21%)</title><rect x="1136.1" y="819.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.1" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.21%)</title><rect x="1136.1" y="803.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.1" y="814.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.21%)</title><rect x="1136.1" y="787.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.1" y="798.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.21%)</title><rect x="1138.6" y="819.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.6" y="830.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.21%)</title><rect x="1138.6" y="803.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.6" y="814.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.21%)</title><rect x="1141.0" y="819.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.0" y="830.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.62%)</title><rect x="1143.5" y="819.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.5" y="830.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.41%)</title><rect x="1143.5" y="803.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.5" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.41%)</title><rect x="1143.5" y="787.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.5" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.41%)</title><rect x="1143.5" y="771.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.5" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.41%)</title><rect x="1143.5" y="755.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.5" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.41%)</title><rect x="1143.5" y="739.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.5" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.41%)</title><rect x="1143.5" y="723.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.5" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.41%)</title><rect x="1143.5" y="707.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.5" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.41%)</title><rect x="1143.5" y="691.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.5" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.41%)</title><rect x="1143.5" y="675.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.5" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.21%)</title><rect x="1143.5" y="659.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.5" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.21%)</title><rect x="1143.5" y="643.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.5" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.21%)</title><rect x="1143.5" y="627.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.5" y="638.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.21%)</title><rect x="1143.5" y="611.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.5" y="622.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.21%)</title><rect x="1143.5" y="595.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.5" y="606.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.21%)</title><rect x="1145.9" y="659.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.9" y="670.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.21%)</title><rect x="1145.9" y="643.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.9" y="654.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.21%)</title><rect x="1148.4" y="803.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.4" y="814.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.21%)</title><rect x="1148.4" y="787.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.4" y="798.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.21%)</title><rect x="1148.4" y="771.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.4" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.21%)</title><rect x="1150.8" y="851.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.8" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.21%)</title><rect x="1150.8" y="835.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.8" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.21%)</title><rect x="1150.8" y="819.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.8" y="830.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.21%)</title><rect x="1150.8" y="803.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.8" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.45%)</title><rect x="1153.3" y="867.0" width="17.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.3" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.45%)</title><rect x="1153.3" y="851.0" width="17.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.45%)</title><rect x="1153.3" y="835.0" width="17.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.45%)</title><rect x="1153.3" y="819.0" width="17.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.45%)</title><rect x="1153.3" y="803.0" width="17.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.04%)</title><rect x="1153.3" y="787.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.3" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.83%)</title><rect x="1153.3" y="771.0" width="9.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.3" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.83%)</title><rect x="1153.3" y="755.0" width="9.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.83%)</title><rect x="1153.3" y="739.0" width="9.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.83%)</title><rect x="1153.3" y="723.0" width="9.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.83%)</title><rect x="1153.3" y="707.0" width="9.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.62%)</title><rect x="1153.3" y="691.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.3" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.62%)</title><rect x="1153.3" y="675.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.3" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.62%)</title><rect x="1153.3" y="659.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.3" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.62%)</title><rect x="1153.3" y="643.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.62%)</title><rect x="1153.3" y="627.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.62%)</title><rect x="1153.3" y="611.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.62%)</title><rect x="1153.3" y="595.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.62%)</title><rect x="1153.3" y="579.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.62%)</title><rect x="1153.3" y="563.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.62%)</title><rect x="1153.3" y="547.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.62%)</title><rect x="1153.3" y="531.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.62%)</title><rect x="1153.3" y="515.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.62%)</title><rect x="1153.3" y="499.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.62%)</title><rect x="1153.3" y="483.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.3" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.62%)</title><rect x="1153.3" y="467.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.3" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.62%)</title><rect x="1153.3" y="451.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.62%)</title><rect x="1153.3" y="435.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.62%)</title><rect x="1153.3" y="419.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.62%)</title><rect x="1153.3" y="403.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.41%)</title><rect x="1153.3" y="387.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.3" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1153.3" y="371.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.3" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1153.3" y="355.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.3" y="366.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.21%)</title><rect x="1153.3" y="339.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.3" y="350.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.21%)</title><rect x="1153.3" y="323.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.3" y="334.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.21%)</title><rect x="1153.3" y="307.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.3" y="318.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.21%)</title><rect x="1153.3" y="291.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.3" y="302.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.21%)</title><rect x="1153.3" y="275.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.3" y="286.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.21%)</title><rect x="1153.3" y="259.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.3" y="270.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.21%)</title><rect x="1153.3" y="243.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.3" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1155.7" y="371.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.7" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1155.7" y="355.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.7" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1155.7" y="339.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1155.7" y="323.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1155.7" y="307.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1155.7" y="291.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1155.7" y="275.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1155.7" y="259.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.7" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1155.7" y="243.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1155.7" y="227.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1155.7" y="211.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1155.7" y="195.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1155.7" y="179.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.7" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1155.7" y="163.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.7" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1155.7" y="147.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1155.7" y="131.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1155.7" y="115.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1155.7" y="99.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.7" y="110.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.21%)</title><rect x="1155.7" y="83.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.7" y="94.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.21%)</title><rect x="1155.7" y="67.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.7" y="78.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.21%)</title><rect x="1155.7" y="51.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.7" y="62.0"></text>
</g>
<g>
<title>Type::singleton() const (1 samples, 0.21%)</title><rect x="1155.7" y="35.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.21%)</title><rect x="1158.2" y="387.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.2" y="398.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.21%)</title><rect x="1158.2" y="371.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.21%)</title><rect x="1160.6" y="691.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.21%)</title><rect x="1160.6" y="675.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.6" y="686.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.21%)</title><rect x="1160.6" y="659.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.6" y="670.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.21%)</title><rect x="1160.6" y="643.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.6" y="654.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.21%)</title><rect x="1160.6" y="627.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.6" y="638.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.21%)</title><rect x="1160.6" y="611.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.6" y="622.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.21%)</title><rect x="1160.6" y="595.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.6" y="606.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.21%)</title><rect x="1160.6" y="579.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.6" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1163.1" y="771.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1163.1" y="755.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.1" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1163.1" y="739.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1163.1" y="723.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1163.1" y="707.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1163.1" y="691.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1163.1" y="675.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1163.1" y="659.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1163.1" y="643.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1163.1" y="627.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1163.1" y="611.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1163.1" y="595.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1163.1" y="579.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.1" y="590.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.21%)</title><rect x="1163.1" y="563.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.1" y="574.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.21%)</title><rect x="1163.1" y="547.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.1" y="558.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.21%)</title><rect x="1163.1" y="531.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.1" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.21%)</title><rect x="1163.1" y="515.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.1" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.21%)</title><rect x="1163.1" y="499.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.1" y="510.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.21%)</title><rect x="1163.1" y="483.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.1" y="494.0"></text>
</g>
<g>
<title>Dependencies::check_evol_method(Method*) (1 samples, 0.21%)</title><rect x="1163.1" y="467.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.21%)</title><rect x="1165.5" y="787.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.21%)</title><rect x="1165.5" y="771.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.5" y="782.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.21%)</title><rect x="1165.5" y="755.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.5" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.21%)</title><rect x="1165.5" y="739.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.5" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.21%)</title><rect x="1165.5" y="723.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.5" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.21%)</title><rect x="1165.5" y="707.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.21%)</title><rect x="1168.0" y="787.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.0" y="798.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.21%)</title><rect x="1168.0" y="771.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.0" y="782.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.21%)</title><rect x="1168.0" y="755.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.0" y="766.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.21%)</title><rect x="1168.0" y="739.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.0" y="750.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.21%)</title><rect x="1168.0" y="723.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.0" y="734.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.41%)</title><rect x="1170.4" y="867.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.4" y="878.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.41%)</title><rect x="1170.4" y="851.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.4" y="862.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 0.83%)</title><rect x="1175.3" y="899.0" width="9.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="910.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 0.83%)</title><rect x="1175.3" y="883.0" width="9.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.3" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 0.83%)</title><rect x="1175.3" y="867.0" width="9.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="878.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.62%)</title><rect x="1175.3" y="851.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.3" y="862.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.21%)</title><rect x="1175.3" y="835.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.3" y="846.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.21%)</title><rect x="1175.3" y="819.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.3" y="830.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.21%)</title><rect x="1175.3" y="803.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.3" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.21%)</title><rect x="1175.3" y="787.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.21%)</title><rect x="1175.3" y="771.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.3" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.21%)</title><rect x="1175.3" y="755.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.3" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.21%)</title><rect x="1175.3" y="739.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.21%)</title><rect x="1175.3" y="723.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.21%)</title><rect x="1175.3" y="707.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.3" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.21%)</title><rect x="1175.3" y="691.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.3" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.21%)</title><rect x="1175.3" y="675.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.3" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.21%)</title><rect x="1175.3" y="659.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.3" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.21%)</title><rect x="1175.3" y="643.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.3" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.21%)</title><rect x="1175.3" y="627.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.3" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.21%)</title><rect x="1175.3" y="611.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.3" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.21%)</title><rect x="1175.3" y="595.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.21%)</title><rect x="1175.3" y="579.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.3" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.21%)</title><rect x="1175.3" y="563.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.3" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.21%)</title><rect x="1175.3" y="547.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.3" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.21%)</title><rect x="1175.3" y="531.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.3" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.21%)</title><rect x="1175.3" y="515.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.3" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.21%)</title><rect x="1175.3" y="499.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.3" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.21%)</title><rect x="1175.3" y="483.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.3" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.21%)</title><rect x="1175.3" y="467.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.3" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.21%)</title><rect x="1175.3" y="451.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.3" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.21%)</title><rect x="1175.3" y="435.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.3" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.21%)</title><rect x="1175.3" y="419.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.3" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.21%)</title><rect x="1175.3" y="403.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.3" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.21%)</title><rect x="1175.3" y="387.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.3" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.21%)</title><rect x="1175.3" y="371.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.3" y="382.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.21%)</title><rect x="1175.3" y="355.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.3" y="366.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.21%)</title><rect x="1175.3" y="339.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.3" y="350.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.21%)</title><rect x="1175.3" y="323.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.3" y="334.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.21%)</title><rect x="1175.3" y="307.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.3" y="318.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.21%)</title><rect x="1175.3" y="291.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="302.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.21%)</title><rect x="1175.3" y="275.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="286.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.21%)</title><rect x="1175.3" y="259.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.3" y="270.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.41%)</title><rect x="1177.8" y="835.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="846.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.21%)</title><rect x="1177.8" y="819.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.8" y="830.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_exception_handler() (1 samples, 0.21%)</title><rect x="1177.8" y="803.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.8" y="814.0"></text>
</g>
<g>
<title>MacroAssembler::stop(char const*) (1 samples, 0.21%)</title><rect x="1177.8" y="787.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.8" y="798.0"></text>
</g>
<g>
<title>Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&amp;) (1 samples, 0.21%)</title><rect x="1177.8" y="771.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.8" y="782.0"></text>
</g>
<g>
<title>relocInfo::initialize(CodeSection*, Relocation*) (1 samples, 0.21%)</title><rect x="1177.8" y="755.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="766.0"></text>
</g>
<g>
<title>external_word_Relocation::pack_data_to(CodeSection*) (1 samples, 0.21%)</title><rect x="1177.8" y="739.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.8" y="750.0"></text>
</g>
<g>
<title>StubCodeDesc::desc_for(unsigned char*) (1 samples, 0.21%)</title><rect x="1177.8" y="723.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.8" y="734.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.21%)</title><rect x="1180.2" y="819.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.2" y="830.0"></text>
</g>
<g>
<title>Compilation::debug_info_recorder() const (1 samples, 0.21%)</title><rect x="1180.2" y="803.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.2" y="814.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.21%)</title><rect x="1182.7" y="851.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.7" y="862.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.21%)</title><rect x="1182.7" y="835.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.7" y="846.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.21%)</title><rect x="1182.7" y="819.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.7" y="830.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.21%)</title><rect x="1182.7" y="803.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.7" y="814.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.21%)</title><rect x="1182.7" y="787.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.7" y="798.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.21%)</title><rect x="1182.7" y="771.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="782.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (1 samples, 0.21%)</title><rect x="1182.7" y="755.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="766.0"></text>
</g>
<g>
<title>RelocIterator::addr_in_const() const (1 samples, 0.21%)</title><rect x="1182.7" y="739.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="750.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.21%)</title><rect x="1185.1" y="915.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.1" y="926.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.21%)</title><rect x="1185.1" y="899.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.1" y="910.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.21%)</title><rect x="1185.1" y="883.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.1" y="894.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.21%)</title><rect x="1185.1" y="867.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.1" y="878.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.21%)</title><rect x="1185.1" y="851.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="862.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.21%)</title><rect x="1187.6" y="963.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.6" y="974.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.21%)</title><rect x="1187.6" y="947.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.6" y="958.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.21%)</title><rect x="1187.6" y="931.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.6" y="942.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.21%)</title><rect x="1187.6" y="915.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.6" y="926.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.21%)</title><rect x="1187.6" y="899.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.6" y="910.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.21%)</title><rect x="1187.6" y="883.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.6" y="894.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.21%)</title><rect x="1187.6" y="867.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.6" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.21%)</title><rect x="1187.6" y="851.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.6" y="862.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.21%)</title><rect x="1187.6" y="835.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.6" y="846.0"></text>
</g>
</g>
</svg>
