<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1542" onload="init(evt)" viewBox="0 0 1200 1542" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1525"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1525"> </text>
<g id="frames">
<g>
<title>all (408 samples, 100.00%)</title><rect x="10.0" y="1491.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1502.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 5.64%)</title><rect x="10.0" y="1475.0" width="66.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1486.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.25%)</title><rect x="12.9" y="1459.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.9" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.25%)</title><rect x="12.9" y="1443.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.9" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.25%)</title><rect x="12.9" y="1427.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.9" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.25%)</title><rect x="12.9" y="1411.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.9" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.25%)</title><rect x="12.9" y="1395.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.9" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.25%)</title><rect x="12.9" y="1379.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.9" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.25%)</title><rect x="12.9" y="1363.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.9" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.25%)</title><rect x="12.9" y="1347.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.9" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.25%)</title><rect x="12.9" y="1331.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.9" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.25%)</title><rect x="12.9" y="1315.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.25%)</title><rect x="12.9" y="1299.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.9" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.25%)</title><rect x="12.9" y="1283.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.addInterestOps (1 samples, 0.25%)</title><rect x="12.9" y="1267.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.9" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.25%)</title><rect x="12.9" y="1251.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.9" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.ensureValid (1 samples, 0.25%)</title><rect x="12.9" y="1235.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.9" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (1 samples, 0.25%)</title><rect x="12.9" y="1219.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (21 samples, 5.15%)</title><rect x="15.8" y="1459.0" width="60.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.8" y="1470.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.49%)</title><rect x="15.8" y="1443.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.8" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.49%)</title><rect x="15.8" y="1427.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.8" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1793035655.accept (2 samples, 0.49%)</title><rect x="15.8" y="1411.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.8" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.49%)</title><rect x="15.8" y="1395.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.8" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.49%)</title><rect x="15.8" y="1379.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.8" y="1390.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.25%)</title><rect x="18.7" y="1363.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.7" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.49%)</title><rect x="21.6" y="1443.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.6" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.49%)</title><rect x="21.6" y="1427.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.6" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.49%)</title><rect x="21.6" y="1411.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.6" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.49%)</title><rect x="21.6" y="1395.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.6" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.25%)</title><rect x="21.6" y="1379.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.6" y="1390.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.25%)</title><rect x="21.6" y="1363.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.6" y="1374.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.25%)</title><rect x="21.6" y="1347.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.6" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.25%)</title><rect x="21.6" y="1331.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.6" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.25%)</title><rect x="21.6" y="1315.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.6" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.25%)</title><rect x="24.5" y="1379.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.5" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.25%)</title><rect x="24.5" y="1363.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.5" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.25%)</title><rect x="24.5" y="1347.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.5" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.25%)</title><rect x="24.5" y="1331.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.5" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.25%)</title><rect x="24.5" y="1315.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.5" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.25%)</title><rect x="24.5" y="1299.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.5" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.25%)</title><rect x="24.5" y="1283.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.5" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/939958388.get (1 samples, 0.25%)</title><rect x="24.5" y="1267.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.5" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.25%)</title><rect x="27.4" y="1443.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.4" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.25%)</title><rect x="27.4" y="1427.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.4" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.25%)</title><rect x="30.2" y="1443.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.2" y="1454.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.25%)</title><rect x="30.2" y="1427.0" width="2.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="33.2" y="1438.0"></text>
</g>
<g>
<title>java_start(Thread*) (1 samples, 0.25%)</title><rect x="30.2" y="1411.0" width="2.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="33.2" y="1422.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.25%)</title><rect x="30.2" y="1395.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="33.2" y="1406.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.25%)</title><rect x="30.2" y="1379.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="33.2" y="1390.0"></text>
</g>
<g>
<title>thread_entry(JavaThread*, Thread*) (1 samples, 0.25%)</title><rect x="30.2" y="1363.0" width="2.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="33.2" y="1374.0"></text>
</g>
<g>
<title>JavaCalls::call_virtual(JavaValue*, Handle, KlassHandle, Symbol*, Symbol*, Thread*) (1 samples, 0.25%)</title><rect x="30.2" y="1347.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="33.2" y="1358.0"></text>
</g>
<g>
<title>JavaCalls::call_virtual(JavaValue*, KlassHandle, Symbol*, Symbol*, JavaCallArguments*, Thread*) (1 samples, 0.25%)</title><rect x="30.2" y="1331.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="33.2" y="1342.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle*, JavaCallArguments*, Thread*) (1 samples, 0.25%)</title><rect x="30.2" y="1315.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="33.2" y="1326.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.25%)</title><rect x="30.2" y="1299.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="33.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.23%)</title><rect x="33.1" y="1443.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="36.1" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/473127579.accept (5 samples, 1.23%)</title><rect x="33.1" y="1427.0" width="14.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="36.1" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (5 samples, 1.23%)</title><rect x="33.1" y="1411.0" width="14.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="36.1" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.25%)</title><rect x="33.1" y="1395.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="36.1" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.25%)</title><rect x="33.1" y="1379.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="36.1" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.25%)</title><rect x="33.1" y="1363.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="36.1" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.25%)</title><rect x="33.1" y="1347.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.25%)</title><rect x="33.1" y="1331.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.1" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.25%)</title><rect x="33.1" y="1315.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.1" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.25%)</title><rect x="33.1" y="1299.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="36.1" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.25%)</title><rect x="33.1" y="1283.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.25%)</title><rect x="33.1" y="1267.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="36.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.25%)</title><rect x="33.1" y="1251.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="36.1" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.49%)</title><rect x="36.0" y="1395.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="39.0" y="1406.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.49%)</title><rect x="36.0" y="1379.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.0" y="1390.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.25%)</title><rect x="38.9" y="1363.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="41.9" y="1374.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.25%)</title><rect x="38.9" y="1347.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.9" y="1358.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.25%)</title><rect x="38.9" y="1331.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.9" y="1342.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.25%)</title><rect x="38.9" y="1315.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="41.9" y="1326.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.49%)</title><rect x="41.8" y="1395.0" width="5.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="44.8" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 2.45%)</title><rect x="47.6" y="1443.0" width="28.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.6" y="1454.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 2.45%)</title><rect x="47.6" y="1427.0" width="28.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="50.6" y="1438.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 1.72%)</title><rect x="47.6" y="1411.0" width="20.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.6" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.49%)</title><rect x="47.6" y="1395.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="50.6" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.49%)</title><rect x="47.6" y="1379.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.6" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.25%)</title><rect x="47.6" y="1363.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.25%)</title><rect x="47.6" y="1347.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.25%)</title><rect x="47.6" y="1331.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.25%)</title><rect x="47.6" y="1315.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.6" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$260/50432753.shouldBlock (1 samples, 0.25%)</title><rect x="50.5" y="1363.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.25%)</title><rect x="50.5" y="1347.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="53.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.25%)</title><rect x="50.5" y="1331.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="53.5" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.25%)</title><rect x="50.5" y="1315.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="53.5" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.25%)</title><rect x="50.5" y="1299.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.5" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.25%)</title><rect x="50.5" y="1283.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.5" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.25%)</title><rect x="50.5" y="1267.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="53.5" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.25%)</title><rect x="50.5" y="1251.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="53.5" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.25%)</title><rect x="50.5" y="1235.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="53.5" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.25%)</title><rect x="50.5" y="1219.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.5" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.25%)</title><rect x="50.5" y="1203.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.25%)</title><rect x="50.5" y="1187.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.5" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.25%)</title><rect x="50.5" y="1171.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$261/2115319881.test (1 samples, 0.25%)</title><rect x="50.5" y="1155.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="53.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$hasAvailableFetches$0 (1 samples, 0.25%)</title><rect x="50.5" y="1139.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="53.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.23%)</title><rect x="53.4" y="1395.0" width="14.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="56.4" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.23%)</title><rect x="53.4" y="1379.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.4" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 0.98%)</title><rect x="53.4" y="1363.0" width="11.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="56.4" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 0.98%)</title><rect x="53.4" y="1347.0" width="11.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="56.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.49%)</title><rect x="53.4" y="1331.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (1 samples, 0.25%)</title><rect x="53.4" y="1315.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.25%)</title><rect x="56.3" y="1315.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="59.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.25%)</title><rect x="56.3" y="1299.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.25%)</title><rect x="56.3" y="1283.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.25%)</title><rect x="56.3" y="1267.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="59.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.25%)</title><rect x="56.3" y="1251.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="59.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.25%)</title><rect x="56.3" y="1235.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.25%)</title><rect x="56.3" y="1219.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.49%)</title><rect x="59.2" y="1331.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="62.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.49%)</title><rect x="59.2" y="1315.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.49%)</title><rect x="59.2" y="1299.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="62.2" y="1310.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.49%)</title><rect x="59.2" y="1283.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="62.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.25%)</title><rect x="65.0" y="1363.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.49%)</title><rect x="67.8" y="1411.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.8" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.49%)</title><rect x="67.8" y="1395.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="70.8" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.49%)</title><rect x="67.8" y="1379.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="70.8" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.25%)</title><rect x="67.8" y="1363.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.8" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.25%)</title><rect x="67.8" y="1347.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="70.8" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.25%)</title><rect x="67.8" y="1331.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="70.8" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.25%)</title><rect x="67.8" y="1315.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="70.8" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.25%)</title><rect x="67.8" y="1299.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.8" y="1310.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.25%)</title><rect x="67.8" y="1283.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="70.8" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.25%)</title><rect x="67.8" y="1267.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.25%)</title><rect x="70.7" y="1363.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.7" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.25%)</title><rect x="70.7" y="1347.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.7" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.25%)</title><rect x="70.7" y="1331.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.7" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.25%)</title><rect x="70.7" y="1315.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.7" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.25%)</title><rect x="70.7" y="1299.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="73.7" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.25%)</title><rect x="70.7" y="1283.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="73.7" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.25%)</title><rect x="70.7" y="1267.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="73.7" y="1278.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.25%)</title><rect x="70.7" y="1251.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="73.7" y="1262.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.25%)</title><rect x="70.7" y="1235.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="73.7" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.25%)</title><rect x="70.7" y="1219.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="73.7" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.25%)</title><rect x="70.7" y="1203.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="73.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.25%)</title><rect x="70.7" y="1187.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="73.7" y="1198.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.25%)</title><rect x="70.7" y="1171.0" width="2.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="73.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.25%)</title><rect x="73.6" y="1411.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.6" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.25%)</title><rect x="73.6" y="1395.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="76.6" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedSends (1 samples, 0.25%)</title><rect x="73.6" y="1379.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="76.6" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.lastSent (1 samples, 0.25%)</title><rect x="73.6" y="1363.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.requestQueue (1 samples, 0.25%)</title><rect x="73.6" y="1347.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.6" y="1358.0"></text>
</g>
<g>
<title>java/lang/Thread.run (229 samples, 56.13%)</title><rect x="76.5" y="1475.0" width="662.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.5" y="1486.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (229 samples, 56.13%)</title><rect x="76.5" y="1459.0" width="662.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.5" y="1470.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (229 samples, 56.13%)</title><rect x="76.5" y="1443.0" width="662.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.5" y="1454.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.25%)</title><rect x="79.4" y="1427.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="82.4" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (1 samples, 0.25%)</title><rect x="79.4" y="1411.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="82.4" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.25%)</title><rect x="79.4" y="1395.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.4" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.25%)</title><rect x="79.4" y="1379.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="82.4" y="1390.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.25%)</title><rect x="79.4" y="1363.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.4" y="1374.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.25%)</title><rect x="79.4" y="1347.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="82.4" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1295445308.run (218 samples, 53.43%)</title><rect x="82.3" y="1427.0" width="630.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="85.3" y="1438.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1295445308.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (218 samples, 53.43%)</title><rect x="82.3" y="1411.0" width="630.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="85.3" y="1422.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (218 samples, 53.43%)</title><rect x="82.3" y="1395.0" width="630.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="85.3" y="1406.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (214 samples, 52.45%)</title><rect x="82.3" y="1379.0" width="618.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="85.3" y="1390.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (42 samples, 10.29%)</title><rect x="93.9" y="1363.0" width="121.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.9" y="1374.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/363988129.extract (42 samples, 10.29%)</title><rect x="93.9" y="1347.0" width="121.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.9" y="1358.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (42 samples, 10.29%)</title><rect x="93.9" y="1331.0" width="121.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="96.9" y="1342.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (42 samples, 10.29%)</title><rect x="93.9" y="1315.0" width="121.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="96.9" y="1326.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (42 samples, 10.29%)</title><rect x="93.9" y="1299.0" width="121.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.9" y="1310.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (42 samples, 10.29%)</title><rect x="93.9" y="1283.0" width="121.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="96.9" y="1294.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (15 samples, 3.68%)</title><rect x="93.9" y="1267.0" width="43.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.9" y="1278.0">com/..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.25%)</title><rect x="102.5" y="1251.0" width="2.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="105.5" y="1262.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="102.5" y="1235.0" width="2.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="105.5" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.23%)</title><rect x="105.4" y="1251.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="108.4" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.74%)</title><rect x="105.4" y="1235.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="108.4" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.49%)</title><rect x="108.3" y="1219.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="111.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.49%)</title><rect x="108.3" y="1203.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="111.3" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.49%)</title><rect x="108.3" y="1187.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="111.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.49%)</title><rect x="108.3" y="1171.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.49%)</title><rect x="108.3" y="1155.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="111.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.49%)</title><rect x="114.1" y="1235.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 1.47%)</title><rect x="119.9" y="1251.0" width="17.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="122.9" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 0.98%)</title><rect x="125.7" y="1235.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="128.7" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.98%)</title><rect x="125.7" y="1219.0" width="11.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.7" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.25%)</title><rect x="125.7" y="1203.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="128.7" y="1214.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.25%)</title><rect x="125.7" y="1187.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="128.7" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.25%)</title><rect x="125.7" y="1171.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="128.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.74%)</title><rect x="128.6" y="1203.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="131.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (26 samples, 6.37%)</title><rect x="137.3" y="1267.0" width="75.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="140.3" y="1278.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.25%)</title><rect x="137.3" y="1251.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="140.3" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.25%)</title><rect x="140.1" y="1251.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="143.1" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.25%)</title><rect x="143.0" y="1251.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.0" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.49%)</title><rect x="145.9" y="1251.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="148.9" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.49%)</title><rect x="145.9" y="1235.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.9" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.25%)</title><rect x="148.8" y="1219.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.8" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.25%)</title><rect x="148.8" y="1203.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="151.8" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.49%)</title><rect x="151.7" y="1251.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="154.7" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.25%)</title><rect x="154.6" y="1235.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="157.6" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (18 samples, 4.41%)</title><rect x="157.5" y="1251.0" width="52.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="160.5" y="1262.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 1.96%)</title><rect x="157.5" y="1235.0" width="23.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="160.5" y="1246.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 1.96%)</title><rect x="157.5" y="1219.0" width="23.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="160.5" y="1230.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.25%)</title><rect x="157.5" y="1203.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="160.5" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (7 samples, 1.72%)</title><rect x="160.4" y="1203.0" width="20.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.4" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (7 samples, 1.72%)</title><rect x="160.4" y="1187.0" width="20.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.4" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (6 samples, 1.47%)</title><rect x="163.3" y="1171.0" width="17.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.3" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (6 samples, 1.47%)</title><rect x="163.3" y="1155.0" width="17.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.25%)</title><rect x="180.6" y="1235.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.6" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (9 samples, 2.21%)</title><rect x="183.5" y="1235.0" width="26.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="186.5" y="1246.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (9 samples, 2.21%)</title><rect x="183.5" y="1219.0" width="26.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.5" y="1230.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 2.21%)</title><rect x="183.5" y="1203.0" width="26.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.5" y="1214.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.25%)</title><rect x="183.5" y="1187.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="186.5" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.25%)</title><rect x="183.5" y="1171.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.5" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.25%)</title><rect x="183.5" y="1155.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="186.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.25%)</title><rect x="183.5" y="1139.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.25%)</title><rect x="186.4" y="1187.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="189.4" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.25%)</title><rect x="189.3" y="1187.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.3" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.25%)</title><rect x="189.3" y="1171.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="192.3" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.25%)</title><rect x="189.3" y="1155.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.25%)</title><rect x="189.3" y="1139.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="192.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.25%)</title><rect x="189.3" y="1123.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="192.3" y="1134.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.25%)</title><rect x="189.3" y="1107.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.3" y="1118.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.25%)</title><rect x="189.3" y="1091.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="192.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.49%)</title><rect x="192.2" y="1187.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="195.2" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.49%)</title><rect x="192.2" y="1171.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="195.2" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.49%)</title><rect x="192.2" y="1155.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.2" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.25%)</title><rect x="195.1" y="1139.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="198.1" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.98%)</title><rect x="198.0" y="1187.0" width="11.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="201.0" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.25%)</title><rect x="206.7" y="1171.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="209.7" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="206.7" y="1155.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="209.7" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="206.7" y="1139.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="209.7" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="206.7" y="1123.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="209.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.25%)</title><rect x="209.6" y="1251.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="212.6" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.25%)</title><rect x="212.5" y="1267.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="215.5" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.25%)</title><rect x="212.5" y="1251.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="215.5" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.25%)</title><rect x="212.5" y="1235.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="215.5" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.25%)</title><rect x="212.5" y="1219.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="215.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.25%)</title><rect x="212.5" y="1203.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="215.5" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (158 samples, 38.73%)</title><rect x="215.3" y="1363.0" width="457.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="218.3" y="1374.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (27 samples, 6.62%)</title><rect x="215.3" y="1347.0" width="78.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.3" y="1358.0">com/linec..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (26 samples, 6.37%)</title><rect x="218.2" y="1331.0" width="75.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.2" y="1342.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (22 samples, 5.39%)</title><rect x="229.8" y="1315.0" width="63.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.8" y="1326.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 1.96%)</title><rect x="244.3" y="1299.0" width="23.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.3" y="1310.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 1.96%)</title><rect x="244.3" y="1283.0" width="23.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="247.3" y="1294.0">j..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (9 samples, 2.21%)</title><rect x="267.4" y="1299.0" width="26.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="270.4" y="1310.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 2.21%)</title><rect x="267.4" y="1283.0" width="26.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.4" y="1294.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.25%)</title><rect x="270.3" y="1267.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.3" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.25%)</title><rect x="273.2" y="1267.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.2" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.25%)</title><rect x="273.2" y="1251.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.2" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 1.47%)</title><rect x="276.1" y="1267.0" width="17.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="279.1" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.49%)</title><rect x="293.4" y="1347.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.4" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.49%)</title><rect x="293.4" y="1331.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.4" y="1342.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.49%)</title><rect x="293.4" y="1315.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.4" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (25 samples, 6.13%)</title><rect x="299.2" y="1347.0" width="72.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.2" y="1358.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (25 samples, 6.13%)</title><rect x="299.2" y="1331.0" width="72.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.2" y="1342.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 2.45%)</title><rect x="305.0" y="1315.0" width="28.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="308.0" y="1326.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 2.45%)</title><rect x="305.0" y="1299.0" width="28.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="308.0" y="1310.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 2.45%)</title><rect x="305.0" y="1283.0" width="28.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.0" y="1294.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 1.72%)</title><rect x="305.0" y="1267.0" width="20.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.0" y="1278.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 1.72%)</title><rect x="305.0" y="1251.0" width="20.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.0" y="1262.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 1.72%)</title><rect x="305.0" y="1235.0" width="20.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.0" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.98%)</title><rect x="310.8" y="1219.0" width="11.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="313.8" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.25%)</title><rect x="310.8" y="1203.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="313.8" y="1214.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.25%)</title><rect x="310.8" y="1187.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="313.8" y="1198.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.25%)</title><rect x="310.8" y="1171.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="313.8" y="1182.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.25%)</title><rect x="310.8" y="1155.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="313.8" y="1166.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.74%)</title><rect x="313.7" y="1203.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="316.7" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.74%)</title><rect x="313.7" y="1187.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="316.7" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.25%)</title><rect x="313.7" y="1171.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="316.7" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.25%)</title><rect x="313.7" y="1155.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="316.7" y="1166.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.25%)</title><rect x="313.7" y="1139.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="316.7" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.25%)</title><rect x="313.7" y="1123.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="316.7" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.25%)</title><rect x="313.7" y="1107.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="316.7" y="1118.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.25%)</title><rect x="313.7" y="1091.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="316.7" y="1102.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (2 samples, 0.49%)</title><rect x="316.6" y="1171.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="319.6" y="1182.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.25%)</title><rect x="322.4" y="1219.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="325.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.25%)</title><rect x="325.2" y="1267.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.2" y="1278.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.49%)</title><rect x="328.1" y="1267.0" width="5.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="331.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.25%)</title><rect x="333.9" y="1315.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="336.9" y="1326.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.25%)</title><rect x="333.9" y="1299.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="336.9" y="1310.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.25%)</title><rect x="333.9" y="1283.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.9" y="1294.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (12 samples, 2.94%)</title><rect x="336.8" y="1315.0" width="34.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="339.8" y="1326.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 2.94%)</title><rect x="336.8" y="1299.0" width="34.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.8" y="1310.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.74%)</title><rect x="336.8" y="1283.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="339.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.74%)</title><rect x="336.8" y="1267.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="339.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.49%)</title><rect x="339.7" y="1251.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="342.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.49%)</title><rect x="339.7" y="1235.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="342.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.49%)</title><rect x="339.7" y="1219.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="342.7" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 2.21%)</title><rect x="345.5" y="1283.0" width="26.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.5" y="1294.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 1.72%)</title><rect x="351.3" y="1267.0" width="20.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="354.3" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.25%)</title><rect x="351.3" y="1251.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="354.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.25%)</title><rect x="351.3" y="1235.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.3" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 1.47%)</title><rect x="354.2" y="1251.0" width="17.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="357.2" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.25%)</title><rect x="357.1" y="1235.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="360.1" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 0.98%)</title><rect x="360.0" y="1235.0" width="11.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="363.0" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="368.6" y="1219.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="371.6" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="368.6" y="1203.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="371.6" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="368.6" y="1187.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="371.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (90 samples, 22.06%)</title><rect x="371.5" y="1347.0" width="260.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="374.5" y="1358.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (90 samples, 22.06%)</title><rect x="371.5" y="1331.0" width="260.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="374.5" y="1342.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="371.5" y="1315.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="374.5" y="1326.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="371.5" y="1299.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="374.5" y="1310.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="371.5" y="1283.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="374.5" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.25%)</title><rect x="371.5" y="1267.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="374.5" y="1278.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.25%)</title><rect x="371.5" y="1251.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="374.5" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1502841419.process (82 samples, 20.10%)</title><rect x="374.4" y="1315.0" width="237.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="377.4" y="1326.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (82 samples, 20.10%)</title><rect x="374.4" y="1299.0" width="237.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="377.4" y="1310.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (74 samples, 18.14%)</title><rect x="377.3" y="1283.0" width="214.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="380.3" y="1294.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.49%)</title><rect x="386.0" y="1267.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="389.0" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.49%)</title><rect x="386.0" y="1251.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="389.0" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.49%)</title><rect x="386.0" y="1235.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="389.0" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.25%)</title><rect x="388.9" y="1219.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="391.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.25%)</title><rect x="388.9" y="1203.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="391.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.25%)</title><rect x="388.9" y="1187.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="391.9" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (68 samples, 16.67%)</title><rect x="391.8" y="1267.0" width="196.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="394.8" y="1278.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>java/lang/Thread.sleep (66 samples, 16.18%)</title><rect x="391.8" y="1251.0" width="190.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="394.8" y="1262.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (55 samples, 13.48%)</title><rect x="417.8" y="1235.0" width="159.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="420.8" y="1246.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.49%)</title><rect x="432.3" y="1219.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="435.3" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.74%)</title><rect x="438.0" y="1219.0" width="8.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="441.0" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="443.8" y="1203.0" width="2.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="446.8" y="1214.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.49%)</title><rect x="446.7" y="1219.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="449.7" y="1230.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.25%)</title><rect x="452.5" y="1219.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="455.5" y="1230.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (42 samples, 10.29%)</title><rect x="455.4" y="1219.0" width="121.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="458.4" y="1230.0">os::sleep(Threa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.98%)</title><rect x="487.2" y="1203.0" width="11.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="490.2" y="1214.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.25%)</title><rect x="495.9" y="1187.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="498.9" y="1198.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.25%)</title><rect x="498.8" y="1203.0" width="2.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="501.8" y="1214.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.98%)</title><rect x="501.7" y="1203.0" width="11.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="504.7" y="1214.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (16 samples, 3.92%)</title><rect x="513.2" y="1203.0" width="46.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="516.2" y="1214.0">__pt..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.25%)</title><rect x="559.5" y="1203.0" width="2.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="562.5" y="1214.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.49%)</title><rect x="562.4" y="1203.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="565.4" y="1214.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.49%)</title><rect x="568.2" y="1203.0" width="5.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="571.2" y="1214.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.25%)</title><rect x="574.0" y="1203.0" width="2.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="577.0" y="1214.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.25%)</title><rect x="576.9" y="1235.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="579.9" y="1246.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.25%)</title><rect x="579.8" y="1235.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="582.8" y="1246.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.49%)</title><rect x="582.6" y="1251.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="585.6" y="1262.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.49%)</title><rect x="582.6" y="1235.0" width="5.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="585.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.25%)</title><rect x="588.4" y="1267.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="591.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.25%)</title><rect x="588.4" y="1251.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="591.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.25%)</title><rect x="588.4" y="1235.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="591.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.25%)</title><rect x="588.4" y="1219.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="591.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (7 samples, 1.72%)</title><rect x="591.3" y="1283.0" width="20.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="594.3" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 1.72%)</title><rect x="591.3" y="1267.0" width="20.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="594.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 1.72%)</title><rect x="591.3" y="1251.0" width="20.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="594.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 1.72%)</title><rect x="591.3" y="1235.0" width="20.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="594.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (7 samples, 1.72%)</title><rect x="591.3" y="1219.0" width="20.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="594.3" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 1.47%)</title><rect x="611.6" y="1315.0" width="17.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="614.6" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.74%)</title><rect x="620.2" y="1299.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.2" y="1310.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.74%)</title><rect x="620.2" y="1283.0" width="8.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="623.2" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.25%)</title><rect x="628.9" y="1315.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="631.9" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.25%)</title><rect x="628.9" y="1299.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="631.9" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 3.43%)</title><rect x="631.8" y="1347.0" width="40.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="634.8" y="1358.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 3.43%)</title><rect x="631.8" y="1331.0" width="40.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="634.8" y="1342.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.49%)</title><rect x="666.5" y="1315.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="669.5" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/1553178391.accept (2 samples, 0.49%)</title><rect x="666.5" y="1299.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="669.5" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (2 samples, 0.49%)</title><rect x="666.5" y="1283.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="669.5" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.49%)</title><rect x="666.5" y="1267.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="669.5" y="1278.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.49%)</title><rect x="666.5" y="1251.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="669.5" y="1262.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.49%)</title><rect x="666.5" y="1235.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="669.5" y="1246.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.25%)</title><rect x="669.4" y="1219.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="672.4" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="669.4" y="1203.0" width="2.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="672.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 2.21%)</title><rect x="672.3" y="1363.0" width="26.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="675.3" y="1374.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 2.21%)</title><rect x="672.3" y="1347.0" width="26.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="675.3" y="1358.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 2.21%)</title><rect x="672.3" y="1331.0" width="26.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="675.3" y="1342.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1097842467.accept (9 samples, 2.21%)</title><rect x="672.3" y="1315.0" width="26.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="675.3" y="1326.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$44 (9 samples, 2.21%)</title><rect x="672.3" y="1299.0" width="26.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="675.3" y="1310.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1433652650.complete (9 samples, 2.21%)</title><rect x="672.3" y="1283.0" width="26.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="675.3" y="1294.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$54 (9 samples, 2.21%)</title><rect x="672.3" y="1267.0" width="26.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="675.3" y="1278.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (4 samples, 0.98%)</title><rect x="686.8" y="1251.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="689.8" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 0.98%)</title><rect x="686.8" y="1235.0" width="11.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="689.8" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 0.98%)</title><rect x="686.8" y="1219.0" width="11.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="689.8" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.98%)</title><rect x="686.8" y="1203.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="689.8" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 0.98%)</title><rect x="686.8" y="1187.0" width="11.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="689.8" y="1198.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.25%)</title><rect x="698.3" y="1363.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="701.3" y="1374.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="698.3" y="1347.0" width="2.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="701.3" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 0.98%)</title><rect x="701.2" y="1379.0" width="11.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="704.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.74%)</title><rect x="712.8" y="1427.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="715.8" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.74%)</title><rect x="712.8" y="1411.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="715.8" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.74%)</title><rect x="712.8" y="1395.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="715.8" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.74%)</title><rect x="712.8" y="1379.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="715.8" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 1.47%)</title><rect x="721.5" y="1427.0" width="17.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="724.5" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 1.23%)</title><rect x="724.4" y="1411.0" width="14.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="727.4" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.25%)</title><rect x="724.4" y="1395.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="727.4" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.25%)</title><rect x="724.4" y="1379.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="727.4" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.25%)</title><rect x="724.4" y="1363.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="727.4" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.25%)</title><rect x="724.4" y="1347.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="727.4" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.25%)</title><rect x="724.4" y="1331.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="727.4" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.98%)</title><rect x="727.3" y="1395.0" width="11.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="730.3" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.98%)</title><rect x="727.3" y="1379.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="730.3" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.98%)</title><rect x="727.3" y="1363.0" width="11.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="730.3" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.98%)</title><rect x="727.3" y="1347.0" width="11.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="730.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.25%)</title><rect x="738.8" y="1475.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="741.8" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.sessionTimeoutExpired (1 samples, 0.25%)</title><rect x="738.8" y="1459.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="741.8" y="1470.0"></text>
</g>
<g>
<title>start_thread (155 samples, 37.99%)</title><rect x="741.7" y="1475.0" width="448.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="744.7" y="1486.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (155 samples, 37.99%)</title><rect x="741.7" y="1459.0" width="448.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="744.7" y="1470.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 2.94%)</title><rect x="741.7" y="1443.0" width="34.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="744.7" y="1454.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 2.94%)</title><rect x="741.7" y="1427.0" width="34.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="744.7" y="1438.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 2.94%)</title><rect x="741.7" y="1411.0" width="34.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="744.7" y="1422.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 2.94%)</title><rect x="741.7" y="1395.0" width="34.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="744.7" y="1406.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.98%)</title><rect x="762.0" y="1379.0" width="11.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="765.0" y="1390.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.49%)</title><rect x="767.7" y="1363.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="770.7" y="1374.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.25%)</title><rect x="773.5" y="1379.0" width="2.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="776.5" y="1390.0"></text>
</g>
<g>
<title>JavaThread::run() (141 samples, 34.56%)</title><rect x="776.4" y="1443.0" width="407.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="779.4" y="1454.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (141 samples, 34.56%)</title><rect x="776.4" y="1427.0" width="407.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="779.4" y="1438.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (141 samples, 34.56%)</title><rect x="776.4" y="1411.0" width="407.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="779.4" y="1422.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (141 samples, 34.56%)</title><rect x="776.4" y="1395.0" width="407.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="779.4" y="1406.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (137 samples, 33.58%)</title><rect x="776.4" y="1379.0" width="396.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="779.4" y="1390.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (137 samples, 33.58%)</title><rect x="776.4" y="1363.0" width="396.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="779.4" y="1374.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (59 samples, 14.46%)</title><rect x="776.4" y="1347.0" width="170.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="779.4" y="1358.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.49%)</title><rect x="776.4" y="1331.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="779.4" y="1342.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.49%)</title><rect x="776.4" y="1315.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="779.4" y="1326.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.25%)</title><rect x="779.3" y="1299.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="782.3" y="1310.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.49%)</title><rect x="782.2" y="1331.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="785.2" y="1342.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.25%)</title><rect x="782.2" y="1315.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="785.2" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.25%)</title><rect x="782.2" y="1299.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="785.2" y="1310.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.25%)</title><rect x="782.2" y="1283.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="785.2" y="1294.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.25%)</title><rect x="785.1" y="1315.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="788.1" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.25%)</title><rect x="785.1" y="1299.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="788.1" y="1310.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 1.47%)</title><rect x="788.0" y="1331.0" width="17.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="791.0" y="1342.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.49%)</title><rect x="788.0" y="1315.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="791.0" y="1326.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.98%)</title><rect x="793.8" y="1315.0" width="11.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="796.8" y="1326.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.49%)</title><rect x="793.8" y="1299.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="796.8" y="1310.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.49%)</title><rect x="799.6" y="1299.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="802.6" y="1310.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.49%)</title><rect x="799.6" y="1283.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="802.6" y="1294.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (2 samples, 0.49%)</title><rect x="799.6" y="1267.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="802.6" y="1278.0"></text>
</g>
<g>
<title>State::_sub_Op_ConI(Node const*) (1 samples, 0.25%)</title><rect x="799.6" y="1251.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="802.6" y="1262.0"></text>
</g>
<g>
<title>State::_sub_Op_ConP(Node const*) (1 samples, 0.25%)</title><rect x="802.5" y="1251.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="805.5" y="1262.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.25%)</title><rect x="805.3" y="1331.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="808.3" y="1342.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.25%)</title><rect x="805.3" y="1315.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="808.3" y="1326.0"></text>
</g>
<g>
<title>Block::succ_prob(unsigned int) (1 samples, 0.25%)</title><rect x="805.3" y="1299.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="808.3" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.25%)</title><rect x="808.2" y="1331.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="811.2" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.25%)</title><rect x="808.2" y="1315.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="811.2" y="1326.0"></text>
</g>
<g>
<title>UniverseOper::clone(Compile*) const (1 samples, 0.25%)</title><rect x="808.2" y="1299.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="811.2" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.98%)</title><rect x="811.1" y="1331.0" width="11.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="814.1" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.98%)</title><rect x="811.1" y="1315.0" width="11.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="814.1" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.49%)</title><rect x="811.1" y="1299.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="814.1" y="1310.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.25%)</title><rect x="814.0" y="1283.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="817.0" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.25%)</title><rect x="816.9" y="1299.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="819.9" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.25%)</title><rect x="819.8" y="1299.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="822.8" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (43 samples, 10.54%)</title><rect x="822.7" y="1331.0" width="124.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="825.7" y="1342.0">PhaseChaitin::R..</text>
</g>
<g>
<title>MachProjNode::Opcode() const (1 samples, 0.25%)</title><rect x="825.6" y="1315.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="828.6" y="1326.0"></text>
</g>
<g>
<title>Node::rematerialize() const (3 samples, 0.74%)</title><rect x="828.5" y="1315.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="831.5" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.49%)</title><rect x="837.2" y="1315.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="840.2" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.49%)</title><rect x="837.2" y="1299.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="840.2" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.49%)</title><rect x="837.2" y="1283.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="840.2" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.49%)</title><rect x="842.9" y="1315.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="845.9" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.25%)</title><rect x="845.8" y="1299.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="848.8" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.49%)</title><rect x="848.7" y="1315.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="851.7" y="1326.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.25%)</title><rect x="851.6" y="1299.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="854.6" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.98%)</title><rect x="854.5" y="1315.0" width="11.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="857.5" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="857.4" y="1299.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="860.4" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.49%)</title><rect x="860.3" y="1299.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="863.3" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="863.2" y="1283.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="866.2" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.49%)</title><rect x="866.1" y="1315.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="869.1" y="1326.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.25%)</title><rect x="869.0" y="1299.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="872.0" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.74%)</title><rect x="871.9" y="1315.0" width="8.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="874.9" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.74%)</title><rect x="871.9" y="1299.0" width="8.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="874.9" y="1310.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (14 samples, 3.43%)</title><rect x="880.5" y="1315.0" width="40.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="883.5" y="1326.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.25%)</title><rect x="880.5" y="1299.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="883.5" y="1310.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (13 samples, 3.19%)</title><rect x="883.4" y="1299.0" width="37.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="886.4" y="1310.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (13 samples, 3.19%)</title><rect x="883.4" y="1283.0" width="37.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="886.4" y="1294.0">Pha..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.74%)</title><rect x="883.4" y="1267.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="886.4" y="1278.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (9 samples, 2.21%)</title><rect x="892.1" y="1267.0" width="26.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="895.1" y="1278.0">P..</text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.25%)</title><rect x="918.1" y="1267.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="921.1" y="1278.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.49%)</title><rect x="921.0" y="1315.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="924.0" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.25%)</title><rect x="921.0" y="1299.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="924.0" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="923.9" y="1299.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.9" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.49%)</title><rect x="926.8" y="1315.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="929.8" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.49%)</title><rect x="926.8" y="1299.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="929.8" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.49%)</title><rect x="932.6" y="1315.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="935.6" y="1326.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.49%)</title><rect x="932.6" y="1299.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="935.6" y="1310.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.74%)</title><rect x="938.4" y="1315.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="941.4" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.25%)</title><rect x="944.2" y="1299.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="947.2" y="1310.0"></text>
</g>
<g>
<title>Compile::Optimize() (72 samples, 17.65%)</title><rect x="947.1" y="1347.0" width="208.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="950.1" y="1358.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.49%)</title><rect x="947.1" y="1331.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="950.1" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.49%)</title><rect x="947.1" y="1315.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="950.1" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.25%)</title><rect x="947.1" y="1299.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="950.1" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.25%)</title><rect x="947.1" y="1283.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="950.1" y="1294.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.25%)</title><rect x="947.1" y="1267.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="950.1" y="1278.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.25%)</title><rect x="947.1" y="1251.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="950.1" y="1262.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.25%)</title><rect x="947.1" y="1235.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="950.1" y="1246.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.25%)</title><rect x="947.1" y="1219.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="950.1" y="1230.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.25%)</title><rect x="947.1" y="1203.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="950.1" y="1214.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.25%)</title><rect x="947.1" y="1187.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="950.1" y="1198.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.25%)</title><rect x="947.1" y="1171.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="950.1" y="1182.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.25%)</title><rect x="947.1" y="1155.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="950.1" y="1166.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.25%)</title><rect x="947.1" y="1139.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="950.1" y="1150.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.25%)</title><rect x="947.1" y="1123.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="950.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1299.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="953.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1283.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="953.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1267.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="953.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1251.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="953.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1235.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="953.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1219.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="953.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1203.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="953.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1187.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="953.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1171.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="953.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1155.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="953.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1139.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="953.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1123.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="953.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1107.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="953.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1091.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="953.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1075.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="953.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1059.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="953.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1043.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="953.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1027.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="953.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="1011.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="953.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="995.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="953.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="979.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="953.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.25%)</title><rect x="950.0" y="963.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="953.0" y="974.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.25%)</title><rect x="952.8" y="1331.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="955.8" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (61 samples, 14.95%)</title><rect x="955.7" y="1331.0" width="176.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="958.7" y="1342.0">PhaseIdealLoop::build_a..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.25%)</title><rect x="955.7" y="1315.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="958.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.25%)</title><rect x="958.6" y="1315.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="961.6" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.49%)</title><rect x="961.5" y="1315.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="964.5" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.25%)</title><rect x="961.5" y="1299.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="964.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.25%)</title><rect x="961.5" y="1283.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="964.5" y="1294.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.25%)</title><rect x="964.4" y="1299.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="967.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (55 samples, 13.48%)</title><rect x="967.3" y="1315.0" width="159.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="970.3" y="1326.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (54 samples, 13.24%)</title><rect x="970.2" y="1299.0" width="156.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="973.2" y="1310.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.98%)</title><rect x="973.1" y="1283.0" width="11.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="976.1" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (49 samples, 12.01%)</title><rect x="984.7" y="1283.0" width="141.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="987.7" y="1294.0">PhaseIdealLoop::ge..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (10 samples, 2.45%)</title><rect x="1097.5" y="1267.0" width="28.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.5" y="1278.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.49%)</title><rect x="1126.4" y="1315.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.4" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.25%)</title><rect x="1129.3" y="1299.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.3" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.25%)</title><rect x="1129.3" y="1283.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.3" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 1.72%)</title><rect x="1132.2" y="1331.0" width="20.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.2" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 1.72%)</title><rect x="1132.2" y="1315.0" width="20.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.2" y="1326.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.25%)</title><rect x="1132.2" y="1299.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.2" y="1310.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.25%)</title><rect x="1132.2" y="1283.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.2" y="1294.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.25%)</title><rect x="1132.2" y="1267.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.2" y="1278.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.25%)</title><rect x="1132.2" y="1251.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.2" y="1262.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.25%)</title><rect x="1132.2" y="1235.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.2" y="1246.0"></text>
</g>
<g>
<title>LoadNNode::Opcode() const (1 samples, 0.25%)</title><rect x="1135.0" y="1299.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.0" y="1310.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.25%)</title><rect x="1137.9" y="1299.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.9" y="1310.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.25%)</title><rect x="1137.9" y="1283.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.9" y="1294.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.25%)</title><rect x="1137.9" y="1267.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.9" y="1278.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.25%)</title><rect x="1137.9" y="1251.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.9" y="1262.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.25%)</title><rect x="1140.8" y="1299.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.8" y="1310.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.25%)</title><rect x="1143.7" y="1299.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.7" y="1310.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.25%)</title><rect x="1143.7" y="1283.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.7" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.25%)</title><rect x="1146.6" y="1299.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.6" y="1310.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.25%)</title><rect x="1149.5" y="1299.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="1310.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.25%)</title><rect x="1149.5" y="1283.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.5" y="1294.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.25%)</title><rect x="1152.4" y="1331.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.4" y="1342.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.25%)</title><rect x="1152.4" y="1315.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.4" y="1326.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="1152.4" y="1299.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="1310.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.25%)</title><rect x="1152.4" y="1283.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.4" y="1294.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.25%)</title><rect x="1152.4" y="1267.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.4" y="1278.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.25%)</title><rect x="1152.4" y="1251.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="1262.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.25%)</title><rect x="1152.4" y="1235.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="1246.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.25%)</title><rect x="1152.4" y="1219.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.4" y="1230.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.25%)</title><rect x="1152.4" y="1203.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.4" y="1214.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.25%)</title><rect x="1152.4" y="1187.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.47%)</title><rect x="1155.3" y="1347.0" width="17.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.3" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.47%)</title><rect x="1155.3" y="1331.0" width="17.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.3" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.47%)</title><rect x="1155.3" y="1315.0" width="17.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.47%)</title><rect x="1155.3" y="1299.0" width="17.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.47%)</title><rect x="1155.3" y="1283.0" width="17.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.23%)</title><rect x="1155.3" y="1267.0" width="14.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.3" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.23%)</title><rect x="1155.3" y="1251.0" width="14.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.3" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.23%)</title><rect x="1155.3" y="1235.0" width="14.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.3" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.23%)</title><rect x="1155.3" y="1219.0" width="14.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.23%)</title><rect x="1155.3" y="1203.0" width="14.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.23%)</title><rect x="1155.3" y="1187.0" width="14.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.98%)</title><rect x="1155.3" y="1171.0" width="11.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.3" y="1182.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1155.3" y="1155.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.3" y="1166.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.25%)</title><rect x="1155.3" y="1139.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.3" y="1150.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.25%)</title><rect x="1155.3" y="1123.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.3" y="1134.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.25%)</title><rect x="1155.3" y="1107.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.3" y="1118.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.25%)</title><rect x="1155.3" y="1091.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.3" y="1102.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.74%)</title><rect x="1158.2" y="1155.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.2" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.74%)</title><rect x="1158.2" y="1139.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.2" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.74%)</title><rect x="1158.2" y="1123.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.2" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.74%)</title><rect x="1158.2" y="1107.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.74%)</title><rect x="1158.2" y="1091.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.74%)</title><rect x="1158.2" y="1075.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.74%)</title><rect x="1158.2" y="1059.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.2" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.74%)</title><rect x="1158.2" y="1043.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.2" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.74%)</title><rect x="1158.2" y="1027.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.74%)</title><rect x="1158.2" y="1011.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.74%)</title><rect x="1158.2" y="995.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.74%)</title><rect x="1158.2" y="979.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.74%)</title><rect x="1158.2" y="963.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.2" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.74%)</title><rect x="1158.2" y="947.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.2" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.74%)</title><rect x="1158.2" y="931.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.74%)</title><rect x="1158.2" y="915.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.74%)</title><rect x="1158.2" y="899.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.74%)</title><rect x="1158.2" y="883.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.74%)</title><rect x="1158.2" y="867.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.2" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.74%)</title><rect x="1158.2" y="851.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.2" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.74%)</title><rect x="1158.2" y="835.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.74%)</title><rect x="1158.2" y="819.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.74%)</title><rect x="1158.2" y="803.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.74%)</title><rect x="1158.2" y="787.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.74%)</title><rect x="1158.2" y="771.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.2" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.74%)</title><rect x="1158.2" y="755.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.2" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.74%)</title><rect x="1158.2" y="739.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.74%)</title><rect x="1158.2" y="723.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.74%)</title><rect x="1158.2" y="707.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.74%)</title><rect x="1158.2" y="691.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.74%)</title><rect x="1158.2" y="675.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.74%)</title><rect x="1158.2" y="659.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.74%)</title><rect x="1158.2" y="643.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.74%)</title><rect x="1158.2" y="627.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.74%)</title><rect x="1158.2" y="611.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.74%)</title><rect x="1158.2" y="595.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.74%)</title><rect x="1158.2" y="579.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.49%)</title><rect x="1158.2" y="563.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.49%)</title><rect x="1158.2" y="547.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.49%)</title><rect x="1158.2" y="531.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.49%)</title><rect x="1158.2" y="515.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.49%)</title><rect x="1158.2" y="499.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.49%)</title><rect x="1158.2" y="483.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.49%)</title><rect x="1158.2" y="467.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.49%)</title><rect x="1158.2" y="451.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.49%)</title><rect x="1158.2" y="435.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.49%)</title><rect x="1158.2" y="419.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.49%)</title><rect x="1158.2" y="403.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1158.2" y="387.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.2" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1158.2" y="371.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.2" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1158.2" y="355.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1158.2" y="339.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1158.2" y="323.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1158.2" y="307.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1158.2" y="291.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.2" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1158.2" y="275.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.2" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1158.2" y="259.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1158.2" y="243.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1158.2" y="227.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1158.2" y="211.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.25%)</title><rect x="1158.2" y="195.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.25%)</title><rect x="1158.2" y="179.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.2" y="190.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.25%)</title><rect x="1158.2" y="163.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.2" y="174.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.25%)</title><rect x="1158.2" y="147.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.2" y="158.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.25%)</title><rect x="1158.2" y="131.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.25%)</title><rect x="1161.1" y="387.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.25%)</title><rect x="1161.1" y="371.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.1" y="382.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.25%)</title><rect x="1161.1" y="355.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.1" y="366.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.25%)</title><rect x="1161.1" y="339.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.1" y="350.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.25%)</title><rect x="1161.1" y="323.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.1" y="334.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.25%)</title><rect x="1161.1" y="307.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.1" y="318.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.25%)</title><rect x="1161.1" y="291.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.1" y="302.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.25%)</title><rect x="1161.1" y="275.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.1" y="286.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.25%)</title><rect x="1161.1" y="259.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.1" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1164.0" y="563.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.0" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1164.0" y="547.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1164.0" y="531.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1164.0" y="515.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1164.0" y="499.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1164.0" y="483.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1164.0" y="467.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1164.0" y="451.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1164.0" y="435.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1164.0" y="419.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1164.0" y="403.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1164.0" y="387.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1164.0" y="371.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1164.0" y="355.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1164.0" y="339.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1164.0" y="323.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1164.0" y="307.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1164.0" y="291.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1164.0" y="275.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1164.0" y="259.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.0" y="270.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.25%)</title><rect x="1164.0" y="243.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.0" y="254.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.25%)</title><rect x="1164.0" y="227.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.0" y="238.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.25%)</title><rect x="1164.0" y="211.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.0" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.25%)</title><rect x="1164.0" y="195.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.0" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.25%)</title><rect x="1164.0" y="179.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.0" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.25%)</title><rect x="1164.0" y="163.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.0" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.25%)</title><rect x="1164.0" y="147.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.0" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.25%)</title><rect x="1164.0" y="131.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.0" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.25%)</title><rect x="1164.0" y="115.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.0" y="126.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.25%)</title><rect x="1164.0" y="99.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.0" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.25%)</title><rect x="1164.0" y="83.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.0" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.25%)</title><rect x="1164.0" y="67.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.0" y="78.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.25%)</title><rect x="1164.0" y="51.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.0" y="62.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.25%)</title><rect x="1164.0" y="35.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.25%)</title><rect x="1166.9" y="1171.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.9" y="1182.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.25%)</title><rect x="1166.9" y="1155.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.9" y="1166.0"></text>
</g>
<g>
<title>ReplacedNodes::record(Node*, Node*) (1 samples, 0.25%)</title><rect x="1166.9" y="1139.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.9" y="1150.0"></text>
</g>
<g>
<title>GrowableArray&lt;ReplacedNodes::ReplacedNode&gt;::GrowableArray() (1 samples, 0.25%)</title><rect x="1166.9" y="1123.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.9" y="1134.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.25%)</title><rect x="1166.9" y="1107.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.25%)</title><rect x="1169.8" y="1267.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.8" y="1278.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.25%)</title><rect x="1169.8" y="1251.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.8" y="1262.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.25%)</title><rect x="1169.8" y="1235.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.8" y="1246.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.25%)</title><rect x="1169.8" y="1219.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.8" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::uncommon_trap_Type() (1 samples, 0.25%)</title><rect x="1169.8" y="1203.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.8" y="1214.0"></text>
</g>
<g>
<title>TypeTuple::fields(unsigned int) (1 samples, 0.25%)</title><rect x="1169.8" y="1187.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.8" y="1198.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 0.98%)</title><rect x="1172.6" y="1379.0" width="11.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.6" y="1390.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 0.98%)</title><rect x="1172.6" y="1363.0" width="11.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="1374.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 0.98%)</title><rect x="1172.6" y="1347.0" width="11.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.6" y="1358.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.74%)</title><rect x="1172.6" y="1331.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="1342.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.25%)</title><rect x="1172.6" y="1315.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.6" y="1326.0"></text>
</g>
<g>
<title>LIR_OpJavaCall::emit_code(LIR_Assembler*) (1 samples, 0.25%)</title><rect x="1172.6" y="1299.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.6" y="1310.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.49%)</title><rect x="1175.5" y="1315.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.5" y="1326.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.49%)</title><rect x="1175.5" y="1299.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.5" y="1310.0"></text>
</g>
<g>
<title>LinearScan::compute_global_live_sets() (1 samples, 0.25%)</title><rect x="1175.5" y="1283.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="1294.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.25%)</title><rect x="1178.4" y="1283.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="1294.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.25%)</title><rect x="1181.3" y="1331.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="1342.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.25%)</title><rect x="1181.3" y="1315.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="1326.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.25%)</title><rect x="1181.3" y="1299.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="1310.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.25%)</title><rect x="1181.3" y="1283.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="1294.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.25%)</title><rect x="1181.3" y="1267.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="1278.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.25%)</title><rect x="1184.2" y="1443.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="1454.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.25%)</title><rect x="1184.2" y="1427.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="1438.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.25%)</title><rect x="1184.2" y="1411.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="1422.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.25%)</title><rect x="1187.1" y="1443.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="1454.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.25%)</title><rect x="1187.1" y="1427.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="1438.0"></text>
</g>
<g>
<title>ChunkPoolCleaner::task() (1 samples, 0.25%)</title><rect x="1187.1" y="1411.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.1" y="1422.0"></text>
</g>
</g>
</svg>
