<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1414" onload="init(evt)" viewBox="0 0 1200 1414" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1397"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1397"> </text>
<g id="frames">
<g>
<title>all (1,139 samples, 100.00%)</title><rect x="10.0" y="1363.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1374.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (313 samples, 27.48%)</title><rect x="10.0" y="1347.0" width="324.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1358.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (312 samples, 27.39%)</title><rect x="10.0" y="1331.0" width="323.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1342.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (6 samples, 0.53%)</title><rect x="10.0" y="1315.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.53%)</title><rect x="10.0" y="1299.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="10.0" y="1283.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="10.0" y="1267.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/342874537.accept (5 samples, 0.44%)</title><rect x="11.0" y="1283.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.44%)</title><rect x="11.0" y="1267.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.35%)</title><rect x="12.1" y="1251.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.1" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.35%)</title><rect x="12.1" y="1235.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.09%)</title><rect x="16.2" y="1315.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.2" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.09%)</title><rect x="16.2" y="1299.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.2" y="1310.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="16.2" y="1283.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.2" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="16.2" y="1267.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.2" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="16.2" y="1251.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (256 samples, 22.48%)</title><rect x="17.3" y="1315.0" width="265.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.3" y="1326.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/2026407121.accept (244 samples, 21.42%)</title><rect x="18.3" y="1299.0" width="252.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.3" y="1310.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="18.3" y="1283.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.3" y="1294.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="18.3" y="1267.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="21.3" y="1278.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="18.3" y="1251.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="21.3" y="1262.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="18.3" y="1235.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="21.3" y="1246.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="18.3" y="1219.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (243 samples, 21.33%)</title><rect x="19.3" y="1283.0" width="251.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.3" y="1294.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="19.3" y="1267.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="22.3" y="1278.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="19.3" y="1251.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="22.3" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="19.3" y="1235.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="22.3" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="19.3" y="1219.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="22.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (206 samples, 18.09%)</title><rect x="20.4" y="1267.0" width="213.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.4" y="1278.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (206 samples, 18.09%)</title><rect x="20.4" y="1251.0" width="213.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.4" y="1262.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (206 samples, 18.09%)</title><rect x="20.4" y="1235.0" width="213.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.4" y="1246.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1169794610.linkToTargetMethod (1 samples, 0.09%)</title><rect x="20.4" y="1219.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="20.4" y="1203.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.4" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/201779986.get$Lambda (1 samples, 0.09%)</title><rect x="20.4" y="1187.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.4" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="20.4" y="1171.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="23.4" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="20.4" y="1155.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="23.4" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="20.4" y="1139.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="23.4" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="20.4" y="1123.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="23.4" y="1134.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="20.4" y="1107.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="23.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (205 samples, 18.00%)</title><rect x="21.4" y="1219.0" width="212.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.4" y="1230.0">java/util/concurrent/Executo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (205 samples, 18.00%)</title><rect x="21.4" y="1203.0" width="212.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.4" y="1214.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (181 samples, 15.89%)</title><rect x="44.2" y="1187.0" width="187.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.2" y="1198.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (144 samples, 12.64%)</title><rect x="44.2" y="1171.0" width="149.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.2" y="1182.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (144 samples, 12.64%)</title><rect x="44.2" y="1155.0" width="149.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.2" y="1166.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (144 samples, 12.64%)</title><rect x="44.2" y="1139.0" width="149.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.2" y="1150.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (144 samples, 12.64%)</title><rect x="44.2" y="1123.0" width="149.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.2" y="1134.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (144 samples, 12.64%)</title><rect x="44.2" y="1107.0" width="149.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.2" y="1118.0">java/util/concurren..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (91 samples, 7.99%)</title><rect x="99.1" y="1091.0" width="94.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.1" y="1102.0">sun/misc/Un..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="100.1" y="1075.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="103.1" y="1086.0"></text>
</g>
<g>
<title>Unsafe_Unpark (82 samples, 7.20%)</title><rect x="101.2" y="1075.0" width="84.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="104.2" y="1086.0">Unsafe_Unp..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (7 samples, 0.61%)</title><rect x="103.2" y="1059.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="106.2" y="1070.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="110.5" y="1059.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="113.5" y="1070.0"></text>
</g>
<g>
<title>Parker::unpark() (5 samples, 0.44%)</title><rect x="111.5" y="1059.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="114.5" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="116.7" y="1059.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="119.7" y="1070.0"></text>
</g>
<g>
<title>__pthread_cond_signal (46 samples, 4.04%)</title><rect x="118.8" y="1059.0" width="47.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="121.8" y="1070.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (7 samples, 0.61%)</title><rect x="166.4" y="1059.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="169.4" y="1070.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 1.05%)</title><rect x="173.7" y="1059.0" width="12.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="176.7" y="1070.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.35%)</title><rect x="186.1" y="1075.0" width="4.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="189.1" y="1086.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.26%)</title><rect x="190.3" y="1075.0" width="3.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="193.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (37 samples, 3.25%)</title><rect x="193.4" y="1171.0" width="38.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="196.4" y="1182.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (37 samples, 3.25%)</title><rect x="193.4" y="1155.0" width="38.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="196.4" y="1166.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (37 samples, 3.25%)</title><rect x="193.4" y="1139.0" width="38.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.4" y="1150.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (37 samples, 3.25%)</title><rect x="193.4" y="1123.0" width="38.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.4" y="1134.0">jav..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="231.7" y="1187.0" width="2.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="234.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (6 samples, 0.53%)</title><rect x="233.8" y="1267.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="236.8" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (6 samples, 0.53%)</title><rect x="233.8" y="1251.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="236.8" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.09%)</title><rect x="240.0" y="1267.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.0" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="240.0" y="1251.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.0" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="240.0" y="1235.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (29 samples, 2.55%)</title><rect x="241.0" y="1267.0" width="30.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.0" y="1278.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (29 samples, 2.55%)</title><rect x="241.0" y="1251.0" width="30.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="244.0" y="1262.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (12 samples, 1.05%)</title><rect x="256.6" y="1235.0" width="12.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="259.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.70%)</title><rect x="257.6" y="1219.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.6" y="1230.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.70%)</title><rect x="257.6" y="1203.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.6" y="1214.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.70%)</title><rect x="257.6" y="1187.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.6" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="263.8" y="1171.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="266.8" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="263.8" y="1155.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="266.8" y="1166.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="263.8" y="1139.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="266.8" y="1150.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="263.8" y="1123.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="266.8" y="1134.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="263.8" y="1107.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="266.8" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="264.9" y="1171.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="267.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="265.9" y="1219.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.18%)</title><rect x="266.9" y="1219.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.9" y="1230.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="269.0" y="1235.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="272.0" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="271.1" y="1299.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.1" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="271.1" y="1283.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.1" y="1294.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="272.1" y="1299.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.1" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.09%)</title><rect x="272.1" y="1283.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.1" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="272.1" y="1267.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="275.1" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="272.1" y="1251.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.1" y="1262.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="272.1" y="1235.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="275.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.61%)</title><rect x="273.1" y="1299.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.61%)</title><rect x="273.1" y="1283.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.61%)</title><rect x="273.1" y="1267.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="276.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.61%)</title><rect x="273.1" y="1251.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.1" y="1262.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (7 samples, 0.61%)</title><rect x="273.1" y="1235.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.18%)</title><rect x="280.4" y="1299.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.18%)</title><rect x="280.4" y="1283.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (49 samples, 4.30%)</title><rect x="282.5" y="1315.0" width="50.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.5" y="1326.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (49 samples, 4.30%)</title><rect x="282.5" y="1299.0" width="50.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.5" y="1310.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (29 samples, 2.55%)</title><rect x="283.5" y="1283.0" width="30.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.5" y="1294.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (29 samples, 2.55%)</title><rect x="283.5" y="1267.0" width="30.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.5" y="1278.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (28 samples, 2.46%)</title><rect x="283.5" y="1251.0" width="29.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="286.5" y="1262.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (22 samples, 1.93%)</title><rect x="283.5" y="1235.0" width="22.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.5" y="1246.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (22 samples, 1.93%)</title><rect x="283.5" y="1219.0" width="22.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.5" y="1230.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="284.5" y="1203.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.5" y="1214.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="284.5" y="1187.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="287.5" y="1198.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.09%)</title><rect x="284.5" y="1171.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="287.5" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="284.5" y="1155.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="284.5" y="1139.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.5" y="1150.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="285.6" y="1203.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="288.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.05%)</title><rect x="286.6" y="1203.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.53%)</title><rect x="286.6" y="1187.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.53%)</title><rect x="286.6" y="1171.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.53%)</title><rect x="286.6" y="1155.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.53%)</title><rect x="286.6" y="1139.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="289.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.53%)</title><rect x="286.6" y="1123.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="289.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.53%)</title><rect x="286.6" y="1107.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="289.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.53%)</title><rect x="286.6" y="1091.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.53%)</title><rect x="292.8" y="1187.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.53%)</title><rect x="292.8" y="1171.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (6 samples, 0.53%)</title><rect x="292.8" y="1155.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (7 samples, 0.61%)</title><rect x="299.0" y="1203.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.09%)</title><rect x="299.0" y="1187.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (6 samples, 0.53%)</title><rect x="300.1" y="1187.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="303.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.18%)</title><rect x="300.1" y="1171.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="303.1" y="1182.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.18%)</title><rect x="300.1" y="1155.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.35%)</title><rect x="302.2" y="1171.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="305.2" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.35%)</title><rect x="302.2" y="1155.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (4 samples, 0.35%)</title><rect x="306.3" y="1235.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="309.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.26%)</title><rect x="307.3" y="1219.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="310.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.26%)</title><rect x="307.3" y="1203.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.26%)</title><rect x="307.3" y="1187.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.26%)</title><rect x="307.3" y="1171.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="310.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.18%)</title><rect x="307.3" y="1155.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="310.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.09%)</title><rect x="308.4" y="1139.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="311.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="309.4" y="1155.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="309.4" y="1139.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="312.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.09%)</title><rect x="309.4" y="1123.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="310.4" y="1235.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="313.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="310.4" y="1219.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="310.4" y="1203.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="310.4" y="1187.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="313.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.09%)</title><rect x="311.5" y="1235.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="311.5" y="1219.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="311.5" y="1203.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="314.5" y="1214.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="311.5" y="1187.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="314.5" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="311.5" y="1171.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.09%)</title><rect x="312.5" y="1251.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords$$Lambda$272/369834783.iterator (1 samples, 0.09%)</title><rect x="312.5" y="1235.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="315.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords.batchIterator (1 samples, 0.09%)</title><rect x="312.5" y="1219.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 0.44%)</title><rect x="313.5" y="1283.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 0.44%)</title><rect x="313.5" y="1267.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="316.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.44%)</title><rect x="313.5" y="1251.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="316.5" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="314.6" y="1235.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="317.6" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="314.6" y="1219.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.6" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="314.6" y="1203.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.6" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="314.6" y="1187.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="317.6" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="314.6" y="1171.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.6" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="314.6" y="1155.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="317.6" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$79/754030909.get (1 samples, 0.09%)</title><rect x="314.6" y="1139.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.26%)</title><rect x="315.6" y="1235.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="318.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.26%)</title><rect x="315.6" y="1219.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="318.6" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="316.7" y="1203.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="316.7" y="1187.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="319.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="316.7" y="1171.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="316.7" y="1155.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="319.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="316.7" y="1139.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="319.7" y="1150.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="316.7" y="1123.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="319.7" y="1134.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="316.7" y="1107.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="319.7" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="316.7" y="1091.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="319.7" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="316.7" y="1075.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.7" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="316.7" y="1059.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="319.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$230/1203399243.test (1 samples, 0.09%)</title><rect x="316.7" y="1043.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="317.7" y="1123.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="320.7" y="1134.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="317.7" y="1107.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="320.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.44%)</title><rect x="318.7" y="1283.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="321.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.26%)</title><rect x="318.7" y="1267.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="321.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.09%)</title><rect x="318.7" y="1251.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.09%)</title><rect x="318.7" y="1235.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.09%)</title><rect x="318.7" y="1219.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="321.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="318.7" y="1203.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="321.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.09%)</title><rect x="318.7" y="1187.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="318.7" y="1171.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="321.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="318.7" y="1155.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="321.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.09%)</title><rect x="318.7" y="1139.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="318.7" y="1123.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="321.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="318.7" y="1107.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="318.7" y="1091.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="321.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="318.7" y="1075.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="321.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.18%)</title><rect x="319.8" y="1251.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="322.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.18%)</title><rect x="319.8" y="1235.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="322.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.09%)</title><rect x="320.8" y="1219.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.09%)</title><rect x="320.8" y="1203.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.removeInterestOps (1 samples, 0.09%)</title><rect x="320.8" y="1187.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.completed (1 samples, 0.09%)</title><rect x="320.8" y="1171.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.18%)</title><rect x="321.8" y="1267.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="324.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="321.8" y="1251.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="324.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="321.8" y="1235.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="324.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="321.8" y="1219.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="324.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="321.8" y="1203.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="324.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="321.8" y="1187.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="324.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.09%)</title><rect x="321.8" y="1171.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="324.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.09%)</title><rect x="321.8" y="1155.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="324.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="321.8" y="1139.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$2.write (1 samples, 0.09%)</title><rect x="321.8" y="1123.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.requestIterator (1 samples, 0.09%)</title><rect x="322.9" y="1251.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="325.9" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="322.9" y="1235.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.61%)</title><rect x="323.9" y="1283.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="326.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.61%)</title><rect x="323.9" y="1267.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.9" y="1278.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="323.9" y="1251.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="326.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/1208881416.accept (1 samples, 0.09%)</title><rect x="323.9" y="1235.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="326.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="323.9" y="1219.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="326.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="323.9" y="1203.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="326.9" y="1214.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="324.9" y="1251.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="327.9" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="324.9" y="1235.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.9" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="324.9" y="1219.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.26%)</title><rect x="326.0" y="1251.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="329.0" y="1262.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="326.0" y="1235.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="329.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.09%)</title><rect x="327.0" y="1235.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="330.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.09%)</title><rect x="327.0" y="1219.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="330.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="328.1" y="1235.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.1" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="328.1" y="1219.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="331.1" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="328.1" y="1203.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="331.1" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="328.1" y="1187.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="331.1" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="328.1" y="1171.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="331.1" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="328.1" y="1155.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="331.1" y="1166.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="328.1" y="1139.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="331.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="328.1" y="1123.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="331.1" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="328.1" y="1107.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="328.1" y="1091.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="331.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="328.1" y="1075.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/186262141.test (1 samples, 0.09%)</title><rect x="328.1" y="1059.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.09%)</title><rect x="329.1" y="1251.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="332.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.09%)</title><rect x="329.1" y="1235.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="332.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="329.1" y="1219.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="332.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="329.1" y="1203.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="332.1" y="1214.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="329.1" y="1187.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="332.1" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="329.1" y="1171.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="332.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="330.1" y="1251.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="333.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="331.2" y="1283.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="331.2" y="1267.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="334.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="331.2" y="1251.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="334.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="331.2" y="1235.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="334.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="331.2" y="1219.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="331.2" y="1203.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="334.2" y="1214.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="331.2" y="1187.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="334.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasNoSubscriptionOrUserAssignment (1 samples, 0.09%)</title><rect x="332.2" y="1283.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="335.2" y="1294.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.09%)</title><rect x="333.2" y="1331.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="336.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/Thread.run (757 samples, 66.46%)</title><rect x="334.3" y="1347.0" width="784.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="337.3" y="1358.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (757 samples, 66.46%)</title><rect x="334.3" y="1331.0" width="784.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="337.3" y="1342.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (757 samples, 66.46%)</title><rect x="334.3" y="1315.0" width="784.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="337.3" y="1326.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/201779986.run (502 samples, 44.07%)</title><rect x="341.5" y="1299.0" width="520.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="344.5" y="1310.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2017799..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (500 samples, 43.90%)</title><rect x="343.6" y="1283.0" width="518.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="346.6" y="1294.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (500 samples, 43.90%)</title><rect x="343.6" y="1267.0" width="518.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="346.6" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (494 samples, 43.37%)</title><rect x="343.6" y="1251.0" width="511.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="346.6" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProc..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="354.0" y="1235.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="357.0" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.18%)</title><rect x="355.0" y="1235.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (190 samples, 16.68%)</title><rect x="357.1" y="1235.0" width="196.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="360.1" y="1246.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/363988129.extract (190 samples, 16.68%)</title><rect x="357.1" y="1219.0" width="196.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.1" y="1230.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (190 samples, 16.68%)</title><rect x="357.1" y="1203.0" width="196.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.1" y="1214.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (190 samples, 16.68%)</title><rect x="357.1" y="1187.0" width="196.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="360.1" y="1198.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (190 samples, 16.68%)</title><rect x="357.1" y="1171.0" width="196.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="360.1" y="1182.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (190 samples, 16.68%)</title><rect x="357.1" y="1155.0" width="196.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="360.1" y="1166.0">com/fasterxml/jackson/data..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (67 samples, 5.88%)</title><rect x="357.1" y="1139.0" width="69.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="360.1" y="1150.0">com/fas..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="377.8" y="1123.0" width="2.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="380.8" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.79%)</title><rect x="379.9" y="1123.0" width="9.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="382.9" y="1134.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.61%)</title><rect x="381.9" y="1107.0" width="7.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="384.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (10 samples, 0.88%)</title><rect x="389.2" y="1123.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="392.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (9 samples, 0.79%)</title><rect x="390.2" y="1107.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (9 samples, 0.79%)</title><rect x="390.2" y="1091.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="393.2" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.26%)</title><rect x="390.2" y="1075.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="393.2" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="391.2" y="1059.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="394.2" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="391.2" y="1043.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="394.2" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="391.2" y="1027.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="394.2" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="391.2" y="1011.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="394.2" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="391.2" y="995.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="394.2" y="1006.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="391.2" y="979.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="394.2" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="391.2" y="963.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="394.2" y="974.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.09%)</title><rect x="391.2" y="947.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="394.2" y="958.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="392.3" y="1011.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="395.3" y="1022.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.09%)</title><rect x="392.3" y="995.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="395.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.53%)</title><rect x="393.3" y="1075.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="396.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.53%)</title><rect x="393.3" y="1059.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.53%)</title><rect x="393.3" y="1043.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="396.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (6 samples, 0.53%)</title><rect x="393.3" y="1027.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="396.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (26 samples, 2.28%)</title><rect x="399.5" y="1123.0" width="27.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="402.5" y="1134.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (26 samples, 2.28%)</title><rect x="399.5" y="1107.0" width="27.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.5" y="1118.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (7 samples, 0.61%)</title><rect x="410.9" y="1091.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="413.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (7 samples, 0.61%)</title><rect x="410.9" y="1075.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (8 samples, 0.70%)</title><rect x="418.2" y="1091.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="421.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (8 samples, 0.70%)</title><rect x="418.2" y="1075.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (8 samples, 0.70%)</title><rect x="418.2" y="1059.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="421.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (120 samples, 10.54%)</title><rect x="426.5" y="1139.0" width="124.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="429.5" y="1150.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.18%)</title><rect x="427.5" y="1123.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="430.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (4 samples, 0.35%)</title><rect x="429.6" y="1123.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="432.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.18%)</title><rect x="433.7" y="1123.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="436.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.26%)</title><rect x="435.8" y="1123.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="438.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.26%)</title><rect x="435.8" y="1107.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="438.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (15 samples, 1.32%)</title><rect x="438.9" y="1123.0" width="15.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="441.9" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 1.05%)</title><rect x="442.0" y="1107.0" width="12.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="445.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.70%)</title><rect x="446.2" y="1091.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="449.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (8 samples, 0.70%)</title><rect x="446.2" y="1075.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="449.2" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="451.3" y="1059.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="454.3" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="451.3" y="1043.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="454.3" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="451.3" y="1027.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="454.3" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="451.3" y="1011.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="454.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.18%)</title><rect x="452.4" y="1059.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="455.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (11 samples, 0.97%)</title><rect x="454.4" y="1123.0" width="11.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="457.4" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="454.4" y="1107.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="457.4" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="454.4" y="1091.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="457.4" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="454.4" y="1075.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="457.4" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="455.5" y="1091.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="458.5" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="455.5" y="1075.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="458.5" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="455.5" y="1059.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="458.5" y="1070.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="455.5" y="1043.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="458.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (9 samples, 0.79%)</title><rect x="456.5" y="1107.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="459.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (81 samples, 7.11%)</title><rect x="465.8" y="1123.0" width="84.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="468.8" y="1134.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (25 samples, 2.19%)</title><rect x="465.8" y="1107.0" width="25.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="468.8" y="1118.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.35%)</title><rect x="475.2" y="1091.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.35%)</title><rect x="475.2" y="1075.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="478.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.35%)</title><rect x="475.2" y="1059.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="478.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.26%)</title><rect x="479.3" y="1091.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="482.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.26%)</title><rect x="479.3" y="1075.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="482.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (9 samples, 0.79%)</title><rect x="482.4" y="1091.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="485.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (56 samples, 4.92%)</title><rect x="491.7" y="1107.0" width="58.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="494.7" y="1118.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (56 samples, 4.92%)</title><rect x="491.7" y="1091.0" width="58.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="494.7" y="1102.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (56 samples, 4.92%)</title><rect x="491.7" y="1075.0" width="58.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="494.7" y="1086.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.40%)</title><rect x="501.1" y="1059.0" width="16.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="504.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.79%)</title><rect x="506.2" y="1043.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="509.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.79%)</title><rect x="506.2" y="1027.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="509.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.79%)</title><rect x="506.2" y="1011.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="509.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.35%)</title><rect x="511.4" y="995.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="514.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="515.6" y="1043.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="518.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="515.6" y="1027.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="518.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="516.6" y="1043.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="519.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 1.05%)</title><rect x="517.6" y="1059.0" width="12.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="520.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.53%)</title><rect x="523.9" y="1043.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="526.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.53%)</title><rect x="523.9" y="1027.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="526.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.53%)</title><rect x="523.9" y="1011.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="526.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.53%)</title><rect x="523.9" y="995.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="526.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.35%)</title><rect x="530.1" y="1059.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="533.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 0.35%)</title><rect x="530.1" y="1043.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="533.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.35%)</title><rect x="530.1" y="1027.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 0.35%)</title><rect x="530.1" y="1011.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="533.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.35%)</title><rect x="530.1" y="995.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="533.1" y="1006.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.35%)</title><rect x="530.1" y="979.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="533.1" y="990.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (4 samples, 0.35%)</title><rect x="530.1" y="963.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="533.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.18%)</title><rect x="532.1" y="947.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="535.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.61%)</title><rect x="534.2" y="1059.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="537.2" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.61%)</title><rect x="534.2" y="1043.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="537.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.61%)</title><rect x="534.2" y="1027.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="537.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.18%)</title><rect x="539.4" y="1011.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="542.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (8 samples, 0.70%)</title><rect x="541.5" y="1059.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="544.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.18%)</title><rect x="547.7" y="1043.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="550.7" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="547.7" y="1027.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="550.7" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.09%)</title><rect x="547.7" y="1011.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="550.7" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="547.7" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="550.7" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="547.7" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="550.7" y="990.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="547.7" y="963.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="550.7" y="974.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="547.7" y="947.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="550.7" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="548.7" y="1027.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="551.7" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="548.7" y="1011.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="551.7" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="548.7" y="995.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="551.7" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="548.7" y="979.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="551.7" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="548.7" y="963.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="551.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.09%)</title><rect x="549.8" y="1123.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="552.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.26%)</title><rect x="550.8" y="1139.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="553.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.26%)</title><rect x="550.8" y="1123.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="553.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.26%)</title><rect x="550.8" y="1107.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="553.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.26%)</title><rect x="550.8" y="1091.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="553.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.26%)</title><rect x="550.8" y="1075.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="553.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (269 samples, 23.62%)</title><rect x="553.9" y="1235.0" width="278.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="556.9" y="1246.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (47 samples, 4.13%)</title><rect x="556.0" y="1219.0" width="48.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="559.0" y="1230.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="556.0" y="1203.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="559.0" y="1214.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (46 samples, 4.04%)</title><rect x="557.0" y="1203.0" width="47.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="560.0" y="1214.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (43 samples, 3.78%)</title><rect x="560.1" y="1187.0" width="44.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="563.1" y="1198.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.18%)</title><rect x="563.2" y="1171.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="566.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.18%)</title><rect x="563.2" y="1155.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="566.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.18%)</title><rect x="563.2" y="1139.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="566.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.18%)</title><rect x="563.2" y="1123.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="566.2" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (38 samples, 3.34%)</title><rect x="565.3" y="1171.0" width="39.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="568.3" y="1182.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (19 samples, 1.67%)</title><rect x="585.0" y="1155.0" width="19.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="588.0" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="585.0" y="1139.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="588.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="585.0" y="1123.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="588.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (18 samples, 1.58%)</title><rect x="586.0" y="1139.0" width="18.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="589.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.26%)</title><rect x="600.5" y="1123.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="603.5" y="1134.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="603.6" y="1123.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="606.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.61%)</title><rect x="604.7" y="1219.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="607.7" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.44%)</title><rect x="606.7" y="1203.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="609.7" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.44%)</title><rect x="606.7" y="1187.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="609.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (151 samples, 13.26%)</title><rect x="611.9" y="1219.0" width="156.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="614.9" y="1230.0">com/linecorp/decaton..</text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="611.9" y="1203.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="614.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (150 samples, 13.17%)</title><rect x="612.9" y="1203.0" width="155.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="615.9" y="1214.0">com/linecorp/decaton..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="617.1" y="1187.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="620.1" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.35%)</title><rect x="618.1" y="1187.0" width="4.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="621.1" y="1198.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="619.2" y="1171.0" width="3.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="622.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (52 samples, 4.57%)</title><rect x="622.3" y="1187.0" width="53.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="625.3" y="1198.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (51 samples, 4.48%)</title><rect x="623.3" y="1171.0" width="52.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="626.3" y="1182.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (36 samples, 3.16%)</title><rect x="632.6" y="1155.0" width="37.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="635.6" y="1166.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (18 samples, 1.58%)</title><rect x="642.0" y="1139.0" width="18.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="645.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (18 samples, 1.58%)</title><rect x="642.0" y="1123.0" width="18.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.0" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (18 samples, 1.58%)</title><rect x="642.0" y="1107.0" width="18.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.0" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.61%)</title><rect x="645.1" y="1091.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="648.1" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.26%)</title><rect x="645.1" y="1075.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="648.1" y="1086.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="645.1" y="1059.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="648.1" y="1070.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.18%)</title><rect x="646.1" y="1059.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="649.1" y="1070.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.18%)</title><rect x="646.1" y="1043.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="649.1" y="1054.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="646.1" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="649.1" y="1038.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="647.1" y="1027.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="650.1" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.35%)</title><rect x="648.2" y="1075.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="651.2" y="1086.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="648.2" y="1059.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="651.2" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="649.2" y="1059.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="652.2" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="649.2" y="1043.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="652.2" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="649.2" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="652.2" y="1038.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="649.2" y="1011.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="652.2" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="649.2" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="652.2" y="1006.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="649.2" y="979.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="652.2" y="990.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="649.2" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="652.2" y="974.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="650.2" y="1043.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="653.2" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="651.3" y="1059.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="654.3" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.61%)</title><rect x="652.3" y="1091.0" width="7.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="655.3" y="1102.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.09%)</title><rect x="659.6" y="1091.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="662.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.44%)</title><rect x="660.6" y="1139.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="663.6" y="1150.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="665.8" y="1139.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="668.8" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="666.8" y="1139.0" width="3.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="669.8" y="1150.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="669.9" y="1155.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="672.9" y="1166.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.44%)</title><rect x="671.0" y="1155.0" width="5.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="674.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="676.1" y="1187.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="679.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (12 samples, 1.05%)</title><rect x="677.2" y="1187.0" width="12.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="680.2" y="1198.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.09%)</title><rect x="677.2" y="1171.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="680.2" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="677.2" y="1155.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="680.2" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="677.2" y="1139.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="680.2" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="677.2" y="1123.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="680.2" y="1134.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="677.2" y="1107.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="680.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/Long.toString (11 samples, 0.97%)</title><rect x="678.2" y="1171.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="681.2" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="678.2" y="1155.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="681.2" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="678.2" y="1139.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="681.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (10 samples, 0.88%)</title><rect x="679.3" y="1155.0" width="10.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="682.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.18%)</title><rect x="687.5" y="1139.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="690.5" y="1150.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (75 samples, 6.58%)</title><rect x="689.6" y="1187.0" width="77.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="692.6" y="1198.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (75 samples, 6.58%)</title><rect x="689.6" y="1171.0" width="77.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="692.6" y="1182.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (12 samples, 1.05%)</title><rect x="689.6" y="1155.0" width="12.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="692.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 1.05%)</title><rect x="689.6" y="1139.0" width="12.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="692.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (12 samples, 1.05%)</title><rect x="689.6" y="1123.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="692.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 1.05%)</title><rect x="689.6" y="1107.0" width="12.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="692.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.09%)</title><rect x="701.0" y="1091.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="704.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="701.0" y="1075.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="704.0" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (63 samples, 5.53%)</title><rect x="702.0" y="1155.0" width="65.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="705.0" y="1166.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (60 samples, 5.27%)</title><rect x="705.2" y="1139.0" width="62.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="708.2" y="1150.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (27 samples, 2.37%)</title><rect x="739.3" y="1123.0" width="28.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="742.3" y="1134.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (6 samples, 0.53%)</title><rect x="752.8" y="1107.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="755.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.53%)</title><rect x="759.0" y="1107.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="762.0" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="764.2" y="1091.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="767.2" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="764.2" y="1075.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="767.2" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="764.2" y="1059.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="767.2" y="1070.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.18%)</title><rect x="765.2" y="1107.0" width="2.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="768.2" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="767.3" y="1187.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="770.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (44 samples, 3.86%)</title><rect x="768.3" y="1219.0" width="45.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="771.3" y="1230.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (44 samples, 3.86%)</title><rect x="768.3" y="1203.0" width="45.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="771.3" y="1214.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1842265390.process (20 samples, 1.76%)</title><rect x="772.5" y="1187.0" width="20.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="775.5" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (20 samples, 1.76%)</title><rect x="772.5" y="1171.0" width="20.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="775.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (13 samples, 1.14%)</title><rect x="774.6" y="1155.0" width="13.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="777.6" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="781.8" y="1139.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="784.8" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="781.8" y="1123.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="784.8" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="781.8" y="1107.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="784.8" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="781.8" y="1091.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="784.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="781.8" y="1075.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="784.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="781.8" y="1059.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="784.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.35%)</title><rect x="782.9" y="1139.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="785.9" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.35%)</title><rect x="782.9" y="1123.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="785.9" y="1134.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="782.9" y="1107.0" width="4.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="785.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.09%)</title><rect x="787.0" y="1139.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="790.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (5 samples, 0.44%)</title><rect x="788.0" y="1155.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="791.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.44%)</title><rect x="788.0" y="1139.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="791.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.44%)</title><rect x="788.0" y="1123.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="791.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.44%)</title><rect x="788.0" y="1107.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="791.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.44%)</title><rect x="788.0" y="1091.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="791.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="793.2" y="1187.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="796.2" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.26%)</title><rect x="793.2" y="1171.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="796.2" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="795.3" y="1155.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="798.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1172131546.linkToTargetMethod (5 samples, 0.44%)</title><rect x="796.3" y="1187.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="799.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (5 samples, 0.44%)</title><rect x="796.3" y="1171.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="799.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/870672804.get$Lambda (5 samples, 0.44%)</title><rect x="796.3" y="1155.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="799.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/870672804.&lt;init&gt; (3 samples, 0.26%)</title><rect x="798.4" y="1139.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="801.4" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="801.5" y="1187.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="804.5" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="801.5" y="1171.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="804.5" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.09%)</title><rect x="801.5" y="1155.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="804.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.44%)</title><rect x="802.5" y="1187.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="805.5" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.35%)</title><rect x="803.6" y="1171.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="806.6" y="1182.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.35%)</title><rect x="803.6" y="1155.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="806.6" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.53%)</title><rect x="807.7" y="1187.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="810.7" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.35%)</title><rect x="809.8" y="1171.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="812.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.58%)</title><rect x="813.9" y="1219.0" width="18.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="816.9" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.53%)</title><rect x="816.0" y="1203.0" width="6.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="819.0" y="1214.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="818.1" y="1187.0" width="4.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="821.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.88%)</title><rect x="822.2" y="1203.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="825.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.88%)</title><rect x="822.2" y="1187.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="825.2" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1660346853.accept (9 samples, 0.79%)</title><rect x="822.2" y="1171.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="825.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (9 samples, 0.79%)</title><rect x="822.2" y="1155.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="825.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="822.2" y="1139.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="825.2" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="822.2" y="1123.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="825.2" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="822.2" y="1107.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="825.2" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="822.2" y="1091.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="825.2" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="822.2" y="1075.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="825.2" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="822.2" y="1059.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="825.2" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="822.2" y="1043.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="825.2" y="1054.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="822.2" y="1027.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="825.2" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (8 samples, 0.70%)</title><rect x="823.3" y="1139.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="826.3" y="1150.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (8 samples, 0.70%)</title><rect x="823.3" y="1123.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.3" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.44%)</title><rect x="826.4" y="1107.0" width="5.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="829.4" y="1118.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.44%)</title><rect x="826.4" y="1091.0" width="5.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="829.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/429148823.accept (1 samples, 0.09%)</title><rect x="831.5" y="1171.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="834.5" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="831.5" y="1155.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="834.5" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="831.5" y="1139.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="834.5" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="831.5" y="1123.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="834.5" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="831.5" y="1107.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="834.5" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="831.5" y="1091.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="834.5" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="831.5" y="1075.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="834.5" y="1086.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="831.5" y="1059.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="834.5" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="831.5" y="1043.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="834.5" y="1054.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="831.5" y="1027.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="834.5" y="1038.0"></text>
</g>
<g>
<title>AbsSeq::dsd() const (1 samples, 0.09%)</title><rect x="831.5" y="1011.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="834.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1169794610.linkToTargetMethod (1 samples, 0.09%)</title><rect x="832.6" y="1235.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="835.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="832.6" y="1219.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="835.6" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/429148823.get$Lambda (1 samples, 0.09%)</title><rect x="832.6" y="1203.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="835.6" y="1214.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="832.6" y="1187.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="835.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.32%)</title><rect x="833.6" y="1235.0" width="15.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="836.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.23%)</title><rect x="834.7" y="1219.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="837.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.97%)</title><rect x="837.8" y="1203.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="840.8" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/429148823.accept (11 samples, 0.97%)</title><rect x="837.8" y="1187.0" width="11.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="840.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$44 (11 samples, 0.97%)</title><rect x="837.8" y="1171.0" width="11.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="840.8" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/133850614.complete (11 samples, 0.97%)</title><rect x="837.8" y="1155.0" width="11.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="840.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$54 (11 samples, 0.97%)</title><rect x="837.8" y="1139.0" width="11.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="840.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (11 samples, 0.97%)</title><rect x="837.8" y="1123.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="840.8" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 0.97%)</title><rect x="837.8" y="1107.0" width="11.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="840.8" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 0.97%)</title><rect x="837.8" y="1091.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="840.8" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (11 samples, 0.97%)</title><rect x="837.8" y="1075.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="840.8" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (11 samples, 0.97%)</title><rect x="837.8" y="1059.0" width="11.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="840.8" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.53%)</title><rect x="849.2" y="1235.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="852.2" y="1246.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="849.2" y="1219.0" width="6.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="852.2" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 0.53%)</title><rect x="855.4" y="1251.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="858.4" y="1262.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="858.5" y="1235.0" width="3.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="861.5" y="1246.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="859.5" y="1219.0" width="2.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="862.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.35%)</title><rect x="861.6" y="1299.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="864.6" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.35%)</title><rect x="861.6" y="1283.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="864.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.35%)</title><rect x="861.6" y="1267.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="864.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.35%)</title><rect x="861.6" y="1251.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="864.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (244 samples, 21.42%)</title><rect x="865.7" y="1299.0" width="252.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="868.7" y="1310.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (242 samples, 21.25%)</title><rect x="867.8" y="1283.0" width="250.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="870.8" y="1294.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (192 samples, 16.86%)</title><rect x="890.6" y="1267.0" width="198.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="893.6" y="1278.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.61%)</title><rect x="906.1" y="1251.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="909.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (7 samples, 0.61%)</title><rect x="906.1" y="1235.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="909.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (170 samples, 14.93%)</title><rect x="913.4" y="1251.0" width="176.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="916.4" y="1262.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (161 samples, 14.14%)</title><rect x="922.7" y="1235.0" width="166.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="925.7" y="1246.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="933.1" y="1219.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="936.1" y="1230.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="934.1" y="1219.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.1" y="1230.0"></text>
</g>
<g>
<title>Unsafe_Park (144 samples, 12.64%)</title><rect x="937.2" y="1219.0" width="149.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="940.2" y="1230.0">Unsafe_Park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="938.3" y="1203.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="941.3" y="1214.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 1.40%)</title><rect x="939.3" y="1203.0" width="16.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="942.3" y="1214.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.53%)</title><rect x="944.5" y="1187.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="947.5" y="1198.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.18%)</title><rect x="944.5" y="1171.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="947.5" y="1182.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.18%)</title><rect x="944.5" y="1155.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="947.5" y="1166.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="946.5" y="1171.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="949.5" y="1182.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.26%)</title><rect x="947.6" y="1171.0" width="3.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="950.6" y="1182.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.44%)</title><rect x="950.7" y="1187.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="953.7" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="955.9" y="1203.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="958.9" y="1214.0"></text>
</g>
<g>
<title>_L_cond_lock_847 (1 samples, 0.09%)</title><rect x="956.9" y="1203.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="959.9" y="1214.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.09%)</title><rect x="957.9" y="1203.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="960.9" y="1214.0"></text>
</g>
<g>
<title>__lll_lock_wait (13 samples, 1.14%)</title><rect x="959.0" y="1203.0" width="13.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="962.0" y="1214.0"></text>
</g>
<g>
<title>__lll_unlock_wake (29 samples, 2.55%)</title><rect x="972.4" y="1203.0" width="30.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="975.4" y="1214.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (61 samples, 5.36%)</title><rect x="1002.5" y="1203.0" width="63.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1005.5" y="1214.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (9 samples, 0.79%)</title><rect x="1065.7" y="1203.0" width="9.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1068.7" y="1214.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.35%)</title><rect x="1075.0" y="1203.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1078.0" y="1214.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.18%)</title><rect x="1079.1" y="1203.0" width="2.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1082.1" y="1214.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.35%)</title><rect x="1081.2" y="1203.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.2" y="1214.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="1085.4" y="1203.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1088.4" y="1214.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="1086.4" y="1219.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1089.4" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="1087.4" y="1219.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.4" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1088.5" y="1219.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (28 samples, 2.46%)</title><rect x="1089.5" y="1267.0" width="29.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1092.5" y="1278.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (28 samples, 2.46%)</title><rect x="1089.5" y="1251.0" width="29.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1092.5" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (28 samples, 2.46%)</title><rect x="1089.5" y="1235.0" width="29.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1092.5" y="1246.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (28 samples, 2.46%)</title><rect x="1089.5" y="1219.0" width="29.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1092.5" y="1230.0">ja..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1118.5" y="1347.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1121.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1118.5" y="1331.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1121.5" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1118.5" y="1315.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1121.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1118.5" y="1299.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1121.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="1118.5" y="1283.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1121.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="1118.5" y="1267.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1121.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="1118.5" y="1251.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1121.5" y="1262.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="1118.5" y="1235.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1121.5" y="1246.0"></text>
</g>
<g>
<title>start_thread (68 samples, 5.97%)</title><rect x="1119.6" y="1347.0" width="70.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1122.6" y="1358.0">start_th..</text>
</g>
<g>
<title>java_start(Thread*) (68 samples, 5.97%)</title><rect x="1119.6" y="1331.0" width="70.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1122.6" y="1342.0">java_sta..</text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 2.19%)</title><rect x="1119.6" y="1315.0" width="25.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.6" y="1326.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.09%)</title><rect x="1119.6" y="1299.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.6" y="1310.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (8 samples, 0.70%)</title><rect x="1120.6" y="1299.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.6" y="1310.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.70%)</title><rect x="1120.6" y="1283.0" width="8.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.6" y="1294.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1120.6" y="1267.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.6" y="1278.0"></text>
</g>
<g>
<title>SpinPause (7 samples, 0.61%)</title><rect x="1121.6" y="1267.0" width="7.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1124.6" y="1278.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.40%)</title><rect x="1128.9" y="1299.0" width="16.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.9" y="1310.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.35%)</title><rect x="1128.9" y="1283.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.9" y="1294.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1128.9" y="1267.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.9" y="1278.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1128.9" y="1251.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.9" y="1262.0"></text>
</g>
<g>
<title>G1ParScanClosure::do_oop(unsigned int*) (1 samples, 0.09%)</title><rect x="1128.9" y="1235.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.9" y="1246.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1129.9" y="1267.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.9" y="1278.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.18%)</title><rect x="1130.9" y="1267.0" width="2.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1133.9" y="1278.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.61%)</title><rect x="1133.0" y="1283.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.0" y="1294.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(unsigned int*) (1 samples, 0.09%)</title><rect x="1133.0" y="1267.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.0" y="1278.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.26%)</title><rect x="1134.1" y="1267.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.1" y="1278.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1134.1" y="1251.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.1" y="1262.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1134.1" y="1235.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.1" y="1246.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1134.1" y="1219.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.1" y="1230.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.18%)</title><rect x="1135.1" y="1251.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.1" y="1262.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1136.1" y="1235.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.1" y="1246.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.09%)</title><rect x="1136.1" y="1219.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.1" y="1230.0"></text>
</g>
<g>
<title>InterpreterOopMap::iterate_oop(OffsetClosure*) const (1 samples, 0.09%)</title><rect x="1136.1" y="1203.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.1" y="1214.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.26%)</title><rect x="1137.2" y="1267.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.2" y="1278.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.26%)</title><rect x="1137.2" y="1251.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.2" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.44%)</title><rect x="1140.3" y="1283.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.3" y="1294.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.44%)</title><rect x="1140.3" y="1267.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.3" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.35%)</title><rect x="1140.3" y="1251.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.3" y="1262.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.35%)</title><rect x="1140.3" y="1235.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.3" y="1246.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.35%)</title><rect x="1140.3" y="1219.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.3" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.26%)</title><rect x="1140.3" y="1203.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.3" y="1214.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.09%)</title><rect x="1142.3" y="1187.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.3" y="1198.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.09%)</title><rect x="1143.4" y="1203.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.4" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1144.4" y="1251.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.4" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="1144.4" y="1235.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.4" y="1246.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1144.4" y="1219.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.4" y="1230.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.09%)</title><rect x="1144.4" y="1203.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.4" y="1214.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.09%)</title><rect x="1144.4" y="1187.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.4" y="1198.0"></text>
</g>
<g>
<title>JavaThread::run() (42 samples, 3.69%)</title><rect x="1145.5" y="1315.0" width="43.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.5" y="1326.0">Java..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (42 samples, 3.69%)</title><rect x="1145.5" y="1299.0" width="43.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.5" y="1310.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (42 samples, 3.69%)</title><rect x="1145.5" y="1283.0" width="43.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.5" y="1294.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (40 samples, 3.51%)</title><rect x="1145.5" y="1267.0" width="41.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.5" y="1278.0">Com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (38 samples, 3.34%)</title><rect x="1145.5" y="1251.0" width="39.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.5" y="1262.0">C2C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (38 samples, 3.34%)</title><rect x="1145.5" y="1235.0" width="39.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.5" y="1246.0">Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (21 samples, 1.84%)</title><rect x="1145.5" y="1219.0" width="21.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.5" y="1230.0">C..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.18%)</title><rect x="1145.5" y="1203.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.5" y="1214.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1145.5" y="1187.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.5" y="1198.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.09%)</title><rect x="1145.5" y="1171.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.5" y="1182.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.09%)</title><rect x="1145.5" y="1155.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.5" y="1166.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.09%)</title><rect x="1145.5" y="1139.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.5" y="1150.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1145.5" y="1123.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.5" y="1134.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="1146.5" y="1187.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.5" y="1198.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1146.5" y="1171.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.5" y="1182.0"></text>
</g>
<g>
<title>jmpConNode::short_branch_version(Compile*) (1 samples, 0.09%)</title><rect x="1146.5" y="1155.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.5" y="1166.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.09%)</title><rect x="1146.5" y="1139.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.5" y="1150.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.26%)</title><rect x="1147.5" y="1203.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.5" y="1214.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="1147.5" y="1187.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.5" y="1198.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.09%)</title><rect x="1147.5" y="1171.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.5" y="1182.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.18%)</title><rect x="1148.6" y="1187.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.6" y="1198.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.18%)</title><rect x="1148.6" y="1171.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.6" y="1182.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.18%)</title><rect x="1148.6" y="1155.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.6" y="1166.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.18%)</title><rect x="1148.6" y="1139.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.6" y="1150.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="1149.6" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.6" y="1134.0"></text>
</g>
<g>
<title>Node::find_int_type() const (1 samples, 0.09%)</title><rect x="1149.6" y="1107.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.6" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (16 samples, 1.40%)</title><rect x="1150.6" y="1203.0" width="16.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.6" y="1214.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1150.6" y="1187.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.6" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1151.7" y="1187.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.7" y="1198.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1152.7" y="1187.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.7" y="1198.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1153.7" y="1187.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.7" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.09%)</title><rect x="1154.8" y="1187.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.8" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.35%)</title><rect x="1155.8" y="1187.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.8" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1155.8" y="1171.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.8" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.26%)</title><rect x="1156.8" y="1171.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.8" y="1182.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1157.9" y="1155.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.9" y="1166.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.09%)</title><rect x="1157.9" y="1139.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.9" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1158.9" y="1155.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.09%)</title><rect x="1160.0" y="1187.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.0" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1160.0" y="1171.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.09%)</title><rect x="1161.0" y="1187.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.0" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.18%)</title><rect x="1162.0" y="1187.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.0" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1163.1" y="1171.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.1" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.26%)</title><rect x="1164.1" y="1187.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.1" y="1198.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1165.1" y="1171.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.1" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1166.2" y="1171.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.2" y="1182.0"></text>
</g>
<g>
<title>Compile::Optimize() (10 samples, 0.88%)</title><rect x="1167.2" y="1219.0" width="10.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.2" y="1230.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="1203.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1167.2" y="1187.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1167.2" y="1171.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.2" y="1182.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1167.2" y="1155.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.2" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1167.2" y="1139.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.2" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="1123.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.2" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="1107.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.2" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="1091.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.2" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="1075.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.2" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="1059.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.2" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="1043.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.2" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="1027.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.2" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="1011.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.2" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="995.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.2" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.2" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="963.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.2" y="974.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1167.2" y="947.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.2" y="958.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="931.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.2" y="942.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1168.2" y="1203.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.2" y="1214.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1169.3" y="1203.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.3" y="1214.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1169.3" y="1187.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.3" y="1198.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.09%)</title><rect x="1169.3" y="1171.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.3" y="1182.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1169.3" y="1155.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.3" y="1166.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1169.3" y="1139.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.3" y="1150.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1169.3" y="1123.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.3" y="1134.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1169.3" y="1107.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.3" y="1118.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.09%)</title><rect x="1169.3" y="1091.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (4 samples, 0.35%)</title><rect x="1170.3" y="1203.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.3" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.18%)</title><rect x="1170.3" y="1187.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.3" y="1198.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.09%)</title><rect x="1171.4" y="1171.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1172.4" y="1187.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="1187.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1173.4" y="1171.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1173.4" y="1155.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1174.5" y="1203.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.18%)</title><rect x="1174.5" y="1187.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.5" y="1198.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.5" y="1171.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="1182.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1174.5" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="1166.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="1139.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="1150.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1175.5" y="1171.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.5" y="1182.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1175.5" y="1155.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1176.5" y="1203.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1179.5" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.53%)</title><rect x="1177.6" y="1219.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.53%)</title><rect x="1177.6" y="1203.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.53%)</title><rect x="1177.6" y="1187.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.53%)</title><rect x="1177.6" y="1171.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.53%)</title><rect x="1177.6" y="1155.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.53%)</title><rect x="1177.6" y="1139.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.6" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.53%)</title><rect x="1177.6" y="1123.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.53%)</title><rect x="1177.6" y="1107.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.53%)</title><rect x="1177.6" y="1091.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.6" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.53%)</title><rect x="1177.6" y="1075.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.53%)</title><rect x="1177.6" y="1059.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.44%)</title><rect x="1177.6" y="1043.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.6" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.44%)</title><rect x="1177.6" y="1027.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.44%)</title><rect x="1177.6" y="1011.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1177.6" y="995.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1177.6" y="979.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1177.6" y="963.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1177.6" y="947.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.6" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1177.6" y="931.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1177.6" y="915.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1177.6" y="899.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1177.6" y="883.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1177.6" y="867.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1177.6" y="851.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.6" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1177.6" y="835.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1177.6" y="819.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.6" y="830.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1177.6" y="803.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="814.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1177.6" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="798.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.6" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.6" y="782.0"></text>
</g>
<g>
<title>PhaseGVN::transform(Node*) (1 samples, 0.09%)</title><rect x="1177.6" y="755.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1178.6" y="803.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1178.6" y="787.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1178.6" y="771.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1178.6" y="755.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.6" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1178.6" y="739.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1178.6" y="723.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1178.6" y="707.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.6" y="718.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.09%)</title><rect x="1178.6" y="691.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.6" y="702.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1178.6" y="675.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.6" y="686.0"></text>
</g>
<g>
<title>TypeTuple::fields(unsigned int) (1 samples, 0.09%)</title><rect x="1178.6" y="659.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1179.6" y="691.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1179.6" y="675.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1179.6" y="659.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.6" y="643.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.6" y="627.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.6" y="611.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.6" y="595.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.6" y="579.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.6" y="563.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.6" y="547.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.6" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.6" y="531.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.6" y="515.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.6" y="499.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.6" y="483.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.6" y="467.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.6" y="451.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.6" y="435.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.6" y="419.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.6" y="403.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.6" y="387.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.6" y="371.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.6" y="355.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.6" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.6" y="339.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.6" y="323.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.6" y="307.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.6" y="291.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.6" y="275.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.6" y="259.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.6" y="243.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.6" y="227.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.6" y="211.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.6" y="195.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1179.6" y="179.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1179.6" y="163.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="174.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1179.6" y="147.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="158.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1179.6" y="131.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1179.6" y="115.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="126.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1179.6" y="99.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="110.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1179.6" y="83.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.6" y="94.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1179.6" y="67.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1179.6" y="51.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="62.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="35.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="46.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1180.7" y="643.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1180.7" y="627.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1180.7" y="611.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="622.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1180.7" y="595.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="606.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1180.7" y="579.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="590.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1180.7" y="563.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="574.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1180.7" y="547.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="558.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.09%)</title><rect x="1180.7" y="531.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.09%)</title><rect x="1181.7" y="995.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="1006.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.09%)</title><rect x="1181.7" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1182.7" y="1043.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.7" y="1054.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1182.7" y="1027.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.7" y="1038.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.09%)</title><rect x="1182.7" y="1011.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.7" y="1022.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.09%)</title><rect x="1182.7" y="995.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.7" y="1006.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.09%)</title><rect x="1182.7" y="979.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.7" y="990.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1183.8" y="1219.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="1230.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1183.8" y="1203.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="1214.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.18%)</title><rect x="1184.8" y="1251.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.8" y="1262.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.18%)</title><rect x="1184.8" y="1235.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.8" y="1246.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.18%)</title><rect x="1184.8" y="1219.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.8" y="1230.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.18%)</title><rect x="1184.8" y="1203.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="1214.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1184.8" y="1187.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.8" y="1198.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1184.8" y="1171.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="1182.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="1155.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.8" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1184.8" y="1139.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.8" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1184.8" y="1123.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1184.8" y="1107.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.8" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::new_instance(int) (1 samples, 0.09%)</title><rect x="1184.8" y="1091.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.8" y="1102.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.09%)</title><rect x="1184.8" y="1075.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.8" y="1086.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1184.8" y="1059.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1184.8" y="1043.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.8" y="1054.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.09%)</title><rect x="1184.8" y="1027.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.8" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1184.8" y="1011.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.8" y="1022.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1184.8" y="995.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.8" y="1006.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.09%)</title><rect x="1185.9" y="1187.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.9" y="1198.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.09%)</title><rect x="1185.9" y="1171.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.9" y="1182.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.09%)</title><rect x="1185.9" y="1155.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.9" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::const2reg(LIR_OprDesc*, LIR_OprDesc*, LIR_PatchCode, CodeEmitInfo*) (1 samples, 0.09%)</title><rect x="1185.9" y="1139.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="1150.0"></text>
</g>
<g>
<title>MacroAssembler::mov_metadata(RegisterImpl*, Metadata*) (1 samples, 0.09%)</title><rect x="1185.9" y="1123.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="1134.0"></text>
</g>
<g>
<title>Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&amp;) (1 samples, 0.09%)</title><rect x="1185.9" y="1107.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.9" y="1118.0"></text>
</g>
<g>
<title>CodeSection::relocate(unsigned char*, RelocationHolder const&amp;, int) (1 samples, 0.09%)</title><rect x="1185.9" y="1091.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.9" y="1102.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.18%)</title><rect x="1186.9" y="1267.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.9" y="1278.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.18%)</title><rect x="1186.9" y="1251.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.9" y="1262.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.18%)</title><rect x="1186.9" y="1235.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.9" y="1246.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.18%)</title><rect x="1186.9" y="1219.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.9" y="1230.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.09%)</title><rect x="1186.9" y="1203.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.9" y="1214.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.09%)</title><rect x="1187.9" y="1203.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.9" y="1214.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.09%)</title><rect x="1189.0" y="1315.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.0" y="1326.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.09%)</title><rect x="1189.0" y="1299.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.0" y="1310.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1189.0" y="1283.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.0" y="1294.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.09%)</title><rect x="1189.0" y="1267.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="1278.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.09%)</title><rect x="1189.0" y="1251.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.0" y="1262.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1189.0" y="1235.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="1246.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1189.0" y="1219.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.0" y="1230.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1189.0" y="1203.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.0" y="1214.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1189.0" y="1187.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="1198.0"></text>
</g>
</g>
</svg>
