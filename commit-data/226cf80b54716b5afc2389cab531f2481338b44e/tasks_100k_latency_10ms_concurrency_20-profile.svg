<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1526" onload="init(evt)" viewBox="0 0 1200 1526" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1509"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1509"> </text>
<g id="frames">
<g>
<title>all (391 samples, 100.00%)</title><rect x="10.0" y="1475.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1486.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.26%)</title><rect x="10.0" y="1459.0" width="3.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.26%)</title><rect x="10.0" y="1443.0" width="3.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.26%)</title><rect x="10.0" y="1427.0" width="3.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 6.91%)</title><rect x="13.0" y="1459.0" width="81.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.0" y="1470.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (27 samples, 6.91%)</title><rect x="13.0" y="1443.0" width="81.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.0" y="1454.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.26%)</title><rect x="13.0" y="1427.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.26%)</title><rect x="13.0" y="1411.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.0" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/421177811.accept (1 samples, 0.26%)</title><rect x="13.0" y="1395.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.0" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.26%)</title><rect x="13.0" y="1379.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.0" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.26%)</title><rect x="13.0" y="1363.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.0" y="1374.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.26%)</title><rect x="13.0" y="1347.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.0" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.77%)</title><rect x="16.0" y="1427.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.0" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.51%)</title><rect x="16.0" y="1411.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.0" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.51%)</title><rect x="16.0" y="1395.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.0" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.51%)</title><rect x="16.0" y="1379.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.0" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.26%)</title><rect x="19.1" y="1363.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.1" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.26%)</title><rect x="19.1" y="1347.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.1" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.26%)</title><rect x="19.1" y="1331.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.26%)</title><rect x="19.1" y="1315.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.1" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.26%)</title><rect x="19.1" y="1299.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.1" y="1310.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.26%)</title><rect x="19.1" y="1283.0" width="3.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="22.1" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.26%)</title><rect x="22.1" y="1411.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.1" y="1422.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.26%)</title><rect x="22.1" y="1395.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.1" y="1406.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (1 samples, 0.26%)</title><rect x="22.1" y="1379.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.1" y="1390.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/511473681.invoke_MT (1 samples, 0.26%)</title><rect x="22.1" y="1363.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.1" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$BMH/823271460.reinvoke (1 samples, 0.26%)</title><rect x="22.1" y="1347.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.1" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/592688102.invokeStatic_L6_L (1 samples, 0.26%)</title><rect x="22.1" y="1331.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.1" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaMetafactory.metafactory (1 samples, 0.26%)</title><rect x="22.1" y="1315.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.1" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.26%)</title><rect x="22.1" y="1299.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.1" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.26%)</title><rect x="22.1" y="1283.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.1" y="1294.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.defineAnonymousClass (1 samples, 0.26%)</title><rect x="22.1" y="1267.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.1" y="1278.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass (1 samples, 0.26%)</title><rect x="22.1" y="1251.0" width="3.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="25.1" y="1262.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, KlassHandle, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.26%)</title><rect x="22.1" y="1235.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="25.1" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.26%)</title><rect x="22.1" y="1219.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="25.1" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(instanceKlassHandle, bool, Thread*) (1 samples, 0.26%)</title><rect x="22.1" y="1203.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="25.1" y="1214.0"></text>
</g>
<g>
<title>klassItable::initialize_itable(bool, Thread*) (1 samples, 0.26%)</title><rect x="22.1" y="1187.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="25.1" y="1198.0"></text>
</g>
<g>
<title>klassItable::initialize_itable_for_interface(int, KlassHandle, bool, Thread*) (1 samples, 0.26%)</title><rect x="22.1" y="1171.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="25.1" y="1182.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.26%)</title><rect x="22.1" y="1155.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="25.1" y="1166.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.26%)</title><rect x="22.1" y="1139.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="25.1" y="1150.0"></text>
</g>
<g>
<title>LoaderConstraintTable::add_entry(Symbol*, Klass*, Handle, Klass*, Handle) (1 samples, 0.26%)</title><rect x="22.1" y="1123.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="25.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (11 samples, 2.81%)</title><rect x="25.1" y="1427.0" width="33.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.1" y="1438.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1796498234.accept (11 samples, 2.81%)</title><rect x="25.1" y="1411.0" width="33.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.1" y="1422.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (11 samples, 2.81%)</title><rect x="25.1" y="1395.0" width="33.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.1" y="1406.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 0.77%)</title><rect x="28.1" y="1379.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.1" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 0.77%)</title><rect x="28.1" y="1363.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.1" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 0.77%)</title><rect x="28.1" y="1347.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 0.77%)</title><rect x="28.1" y="1331.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.1" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.77%)</title><rect x="28.1" y="1315.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.1" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.51%)</title><rect x="31.1" y="1299.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.1" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (7 samples, 1.79%)</title><rect x="37.2" y="1379.0" width="21.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.2" y="1390.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.28%)</title><rect x="40.2" y="1363.0" width="15.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.2" y="1374.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.02%)</title><rect x="40.2" y="1347.0" width="12.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="43.2" y="1358.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.51%)</title><rect x="43.2" y="1331.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.2" y="1342.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="49.2" y="1331.0" width="3.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="52.2" y="1342.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="52.3" y="1347.0" width="3.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="55.3" y="1358.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="55.3" y="1363.0" width="3.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="58.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 3.07%)</title><rect x="58.3" y="1427.0" width="36.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="61.3" y="1438.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 3.07%)</title><rect x="58.3" y="1411.0" width="36.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.3" y="1422.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 2.05%)</title><rect x="58.3" y="1395.0" width="24.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.3" y="1406.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.26%)</title><rect x="58.3" y="1379.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.3" y="1390.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.26%)</title><rect x="58.3" y="1363.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="61.3" y="1374.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.26%)</title><rect x="58.3" y="1347.0" width="3.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="61.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.51%)</title><rect x="61.3" y="1379.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.51%)</title><rect x="61.3" y="1363.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$260/2060197916.shouldBlock (1 samples, 0.26%)</title><rect x="61.3" y="1347.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="64.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.26%)</title><rect x="61.3" y="1331.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.26%)</title><rect x="61.3" y="1315.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.3" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.26%)</title><rect x="61.3" y="1299.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.3" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.26%)</title><rect x="61.3" y="1283.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.3" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.26%)</title><rect x="61.3" y="1267.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.3" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.26%)</title><rect x="61.3" y="1251.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.3" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/2100961961.get (1 samples, 0.26%)</title><rect x="61.3" y="1235.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.26%)</title><rect x="64.3" y="1347.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.26%)</title><rect x="64.3" y="1331.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.26%)</title><rect x="64.3" y="1315.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.26%)</title><rect x="64.3" y="1299.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.26%)</title><rect x="64.3" y="1283.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.26%)</title><rect x="64.3" y="1267.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.26%)</title><rect x="64.3" y="1251.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.26%)</title><rect x="64.3" y="1235.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.26%)</title><rect x="64.3" y="1219.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="67.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.28%)</title><rect x="67.3" y="1379.0" width="15.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.02%)</title><rect x="70.4" y="1363.0" width="12.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.4" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.02%)</title><rect x="70.4" y="1347.0" width="12.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="73.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.02%)</title><rect x="70.4" y="1331.0" width="12.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="73.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 0.77%)</title><rect x="70.4" y="1315.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="73.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (3 samples, 0.77%)</title><rect x="70.4" y="1299.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (3 samples, 0.77%)</title><rect x="70.4" y="1283.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.26%)</title><rect x="76.4" y="1267.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.26%)</title><rect x="79.4" y="1315.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.26%)</title><rect x="79.4" y="1299.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="82.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.26%)</title><rect x="79.4" y="1283.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="82.4" y="1294.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.26%)</title><rect x="79.4" y="1267.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="82.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.51%)</title><rect x="82.4" y="1395.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.4" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.51%)</title><rect x="82.4" y="1379.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.4" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.51%)</title><rect x="82.4" y="1363.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="85.4" y="1374.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.26%)</title><rect x="82.4" y="1347.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="85.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/70159280.accept (1 samples, 0.26%)</title><rect x="82.4" y="1331.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.26%)</title><rect x="82.4" y="1315.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.26%)</title><rect x="82.4" y="1299.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.26%)</title><rect x="85.4" y="1347.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.4" y="1358.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.26%)</title><rect x="85.4" y="1331.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.4" y="1342.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.26%)</title><rect x="85.4" y="1315.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.4" y="1326.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.26%)</title><rect x="85.4" y="1299.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="88.4" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.26%)</title><rect x="85.4" y="1283.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.4" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.26%)</title><rect x="85.4" y="1267.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.4" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.26%)</title><rect x="85.4" y="1251.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.51%)</title><rect x="88.5" y="1395.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="91.5" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.26%)</title><rect x="88.5" y="1379.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.5" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.26%)</title><rect x="88.5" y="1363.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="91.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.26%)</title><rect x="88.5" y="1347.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="91.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.26%)</title><rect x="88.5" y="1331.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="91.5" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.26%)</title><rect x="88.5" y="1315.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.26%)</title><rect x="88.5" y="1299.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.26%)</title><rect x="88.5" y="1283.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.26%)</title><rect x="88.5" y="1267.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="91.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.26%)</title><rect x="88.5" y="1251.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="91.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.26%)</title><rect x="88.5" y="1235.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.26%)</title><rect x="88.5" y="1219.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.26%)</title><rect x="88.5" y="1203.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.26%)</title><rect x="88.5" y="1187.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.26%)</title><rect x="88.5" y="1171.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.5" y="1182.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (1 samples, 0.26%)</title><rect x="88.5" y="1155.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.5" y="1166.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.26%)</title><rect x="88.5" y="1139.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="91.5" y="1150.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.26%)</title><rect x="88.5" y="1123.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="91.5" y="1134.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.26%)</title><rect x="88.5" y="1107.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="91.5" y="1118.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.26%)</title><rect x="88.5" y="1091.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="91.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.26%)</title><rect x="91.5" y="1379.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.5" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.26%)</title><rect x="91.5" y="1363.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="94.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.26%)</title><rect x="91.5" y="1347.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.26%)</title><rect x="91.5" y="1331.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="94.5" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.26%)</title><rect x="91.5" y="1315.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="94.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.26%)</title><rect x="91.5" y="1299.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="94.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.26%)</title><rect x="91.5" y="1283.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.5" y="1294.0"></text>
</g>
<g>
<title>java/util/ArrayList.toArray (1 samples, 0.26%)</title><rect x="91.5" y="1267.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="94.5" y="1278.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.26%)</title><rect x="91.5" y="1251.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="94.5" y="1262.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.26%)</title><rect x="91.5" y="1235.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="94.5" y="1246.0"></text>
</g>
<g>
<title>java/lang/Thread.run (204 samples, 52.17%)</title><rect x="94.5" y="1459.0" width="615.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="97.5" y="1470.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (204 samples, 52.17%)</title><rect x="94.5" y="1443.0" width="615.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.5" y="1454.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (204 samples, 52.17%)</title><rect x="94.5" y="1427.0" width="615.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="97.5" y="1438.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2123250892.run (201 samples, 51.41%)</title><rect x="97.5" y="1411.0" width="606.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="100.5" y="1422.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2123250892.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (201 samples, 51.41%)</title><rect x="97.5" y="1395.0" width="606.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="100.5" y="1406.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (201 samples, 51.41%)</title><rect x="97.5" y="1379.0" width="606.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.5" y="1390.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (199 samples, 50.90%)</title><rect x="103.6" y="1363.0" width="600.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.6" y="1374.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>_init (1 samples, 0.26%)</title><rect x="106.6" y="1347.0" width="3.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="109.6" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (30 samples, 7.67%)</title><rect x="109.6" y="1347.0" width="90.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="112.6" y="1358.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (30 samples, 7.67%)</title><rect x="109.6" y="1331.0" width="90.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="112.6" y="1342.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (30 samples, 7.67%)</title><rect x="109.6" y="1315.0" width="90.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="112.6" y="1326.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (29 samples, 7.42%)</title><rect x="109.6" y="1299.0" width="87.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="112.6" y="1310.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (29 samples, 7.42%)</title><rect x="109.6" y="1283.0" width="87.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="112.6" y="1294.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (29 samples, 7.42%)</title><rect x="109.6" y="1267.0" width="87.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.6" y="1278.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (11 samples, 2.81%)</title><rect x="109.6" y="1251.0" width="33.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.6" y="1262.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 1.79%)</title><rect x="109.6" y="1235.0" width="21.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="112.6" y="1246.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (7 samples, 1.79%)</title><rect x="109.6" y="1219.0" width="21.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="112.6" y="1230.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (4 samples, 1.02%)</title><rect x="109.6" y="1203.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.77%)</title><rect x="121.7" y="1203.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="124.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.51%)</title><rect x="121.7" y="1187.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="124.7" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.26%)</title><rect x="124.7" y="1171.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="127.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.26%)</title><rect x="124.7" y="1155.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="127.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.26%)</title><rect x="127.7" y="1187.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="130.7" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.02%)</title><rect x="130.7" y="1235.0" width="12.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="133.7" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.02%)</title><rect x="130.7" y="1219.0" width="12.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="133.7" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.26%)</title><rect x="130.7" y="1203.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="133.7" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.26%)</title><rect x="130.7" y="1187.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="133.7" y="1198.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.26%)</title><rect x="130.7" y="1171.0" width="3.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="133.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.26%)</title><rect x="133.7" y="1203.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="136.7" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.26%)</title><rect x="133.7" y="1187.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="136.7" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.26%)</title><rect x="133.7" y="1171.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="136.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.51%)</title><rect x="136.8" y="1203.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="139.8" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (14 samples, 3.58%)</title><rect x="142.8" y="1251.0" width="42.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="145.8" y="1262.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.51%)</title><rect x="142.8" y="1235.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="145.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.51%)</title><rect x="142.8" y="1219.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="145.8" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (12 samples, 3.07%)</title><rect x="148.8" y="1235.0" width="36.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="151.8" y="1246.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 1.79%)</title><rect x="148.8" y="1219.0" width="21.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="151.8" y="1230.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.26%)</title><rect x="160.9" y="1203.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="163.9" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.26%)</title><rect x="160.9" y="1187.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="163.9" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.26%)</title><rect x="160.9" y="1171.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="163.9" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.26%)</title><rect x="163.9" y="1203.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.9" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.26%)</title><rect x="163.9" y="1187.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="166.9" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.26%)</title><rect x="166.9" y="1203.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="169.9" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 1.28%)</title><rect x="169.9" y="1219.0" width="15.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="172.9" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 1.28%)</title><rect x="169.9" y="1203.0" width="15.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="172.9" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 1.28%)</title><rect x="169.9" y="1187.0" width="15.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.9" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.77%)</title><rect x="173.0" y="1171.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.0" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.51%)</title><rect x="176.0" y="1155.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.51%)</title><rect x="176.0" y="1139.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="179.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.51%)</title><rect x="176.0" y="1123.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.26%)</title><rect x="182.0" y="1171.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.0" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.26%)</title><rect x="182.0" y="1155.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.26%)</title><rect x="182.0" y="1139.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="185.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.26%)</title><rect x="182.0" y="1123.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.26%)</title><rect x="182.0" y="1107.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 1.02%)</title><rect x="185.0" y="1251.0" width="12.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="188.0" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 1.02%)</title><rect x="185.0" y="1235.0" width="12.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="188.0" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 1.02%)</title><rect x="185.0" y="1219.0" width="12.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.0" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 1.02%)</title><rect x="185.0" y="1203.0" width="12.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.0" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.26%)</title><rect x="191.1" y="1187.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.26%)</title><rect x="194.1" y="1187.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="197.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.26%)</title><rect x="197.1" y="1299.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.1" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="197.1" y="1283.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="200.1" y="1294.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="197.1" y="1267.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="200.1" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="197.1" y="1251.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="200.1" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="197.1" y="1235.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="200.1" y="1246.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.26%)</title><rect x="197.1" y="1219.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="200.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (160 samples, 40.92%)</title><rect x="200.1" y="1347.0" width="482.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="203.1" y="1358.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (27 samples, 6.91%)</title><rect x="203.1" y="1331.0" width="81.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.1" y="1342.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.26%)</title><rect x="209.2" y="1315.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.2" y="1326.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (24 samples, 6.14%)</title><rect x="212.2" y="1315.0" width="72.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.2" y="1326.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (22 samples, 5.63%)</title><rect x="218.2" y="1299.0" width="66.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.2" y="1310.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 2.30%)</title><rect x="224.3" y="1283.0" width="27.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.3" y="1294.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 2.30%)</title><rect x="224.3" y="1267.0" width="27.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.3" y="1278.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.51%)</title><rect x="245.4" y="1251.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.51%)</title><rect x="245.4" y="1235.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.51%)</title><rect x="245.4" y="1219.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="248.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.51%)</title><rect x="251.4" y="1283.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.4" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.51%)</title><rect x="251.4" y="1267.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.51%)</title><rect x="251.4" y="1251.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.4" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.26%)</title><rect x="254.5" y="1235.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.5" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (9 samples, 2.30%)</title><rect x="257.5" y="1283.0" width="27.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="260.5" y="1294.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 1.79%)</title><rect x="263.5" y="1267.0" width="21.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.5" y="1278.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 1.79%)</title><rect x="263.5" y="1251.0" width="21.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.5" y="1262.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.77%)</title><rect x="275.6" y="1235.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.6" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.02%)</title><rect x="284.6" y="1331.0" width="12.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.6" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.02%)</title><rect x="284.6" y="1315.0" width="12.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.6" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="284.6" y="1299.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="287.6" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.77%)</title><rect x="287.6" y="1299.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.6" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (23 samples, 5.88%)</title><rect x="296.7" y="1331.0" width="69.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.7" y="1342.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (23 samples, 5.88%)</title><rect x="296.7" y="1315.0" width="69.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.7" y="1326.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (11 samples, 2.81%)</title><rect x="305.8" y="1299.0" width="33.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.8" y="1310.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 1.53%)</title><rect x="314.8" y="1283.0" width="18.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="317.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 1.53%)</title><rect x="314.8" y="1267.0" width="18.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.02%)</title><rect x="320.8" y="1251.0" width="12.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="323.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.02%)</title><rect x="320.8" y="1235.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="323.8" y="1246.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.02%)</title><rect x="320.8" y="1219.0" width="12.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="323.8" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 1.02%)</title><rect x="320.8" y="1203.0" width="12.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="323.8" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.51%)</title><rect x="320.8" y="1187.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="323.8" y="1198.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.26%)</title><rect x="320.8" y="1171.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="323.8" y="1182.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.26%)</title><rect x="320.8" y="1155.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="323.8" y="1166.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.26%)</title><rect x="323.9" y="1171.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="326.9" y="1182.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.26%)</title><rect x="323.9" y="1155.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="326.9" y="1166.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.26%)</title><rect x="323.9" y="1139.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="326.9" y="1150.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.26%)</title><rect x="323.9" y="1123.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="326.9" y="1134.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.51%)</title><rect x="326.9" y="1187.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="329.9" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="329.9" y="1171.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="332.9" y="1182.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.51%)</title><rect x="332.9" y="1283.0" width="6.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="335.9" y="1294.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 2.30%)</title><rect x="339.0" y="1299.0" width="27.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.0" y="1310.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 2.05%)</title><rect x="342.0" y="1283.0" width="24.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="345.0" y="1294.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.77%)</title><rect x="342.0" y="1267.0" width="9.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="345.0" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.77%)</title><rect x="342.0" y="1251.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="345.0" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.26%)</title><rect x="348.0" y="1235.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.0" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.26%)</title><rect x="348.0" y="1219.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.26%)</title><rect x="348.0" y="1203.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="351.0" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 1.28%)</title><rect x="351.0" y="1267.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="354.0" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.77%)</title><rect x="357.1" y="1251.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="360.1" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.77%)</title><rect x="357.1" y="1235.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="360.1" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.26%)</title><rect x="360.1" y="1219.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="363.1" y="1230.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.26%)</title><rect x="363.1" y="1219.0" width="3.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="366.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (90 samples, 23.02%)</title><rect x="366.1" y="1331.0" width="271.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="369.1" y="1342.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (90 samples, 23.02%)</title><rect x="366.1" y="1315.0" width="271.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="369.1" y="1326.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1979565224.process (77 samples, 19.69%)</title><rect x="378.2" y="1299.0" width="232.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="381.2" y="1310.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (77 samples, 19.69%)</title><rect x="378.2" y="1283.0" width="232.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.2" y="1294.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (76 samples, 19.44%)</title><rect x="378.2" y="1267.0" width="229.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="381.2" y="1278.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.77%)</title><rect x="378.2" y="1251.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="381.2" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.77%)</title><rect x="378.2" y="1235.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="381.2" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.77%)</title><rect x="378.2" y="1219.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="381.2" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.77%)</title><rect x="378.2" y="1203.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="381.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.77%)</title><rect x="378.2" y="1187.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="381.2" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (70 samples, 17.90%)</title><rect x="387.2" y="1251.0" width="211.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="390.2" y="1262.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>java/lang/Thread.sleep (70 samples, 17.90%)</title><rect x="387.2" y="1235.0" width="211.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="390.2" y="1246.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.26%)</title><rect x="405.3" y="1219.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="408.3" y="1230.0"></text>
</g>
<g>
<title>JVM_Sleep (57 samples, 14.58%)</title><rect x="408.4" y="1219.0" width="172.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="411.4" y="1230.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.28%)</title><rect x="423.5" y="1203.0" width="15.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="426.5" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.51%)</title><rect x="438.5" y="1203.0" width="6.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="441.5" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="441.6" y="1187.0" width="3.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="444.6" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.51%)</title><rect x="444.6" y="1203.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="447.6" y="1214.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (43 samples, 11.00%)</title><rect x="450.6" y="1203.0" width="129.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="453.6" y="1214.0">os::sleep(Thread..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 1.02%)</title><rect x="468.7" y="1187.0" width="12.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="471.7" y="1198.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.51%)</title><rect x="474.8" y="1171.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="477.8" y="1182.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.51%)</title><rect x="480.8" y="1187.0" width="6.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="483.8" y="1198.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.51%)</title><rect x="480.8" y="1171.0" width="6.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="483.8" y="1182.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.77%)</title><rect x="486.8" y="1187.0" width="9.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="489.8" y="1198.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.26%)</title><rect x="495.9" y="1187.0" width="3.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="498.9" y="1198.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (20 samples, 5.12%)</title><rect x="498.9" y="1187.0" width="60.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="501.9" y="1198.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.26%)</title><rect x="559.3" y="1187.0" width="3.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="562.3" y="1198.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.26%)</title><rect x="562.3" y="1187.0" width="3.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="565.3" y="1198.0"></text>
</g>
<g>
<title>_init (1 samples, 0.26%)</title><rect x="565.3" y="1187.0" width="3.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="568.3" y="1198.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.26%)</title><rect x="568.3" y="1187.0" width="3.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="571.3" y="1198.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.26%)</title><rect x="571.3" y="1187.0" width="3.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="574.3" y="1198.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.51%)</title><rect x="574.3" y="1187.0" width="6.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="577.3" y="1198.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (5 samples, 1.28%)</title><rect x="580.4" y="1219.0" width="15.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="583.4" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.26%)</title><rect x="595.5" y="1219.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="598.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.77%)</title><rect x="598.5" y="1251.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="601.5" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.26%)</title><rect x="607.5" y="1267.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="610.5" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.26%)</title><rect x="607.5" y="1251.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="610.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.26%)</title><rect x="607.5" y="1235.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="610.5" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.26%)</title><rect x="607.5" y="1219.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="610.5" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.26%)</title><rect x="610.6" y="1299.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="613.6" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.26%)</title><rect x="610.6" y="1283.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="613.6" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/558187323.linkToTargetMethod (4 samples, 1.02%)</title><rect x="613.6" y="1299.0" width="12.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="616.6" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (4 samples, 1.02%)</title><rect x="613.6" y="1283.0" width="12.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="616.6" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1146638280.get$Lambda (4 samples, 1.02%)</title><rect x="613.6" y="1267.0" width="12.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="616.6" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="613.6" y="1251.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="616.6" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="613.6" y="1235.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="616.6" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="613.6" y="1219.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="616.6" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1146638280.&lt;init&gt; (3 samples, 0.77%)</title><rect x="616.6" y="1251.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="619.6" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.26%)</title><rect x="625.7" y="1299.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="628.7" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.26%)</title><rect x="625.7" y="1283.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="628.7" y="1294.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.26%)</title><rect x="625.7" y="1267.0" width="3.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="628.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (3 samples, 0.77%)</title><rect x="628.7" y="1299.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="631.7" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.26%)</title><rect x="637.7" y="1331.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="640.7" y="1342.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="637.7" y="1315.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="640.7" y="1326.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="637.7" y="1299.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="640.7" y="1310.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="637.7" y="1283.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="640.7" y="1294.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.26%)</title><rect x="637.7" y="1267.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="640.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 3.58%)</title><rect x="640.7" y="1331.0" width="42.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="643.7" y="1342.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 3.58%)</title><rect x="640.7" y="1315.0" width="42.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="643.7" y="1326.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.51%)</title><rect x="670.9" y="1299.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="673.9" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1842928914.accept (2 samples, 0.51%)</title><rect x="670.9" y="1283.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="673.9" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (2 samples, 0.51%)</title><rect x="670.9" y="1267.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="673.9" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.51%)</title><rect x="670.9" y="1251.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="673.9" y="1262.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.51%)</title><rect x="670.9" y="1235.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="673.9" y="1246.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.51%)</title><rect x="670.9" y="1219.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="673.9" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.51%)</title><rect x="677.0" y="1299.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="680.0" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 1.79%)</title><rect x="683.0" y="1347.0" width="21.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="686.0" y="1358.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 1.79%)</title><rect x="683.0" y="1331.0" width="21.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="686.0" y="1342.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.28%)</title><rect x="689.0" y="1315.0" width="15.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="692.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1842928914.accept (5 samples, 1.28%)</title><rect x="689.0" y="1299.0" width="15.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="692.0" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (5 samples, 1.28%)</title><rect x="689.0" y="1283.0" width="15.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="692.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (5 samples, 1.28%)</title><rect x="689.0" y="1267.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="692.0" y="1278.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 1.28%)</title><rect x="689.0" y="1251.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="692.0" y="1262.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 1.28%)</title><rect x="689.0" y="1235.0" width="15.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="692.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 0.51%)</title><rect x="704.1" y="1411.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="707.1" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.51%)</title><rect x="704.1" y="1395.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="707.1" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.26%)</title><rect x="707.1" y="1379.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="710.1" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.26%)</title><rect x="707.1" y="1363.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.1" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.26%)</title><rect x="707.1" y="1347.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="710.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.26%)</title><rect x="707.1" y="1331.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="710.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.26%)</title><rect x="710.2" y="1459.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="713.2" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.26%)</title><rect x="710.2" y="1443.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="713.2" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.26%)</title><rect x="710.2" y="1427.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="713.2" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.clean (1 samples, 0.26%)</title><rect x="710.2" y="1411.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="713.2" y="1422.0"></text>
</g>
<g>
<title>start_thread (158 samples, 40.41%)</title><rect x="713.2" y="1459.0" width="476.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="716.2" y="1470.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (158 samples, 40.41%)</title><rect x="713.2" y="1443.0" width="476.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="716.2" y="1454.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 2.81%)</title><rect x="713.2" y="1427.0" width="33.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="716.2" y="1438.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 2.81%)</title><rect x="713.2" y="1411.0" width="33.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="716.2" y="1422.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 2.81%)</title><rect x="713.2" y="1395.0" width="33.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="716.2" y="1406.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (11 samples, 2.81%)</title><rect x="713.2" y="1379.0" width="33.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="716.2" y="1390.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 1.79%)</title><rect x="719.2" y="1363.0" width="21.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="722.2" y="1374.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.51%)</title><rect x="734.3" y="1347.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="737.3" y="1358.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.51%)</title><rect x="740.3" y="1363.0" width="6.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="743.3" y="1374.0"></text>
</g>
<g>
<title>JavaThread::run() (145 samples, 37.08%)</title><rect x="746.4" y="1427.0" width="437.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="749.4" y="1438.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (145 samples, 37.08%)</title><rect x="746.4" y="1411.0" width="437.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="749.4" y="1422.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (145 samples, 37.08%)</title><rect x="746.4" y="1395.0" width="437.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="749.4" y="1406.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (144 samples, 36.83%)</title><rect x="746.4" y="1379.0" width="434.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="749.4" y="1390.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (141 samples, 36.06%)</title><rect x="746.4" y="1363.0" width="425.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="749.4" y="1374.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (141 samples, 36.06%)</title><rect x="746.4" y="1347.0" width="425.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="749.4" y="1358.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (67 samples, 17.14%)</title><rect x="746.4" y="1331.0" width="202.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="749.4" y="1342.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.26%)</title><rect x="746.4" y="1315.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="749.4" y="1326.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.26%)</title><rect x="746.4" y="1299.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="749.4" y="1310.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 1.02%)</title><rect x="749.4" y="1315.0" width="12.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="752.4" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.77%)</title><rect x="749.4" y="1299.0" width="9.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="752.4" y="1310.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.51%)</title><rect x="752.4" y="1283.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="755.4" y="1294.0"></text>
</g>
<g>
<title>Label::patch_instructions(MacroAssembler*) (1 samples, 0.26%)</title><rect x="758.4" y="1299.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="761.4" y="1310.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 1.53%)</title><rect x="761.5" y="1315.0" width="18.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="764.5" y="1326.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.26%)</title><rect x="761.5" y="1299.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="764.5" y="1310.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.28%)</title><rect x="764.5" y="1299.0" width="15.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="767.5" y="1310.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.77%)</title><rect x="764.5" y="1283.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.5" y="1294.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.51%)</title><rect x="773.5" y="1283.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="776.5" y="1294.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.51%)</title><rect x="773.5" y="1267.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="776.5" y="1278.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.26%)</title><rect x="773.5" y="1251.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="776.5" y="1262.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.26%)</title><rect x="773.5" y="1235.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="776.5" y="1246.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.26%)</title><rect x="773.5" y="1219.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="776.5" y="1230.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.26%)</title><rect x="773.5" y="1203.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="776.5" y="1214.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.26%)</title><rect x="773.5" y="1187.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="776.5" y="1198.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.26%)</title><rect x="773.5" y="1171.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="776.5" y="1182.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.26%)</title><rect x="773.5" y="1155.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="776.5" y="1166.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.26%)</title><rect x="773.5" y="1139.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="776.5" y="1150.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.26%)</title><rect x="773.5" y="1123.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="776.5" y="1134.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.26%)</title><rect x="776.5" y="1251.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="779.5" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.02%)</title><rect x="779.6" y="1315.0" width="12.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="782.6" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.02%)</title><rect x="779.6" y="1299.0" width="12.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="782.6" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.26%)</title><rect x="779.6" y="1283.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="782.6" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.51%)</title><rect x="782.6" y="1283.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="785.6" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.26%)</title><rect x="782.6" y="1267.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="785.6" y="1278.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.26%)</title><rect x="782.6" y="1251.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="785.6" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.26%)</title><rect x="785.6" y="1267.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="788.6" y="1278.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.26%)</title><rect x="788.6" y="1283.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="791.6" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.26%)</title><rect x="788.6" y="1267.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="791.6" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (52 samples, 13.30%)</title><rect x="791.6" y="1315.0" width="157.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="794.6" y="1326.0">PhaseChaitin::Regist..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.26%)</title><rect x="791.6" y="1299.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="794.6" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 1.02%)</title><rect x="794.7" y="1299.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="797.7" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="797.7" y="1283.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="800.7" y="1294.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.51%)</title><rect x="800.7" y="1283.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="803.7" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.77%)</title><rect x="806.7" y="1299.0" width="9.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="809.7" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="806.7" y="1283.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="809.7" y="1294.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.51%)</title><rect x="809.7" y="1283.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="812.7" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.28%)</title><rect x="815.8" y="1299.0" width="15.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="818.8" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 2.05%)</title><rect x="830.9" y="1299.0" width="24.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="833.9" y="1310.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.26%)</title><rect x="839.9" y="1283.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="842.9" y="1294.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="842.9" y="1283.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="845.9" y="1294.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.26%)</title><rect x="846.0" y="1283.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="849.0" y="1294.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.51%)</title><rect x="849.0" y="1283.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="852.0" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.26%)</title><rect x="855.0" y="1299.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="858.0" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.51%)</title><rect x="858.0" y="1299.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="861.0" y="1310.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.26%)</title><rect x="858.0" y="1283.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="861.0" y="1294.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.26%)</title><rect x="861.0" y="1283.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="864.0" y="1294.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.26%)</title><rect x="861.0" y="1267.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="864.0" y="1278.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.26%)</title><rect x="861.0" y="1251.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="864.0" y="1262.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.26%)</title><rect x="861.0" y="1235.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="864.0" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.77%)</title><rect x="864.1" y="1299.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="867.1" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.51%)</title><rect x="867.1" y="1283.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="870.1" y="1294.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (11 samples, 2.81%)</title><rect x="873.1" y="1299.0" width="33.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="876.1" y="1310.0">Ph..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.26%)</title><rect x="873.1" y="1283.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="876.1" y="1294.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.26%)</title><rect x="873.1" y="1267.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="876.1" y="1278.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.26%)</title><rect x="873.1" y="1251.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="876.1" y="1262.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (10 samples, 2.56%)</title><rect x="876.1" y="1283.0" width="30.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="879.1" y="1294.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (10 samples, 2.56%)</title><rect x="876.1" y="1267.0" width="30.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="879.1" y="1278.0">Ph..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.77%)</title><rect x="876.1" y="1251.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="879.1" y="1262.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (7 samples, 1.79%)</title><rect x="885.2" y="1251.0" width="21.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="888.2" y="1262.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="903.3" y="1235.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="906.3" y="1246.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.26%)</title><rect x="906.3" y="1299.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="909.3" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.51%)</title><rect x="909.3" y="1299.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="912.3" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.26%)</title><rect x="915.4" y="1299.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="918.4" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="915.4" y="1283.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="918.4" y="1294.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.51%)</title><rect x="918.4" y="1299.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="921.4" y="1310.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.26%)</title><rect x="918.4" y="1283.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.4" y="1294.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.26%)</title><rect x="921.4" y="1283.0" width="3.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="924.4" y="1294.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 1.79%)</title><rect x="924.4" y="1299.0" width="21.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="927.4" y="1310.0">P..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.26%)</title><rect x="933.5" y="1283.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="936.5" y="1294.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.77%)</title><rect x="936.5" y="1283.0" width="9.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="939.5" y="1294.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.26%)</title><rect x="945.5" y="1299.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="948.5" y="1310.0"></text>
</g>
<g>
<title>Compile::Optimize() (66 samples, 16.88%)</title><rect x="948.6" y="1331.0" width="199.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="951.6" y="1342.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.26%)</title><rect x="948.6" y="1315.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="951.6" y="1326.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.26%)</title><rect x="948.6" y="1299.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="951.6" y="1310.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.26%)</title><rect x="948.6" y="1283.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="951.6" y="1294.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.26%)</title><rect x="948.6" y="1267.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="951.6" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 1.02%)</title><rect x="951.6" y="1315.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="954.6" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 1.02%)</title><rect x="951.6" y="1299.0" width="12.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="954.6" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.26%)</title><rect x="951.6" y="1283.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="954.6" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.26%)</title><rect x="951.6" y="1267.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="954.6" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.26%)</title><rect x="951.6" y="1251.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="954.6" y="1262.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.26%)</title><rect x="951.6" y="1235.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="954.6" y="1246.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.26%)</title><rect x="951.6" y="1219.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="954.6" y="1230.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.26%)</title><rect x="951.6" y="1203.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="954.6" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.77%)</title><rect x="954.6" y="1283.0" width="9.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="957.6" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.51%)</title><rect x="954.6" y="1267.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="957.6" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.51%)</title><rect x="954.6" y="1251.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="957.6" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.26%)</title><rect x="954.6" y="1235.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="957.6" y="1246.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.26%)</title><rect x="954.6" y="1219.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="957.6" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="1235.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.6" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="1219.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="960.6" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="1203.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="960.6" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="1187.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="960.6" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="1171.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="960.6" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="1155.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="960.6" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="1139.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="960.6" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="1123.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.6" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="1107.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.6" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="1091.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="960.6" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="1075.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.6" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="1059.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.6" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="1043.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.6" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="1027.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="960.6" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="1011.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="995.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="960.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="979.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="960.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="963.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="960.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="947.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="960.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="931.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="915.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="960.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="899.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="960.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="883.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="960.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="867.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="851.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="835.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="819.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="960.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="803.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="960.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="787.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="960.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="771.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="755.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="739.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="960.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="723.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="707.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="691.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="960.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="675.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="960.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="659.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="960.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="643.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="960.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="627.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="611.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="960.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="595.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="579.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="960.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="563.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="547.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.6" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="531.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="515.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="960.6" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="499.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.6" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="483.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.6" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="467.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="960.6" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="451.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="960.6" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="435.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.6" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="419.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.6" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="403.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="960.6" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="387.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.6" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="371.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="960.6" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="355.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.6" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="339.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.6" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="323.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.6" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="307.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="960.6" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="291.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="960.6" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="275.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="960.6" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="259.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="960.6" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="243.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.6" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="227.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="960.6" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="211.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="960.6" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="195.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.6" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="179.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="960.6" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="163.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="960.6" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="147.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.6" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="131.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.6" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="115.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.6" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="99.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="960.6" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="83.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="960.6" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="67.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="960.6" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.26%)</title><rect x="957.6" y="51.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.6" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.26%)</title><rect x="957.6" y="35.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.6" y="46.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.26%)</title><rect x="960.6" y="1267.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="963.6" y="1278.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.51%)</title><rect x="963.7" y="1315.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="966.7" y="1326.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.51%)</title><rect x="963.7" y="1299.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="966.7" y="1310.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (2 samples, 0.51%)</title><rect x="963.7" y="1283.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="966.7" y="1294.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.26%)</title><rect x="963.7" y="1267.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="966.7" y="1278.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.26%)</title><rect x="963.7" y="1251.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="966.7" y="1262.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.26%)</title><rect x="963.7" y="1235.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="966.7" y="1246.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.26%)</title><rect x="963.7" y="1219.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="966.7" y="1230.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_boxed_value_offset(int) const (1 samples, 0.26%)</title><rect x="963.7" y="1203.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="966.7" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.26%)</title><rect x="966.7" y="1267.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="969.7" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (49 samples, 12.53%)</title><rect x="969.7" y="1315.0" width="147.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="972.7" y="1326.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.26%)</title><rect x="969.7" y="1299.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="972.7" y="1310.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.26%)</title><rect x="969.7" y="1283.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="972.7" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.26%)</title><rect x="969.7" y="1267.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.7" y="1278.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.26%)</title><rect x="969.7" y="1251.0" width="3.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="972.7" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.77%)</title><rect x="972.7" y="1299.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="975.7" y="1310.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.26%)</title><rect x="978.7" y="1283.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="981.7" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.26%)</title><rect x="981.8" y="1299.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="984.8" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (38 samples, 9.72%)</title><rect x="984.8" y="1299.0" width="114.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="987.8" y="1310.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (37 samples, 9.46%)</title><rect x="987.8" y="1283.0" width="111.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="990.8" y="1294.0">PhaseIdealLoo..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.26%)</title><rect x="990.8" y="1267.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="993.8" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.26%)</title><rect x="993.8" y="1267.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="996.8" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (34 samples, 8.70%)</title><rect x="996.9" y="1267.0" width="102.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="999.9" y="1278.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.26%)</title><rect x="1084.4" y="1251.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1087.4" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.26%)</title><rect x="1084.4" y="1235.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.4" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.26%)</title><rect x="1084.4" y="1219.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.4" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 1.02%)</title><rect x="1087.4" y="1251.0" width="12.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.4" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.26%)</title><rect x="1099.5" y="1299.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.77%)</title><rect x="1102.5" y="1299.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.26%)</title><rect x="1102.5" y="1283.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.5" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_region(Node*, Node*) (1 samples, 0.26%)</title><rect x="1102.5" y="1267.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.5" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.26%)</title><rect x="1102.5" y="1251.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.5" y="1262.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.26%)</title><rect x="1102.5" y="1235.0" width="3.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1105.5" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.51%)</title><rect x="1105.5" y="1283.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.5" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.51%)</title><rect x="1105.5" y="1267.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1108.5" y="1278.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.26%)</title><rect x="1105.5" y="1251.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.5" y="1262.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.26%)</title><rect x="1105.5" y="1235.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.5" y="1246.0"></text>
</g>
<g>
<title>NodeHash::hash_find(Node const*) (1 samples, 0.26%)</title><rect x="1108.5" y="1251.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.5" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.26%)</title><rect x="1111.5" y="1299.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.26%)</title><rect x="1111.5" y="1283.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.5" y="1294.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1111.5" y="1267.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.5" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.26%)</title><rect x="1111.5" y="1251.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.5" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.26%)</title><rect x="1111.5" y="1235.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.5" y="1246.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.26%)</title><rect x="1111.5" y="1219.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.5" y="1230.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.26%)</title><rect x="1114.6" y="1299.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.6" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 2.56%)</title><rect x="1117.6" y="1315.0" width="30.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.6" y="1326.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 2.56%)</title><rect x="1117.6" y="1299.0" width="30.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.6" y="1310.0">Ph..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1120.6" y="1283.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.6" y="1294.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1120.6" y="1267.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.6" y="1278.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1123.6" y="1283.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.6" y="1294.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.26%)</title><rect x="1126.6" y="1283.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.6" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.26%)</title><rect x="1129.6" y="1283.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.6" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.26%)</title><rect x="1129.6" y="1267.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.6" y="1278.0"></text>
</g>
<g>
<title>Node::has_special_unique_user() const (1 samples, 0.26%)</title><rect x="1129.6" y="1251.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.6" y="1262.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.26%)</title><rect x="1132.7" y="1283.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.7" y="1294.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.26%)</title><rect x="1132.7" y="1267.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.7" y="1278.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.51%)</title><rect x="1135.7" y="1283.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.7" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.26%)</title><rect x="1135.7" y="1267.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.7" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.26%)</title><rect x="1135.7" y="1251.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.7" y="1262.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.26%)</title><rect x="1135.7" y="1235.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.7" y="1246.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.26%)</title><rect x="1138.7" y="1267.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.7" y="1278.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.51%)</title><rect x="1141.7" y="1283.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.7" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.26%)</title><rect x="1141.7" y="1267.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.7" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1141.7" y="1251.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.7" y="1262.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.26%)</title><rect x="1141.7" y="1235.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.7" y="1246.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.26%)</title><rect x="1141.7" y="1219.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.7" y="1230.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1144.7" y="1267.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.7" y="1278.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.26%)</title><rect x="1144.7" y="1251.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.7" y="1262.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.26%)</title><rect x="1144.7" y="1235.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.7" y="1246.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.26%)</title><rect x="1144.7" y="1219.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.7" y="1230.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.26%)</title><rect x="1144.7" y="1203.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.7" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.05%)</title><rect x="1147.7" y="1331.0" width="24.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.7" y="1342.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.05%)</title><rect x="1147.7" y="1315.0" width="24.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.7" y="1326.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.05%)</title><rect x="1147.7" y="1299.0" width="24.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.7" y="1310.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.05%)</title><rect x="1147.7" y="1283.0" width="24.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.7" y="1294.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 2.05%)</title><rect x="1147.7" y="1267.0" width="24.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.7" y="1278.0">P..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 2.05%)</title><rect x="1147.7" y="1251.0" width="24.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.7" y="1262.0">P..</text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1147.7" y="1235.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.7" y="1246.0"></text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.26%)</title><rect x="1147.7" y="1219.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.7" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.53%)</title><rect x="1150.8" y="1235.0" width="18.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.8" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.53%)</title><rect x="1150.8" y="1219.0" width="18.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.8" y="1230.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.26%)</title><rect x="1150.8" y="1203.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.8" y="1214.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.26%)</title><rect x="1150.8" y="1187.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.8" y="1198.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.26%)</title><rect x="1150.8" y="1171.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.8" y="1182.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.26%)</title><rect x="1150.8" y="1155.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.8" y="1166.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.26%)</title><rect x="1150.8" y="1139.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.28%)</title><rect x="1153.8" y="1203.0" width="15.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.28%)</title><rect x="1153.8" y="1187.0" width="15.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.28%)</title><rect x="1153.8" y="1171.0" width="15.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.28%)</title><rect x="1153.8" y="1155.0" width="15.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.8" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1153.8" y="1139.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.8" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1153.8" y="1123.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.51%)</title><rect x="1153.8" y="1107.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.51%)</title><rect x="1153.8" y="1091.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.51%)</title><rect x="1153.8" y="1075.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.51%)</title><rect x="1153.8" y="1059.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.8" y="1070.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.26%)</title><rect x="1153.8" y="1043.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.8" y="1054.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.26%)</title><rect x="1153.8" y="1027.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.8" y="1038.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.26%)</title><rect x="1153.8" y="1011.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.8" y="1022.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.26%)</title><rect x="1153.8" y="995.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.8" y="1006.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.26%)</title><rect x="1153.8" y="979.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.8" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1156.8" y="1043.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.8" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1156.8" y="1027.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1156.8" y="1011.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1156.8" y="995.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1156.8" y="979.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1156.8" y="963.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.8" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1156.8" y="947.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.8" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1156.8" y="931.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1156.8" y="915.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1156.8" y="899.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1156.8" y="883.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1156.8" y="867.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.8" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1156.8" y="851.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1156.8" y="835.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1156.8" y="819.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1156.8" y="803.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1156.8" y="787.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1156.8" y="771.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.8" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1156.8" y="755.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1156.8" y="739.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1156.8" y="723.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1156.8" y="707.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1156.8" y="691.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.26%)</title><rect x="1156.8" y="675.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.26%)</title><rect x="1156.8" y="659.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.8" y="670.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.26%)</title><rect x="1156.8" y="643.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.8" y="654.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.26%)</title><rect x="1156.8" y="627.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.8" y="638.0"></text>
</g>
<g>
<title>DecodeNarrowPtrNode::DecodeNarrowPtrNode(Node*, Type const*) (1 samples, 0.26%)</title><rect x="1156.8" y="611.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.8" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.77%)</title><rect x="1159.8" y="1139.0" width="9.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.8" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.77%)</title><rect x="1159.8" y="1123.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.8" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.77%)</title><rect x="1159.8" y="1107.0" width="9.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.77%)</title><rect x="1159.8" y="1091.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.77%)</title><rect x="1159.8" y="1075.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.77%)</title><rect x="1159.8" y="1059.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.77%)</title><rect x="1159.8" y="1043.0" width="9.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.8" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.77%)</title><rect x="1159.8" y="1027.0" width="9.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.8" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.77%)</title><rect x="1159.8" y="1011.0" width="9.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.77%)</title><rect x="1159.8" y="995.0" width="9.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.77%)</title><rect x="1159.8" y="979.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.77%)</title><rect x="1159.8" y="963.0" width="9.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.77%)</title><rect x="1159.8" y="947.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.8" y="958.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1159.8" y="931.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.8" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.26%)</title><rect x="1159.8" y="915.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.8" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.26%)</title><rect x="1159.8" y="899.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.8" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.26%)</title><rect x="1159.8" y="883.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.8" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.26%)</title><rect x="1159.8" y="867.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.8" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1159.8" y="851.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.8" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1159.8" y="835.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.8" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::store_local_object(int) (1 samples, 0.26%)</title><rect x="1159.8" y="819.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.8" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1162.8" y="931.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.8" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1162.8" y="915.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.51%)</title><rect x="1162.8" y="899.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.51%)</title><rect x="1162.8" y="883.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.51%)</title><rect x="1162.8" y="867.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.51%)</title><rect x="1162.8" y="851.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.8" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1162.8" y="835.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.8" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1162.8" y="819.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.51%)</title><rect x="1162.8" y="803.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.51%)</title><rect x="1162.8" y="787.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.51%)</title><rect x="1162.8" y="771.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.51%)</title><rect x="1162.8" y="755.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.8" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1162.8" y="739.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.8" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1162.8" y="723.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.51%)</title><rect x="1162.8" y="707.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.51%)</title><rect x="1162.8" y="691.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.51%)</title><rect x="1162.8" y="675.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.51%)</title><rect x="1162.8" y="659.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.8" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1162.8" y="643.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.8" y="654.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1162.8" y="627.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.8" y="638.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.26%)</title><rect x="1162.8" y="611.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.8" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.26%)</title><rect x="1162.8" y="595.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.8" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.26%)</title><rect x="1162.8" y="579.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.8" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.26%)</title><rect x="1162.8" y="563.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.8" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1162.8" y="547.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.8" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1162.8" y="531.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.8" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::compute_exceptions() (1 samples, 0.26%)</title><rect x="1162.8" y="515.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.8" y="526.0"></text>
</g>
<g>
<title>ciExceptionHandler::catch_klass() (1 samples, 0.26%)</title><rect x="1162.8" y="499.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.8" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1162.8" y="483.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.8" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1162.8" y="467.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.8" y="478.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.26%)</title><rect x="1162.8" y="451.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.8" y="462.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.26%)</title><rect x="1162.8" y="435.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.8" y="446.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.26%)</title><rect x="1162.8" y="419.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.9" y="643.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.9" y="627.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1165.9" y="611.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1165.9" y="595.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1165.9" y="579.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1165.9" y="563.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.9" y="547.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.9" y="531.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1165.9" y="515.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1165.9" y="499.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1165.9" y="483.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.26%)</title><rect x="1165.9" y="467.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.26%)</title><rect x="1165.9" y="451.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.9" y="462.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.26%)</title><rect x="1165.9" y="435.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.9" y="446.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.26%)</title><rect x="1165.9" y="419.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.9" y="430.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.26%)</title><rect x="1165.9" y="403.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.9" y="414.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.26%)</title><rect x="1165.9" y="387.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.9" y="398.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.26%)</title><rect x="1165.9" y="371.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.9" y="382.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.26%)</title><rect x="1165.9" y="355.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.9" y="366.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.26%)</title><rect x="1165.9" y="339.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.9" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.9" y="1235.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.9" y="1246.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.26%)</title><rect x="1168.9" y="1219.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.9" y="1230.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.26%)</title><rect x="1168.9" y="1203.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="1214.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.26%)</title><rect x="1168.9" y="1187.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="1198.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.26%)</title><rect x="1168.9" y="1171.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.9" y="1182.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.51%)</title><rect x="1171.9" y="1363.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.9" y="1374.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.51%)</title><rect x="1171.9" y="1347.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.9" y="1358.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.51%)</title><rect x="1171.9" y="1331.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.9" y="1342.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.51%)</title><rect x="1171.9" y="1315.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.9" y="1326.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.26%)</title><rect x="1171.9" y="1299.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.9" y="1310.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.26%)</title><rect x="1171.9" y="1283.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.9" y="1294.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.26%)</title><rect x="1171.9" y="1267.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.9" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.26%)</title><rect x="1171.9" y="1251.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.9" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.26%)</title><rect x="1171.9" y="1235.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.9" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.26%)</title><rect x="1171.9" y="1219.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.9" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.26%)</title><rect x="1171.9" y="1203.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.9" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.26%)</title><rect x="1171.9" y="1187.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.9" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.26%)</title><rect x="1171.9" y="1171.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.9" y="1182.0"></text>
</g>
<g>
<title>BlockBegin::BlockBegin(int) (1 samples, 0.26%)</title><rect x="1171.9" y="1155.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.9" y="1166.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.26%)</title><rect x="1174.9" y="1299.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.9" y="1310.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.26%)</title><rect x="1174.9" y="1283.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="1294.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.26%)</title><rect x="1174.9" y="1267.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="1278.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.26%)</title><rect x="1174.9" y="1251.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.9" y="1262.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.26%)</title><rect x="1174.9" y="1235.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.9" y="1246.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.26%)</title><rect x="1174.9" y="1219.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.9" y="1230.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.26%)</title><rect x="1174.9" y="1203.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="1214.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.26%)</title><rect x="1177.9" y="1363.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="1374.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.26%)</title><rect x="1180.9" y="1379.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="1390.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.26%)</title><rect x="1180.9" y="1363.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="1374.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.26%)</title><rect x="1184.0" y="1427.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="1438.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.26%)</title><rect x="1184.0" y="1411.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="1422.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.26%)</title><rect x="1184.0" y="1395.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="1406.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.26%)</title><rect x="1187.0" y="1427.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.0" y="1438.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.26%)</title><rect x="1187.0" y="1411.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.0" y="1422.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.26%)</title><rect x="1187.0" y="1395.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.0" y="1406.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (1 samples, 0.26%)</title><rect x="1187.0" y="1379.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.0" y="1390.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.26%)</title><rect x="1187.0" y="1363.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.0" y="1374.0"></text>
</g>
</g>
</svg>
