<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (1,145 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>__memcpy_sse2 (1 samples, 0.09%)</title><rect x="10.0" y="1315.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (258 samples, 22.53%)</title><rect x="11.0" y="1315.0" width="265.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1326.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (257 samples, 22.45%)</title><rect x="12.1" y="1299.0" width="264.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.1" y="1310.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (6 samples, 0.52%)</title><rect x="12.1" y="1283.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.1" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.52%)</title><rect x="12.1" y="1267.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.1" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1585188369.accept (5 samples, 0.44%)</title><rect x="13.1" y="1251.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.1" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.44%)</title><rect x="13.1" y="1235.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.44%)</title><rect x="13.1" y="1219.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.1" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.44%)</title><rect x="13.1" y="1203.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.26%)</title><rect x="18.2" y="1283.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.2" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.26%)</title><rect x="18.2" y="1267.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.2" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.26%)</title><rect x="18.2" y="1251.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.2" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="18.2" y="1235.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.2" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.09%)</title><rect x="18.2" y="1219.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.2" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="19.3" y="1219.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.3" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="19.3" y="1203.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.3" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="19.3" y="1187.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.3" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="20.3" y="1171.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.3" y="1182.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="20.3" y="1155.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="23.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (202 samples, 17.64%)</title><rect x="21.3" y="1283.0" width="208.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.3" y="1294.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1576067393.accept (193 samples, 16.86%)</title><rect x="21.3" y="1267.0" width="198.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.3" y="1278.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$67 (193 samples, 16.86%)</title><rect x="21.3" y="1251.0" width="198.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.3" y="1262.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (158 samples, 13.80%)</title><rect x="21.3" y="1235.0" width="162.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.3" y="1246.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (158 samples, 13.80%)</title><rect x="21.3" y="1219.0" width="162.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.3" y="1230.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (158 samples, 13.80%)</title><rect x="21.3" y="1203.0" width="162.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.3" y="1214.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (158 samples, 13.80%)</title><rect x="21.3" y="1187.0" width="162.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.3" y="1198.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (158 samples, 13.80%)</title><rect x="21.3" y="1171.0" width="162.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.3" y="1182.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (158 samples, 13.80%)</title><rect x="21.3" y="1155.0" width="162.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.3" y="1166.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (112 samples, 9.78%)</title><rect x="21.3" y="1139.0" width="115.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.3" y="1150.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (18 samples, 1.57%)</title><rect x="21.3" y="1123.0" width="18.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (18 samples, 1.57%)</title><rect x="21.3" y="1107.0" width="18.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (11 samples, 0.96%)</title><rect x="28.6" y="1091.0" width="11.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (10 samples, 0.87%)</title><rect x="29.6" y="1075.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.87%)</title><rect x="39.9" y="1123.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (10 samples, 0.87%)</title><rect x="39.9" y="1107.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.26%)</title><rect x="39.9" y="1091.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="42.9" y="1102.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.26%)</title><rect x="39.9" y="1075.0" width="3.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="42.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (7 samples, 0.61%)</title><rect x="43.0" y="1091.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (84 samples, 7.34%)</title><rect x="50.2" y="1123.0" width="86.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.2" y="1134.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (84 samples, 7.34%)</title><rect x="50.2" y="1107.0" width="86.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.2" y="1118.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (81 samples, 7.07%)</title><rect x="52.3" y="1091.0" width="83.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.3" y="1102.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (81 samples, 7.07%)</title><rect x="52.3" y="1075.0" width="83.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.3" y="1086.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (79 samples, 6.90%)</title><rect x="54.3" y="1059.0" width="81.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.3" y="1070.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Unpark (70 samples, 6.11%)</title><rect x="55.3" y="1043.0" width="72.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="58.3" y="1054.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="56.4" y="1027.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="59.4" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="57.4" y="1027.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="60.4" y="1038.0"></text>
</g>
<g>
<title>__pthread_cond_signal (41 samples, 3.58%)</title><rect x="59.5" y="1027.0" width="42.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="62.5" y="1038.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.26%)</title><rect x="101.7" y="1027.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="104.7" y="1038.0"></text>
</g>
<g>
<title>pthread_mutex_lock (22 samples, 1.92%)</title><rect x="104.8" y="1027.0" width="22.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="107.8" y="1038.0">p..</text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.52%)</title><rect x="127.5" y="1043.0" width="6.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="130.5" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="133.7" y="1043.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="136.7" y="1054.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="134.7" y="1043.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="137.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="135.7" y="1091.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="138.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="136.8" y="1139.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="139.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.09%)</title><rect x="136.8" y="1123.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="139.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.09%)</title><rect x="136.8" y="1107.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="139.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.61%)</title><rect x="137.8" y="1139.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="140.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (7 samples, 0.61%)</title><rect x="137.8" y="1123.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="140.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.61%)</title><rect x="137.8" y="1107.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="140.8" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="142.9" y="1091.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="145.9" y="1102.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="142.9" y="1075.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="145.9" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="142.9" y="1059.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="145.9" y="1070.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="142.9" y="1043.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="145.9" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="144.0" y="1091.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="147.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (38 samples, 3.32%)</title><rect x="145.0" y="1139.0" width="39.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="148.0" y="1150.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (38 samples, 3.32%)</title><rect x="145.0" y="1123.0" width="39.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="148.0" y="1134.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="145.0" y="1107.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (37 samples, 3.23%)</title><rect x="146.0" y="1107.0" width="38.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.0" y="1118.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="182.1" y="1091.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="185.1" y="1102.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="183.1" y="1091.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="186.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.17%)</title><rect x="184.2" y="1235.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="187.2" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.17%)</title><rect x="184.2" y="1219.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.2" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (6 samples, 0.52%)</title><rect x="186.2" y="1235.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.52%)</title><rect x="186.2" y="1219.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.2" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.52%)</title><rect x="186.2" y="1203.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="189.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (27 samples, 2.36%)</title><rect x="192.4" y="1235.0" width="27.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="195.4" y="1246.0">c..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="193.4" y="1219.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (24 samples, 2.10%)</title><rect x="194.5" y="1219.0" width="24.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="197.5" y="1230.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.17%)</title><rect x="215.1" y="1203.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.17%)</title><rect x="215.1" y="1187.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.1" y="1198.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="217.1" y="1203.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="220.1" y="1214.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="218.2" y="1203.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="221.2" y="1214.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="219.2" y="1219.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="222.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (9 samples, 0.79%)</title><rect x="220.2" y="1267.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (9 samples, 0.79%)</title><rect x="220.2" y="1251.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.79%)</title><rect x="220.2" y="1235.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.79%)</title><rect x="220.2" y="1219.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.2" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (9 samples, 0.79%)</title><rect x="220.2" y="1203.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.2" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (9 samples, 0.79%)</title><rect x="220.2" y="1187.0" width="9.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (46 samples, 4.02%)</title><rect x="229.5" y="1283.0" width="47.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.5" y="1294.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (46 samples, 4.02%)</title><rect x="229.5" y="1267.0" width="47.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.5" y="1278.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (25 samples, 2.18%)</title><rect x="230.5" y="1251.0" width="25.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.5" y="1262.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (3 samples, 0.26%)</title><rect x="230.5" y="1235.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="233.5" y="1246.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.09%)</title><rect x="230.5" y="1219.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="233.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (2 samples, 0.17%)</title><rect x="231.6" y="1219.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.6" y="1230.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.09%)</title><rect x="231.6" y="1203.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="234.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="232.6" y="1203.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (22 samples, 1.92%)</title><rect x="233.6" y="1235.0" width="22.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.6" y="1246.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (21 samples, 1.83%)</title><rect x="233.6" y="1219.0" width="21.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.6" y="1230.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (20 samples, 1.75%)</title><rect x="233.6" y="1203.0" width="20.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (20 samples, 1.75%)</title><rect x="233.6" y="1187.0" width="20.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.05%)</title><rect x="236.7" y="1171.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="239.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.52%)</title><rect x="242.9" y="1155.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.52%)</title><rect x="242.9" y="1139.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.52%)</title><rect x="242.9" y="1123.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.52%)</title><rect x="242.9" y="1107.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.52%)</title><rect x="242.9" y="1091.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="245.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.52%)</title><rect x="242.9" y="1075.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.52%)</title><rect x="242.9" y="1059.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (5 samples, 0.44%)</title><rect x="249.1" y="1171.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="252.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (5 samples, 0.44%)</title><rect x="249.1" y="1155.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.35%)</title><rect x="249.1" y="1139.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.35%)</title><rect x="249.1" y="1123.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.09%)</title><rect x="253.2" y="1139.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.2" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.09%)</title><rect x="253.2" y="1123.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="256.2" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays$ArrayList.toArray (1 samples, 0.09%)</title><rect x="253.2" y="1107.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="256.2" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="253.2" y="1091.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="256.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.09%)</title><rect x="254.2" y="1203.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="254.2" y="1187.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="254.2" y="1171.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="254.2" y="1155.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="254.2" y="1139.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.09%)</title><rect x="255.3" y="1219.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.79%)</title><rect x="256.3" y="1251.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.52%)</title><rect x="257.3" y="1235.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="260.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.35%)</title><rect x="257.3" y="1219.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.26%)</title><rect x="257.3" y="1203.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="260.3" y="1214.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="257.3" y="1187.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.3" y="1198.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="257.3" y="1171.0" width="1.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="260.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/364814632.accept (2 samples, 0.17%)</title><rect x="258.4" y="1187.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="261.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.17%)</title><rect x="258.4" y="1171.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.17%)</title><rect x="258.4" y="1155.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="258.4" y="1139.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="259.4" y="1139.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="259.4" y="1123.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="262.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.09%)</title><rect x="259.4" y="1107.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.4" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="260.4" y="1203.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.4" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="260.4" y="1187.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.4" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="260.4" y="1171.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.4" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="260.4" y="1155.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.4" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="260.4" y="1139.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.4" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="260.4" y="1123.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.4" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$79/1364048141.get (1 samples, 0.09%)</title><rect x="260.4" y="1107.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.17%)</title><rect x="261.5" y="1219.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="264.5" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.09%)</title><rect x="261.5" y="1203.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.5" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="261.5" y="1187.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="264.5" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="261.5" y="1171.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="264.5" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="261.5" y="1155.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.5" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="261.5" y="1139.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.5" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="261.5" y="1123.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.5" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="261.5" y="1107.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.5" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="261.5" y="1091.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.5" y="1102.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.09%)</title><rect x="261.5" y="1075.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.5" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="261.5" y="1059.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="264.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.09%)</title><rect x="261.5" y="1043.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.09%)</title><rect x="262.5" y="1203.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.5" y="1214.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="262.5" y="1187.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.5" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="262.5" y="1171.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="265.5" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="262.5" y="1155.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.09%)</title><rect x="262.5" y="1139.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.17%)</title><rect x="263.5" y="1235.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.09%)</title><rect x="263.5" y="1219.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.09%)</title><rect x="263.5" y="1203.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.09%)</title><rect x="264.6" y="1219.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.09%)</title><rect x="264.6" y="1203.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.52%)</title><rect x="265.6" y="1251.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.52%)</title><rect x="265.6" y="1235.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.52%)</title><rect x="265.6" y="1219.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (6 samples, 0.52%)</title><rect x="265.6" y="1203.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (6 samples, 0.52%)</title><rect x="265.6" y="1187.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (6 samples, 0.52%)</title><rect x="265.6" y="1171.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.6" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.26%)</title><rect x="265.6" y="1155.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="268.6" y="1166.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.26%)</title><rect x="265.6" y="1139.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="268.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.26%)</title><rect x="268.7" y="1155.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.26%)</title><rect x="268.7" y="1139.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.26%)</title><rect x="268.7" y="1123.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.7" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.26%)</title><rect x="268.7" y="1107.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="271.7" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="268.7" y="1091.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="271.7" y="1102.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="269.7" y="1091.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="272.7" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.09%)</title><rect x="270.7" y="1091.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="273.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.35%)</title><rect x="271.8" y="1251.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.35%)</title><rect x="271.8" y="1235.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.8" y="1246.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.17%)</title><rect x="271.8" y="1219.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/1794589092.accept (2 samples, 0.17%)</title><rect x="271.8" y="1203.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.17%)</title><rect x="271.8" y="1187.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="271.8" y="1171.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="271.8" y="1155.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="271.8" y="1139.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="271.8" y="1123.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="271.8" y="1107.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="272.8" y="1171.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="272.8" y="1155.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="272.8" y="1139.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="273.8" y="1219.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="273.8" y="1203.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="274.9" y="1219.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.9" y="1230.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="274.9" y="1203.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.9" y="1214.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="274.9" y="1187.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.9" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="274.9" y="1171.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="274.9" y="1155.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.9" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="274.9" y="1139.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.9" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.09%)</title><rect x="274.9" y="1123.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="275.9" y="1251.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="275.9" y="1235.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="275.9" y="1219.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/Thread.run (676 samples, 59.04%)</title><rect x="276.9" y="1315.0" width="696.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="279.9" y="1326.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (676 samples, 59.04%)</title><rect x="276.9" y="1299.0" width="696.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.9" y="1310.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (676 samples, 59.04%)</title><rect x="276.9" y="1283.0" width="696.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.9" y="1294.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/2094385904.run (410 samples, 35.81%)</title><rect x="285.2" y="1267.0" width="422.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.2" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lamb..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (410 samples, 35.81%)</title><rect x="285.2" y="1251.0" width="422.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.2" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambd..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (410 samples, 35.81%)</title><rect x="285.2" y="1235.0" width="422.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.2" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (406 samples, 35.46%)</title><rect x="285.2" y="1219.0" width="418.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.2" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.sc..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="290.3" y="1203.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="293.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (150 samples, 13.10%)</title><rect x="291.3" y="1203.0" width="154.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.3" y="1214.0">com/linecorp/decaton..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="295.5" y="1187.0" width="2.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="298.5" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.52%)</title><rect x="297.5" y="1187.0" width="6.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="300.5" y="1198.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.44%)</title><rect x="298.6" y="1171.0" width="5.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="301.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (138 samples, 12.05%)</title><rect x="303.7" y="1187.0" width="142.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="306.7" y="1198.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (138 samples, 12.05%)</title><rect x="303.7" y="1171.0" width="142.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.7" y="1182.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (136 samples, 11.88%)</title><rect x="303.7" y="1155.0" width="140.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.7" y="1166.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (136 samples, 11.88%)</title><rect x="303.7" y="1139.0" width="140.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.7" y="1150.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (136 samples, 11.88%)</title><rect x="303.7" y="1123.0" width="140.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="306.7" y="1134.0">com/fasterxml/jack..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="303.7" y="1107.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="306.7" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="303.7" y="1091.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="306.7" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="303.7" y="1075.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="306.7" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="303.7" y="1059.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="306.7" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="303.7" y="1043.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="306.7" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="303.7" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="306.7" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="303.7" y="1011.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="306.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (34 samples, 2.97%)</title><rect x="304.7" y="1107.0" width="35.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="307.7" y="1118.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 0.52%)</title><rect x="304.7" y="1091.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="307.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 0.52%)</title><rect x="304.7" y="1075.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="307.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 0.52%)</title><rect x="304.7" y="1059.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="307.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.52%)</title><rect x="304.7" y="1043.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="307.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.52%)</title><rect x="304.7" y="1027.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="307.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="309.9" y="1011.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="312.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (28 samples, 2.45%)</title><rect x="310.9" y="1091.0" width="28.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.9" y="1102.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (28 samples, 2.45%)</title><rect x="310.9" y="1075.0" width="28.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.9" y="1086.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (8 samples, 0.70%)</title><rect x="310.9" y="1059.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (8 samples, 0.70%)</title><rect x="310.9" y="1043.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="317.1" y="1027.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.09%)</title><rect x="318.1" y="1027.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (20 samples, 1.75%)</title><rect x="319.2" y="1059.0" width="20.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="322.2" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="319.2" y="1043.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="322.2" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="319.2" y="1027.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="322.2" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="319.2" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="322.2" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="319.2" y="995.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="322.2" y="1006.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="319.2" y="979.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="322.2" y="990.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.09%)</title><rect x="320.2" y="1011.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="323.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (18 samples, 1.57%)</title><rect x="321.2" y="1043.0" width="18.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (5 samples, 0.44%)</title><rect x="321.2" y="1027.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="324.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (9 samples, 0.79%)</title><rect x="326.4" y="1027.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="329.4" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="329.5" y="1011.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="332.5" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="330.5" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="333.5" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="330.5" y="979.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="333.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (3 samples, 0.26%)</title><rect x="331.5" y="1011.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="334.6" y="1011.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (4 samples, 0.35%)</title><rect x="335.7" y="1027.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="338.7" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="335.7" y="1011.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="338.7" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="335.7" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="338.7" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="335.7" y="979.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="338.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="336.7" y="1011.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="337.7" y="1011.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="340.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (90 samples, 7.86%)</title><rect x="339.8" y="1107.0" width="92.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="342.8" y="1118.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.44%)</title><rect x="339.8" y="1091.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="342.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.44%)</title><rect x="339.8" y="1075.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="342.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.44%)</title><rect x="339.8" y="1059.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="342.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (5 samples, 0.44%)</title><rect x="339.8" y="1043.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="342.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (5 samples, 0.44%)</title><rect x="339.8" y="1027.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="342.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (4 samples, 0.35%)</title><rect x="340.8" y="1011.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="343.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (4 samples, 0.35%)</title><rect x="340.8" y="995.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="343.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.35%)</title><rect x="344.9" y="1091.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="347.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.35%)</title><rect x="344.9" y="1075.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="347.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DatabindContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="348.0" y="1059.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.79%)</title><rect x="349.1" y="1091.0" width="9.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="352.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.52%)</title><rect x="352.1" y="1075.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="355.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.35%)</title><rect x="354.2" y="1059.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="357.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.35%)</title><rect x="354.2" y="1043.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="357.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="357.3" y="1027.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="360.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.35%)</title><rect x="358.3" y="1091.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="361.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.35%)</title><rect x="358.3" y="1075.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="361.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (4 samples, 0.35%)</title><rect x="358.3" y="1059.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (4 samples, 0.35%)</title><rect x="358.3" y="1043.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="361.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (4 samples, 0.35%)</title><rect x="358.3" y="1027.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="361.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DatabindContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="361.4" y="1011.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="364.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (68 samples, 5.94%)</title><rect x="362.5" y="1091.0" width="70.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="365.5" y="1102.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.48%)</title><rect x="362.5" y="1075.0" width="17.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="365.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.44%)</title><rect x="362.5" y="1059.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.44%)</title><rect x="362.5" y="1043.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.44%)</title><rect x="362.5" y="1027.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="365.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.70%)</title><rect x="367.6" y="1059.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="375.9" y="1059.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="378.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="375.9" y="1043.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="378.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.17%)</title><rect x="377.9" y="1059.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="380.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (51 samples, 4.45%)</title><rect x="380.0" y="1075.0" width="52.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="383.0" y="1086.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (51 samples, 4.45%)</title><rect x="380.0" y="1059.0" width="52.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="383.0" y="1070.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (50 samples, 4.37%)</title><rect x="381.0" y="1043.0" width="51.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="384.0" y="1054.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.14%)</title><rect x="395.4" y="1027.0" width="13.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="398.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.44%)</title><rect x="399.6" y="1011.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="402.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.44%)</title><rect x="399.6" y="995.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="402.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.44%)</title><rect x="399.6" y="979.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.44%)</title><rect x="399.6" y="963.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.35%)</title><rect x="404.7" y="1011.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="407.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.35%)</title><rect x="404.7" y="995.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="407.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.17%)</title><rect x="406.8" y="979.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="409.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.79%)</title><rect x="408.8" y="1027.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="411.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.70%)</title><rect x="409.9" y="1011.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="412.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.70%)</title><rect x="409.9" y="995.0" width="8.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="412.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.70%)</title><rect x="409.9" y="979.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="412.9" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.70%)</title><rect x="409.9" y="963.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="412.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (11 samples, 0.96%)</title><rect x="418.1" y="1027.0" width="11.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="421.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (11 samples, 0.96%)</title><rect x="418.1" y="1011.0" width="11.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="421.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (11 samples, 0.96%)</title><rect x="418.1" y="995.0" width="11.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="421.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (11 samples, 0.96%)</title><rect x="418.1" y="979.0" width="11.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="421.1" y="990.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 0.96%)</title><rect x="418.1" y="963.0" width="11.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.1" y="974.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (10 samples, 0.87%)</title><rect x="419.1" y="947.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="422.1" y="958.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (6 samples, 0.52%)</title><rect x="423.3" y="931.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="426.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.26%)</title><rect x="429.4" y="1027.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="432.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.26%)</title><rect x="429.4" y="1011.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="432.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.26%)</title><rect x="429.4" y="995.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="432.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.96%)</title><rect x="432.5" y="1107.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="435.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 0.96%)</title><rect x="432.5" y="1091.0" width="11.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="435.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 0.96%)</title><rect x="432.5" y="1075.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="435.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (11 samples, 0.96%)</title><rect x="432.5" y="1059.0" width="11.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="435.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 0.96%)</title><rect x="432.5" y="1043.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="435.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="442.8" y="1027.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="445.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (2 samples, 0.17%)</title><rect x="443.9" y="1155.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="446.9" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="443.9" y="1139.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="446.9" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="443.9" y="1123.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="446.9" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="443.9" y="1107.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="446.9" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="444.9" y="1091.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="447.9" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="444.9" y="1075.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="447.9" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="444.9" y="1059.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="447.9" y="1070.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="444.9" y="1043.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="447.9" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="444.9" y="1027.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="447.9" y="1038.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.09%)</title><rect x="444.9" y="1011.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="447.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (231 samples, 20.17%)</title><rect x="445.9" y="1203.0" width="238.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="448.9" y="1214.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (44 samples, 3.84%)</title><rect x="447.0" y="1187.0" width="45.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="450.0" y="1198.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="447.0" y="1171.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="450.0" y="1182.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (43 samples, 3.76%)</title><rect x="448.0" y="1171.0" width="44.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="451.0" y="1182.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (41 samples, 3.58%)</title><rect x="450.1" y="1155.0" width="42.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="453.1" y="1166.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.70%)</title><rect x="450.1" y="1139.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="453.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.70%)</title><rect x="450.1" y="1123.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="453.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.70%)</title><rect x="450.1" y="1107.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="453.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.70%)</title><rect x="450.1" y="1091.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="453.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 0.35%)</title><rect x="454.2" y="1075.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="457.2" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.35%)</title><rect x="454.2" y="1059.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="457.2" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (33 samples, 2.88%)</title><rect x="458.3" y="1139.0" width="34.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="461.3" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (27 samples, 2.36%)</title><rect x="464.5" y="1123.0" width="27.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="467.5" y="1134.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.44%)</title><rect x="487.2" y="1107.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.52%)</title><rect x="492.3" y="1187.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="495.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.44%)</title><rect x="493.3" y="1171.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="496.3" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.44%)</title><rect x="493.3" y="1155.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="496.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (118 samples, 10.31%)</title><rect x="498.5" y="1187.0" width="121.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="501.5" y="1198.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (118 samples, 10.31%)</title><rect x="498.5" y="1171.0" width="121.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="501.5" y="1182.0">com/linecorp/de..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="504.7" y="1155.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="507.7" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="504.7" y="1139.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="507.7" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="505.7" y="1155.0" width="2.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="508.7" y="1166.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="505.7" y="1139.0" width="2.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="508.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (35 samples, 3.06%)</title><rect x="507.8" y="1155.0" width="36.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="510.8" y="1166.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (22 samples, 1.92%)</title><rect x="512.9" y="1139.0" width="22.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="515.9" y="1150.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (21 samples, 1.83%)</title><rect x="513.9" y="1123.0" width="21.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="516.9" y="1134.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (14 samples, 1.22%)</title><rect x="516.0" y="1107.0" width="14.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="519.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (14 samples, 1.22%)</title><rect x="516.0" y="1091.0" width="14.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="519.0" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (14 samples, 1.22%)</title><rect x="516.0" y="1075.0" width="14.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="519.0" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.44%)</title><rect x="520.1" y="1059.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="523.1" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="520.1" y="1043.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="523.1" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.17%)</title><rect x="521.2" y="1043.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="524.2" y="1054.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="521.2" y="1027.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="524.2" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="521.2" y="1011.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="524.2" y="1022.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="522.2" y="1027.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="525.2" y="1038.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="522.2" y="1011.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="525.2" y="1022.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="522.2" y="995.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="525.2" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="523.2" y="1043.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="526.2" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="523.2" y="1027.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="526.2" y="1038.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="523.2" y="1011.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="526.2" y="1022.0"></text>
</g>
<g>
<title>frame::is_deoptimized_frame() const (1 samples, 0.09%)</title><rect x="524.3" y="1043.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="527.3" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.44%)</title><rect x="525.3" y="1059.0" width="5.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="528.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.17%)</title><rect x="530.4" y="1107.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="533.4" y="1118.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="532.5" y="1107.0" width="3.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="535.5" y="1118.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.17%)</title><rect x="535.6" y="1139.0" width="2.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="538.6" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.52%)</title><rect x="537.7" y="1139.0" width="6.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="540.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="543.8" y="1155.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="546.8" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.61%)</title><rect x="544.9" y="1155.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="547.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (3 samples, 0.26%)</title><rect x="544.9" y="1139.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="547.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.26%)</title><rect x="544.9" y="1123.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="547.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.26%)</title><rect x="544.9" y="1107.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="547.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.35%)</title><rect x="548.0" y="1139.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="551.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.35%)</title><rect x="548.0" y="1123.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="551.0" y="1134.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (66 samples, 5.76%)</title><rect x="552.1" y="1155.0" width="68.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="555.1" y="1166.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (66 samples, 5.76%)</title><rect x="552.1" y="1139.0" width="68.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="555.1" y="1150.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.44%)</title><rect x="552.1" y="1123.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="555.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.44%)</title><rect x="552.1" y="1107.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="555.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.44%)</title><rect x="552.1" y="1091.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="555.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.44%)</title><rect x="552.1" y="1075.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="555.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.09%)</title><rect x="556.2" y="1059.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="559.2" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="556.2" y="1043.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="559.2" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (61 samples, 5.33%)</title><rect x="557.2" y="1123.0" width="62.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="560.2" y="1134.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (35 samples, 3.06%)</title><rect x="584.0" y="1107.0" width="36.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="587.0" y="1118.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.26%)</title><rect x="584.0" y="1091.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="587.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.17%)</title><rect x="585.1" y="1075.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="588.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (32 samples, 2.79%)</title><rect x="587.1" y="1091.0" width="33.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="590.1" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.17%)</title><rect x="604.6" y="1075.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="607.6" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.96%)</title><rect x="606.7" y="1075.0" width="11.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="609.7" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="611.9" y="1059.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="614.9" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="612.9" y="1043.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="615.9" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="612.9" y="1027.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="615.9" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="612.9" y="1011.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="615.9" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="612.9" y="995.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="615.9" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="612.9" y="979.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="615.9" y="990.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="612.9" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="615.9" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="612.9" y="947.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="615.9" y="958.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="612.9" y="931.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="615.9" y="942.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="612.9" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="615.9" y="926.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="612.9" y="899.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="615.9" y="910.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.35%)</title><rect x="613.9" y="1059.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="616.9" y="1070.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.17%)</title><rect x="618.0" y="1075.0" width="2.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="621.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (38 samples, 3.32%)</title><rect x="620.1" y="1187.0" width="39.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="623.1" y="1198.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (38 samples, 3.32%)</title><rect x="620.1" y="1171.0" width="39.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.1" y="1182.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1222552541.process (18 samples, 1.57%)</title><rect x="623.2" y="1155.0" width="18.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="626.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (18 samples, 1.57%)</title><rect x="623.2" y="1139.0" width="18.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="626.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (17 samples, 1.48%)</title><rect x="623.2" y="1123.0" width="17.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="626.2" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="623.2" y="1107.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="626.2" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="623.2" y="1091.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="626.2" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.17%)</title><rect x="623.2" y="1075.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="626.2" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.17%)</title><rect x="623.2" y="1059.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="626.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.17%)</title><rect x="623.2" y="1043.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="626.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="624.2" y="1027.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="627.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.70%)</title><rect x="625.2" y="1107.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="628.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="626.3" y="1091.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="629.3" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="626.3" y="1075.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="629.3" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.52%)</title><rect x="627.3" y="1091.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="630.3" y="1102.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.52%)</title><rect x="627.3" y="1075.0" width="6.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="630.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="633.5" y="1107.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="636.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.52%)</title><rect x="634.5" y="1107.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="637.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="640.7" y="1123.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="643.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="640.7" y="1107.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="643.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="640.7" y="1091.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="643.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="641.7" y="1155.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="644.7" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.26%)</title><rect x="641.7" y="1139.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="644.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/558187323.linkToTargetMethod (2 samples, 0.17%)</title><rect x="644.8" y="1155.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="647.8" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (2 samples, 0.17%)</title><rect x="644.8" y="1139.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/131292313.get$Lambda (2 samples, 0.17%)</title><rect x="644.8" y="1123.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="647.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/131292313.&lt;init&gt; (2 samples, 0.17%)</title><rect x="644.8" y="1107.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.8" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="646.9" y="1155.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="649.9" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.44%)</title><rect x="647.9" y="1155.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="650.9" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.35%)</title><rect x="649.0" y="1139.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="652.0" y="1150.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.26%)</title><rect x="649.0" y="1123.0" width="3.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="652.0" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.09%)</title><rect x="652.0" y="1123.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="655.0" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="653.1" y="1155.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="656.1" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.44%)</title><rect x="654.1" y="1155.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="657.1" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="658.2" y="1139.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="661.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.09%)</title><rect x="659.3" y="1187.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="662.3" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="659.3" y="1171.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="662.3" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="659.3" y="1155.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="662.3" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="659.3" y="1139.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="662.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1770670545.linkToTargetMethod (1 samples, 0.09%)</title><rect x="660.3" y="1187.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.09%)</title><rect x="660.3" y="1171.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="663.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1389293549.get$Lambda (1 samples, 0.09%)</title><rect x="660.3" y="1155.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="663.3" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="660.3" y="1139.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="663.3" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="660.3" y="1123.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="663.3" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="660.3" y="1107.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="663.3" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="660.3" y="1091.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="663.3" y="1102.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="660.3" y="1075.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="663.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.92%)</title><rect x="661.3" y="1187.0" width="22.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="664.3" y="1198.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 1.92%)</title><rect x="661.3" y="1171.0" width="22.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="664.3" y="1182.0">j..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="666.5" y="1155.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="669.5" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="666.5" y="1139.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="669.5" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.70%)</title><rect x="667.5" y="1155.0" width="8.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="670.5" y="1166.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.61%)</title><rect x="668.5" y="1139.0" width="7.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="671.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.61%)</title><rect x="675.7" y="1155.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="678.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1389293549.accept (6 samples, 0.52%)</title><rect x="675.7" y="1139.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="678.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (6 samples, 0.52%)</title><rect x="675.7" y="1123.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="678.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (6 samples, 0.52%)</title><rect x="675.7" y="1107.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="678.7" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.52%)</title><rect x="675.7" y="1091.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="678.7" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.52%)</title><rect x="675.7" y="1075.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="678.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/513845823.accept (1 samples, 0.09%)</title><rect x="681.9" y="1139.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="684.9" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="681.9" y="1123.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="684.9" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="683.0" y="1155.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="686.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.14%)</title><rect x="684.0" y="1203.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="687.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.14%)</title><rect x="684.0" y="1187.0" width="13.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="687.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.09%)</title><rect x="685.0" y="1171.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="688.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.96%)</title><rect x="686.1" y="1171.0" width="11.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="689.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/1389293549.accept (11 samples, 0.96%)</title><rect x="686.1" y="1155.0" width="11.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="689.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (11 samples, 0.96%)</title><rect x="686.1" y="1139.0" width="11.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="689.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (11 samples, 0.96%)</title><rect x="686.1" y="1123.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="689.1" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (11 samples, 0.96%)</title><rect x="686.1" y="1107.0" width="11.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="689.1" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.create (11 samples, 0.96%)</title><rect x="686.1" y="1091.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="689.1" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.52%)</title><rect x="697.4" y="1203.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="700.4" y="1214.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.52%)</title><rect x="697.4" y="1187.0" width="6.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="700.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 0.35%)</title><rect x="703.6" y="1219.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="706.6" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="704.6" y="1203.0" width="2.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="707.6" y="1214.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="704.6" y="1187.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="707.6" y="1198.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="706.7" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="709.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.52%)</title><rect x="707.7" y="1267.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="710.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.52%)</title><rect x="707.7" y="1251.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="710.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.52%)</title><rect x="707.7" y="1235.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="710.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.52%)</title><rect x="707.7" y="1219.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="710.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (252 samples, 22.01%)</title><rect x="713.9" y="1267.0" width="259.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="716.9" y="1278.0">java/util/concurrent/ThreadPoolExec..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (251 samples, 21.92%)</title><rect x="714.9" y="1251.0" width="258.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="717.9" y="1262.0">java/util/concurrent/LinkedBlockin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (231 samples, 20.17%)</title><rect x="715.9" y="1235.0" width="238.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="718.9" y="1246.0">java/util/concurrent/locks/Abstr..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (37 samples, 3.23%)</title><rect x="729.3" y="1219.0" width="38.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="732.3" y="1230.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.61%)</title><rect x="767.5" y="1219.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="770.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.61%)</title><rect x="767.5" y="1203.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="770.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.61%)</title><rect x="767.5" y="1187.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="770.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.61%)</title><rect x="767.5" y="1171.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="770.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (174 samples, 15.20%)</title><rect x="774.7" y="1219.0" width="179.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="777.7" y="1230.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (173 samples, 15.11%)</title><rect x="775.7" y="1203.0" width="178.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="778.7" y="1214.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="779.8" y="1187.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="782.8" y="1198.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.17%)</title><rect x="780.9" y="1187.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="783.9" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="782.9" y="1187.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="785.9" y="1198.0"></text>
</g>
<g>
<title>Unsafe_Park (159 samples, 13.89%)</title><rect x="785.0" y="1187.0" width="163.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="788.0" y="1198.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="788.1" y="1171.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="791.1" y="1182.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.17%)</title><rect x="790.1" y="1171.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="793.1" y="1182.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 2.45%)</title><rect x="792.2" y="1171.0" width="28.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="795.2" y="1182.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.70%)</title><rect x="803.5" y="1155.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="806.5" y="1166.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="804.6" y="1139.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="807.6" y="1150.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="804.6" y="1123.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="807.6" y="1134.0"></text>
</g>
<g>
<title>Monitor::unlock() (4 samples, 0.35%)</title><rect x="805.6" y="1139.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="808.6" y="1150.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.17%)</title><rect x="809.7" y="1139.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="812.7" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.79%)</title><rect x="811.8" y="1155.0" width="9.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="814.8" y="1166.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (3 samples, 0.26%)</title><rect x="821.1" y="1171.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="824.1" y="1182.0"></text>
</g>
<g>
<title>_L_unlock_738 (2 samples, 0.17%)</title><rect x="824.1" y="1171.0" width="2.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="827.1" y="1182.0"></text>
</g>
<g>
<title>__lll_lock_wait (15 samples, 1.31%)</title><rect x="826.2" y="1171.0" width="15.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="829.2" y="1182.0"></text>
</g>
<g>
<title>__lll_unlock_wake (37 samples, 3.23%)</title><rect x="841.7" y="1171.0" width="38.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="844.7" y="1182.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (51 samples, 4.45%)</title><rect x="879.8" y="1171.0" width="52.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="882.8" y="1182.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (8 samples, 0.70%)</title><rect x="932.4" y="1171.0" width="8.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="935.4" y="1182.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="940.6" y="1171.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="943.6" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.35%)</title><rect x="941.6" y="1171.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="944.6" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="945.8" y="1171.0" width="2.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="948.8" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="947.8" y="1171.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="950.8" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.17%)</title><rect x="948.8" y="1187.0" width="2.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="951.8" y="1198.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.26%)</title><rect x="950.9" y="1187.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="953.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 1.66%)</title><rect x="954.0" y="1235.0" width="19.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="957.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 1.66%)</title><rect x="954.0" y="1219.0" width="19.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="957.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 1.66%)</title><rect x="954.0" y="1203.0" width="19.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="957.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 1.66%)</title><rect x="954.0" y="1187.0" width="19.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="957.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="973.6" y="1315.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="976.6" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="973.6" y="1299.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="976.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="973.6" y="1283.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="976.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="973.6" y="1267.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="976.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="973.6" y="1251.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="976.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="973.6" y="1235.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="976.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="973.6" y="1219.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="976.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="973.6" y="1203.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="976.6" y="1214.0"></text>
</g>
<g>
<title>start_thread (209 samples, 18.25%)</title><rect x="974.6" y="1315.0" width="215.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="977.6" y="1326.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (209 samples, 18.25%)</title><rect x="974.6" y="1299.0" width="215.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="977.6" y="1310.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.83%)</title><rect x="974.6" y="1283.0" width="21.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="977.6" y="1294.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.52%)</title><rect x="974.6" y="1267.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="977.6" y="1278.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.52%)</title><rect x="974.6" y="1251.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="977.6" y="1262.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.17%)</title><rect x="974.6" y="1235.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="977.6" y="1246.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.35%)</title><rect x="976.7" y="1235.0" width="4.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="979.7" y="1246.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.31%)</title><rect x="980.8" y="1267.0" width="15.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="983.8" y="1278.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.44%)</title><rect x="980.8" y="1251.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="983.8" y="1262.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="980.8" y="1235.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="983.8" y="1246.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="980.8" y="1219.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="983.8" y="1230.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.09%)</title><rect x="981.8" y="1235.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="984.8" y="1246.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.26%)</title><rect x="982.9" y="1235.0" width="3.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="985.9" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.35%)</title><rect x="985.9" y="1251.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="988.9" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="985.9" y="1235.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="988.9" y="1246.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="985.9" y="1219.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="988.9" y="1230.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="985.9" y="1203.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="988.9" y="1214.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="985.9" y="1187.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.9" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.26%)</title><rect x="987.0" y="1235.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="990.0" y="1246.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.26%)</title><rect x="987.0" y="1219.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="990.0" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.52%)</title><rect x="990.1" y="1251.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="993.1" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.52%)</title><rect x="990.1" y="1235.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="993.1" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.44%)</title><rect x="990.1" y="1219.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="993.1" y="1230.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.44%)</title><rect x="990.1" y="1203.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="993.1" y="1214.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.44%)</title><rect x="990.1" y="1187.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="993.1" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.44%)</title><rect x="990.1" y="1171.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="993.1" y="1182.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.35%)</title><rect x="991.1" y="1155.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="994.1" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (2 samples, 0.17%)</title><rect x="992.1" y="1139.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="995.1" y="1150.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.09%)</title><rect x="992.1" y="1123.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.1" y="1134.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.09%)</title><rect x="993.2" y="1123.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.2" y="1134.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.09%)</title><rect x="994.2" y="1139.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="997.2" y="1150.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.09%)</title><rect x="994.2" y="1123.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="997.2" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="995.2" y="1219.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="998.2" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="995.2" y="1203.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="998.2" y="1214.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="995.2" y="1187.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="998.2" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.09%)</title><rect x="995.2" y="1171.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="998.2" y="1182.0"></text>
</g>
<g>
<title>JavaThread::run() (187 samples, 16.33%)</title><rect x="996.3" y="1283.0" width="192.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="999.3" y="1294.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (187 samples, 16.33%)</title><rect x="996.3" y="1267.0" width="192.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="999.3" y="1278.0">JavaThread::thread_main_i..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (186 samples, 16.24%)</title><rect x="996.3" y="1251.0" width="191.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="999.3" y="1262.0">CompileBroker::compiler_t..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (185 samples, 16.16%)</title><rect x="996.3" y="1235.0" width="190.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="999.3" y="1246.0">CompileBroker::invoke_com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (184 samples, 16.07%)</title><rect x="996.3" y="1219.0" width="189.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="999.3" y="1230.0">C2Compiler::compile_metho..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (184 samples, 16.07%)</title><rect x="996.3" y="1203.0" width="189.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="999.3" y="1214.0">Compile::Compile(ciEnv*, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (68 samples, 5.94%)</title><rect x="996.3" y="1187.0" width="70.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="999.3" y="1198.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="996.3" y="1171.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="999.3" y="1182.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="996.3" y="1155.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="999.3" y="1166.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.35%)</title><rect x="997.3" y="1171.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1000.3" y="1182.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.17%)</title><rect x="998.3" y="1155.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1001.3" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="998.3" y="1139.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1001.3" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="998.3" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1001.3" y="1134.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.09%)</title><rect x="999.3" y="1139.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1002.3" y="1150.0"></text>
</g>
<g>
<title>compN_rReg_imm_klassNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1000.4" y="1155.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1003.4" y="1166.0"></text>
</g>
<g>
<title>TypeKlassPtr::get_con() const (1 samples, 0.09%)</title><rect x="1000.4" y="1139.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1003.4" y="1150.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.61%)</title><rect x="1001.4" y="1171.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1004.4" y="1182.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.09%)</title><rect x="1001.4" y="1155.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1004.4" y="1166.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="1002.4" y="1155.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1005.4" y="1166.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.44%)</title><rect x="1003.5" y="1155.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1006.5" y="1166.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.35%)</title><rect x="1004.5" y="1139.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1007.5" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.09%)</title><rect x="1008.6" y="1171.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1011.6" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.09%)</title><rect x="1008.6" y="1155.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1011.6" y="1166.0"></text>
</g>
<g>
<title>Node::is_block_proj() const (1 samples, 0.09%)</title><rect x="1008.6" y="1139.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1011.6" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.26%)</title><rect x="1009.7" y="1171.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1012.7" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.26%)</title><rect x="1009.7" y="1155.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1012.7" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.17%)</title><rect x="1009.7" y="1139.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1012.7" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (2 samples, 0.17%)</title><rect x="1009.7" y="1123.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1012.7" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1011.7" y="1139.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1014.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (52 samples, 4.54%)</title><rect x="1012.7" y="1171.0" width="53.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1015.7" y="1182.0">Phase..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.09%)</title><rect x="1012.7" y="1155.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1015.7" y="1166.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.26%)</title><rect x="1013.8" y="1155.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1016.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.17%)</title><rect x="1016.9" y="1155.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1019.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.09%)</title><rect x="1017.9" y="1139.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1020.9" y="1150.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.09%)</title><rect x="1017.9" y="1123.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1020.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.17%)</title><rect x="1018.9" y="1155.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1021.9" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1018.9" y="1139.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1021.9" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1020.0" y="1139.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1023.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.61%)</title><rect x="1021.0" y="1155.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1027.2" y="1139.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1030.2" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1027.2" y="1123.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1030.2" y="1134.0"></text>
</g>
<g>
<title>loadConI0Node::bottom_type() const (1 samples, 0.09%)</title><rect x="1027.2" y="1107.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1030.2" y="1118.0"></text>
</g>
<g>
<title>TypeInt::make(int) (1 samples, 0.09%)</title><rect x="1027.2" y="1091.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1030.2" y="1102.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.09%)</title><rect x="1027.2" y="1075.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1030.2" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 0.96%)</title><rect x="1028.2" y="1155.0" width="11.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.2" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.26%)</title><rect x="1036.4" y="1139.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1039.4" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1038.5" y="1123.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1041.5" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.17%)</title><rect x="1039.5" y="1155.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1042.5" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1040.6" y="1139.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1043.6" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1040.6" y="1123.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1043.6" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.35%)</title><rect x="1041.6" y="1155.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1044.6" y="1166.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.17%)</title><rect x="1043.7" y="1139.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.17%)</title><rect x="1045.7" y="1155.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1048.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="1139.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.52%)</title><rect x="1047.8" y="1155.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1050.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1051.9" y="1139.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1054.9" y="1150.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.09%)</title><rect x="1052.9" y="1139.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1055.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.17%)</title><rect x="1054.0" y="1155.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1057.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.17%)</title><rect x="1056.0" y="1155.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1059.0" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1056.0" y="1139.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1059.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.09%)</title><rect x="1058.1" y="1155.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.1" y="1166.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="1058.1" y="1139.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.1" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.44%)</title><rect x="1059.1" y="1155.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1062.1" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1062.2" y="1139.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.2" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1063.2" y="1123.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.2" y="1134.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1064.3" y="1155.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1067.3" y="1166.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.09%)</title><rect x="1065.3" y="1155.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1068.3" y="1166.0"></text>
</g>
<g>
<title>Compile::Optimize() (105 samples, 9.17%)</title><rect x="1066.3" y="1187.0" width="108.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.3" y="1198.0">Compile::Opti..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1066.3" y="1171.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1069.3" y="1182.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1066.3" y="1155.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.3" y="1166.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1067.4" y="1171.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.35%)</title><rect x="1068.4" y="1171.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1071.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.35%)</title><rect x="1068.4" y="1155.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1071.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1068.4" y="1139.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1071.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.09%)</title><rect x="1068.4" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1071.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1069.4" y="1139.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1072.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1069.4" y="1123.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1072.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1069.4" y="1107.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1072.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1069.4" y="1091.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1072.4" y="1102.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1069.4" y="1075.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1072.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="1091.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1073.5" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="1075.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1073.5" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="1059.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1073.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="1043.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1073.5" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="1027.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="1011.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1073.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1073.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="979.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1073.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="963.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="947.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1073.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="931.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1073.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="915.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1073.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="867.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="851.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1073.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="835.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1073.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="803.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1070.5" y="787.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1073.5" y="798.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.09%)</title><rect x="1071.5" y="1139.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1074.5" y="1150.0"></text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1072.5" y="1171.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.5" y="1182.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1073.5" y="1171.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.5" y="1182.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1073.5" y="1155.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1076.5" y="1166.0"></text>
</g>
<g>
<title>Node::Ideal_DU_postCCP(PhaseCCP*) (1 samples, 0.09%)</title><rect x="1073.5" y="1139.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1076.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (81 samples, 7.07%)</title><rect x="1074.6" y="1171.0" width="83.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1077.6" y="1182.0">PhaseIdea..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1074.6" y="1155.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.6" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1074.6" y="1139.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.6" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1074.6" y="1123.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.6" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1074.6" y="1107.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.6" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1074.6" y="1091.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1077.6" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1074.6" y="1075.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.6" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1074.6" y="1059.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1077.6" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1074.6" y="1043.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1077.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1074.6" y="1027.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1077.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.09%)</title><rect x="1074.6" y="1011.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1077.6" y="1022.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.09%)</title><rect x="1075.6" y="1155.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1078.6" y="1166.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.09%)</title><rect x="1076.6" y="1155.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.6" y="1166.0"></text>
</g>
<g>
<title>ParmNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1077.7" y="1155.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.44%)</title><rect x="1078.7" y="1155.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1081.7" y="1166.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.26%)</title><rect x="1079.7" y="1139.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1082.7" y="1150.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.09%)</title><rect x="1082.8" y="1139.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.35%)</title><rect x="1083.9" y="1155.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1086.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (63 samples, 5.50%)</title><rect x="1088.0" y="1155.0" width="64.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.0" y="1166.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (58 samples, 5.07%)</title><rect x="1093.1" y="1139.0" width="59.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.1" y="1150.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.17%)</title><rect x="1096.2" y="1123.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (53 samples, 4.63%)</title><rect x="1098.3" y="1123.0" width="54.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.3" y="1134.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1142.6" y="1107.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1142.6" y="1091.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (8 samples, 0.70%)</title><rect x="1143.6" y="1107.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1151.9" y="1107.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.35%)</title><rect x="1152.9" y="1155.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (2 samples, 0.17%)</title><rect x="1153.9" y="1139.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1155.0" y="1123.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.0" y="1134.0"></text>
</g>
<g>
<title>NodeHash::hash_find(Node const*) (1 samples, 0.09%)</title><rect x="1155.0" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1156.0" y="1139.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.09%)</title><rect x="1156.0" y="1123.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1156.0" y="1107.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1157.0" y="1155.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (14 samples, 1.22%)</title><rect x="1158.1" y="1171.0" width="14.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.1" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (13 samples, 1.14%)</title><rect x="1159.1" y="1155.0" width="13.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.1" y="1166.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1159.1" y="1139.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.1" y="1150.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1159.1" y="1123.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.1" y="1134.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1161.1" y="1139.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.1" y="1150.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1161.1" y="1123.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.1" y="1134.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1161.1" y="1107.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.1" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1161.1" y="1091.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.1" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1161.1" y="1075.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.1" y="1086.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1161.1" y="1059.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.1" y="1070.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1161.1" y="1043.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1164.1" y="1054.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (3 samples, 0.26%)</title><rect x="1162.2" y="1139.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.2" y="1150.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1165.3" y="1139.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1166.3" y="1139.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.3" y="1150.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1167.3" y="1139.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.3" y="1150.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.09%)</title><rect x="1167.3" y="1123.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.3" y="1134.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1168.4" y="1123.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.4" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1169.4" y="1139.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.4" y="1150.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1170.4" y="1139.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1170.4" y="1123.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.4" y="1134.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1171.4" y="1123.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.4" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1172.5" y="1171.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1172.5" y="1155.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.5" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1172.5" y="1139.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.5" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.09%)</title><rect x="1172.5" y="1123.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.5" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1172.5" y="1107.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.5" y="1118.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1172.5" y="1091.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.5" y="1102.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.09%)</title><rect x="1172.5" y="1075.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1175.5" y="1086.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.09%)</title><rect x="1172.5" y="1059.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.5" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1173.5" y="1171.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.5" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1173.5" y="1155.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.5" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1173.5" y="1139.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.5" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.09%)</title><rect x="1173.5" y="1123.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1173.5" y="1107.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.5" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.87%)</title><rect x="1174.5" y="1187.0" width="10.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.5" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.87%)</title><rect x="1174.5" y="1171.0" width="10.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.87%)</title><rect x="1174.5" y="1155.0" width="10.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.87%)</title><rect x="1174.5" y="1139.0" width="10.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.87%)</title><rect x="1174.5" y="1123.0" width="10.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.87%)</title><rect x="1174.5" y="1107.0" width="10.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.87%)</title><rect x="1174.5" y="1091.0" width="10.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.5" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.87%)</title><rect x="1174.5" y="1075.0" width="10.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.87%)</title><rect x="1174.5" y="1059.0" width="10.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.87%)</title><rect x="1174.5" y="1043.0" width="10.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.87%)</title><rect x="1174.5" y="1027.0" width="10.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.87%)</title><rect x="1174.5" y="1011.0" width="10.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.87%)</title><rect x="1174.5" y="995.0" width="10.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.5" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.87%)</title><rect x="1174.5" y="979.0" width="10.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.87%)</title><rect x="1174.5" y="963.0" width="10.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.87%)</title><rect x="1174.5" y="947.0" width="10.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.87%)</title><rect x="1174.5" y="931.0" width="10.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.79%)</title><rect x="1174.5" y="915.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.5" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.70%)</title><rect x="1174.5" y="899.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.70%)</title><rect x="1174.5" y="883.0" width="8.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.70%)</title><rect x="1174.5" y="867.0" width="8.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.70%)</title><rect x="1174.5" y="851.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.70%)</title><rect x="1174.5" y="835.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.52%)</title><rect x="1174.5" y="819.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.44%)</title><rect x="1174.5" y="803.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.44%)</title><rect x="1174.5" y="787.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.44%)</title><rect x="1174.5" y="771.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.44%)</title><rect x="1174.5" y="755.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.44%)</title><rect x="1174.5" y="739.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.44%)</title><rect x="1174.5" y="723.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.44%)</title><rect x="1174.5" y="707.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.5" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.44%)</title><rect x="1174.5" y="691.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.44%)</title><rect x="1174.5" y="675.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.44%)</title><rect x="1174.5" y="659.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.44%)</title><rect x="1174.5" y="643.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.44%)</title><rect x="1174.5" y="627.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1174.5" y="611.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.5" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1174.5" y="595.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1174.5" y="579.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1174.5" y="563.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1174.5" y="547.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1174.5" y="531.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1174.5" y="515.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.5" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1174.5" y="499.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1174.5" y="483.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1174.5" y="467.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1174.5" y="451.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1174.5" y="435.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="446.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1174.5" y="419.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.5" y="430.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, bool, BasicType, bool) (1 samples, 0.09%)</title><rect x="1174.5" y="403.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.5" y="414.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.09%)</title><rect x="1174.5" y="387.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.5" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1174.5" y="371.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="382.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.5" y="355.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.09%)</title><rect x="1175.6" y="435.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.6" y="446.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.09%)</title><rect x="1175.6" y="419.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.6" y="430.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.09%)</title><rect x="1175.6" y="403.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.6" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1175.6" y="387.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.6" y="398.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1175.6" y="371.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.6" y="382.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1175.6" y="355.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.6" y="366.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1175.6" y="339.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.6" y="350.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1175.6" y="323.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.6" y="334.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1175.6" y="307.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.6" y="318.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1175.6" y="291.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.6" y="302.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1175.6" y="275.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1176.6" y="531.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1176.6" y="515.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.6" y="526.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.09%)</title><rect x="1176.6" y="499.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.6" y="510.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1176.6" y="483.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.6" y="494.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1176.6" y="467.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.6" y="478.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1176.6" y="451.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.6" y="462.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1176.6" y="435.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.6" y="446.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.09%)</title><rect x="1177.6" y="531.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="542.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1177.6" y="515.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="526.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1177.6" y="499.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="510.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1177.6" y="483.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.7" y="611.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.7" y="595.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.7" y="579.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.7" y="563.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.7" y="547.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.7" y="531.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.7" y="515.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.7" y="499.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.7" y="483.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.7" y="467.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.7" y="451.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.7" y="435.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.7" y="419.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.7" y="403.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.7" y="387.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.7" y="371.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.7" y="355.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.7" y="339.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.7" y="323.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.7" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.7" y="307.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.7" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.7" y="291.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.7" y="275.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.7" y="259.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.7" y="243.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1178.7" y="227.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1178.7" y="211.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.7" y="222.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.09%)</title><rect x="1178.7" y="195.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="206.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1178.7" y="179.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="190.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.7" y="163.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="174.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.7" y="147.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="158.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.09%)</title><rect x="1178.7" y="131.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="142.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1178.7" y="115.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.7" y="126.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1178.7" y="99.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.7" y="110.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1178.7" y="83.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="94.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1178.7" y="67.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.7" y="78.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.09%)</title><rect x="1178.7" y="51.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.7" y="62.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.09%)</title><rect x="1178.7" y="35.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="803.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.7" y="771.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.7" y="755.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.7" y="739.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.7" y="723.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.7" y="707.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="691.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.7" y="659.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.7" y="643.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.7" y="627.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.7" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.7" y="595.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="579.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.7" y="563.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.7" y="547.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.7" y="531.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.7" y="515.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.7" y="499.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="483.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.7" y="467.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.7" y="451.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.7" y="435.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.7" y="419.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.7" y="403.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="414.0"></text>
</g>
<g>
<title>GraphKit::add_exception_states_from(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="398.0"></text>
</g>
<g>
<title>SafePointNode::set_next_exception(SafePointNode*) (1 samples, 0.09%)</title><rect x="1179.7" y="371.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.17%)</title><rect x="1180.7" y="819.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="830.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1180.7" y="803.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="814.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1180.7" y="787.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="798.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1180.7" y="771.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="782.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1180.7" y="755.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="766.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1180.7" y="739.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1183.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1181.8" y="803.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="814.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.09%)</title><rect x="1181.8" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1181.8" y="771.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1181.8" y="755.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.8" y="766.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.09%)</title><rect x="1181.8" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1182.8" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1182.8" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1182.8" y="867.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="878.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1182.8" y="851.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="862.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1182.8" y="835.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="846.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1182.8" y="819.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1182.8" y="803.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="814.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.09%)</title><rect x="1182.8" y="787.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="915.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="899.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.8" y="910.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1183.8" y="883.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.8" y="894.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1183.8" y="867.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="878.0"></text>
</g>
<g>
<title>LoadNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1183.8" y="851.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="862.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1184.8" y="1187.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.8" y="1198.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1184.8" y="1171.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="1182.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.9" y="1219.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.9" y="1230.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1185.9" y="1203.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.9" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1185.9" y="1187.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.9" y="1198.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.09%)</title><rect x="1185.9" y="1171.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.9" y="1182.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1185.9" y="1155.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="1166.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1185.9" y="1139.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="1150.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.09%)</title><rect x="1185.9" y="1123.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.9" y="1134.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="1185.9" y="1107.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="1118.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1186.9" y="1235.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.9" y="1246.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1186.9" y="1219.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.9" y="1230.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1186.9" y="1203.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.9" y="1214.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1186.9" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.9" y="1198.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.09%)</title><rect x="1186.9" y="1171.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.9" y="1182.0"></text>
</g>
<g>
<title>InlineCacheBuffer::contains(unsigned char*) (1 samples, 0.09%)</title><rect x="1186.9" y="1155.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.9" y="1166.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="1187.9" y="1251.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.9" y="1262.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.09%)</title><rect x="1187.9" y="1235.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.9" y="1246.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.09%)</title><rect x="1187.9" y="1219.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.9" y="1230.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.09%)</title><rect x="1187.9" y="1203.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1190.9" y="1214.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.09%)</title><rect x="1189.0" y="1283.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="1294.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.09%)</title><rect x="1189.0" y="1267.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.0" y="1278.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.09%)</title><rect x="1189.0" y="1251.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="1262.0"></text>
</g>
</g>
</svg>
