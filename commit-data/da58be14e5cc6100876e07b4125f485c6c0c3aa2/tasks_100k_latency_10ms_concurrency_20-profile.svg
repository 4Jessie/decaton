<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="709"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="709"> </text>
<g id="frames">
<g>
<title>all (264 samples, 100.00%)</title><rect x="10.0" y="675.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="686.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.38%)</title><rect x="10.0" y="659.0" width="4.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>Deoptimization::unpack_frames(JavaThread*, int) (1 samples, 0.38%)</title><rect x="10.0" y="643.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>vframeArray::unpack_to_stack(frame&amp;, int, int) (1 samples, 0.38%)</title><rect x="10.0" y="627.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>vframeArrayElement::unpack_on_stack(int, int, int, frame*, bool, bool, int) (1 samples, 0.38%)</title><rect x="10.0" y="611.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (21 samples, 7.95%)</title><rect x="14.5" y="659.0" width="93.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.5" y="670.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.38%)</title><rect x="14.5" y="643.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.38%)</title><rect x="14.5" y="627.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.38%)</title><rect x="14.5" y="611.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.38%)</title><rect x="14.5" y="595.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (20 samples, 7.58%)</title><rect x="18.9" y="643.0" width="89.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.9" y="654.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.38%)</title><rect x="18.9" y="627.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.38%)</title><rect x="18.9" y="611.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.resume (1 samples, 0.38%)</title><rect x="18.9" y="595.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.9" y="606.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 3.03%)</title><rect x="23.4" y="627.0" width="35.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.4" y="638.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/92857927.accept (7 samples, 2.65%)</title><rect x="23.4" y="611.0" width="31.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.4" y="622.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$67 (7 samples, 2.65%)</title><rect x="23.4" y="595.0" width="31.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.4" y="606.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.38%)</title><rect x="23.4" y="579.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.14%)</title><rect x="27.9" y="579.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.14%)</title><rect x="27.9" y="563.0" width="13.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.14%)</title><rect x="27.9" y="547.0" width="13.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.14%)</title><rect x="27.9" y="531.0" width="13.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.14%)</title><rect x="27.9" y="515.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.14%)</title><rect x="27.9" y="499.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.14%)</title><rect x="27.9" y="483.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.14%)</title><rect x="27.9" y="467.0" width="13.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 1.14%)</title><rect x="27.9" y="451.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.9" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.14%)</title><rect x="41.3" y="579.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.3" y="590.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.14%)</title><rect x="41.3" y="563.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.3" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.38%)</title><rect x="50.2" y="547.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="53.2" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.38%)</title><rect x="50.2" y="531.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.38%)</title><rect x="54.7" y="611.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="57.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.38%)</title><rect x="54.7" y="595.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="57.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.38%)</title><rect x="54.7" y="579.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.38%)</title><rect x="54.7" y="563.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.17%)</title><rect x="59.2" y="627.0" width="49.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.2" y="638.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.17%)</title><rect x="59.2" y="611.0" width="49.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="62.2" y="622.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.65%)</title><rect x="59.2" y="595.0" width="31.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="62.2" y="606.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.52%)</title><rect x="59.2" y="579.0" width="17.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.52%)</title><rect x="59.2" y="563.0" width="17.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (2 samples, 0.76%)</title><rect x="59.2" y="547.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (2 samples, 0.76%)</title><rect x="59.2" y="531.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.2" y="542.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.38%)</title><rect x="59.2" y="515.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="62.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$85/1937752330.get (1 samples, 0.38%)</title><rect x="59.2" y="499.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.recoverableException (1 samples, 0.38%)</title><rect x="59.2" y="483.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.2" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$EmptySet.isEmpty (1 samples, 0.38%)</title><rect x="59.2" y="467.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.recoverableException (1 samples, 0.38%)</title><rect x="63.6" y="515.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="66.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$260/549275490.shouldBlock (1 samples, 0.38%)</title><rect x="68.1" y="547.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.38%)</title><rect x="68.1" y="531.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.38%)</title><rect x="68.1" y="515.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="71.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.38%)</title><rect x="68.1" y="499.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.1" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.38%)</title><rect x="68.1" y="483.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.1" y="494.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.38%)</title><rect x="68.1" y="467.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="71.1" y="478.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.38%)</title><rect x="68.1" y="451.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.1" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.38%)</title><rect x="68.1" y="435.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.1" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.38%)</title><rect x="68.1" y="419.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="71.1" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.38%)</title><rect x="68.1" y="403.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.1" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.38%)</title><rect x="68.1" y="387.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="71.1" y="398.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$BooleanTerminalSink.cancellationRequested (1 samples, 0.38%)</title><rect x="68.1" y="371.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="71.1" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.38%)</title><rect x="72.6" y="547.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.38%)</title><rect x="72.6" y="531.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="75.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.38%)</title><rect x="72.6" y="515.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.38%)</title><rect x="72.6" y="499.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClientRequest.makeHeader (1 samples, 0.38%)</title><rect x="72.6" y="483.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.14%)</title><rect x="77.0" y="579.0" width="13.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.14%)</title><rect x="77.0" y="563.0" width="13.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="80.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.14%)</title><rect x="77.0" y="547.0" width="13.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.14%)</title><rect x="77.0" y="531.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="80.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.38%)</title><rect x="77.0" y="515.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.38%)</title><rect x="77.0" y="499.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.38%)</title><rect x="77.0" y="483.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.38%)</title><rect x="77.0" y="467.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.38%)</title><rect x="77.0" y="451.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.38%)</title><rect x="77.0" y="435.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.38%)</title><rect x="77.0" y="419.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.0" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.38%)</title><rect x="77.0" y="403.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="80.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.76%)</title><rect x="81.5" y="515.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.76%)</title><rect x="81.5" y="499.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="84.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.38%)</title><rect x="81.5" y="483.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.5" y="494.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.38%)</title><rect x="81.5" y="467.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="84.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.38%)</title><rect x="86.0" y="483.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.0" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.38%)</title><rect x="86.0" y="467.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.76%)</title><rect x="90.5" y="595.0" width="8.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.76%)</title><rect x="90.5" y="579.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.76%)</title><rect x="90.5" y="563.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.5" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.38%)</title><rect x="90.5" y="547.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.5" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.38%)</title><rect x="90.5" y="531.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.5" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.38%)</title><rect x="90.5" y="515.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.5" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.38%)</title><rect x="90.5" y="499.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.5" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.38%)</title><rect x="90.5" y="483.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="93.5" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (1 samples, 0.38%)</title><rect x="90.5" y="467.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="93.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.38%)</title><rect x="94.9" y="547.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="97.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.38%)</title><rect x="94.9" y="531.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.9" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.38%)</title><rect x="94.9" y="515.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="97.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.38%)</title><rect x="94.9" y="499.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.9" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.38%)</title><rect x="94.9" y="483.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.9" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.38%)</title><rect x="94.9" y="467.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.9" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.38%)</title><rect x="94.9" y="451.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.9" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.38%)</title><rect x="99.4" y="595.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.38%)</title><rect x="99.4" y="579.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.38%)</title><rect x="99.4" y="563.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.38%)</title><rect x="99.4" y="547.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.38%)</title><rect x="99.4" y="531.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.38%)</title><rect x="99.4" y="515.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.38%)</title><rect x="99.4" y="499.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.addInterestOps (1 samples, 0.38%)</title><rect x="99.4" y="483.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.38%)</title><rect x="99.4" y="467.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (1 samples, 0.38%)</title><rect x="99.4" y="451.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="102.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.38%)</title><rect x="103.9" y="595.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="106.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.38%)</title><rect x="103.9" y="579.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.9" y="590.0"></text>
</g>
<g>
<title>java/lang/Thread.run (152 samples, 57.58%)</title><rect x="108.3" y="659.0" width="679.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="111.3" y="670.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (152 samples, 57.58%)</title><rect x="108.3" y="643.0" width="679.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="111.3" y="654.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (151 samples, 57.20%)</title><rect x="112.8" y="627.0" width="674.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="115.8" y="638.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/901457485.run (139 samples, 52.65%)</title><rect x="112.8" y="611.0" width="621.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="115.8" y="622.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/901457485.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (139 samples, 52.65%)</title><rect x="112.8" y="595.0" width="621.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="115.8" y="606.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (139 samples, 52.65%)</title><rect x="112.8" y="579.0" width="621.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.8" y="590.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.38%)</title><rect x="112.8" y="563.0" width="4.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="115.8" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="112.8" y="547.0" width="4.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="115.8" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (138 samples, 52.27%)</title><rect x="117.3" y="563.0" width="616.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="120.3" y="574.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (25 samples, 9.47%)</title><rect x="135.2" y="547.0" width="111.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="138.2" y="558.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (25 samples, 9.47%)</title><rect x="135.2" y="531.0" width="111.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="138.2" y="542.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (25 samples, 9.47%)</title><rect x="135.2" y="515.0" width="111.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="138.2" y="526.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (23 samples, 8.71%)</title><rect x="144.1" y="499.0" width="102.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="147.1" y="510.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (23 samples, 8.71%)</title><rect x="144.1" y="483.0" width="102.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="147.1" y="494.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (23 samples, 8.71%)</title><rect x="144.1" y="467.0" width="102.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="147.1" y="478.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.38%)</title><rect x="144.1" y="451.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="147.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.38%)</title><rect x="144.1" y="435.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="147.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.38%)</title><rect x="144.1" y="419.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="147.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.38%)</title><rect x="144.1" y="403.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="147.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.38%)</title><rect x="144.1" y="387.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="147.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.38%)</title><rect x="144.1" y="371.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="147.1" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.38%)</title><rect x="144.1" y="355.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="147.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (1 samples, 0.38%)</title><rect x="144.1" y="339.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="147.1" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (20 samples, 7.58%)</title><rect x="148.6" y="451.0" width="89.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="151.6" y="462.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.38%)</title><rect x="148.6" y="435.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.38%)</title><rect x="148.6" y="419.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="151.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.38%)</title><rect x="153.0" y="435.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="156.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.38%)</title><rect x="153.0" y="419.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="156.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.38%)</title><rect x="153.0" y="403.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="156.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.38%)</title><rect x="153.0" y="387.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="156.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.38%)</title><rect x="157.5" y="435.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.5" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.38%)</title><rect x="157.5" y="419.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="160.5" y="430.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.38%)</title><rect x="157.5" y="403.0" width="4.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="160.5" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.38%)</title><rect x="157.5" y="387.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="160.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (17 samples, 6.44%)</title><rect x="162.0" y="435.0" width="76.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.0" y="446.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.52%)</title><rect x="162.0" y="419.0" width="17.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="165.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.76%)</title><rect x="166.4" y="403.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="169.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.76%)</title><rect x="166.4" y="387.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="169.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.76%)</title><rect x="166.4" y="371.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="169.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.38%)</title><rect x="175.4" y="403.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="178.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (13 samples, 4.92%)</title><rect x="179.8" y="419.0" width="58.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.8" y="430.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (13 samples, 4.92%)</title><rect x="179.8" y="403.0" width="58.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="182.8" y="414.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (13 samples, 4.92%)</title><rect x="179.8" y="387.0" width="58.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="182.8" y="398.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 2.27%)</title><rect x="188.8" y="371.0" width="26.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="191.8" y="382.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.14%)</title><rect x="197.7" y="355.0" width="13.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.7" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.14%)</title><rect x="197.7" y="339.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.7" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.14%)</title><rect x="197.7" y="323.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.7" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.76%)</title><rect x="202.2" y="307.0" width="8.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.2" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.38%)</title><rect x="202.2" y="291.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.2" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.38%)</title><rect x="202.2" y="275.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.2" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.38%)</title><rect x="202.2" y="259.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.2" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.38%)</title><rect x="206.7" y="291.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.7" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.38%)</title><rect x="211.1" y="355.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="214.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.38%)</title><rect x="215.6" y="371.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.6" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.38%)</title><rect x="220.1" y="371.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.1" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 1.14%)</title><rect x="224.5" y="371.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.5" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.76%)</title><rect x="238.0" y="451.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.76%)</title><rect x="238.0" y="435.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.76%)</title><rect x="238.0" y="419.0" width="8.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.76%)</title><rect x="238.0" y="403.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="241.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.76%)</title><rect x="238.0" y="387.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.0" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (105 samples, 39.77%)</title><rect x="246.9" y="547.0" width="469.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.9" y="558.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (19 samples, 7.20%)</title><rect x="246.9" y="531.0" width="84.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="249.9" y="542.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.38%)</title><rect x="251.4" y="515.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.4" y="526.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (17 samples, 6.44%)</title><rect x="255.8" y="515.0" width="76.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.8" y="526.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (13 samples, 4.92%)</title><rect x="273.7" y="499.0" width="58.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.7" y="510.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.76%)</title><rect x="273.7" y="483.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.7" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.38%)</title><rect x="273.7" y="467.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="276.7" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.38%)</title><rect x="273.7" y="451.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.7" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.38%)</title><rect x="273.7" y="435.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.7" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.38%)</title><rect x="278.2" y="467.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="281.2" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.38%)</title><rect x="278.2" y="451.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="281.2" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.38%)</title><rect x="278.2" y="435.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.2" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (9 samples, 3.41%)</title><rect x="282.7" y="483.0" width="40.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.7" y="494.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 2.65%)</title><rect x="291.6" y="467.0" width="31.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.6" y="478.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 2.65%)</title><rect x="291.6" y="451.0" width="31.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.6" y="462.0">ja..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.76%)</title><rect x="305.0" y="435.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="308.0" y="446.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.76%)</title><rect x="313.9" y="435.0" width="9.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="316.9" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.76%)</title><rect x="322.9" y="483.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.9" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.38%)</title><rect x="331.8" y="531.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="334.8" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.38%)</title><rect x="331.8" y="515.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.8" y="526.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.38%)</title><rect x="331.8" y="499.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="334.8" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (17 samples, 6.44%)</title><rect x="336.3" y="531.0" width="76.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="339.3" y="542.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (17 samples, 6.44%)</title><rect x="336.3" y="515.0" width="76.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.3" y="526.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 3.03%)</title><rect x="336.3" y="499.0" width="35.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="339.3" y="510.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 3.03%)</title><rect x="336.3" y="483.0" width="35.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="339.3" y="494.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 2.65%)</title><rect x="336.3" y="467.0" width="31.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.3" y="478.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.52%)</title><rect x="345.2" y="451.0" width="17.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.2" y="462.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.52%)</title><rect x="345.2" y="435.0" width="17.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="348.2" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.52%)</title><rect x="345.2" y="419.0" width="17.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="348.2" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.14%)</title><rect x="345.2" y="403.0" width="13.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="348.2" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.38%)</title><rect x="345.2" y="387.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="348.2" y="398.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.38%)</title><rect x="345.2" y="371.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="348.2" y="382.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.38%)</title><rect x="345.2" y="355.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="348.2" y="366.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.38%)</title><rect x="345.2" y="339.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="348.2" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.76%)</title><rect x="349.7" y="387.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="352.7" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.38%)</title><rect x="349.7" y="371.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="352.7" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.38%)</title><rect x="354.2" y="371.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="357.2" y="382.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.38%)</title><rect x="358.6" y="403.0" width="4.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="361.6" y="414.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.38%)</title><rect x="363.1" y="451.0" width="4.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="366.1" y="462.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.38%)</title><rect x="367.6" y="467.0" width="4.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="370.6" y="478.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.76%)</title><rect x="372.0" y="499.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="375.0" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.76%)</title><rect x="372.0" y="483.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="375.0" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.76%)</title><rect x="372.0" y="467.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="375.0" y="478.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 2.65%)</title><rect x="381.0" y="499.0" width="31.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.0" y="510.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 2.65%)</title><rect x="381.0" y="483.0" width="31.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="384.0" y="494.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.38%)</title><rect x="381.0" y="467.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="384.0" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.38%)</title><rect x="381.0" y="451.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="384.0" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.38%)</title><rect x="381.0" y="435.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="384.0" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.38%)</title><rect x="381.0" y="419.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="384.0" y="430.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 2.27%)</title><rect x="385.5" y="467.0" width="26.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="388.5" y="478.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 2.27%)</title><rect x="385.5" y="451.0" width="26.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="388.5" y="462.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.89%)</title><rect x="389.9" y="435.0" width="22.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="392.9" y="446.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.38%)</title><rect x="403.3" y="419.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="406.3" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.38%)</title><rect x="407.8" y="419.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="410.8" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (61 samples, 23.11%)</title><rect x="412.3" y="531.0" width="272.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="415.3" y="542.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (61 samples, 23.11%)</title><rect x="412.3" y="515.0" width="272.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="415.3" y="526.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1157655103.process (51 samples, 19.32%)</title><rect x="412.3" y="499.0" width="227.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="415.3" y="510.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (51 samples, 19.32%)</title><rect x="412.3" y="483.0" width="227.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="415.3" y="494.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (51 samples, 19.32%)</title><rect x="412.3" y="467.0" width="227.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="415.3" y="478.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.38%)</title><rect x="412.3" y="451.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="415.3" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.38%)</title><rect x="412.3" y="435.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="415.3" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.38%)</title><rect x="412.3" y="419.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="415.3" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.38%)</title><rect x="412.3" y="403.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="415.3" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (50 samples, 18.94%)</title><rect x="416.7" y="451.0" width="223.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="419.7" y="462.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>java/lang/Thread.sleep (48 samples, 18.18%)</title><rect x="421.2" y="435.0" width="214.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="424.2" y="446.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (43 samples, 16.29%)</title><rect x="439.1" y="419.0" width="192.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="442.1" y="430.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 1.14%)</title><rect x="461.4" y="403.0" width="13.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="464.4" y="414.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.38%)</title><rect x="474.8" y="403.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="477.8" y="414.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.76%)</title><rect x="479.3" y="403.0" width="9.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="482.3" y="414.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (32 samples, 12.12%)</title><rect x="488.3" y="403.0" width="143.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="491.3" y="414.0">os::sleep(Thread*,..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.76%)</title><rect x="519.5" y="387.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="522.5" y="398.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.76%)</title><rect x="519.5" y="371.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="522.5" y="382.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.38%)</title><rect x="528.5" y="387.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="531.5" y="398.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.76%)</title><rect x="533.0" y="387.0" width="8.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="536.0" y="398.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.38%)</title><rect x="541.9" y="387.0" width="4.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="544.9" y="398.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (10 samples, 3.79%)</title><rect x="546.4" y="387.0" width="44.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="549.4" y="398.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 1.14%)</title><rect x="591.1" y="387.0" width="13.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="594.1" y="398.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.76%)</title><rect x="604.5" y="387.0" width="8.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="607.5" y="398.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (2 samples, 0.76%)</title><rect x="613.4" y="387.0" width="8.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="616.4" y="398.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.38%)</title><rect x="622.3" y="387.0" width="4.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="625.3" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.38%)</title><rect x="626.8" y="387.0" width="4.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="629.8" y="398.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.38%)</title><rect x="631.3" y="419.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="634.3" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.38%)</title><rect x="635.8" y="435.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="638.8" y="446.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="635.8" y="419.0" width="4.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="638.8" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.76%)</title><rect x="640.2" y="499.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="643.2" y="510.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.76%)</title><rect x="640.2" y="483.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="643.2" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/558187323.linkToTargetMethod (3 samples, 1.14%)</title><rect x="649.2" y="499.0" width="13.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="652.2" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (3 samples, 1.14%)</title><rect x="649.2" y="483.0" width="13.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="652.2" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/834747062.get$Lambda (3 samples, 1.14%)</title><rect x="649.2" y="467.0" width="13.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="652.2" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/834747062.&lt;init&gt; (3 samples, 1.14%)</title><rect x="649.2" y="451.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="652.2" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.38%)</title><rect x="658.1" y="435.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="661.1" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.38%)</title><rect x="658.1" y="419.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="661.1" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.38%)</title><rect x="658.1" y="403.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="661.1" y="414.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.38%)</title><rect x="662.6" y="499.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="665.6" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.38%)</title><rect x="662.6" y="483.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="665.6" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.38%)</title><rect x="662.6" y="467.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="665.6" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.38%)</title><rect x="667.0" y="499.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="670.0" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.38%)</title><rect x="667.0" y="483.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.0" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 1.14%)</title><rect x="671.5" y="499.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="674.5" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.38%)</title><rect x="671.5" y="483.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.5" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.38%)</title><rect x="671.5" y="467.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="674.5" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.38%)</title><rect x="671.5" y="451.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="674.5" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.38%)</title><rect x="671.5" y="435.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="674.5" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.38%)</title><rect x="671.5" y="419.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="674.5" y="430.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.38%)</title><rect x="671.5" y="403.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="674.5" y="414.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.76%)</title><rect x="676.0" y="483.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="679.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 2.65%)</title><rect x="684.9" y="531.0" width="31.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="687.9" y="542.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 2.65%)</title><rect x="684.9" y="515.0" width="31.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="687.9" y="526.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.38%)</title><rect x="711.7" y="499.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="714.7" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1705387877.accept (1 samples, 0.38%)</title><rect x="711.7" y="483.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="714.7" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (1 samples, 0.38%)</title><rect x="711.7" y="467.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="714.7" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.38%)</title><rect x="711.7" y="451.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="714.7" y="462.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.38%)</title><rect x="711.7" y="435.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="714.7" y="446.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.38%)</title><rect x="711.7" y="419.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="714.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.52%)</title><rect x="716.2" y="547.0" width="17.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="719.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.52%)</title><rect x="716.2" y="531.0" width="17.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="719.2" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.38%)</title><rect x="725.2" y="515.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="728.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.38%)</title><rect x="729.6" y="515.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="732.6" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1705387877.accept (1 samples, 0.38%)</title><rect x="729.6" y="499.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="732.6" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (1 samples, 0.38%)</title><rect x="729.6" y="483.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="732.6" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.38%)</title><rect x="729.6" y="467.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="732.6" y="478.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.38%)</title><rect x="729.6" y="451.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="732.6" y="462.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.38%)</title><rect x="729.6" y="435.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="732.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 1.14%)</title><rect x="734.1" y="611.0" width="13.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="737.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.14%)</title><rect x="734.1" y="595.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="737.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.14%)</title><rect x="734.1" y="579.0" width="13.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="737.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.14%)</title><rect x="734.1" y="563.0" width="13.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="737.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (9 samples, 3.41%)</title><rect x="747.5" y="611.0" width="40.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="750.5" y="622.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (8 samples, 3.03%)</title><rect x="752.0" y="595.0" width="35.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="755.0" y="606.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.76%)</title><rect x="752.0" y="579.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="755.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.76%)</title><rect x="752.0" y="563.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="755.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.76%)</title><rect x="752.0" y="547.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="755.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.76%)</title><rect x="752.0" y="531.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="755.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.76%)</title><rect x="752.0" y="515.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="755.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 2.27%)</title><rect x="760.9" y="579.0" width="26.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="763.9" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 2.27%)</title><rect x="760.9" y="563.0" width="26.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="763.9" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 2.27%)</title><rect x="760.9" y="547.0" width="26.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="763.9" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 2.27%)</title><rect x="760.9" y="531.0" width="26.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="763.9" y="542.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.76%)</title><rect x="787.7" y="659.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="790.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.38%)</title><rect x="792.2" y="643.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="795.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.38%)</title><rect x="792.2" y="627.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="795.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.38%)</title><rect x="792.2" y="611.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="795.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.38%)</title><rect x="792.2" y="595.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="795.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.38%)</title><rect x="792.2" y="579.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="795.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.38%)</title><rect x="792.2" y="563.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="795.2" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.38%)</title><rect x="792.2" y="547.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="795.2" y="558.0"></text>
</g>
<g>
<title>start_thread (88 samples, 33.33%)</title><rect x="796.7" y="659.0" width="393.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="799.7" y="670.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (88 samples, 33.33%)</title><rect x="796.7" y="643.0" width="393.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="799.7" y="654.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 4.92%)</title><rect x="796.7" y="627.0" width="58.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="799.7" y="638.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 4.92%)</title><rect x="796.7" y="611.0" width="58.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="799.7" y="622.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 4.55%)</title><rect x="796.7" y="595.0" width="53.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="799.7" y="606.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (11 samples, 4.17%)</title><rect x="796.7" y="579.0" width="49.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="799.7" y="590.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.52%)</title><rect x="819.0" y="563.0" width="17.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="822.0" y="574.0"></text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.38%)</title><rect x="832.4" y="547.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="835.4" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (1 samples, 0.38%)</title><rect x="832.4" y="531.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="835.4" y="542.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.76%)</title><rect x="836.9" y="563.0" width="8.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="839.9" y="574.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.38%)</title><rect x="845.8" y="579.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="848.8" y="590.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.38%)</title><rect x="850.3" y="595.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="853.3" y="606.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.38%)</title><rect x="850.3" y="579.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="853.3" y="590.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.38%)</title><rect x="850.3" y="563.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="853.3" y="574.0"></text>
</g>
<g>
<title>JavaThread::run() (75 samples, 28.41%)</title><rect x="854.8" y="627.0" width="335.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="857.8" y="638.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (75 samples, 28.41%)</title><rect x="854.8" y="611.0" width="335.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="857.8" y="622.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (75 samples, 28.41%)</title><rect x="854.8" y="595.0" width="335.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="857.8" y="606.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (75 samples, 28.41%)</title><rect x="854.8" y="579.0" width="335.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="857.8" y="590.0">CompileBroker::invoke_compiler_on_method(Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (73 samples, 27.65%)</title><rect x="854.8" y="563.0" width="326.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="857.8" y="574.0">C2Compiler::compile_method(ciEnv*, ciMethod*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (73 samples, 27.65%)</title><rect x="854.8" y="547.0" width="326.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="857.8" y="558.0">Compile::Compile(ciEnv*, C2Compiler*, ciMeth..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.38%)</title><rect x="854.8" y="531.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="857.8" y="542.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.38%)</title><rect x="854.8" y="515.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="857.8" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.38%)</title><rect x="854.8" y="499.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="857.8" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.38%)</title><rect x="854.8" y="483.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="857.8" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.38%)</title><rect x="854.8" y="467.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="857.8" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="854.8" y="451.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="857.8" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="854.8" y="435.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="857.8" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.38%)</title><rect x="854.8" y="419.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="857.8" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.38%)</title><rect x="854.8" y="403.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="857.8" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.38%)</title><rect x="854.8" y="387.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="857.8" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="854.8" y="371.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="857.8" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="854.8" y="355.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="857.8" y="366.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.38%)</title><rect x="854.8" y="339.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="857.8" y="350.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.38%)</title><rect x="854.8" y="323.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="857.8" y="334.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.38%)</title><rect x="854.8" y="307.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="857.8" y="318.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.38%)</title><rect x="854.8" y="291.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="857.8" y="302.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.38%)</title><rect x="854.8" y="275.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="857.8" y="286.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.38%)</title><rect x="854.8" y="259.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="857.8" y="270.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (47 samples, 17.80%)</title><rect x="859.2" y="531.0" width="210.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="862.2" y="542.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (5 samples, 1.89%)</title><rect x="859.2" y="515.0" width="22.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="862.2" y="526.0">C..</text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.76%)</title><rect x="859.2" y="499.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="862.2" y="510.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.38%)</title><rect x="863.7" y="483.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="866.7" y="494.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 1.14%)</title><rect x="868.2" y="499.0" width="13.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="871.2" y="510.0"></text>
</g>
<g>
<title>CodeBuffer::initialize(int, int) (1 samples, 0.38%)</title><rect x="868.2" y="483.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="871.2" y="494.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.38%)</title><rect x="868.2" y="467.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="871.2" y="478.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.38%)</title><rect x="868.2" y="451.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="871.2" y="462.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.38%)</title><rect x="868.2" y="435.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="871.2" y="446.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.38%)</title><rect x="872.7" y="483.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="875.7" y="494.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.38%)</title><rect x="872.7" y="467.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="875.7" y="478.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.38%)</title><rect x="872.7" y="451.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="875.7" y="462.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.38%)</title><rect x="872.7" y="435.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="875.7" y="446.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.38%)</title><rect x="877.1" y="483.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="880.1" y="494.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.38%)</title><rect x="877.1" y="467.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="880.1" y="478.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.38%)</title><rect x="877.1" y="451.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="880.1" y="462.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.38%)</title><rect x="881.6" y="515.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="884.6" y="526.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.76%)</title><rect x="886.1" y="515.0" width="8.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="889.1" y="526.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.76%)</title><rect x="886.1" y="499.0" width="8.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="889.1" y="510.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.38%)</title><rect x="890.5" y="483.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="893.5" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.38%)</title><rect x="895.0" y="515.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="898.0" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.38%)</title><rect x="895.0" y="499.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="898.0" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.14%)</title><rect x="899.5" y="515.0" width="13.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="902.5" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.38%)</title><rect x="899.5" y="499.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="902.5" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.76%)</title><rect x="903.9" y="499.0" width="9.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="906.9" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.38%)</title><rect x="903.9" y="483.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="906.9" y="494.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.38%)</title><rect x="903.9" y="467.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="906.9" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.38%)</title><rect x="908.4" y="483.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="911.4" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::set_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.38%)</title><rect x="908.4" y="467.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="911.4" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 13.26%)</title><rect x="912.9" y="515.0" width="156.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="915.9" y="526.0">PhaseChaitin::Regist..</text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.38%)</title><rect x="912.9" y="499.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="915.9" y="510.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.38%)</title><rect x="917.3" y="499.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="920.3" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.38%)</title><rect x="921.8" y="499.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="924.8" y="510.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.38%)</title><rect x="921.8" y="483.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="924.8" y="494.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="921.8" y="467.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="924.8" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.38%)</title><rect x="926.3" y="499.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="929.3" y="510.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.38%)</title><rect x="926.3" y="483.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="929.3" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.14%)</title><rect x="930.8" y="499.0" width="13.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="933.8" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (16 samples, 6.06%)</title><rect x="944.2" y="499.0" width="71.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="947.2" y="510.0">PhaseCha..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.14%)</title><rect x="984.4" y="483.0" width="13.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="987.4" y="494.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.76%)</title><rect x="988.9" y="467.0" width="8.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="991.9" y="478.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.38%)</title><rect x="997.8" y="483.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1000.8" y="494.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.76%)</title><rect x="1002.3" y="483.0" width="8.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1005.3" y="494.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.38%)</title><rect x="1011.2" y="483.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.2" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.52%)</title><rect x="1015.7" y="499.0" width="17.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1018.7" y="510.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.38%)</title><rect x="1029.1" y="483.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1032.1" y="494.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.38%)</title><rect x="1029.1" y="467.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1032.1" y="478.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.38%)</title><rect x="1029.1" y="451.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1032.1" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.76%)</title><rect x="1033.6" y="499.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.6" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.38%)</title><rect x="1038.0" y="483.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1041.0" y="494.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.38%)</title><rect x="1042.5" y="499.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1045.5" y="510.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.38%)</title><rect x="1042.5" y="483.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1045.5" y="494.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.38%)</title><rect x="1042.5" y="467.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1045.5" y="478.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.38%)</title><rect x="1042.5" y="451.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1045.5" y="462.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="1042.5" y="435.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1045.5" y="446.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.38%)</title><rect x="1047.0" y="499.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1050.0" y="510.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.14%)</title><rect x="1051.4" y="499.0" width="13.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1054.4" y="510.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.38%)</title><rect x="1055.9" y="483.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1058.9" y="494.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.38%)</title><rect x="1060.4" y="483.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1063.4" y="494.0"></text>
</g>
<g>
<title>VectorSet::VectorSet(Arena*) (1 samples, 0.38%)</title><rect x="1064.8" y="499.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.8" y="510.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 7.58%)</title><rect x="1069.3" y="531.0" width="89.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.3" y="542.0">Compile::O..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.76%)</title><rect x="1069.3" y="515.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1072.3" y="526.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.76%)</title><rect x="1069.3" y="499.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1072.3" y="510.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.38%)</title><rect x="1069.3" y="483.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.3" y="494.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.38%)</title><rect x="1073.8" y="483.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.8" y="494.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.38%)</title><rect x="1078.3" y="515.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.3" y="526.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.38%)</title><rect x="1078.3" y="499.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1081.3" y="510.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.38%)</title><rect x="1078.3" y="483.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.3" y="494.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.38%)</title><rect x="1078.3" y="467.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.3" y="478.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_boxed_value_offset(int) const (1 samples, 0.38%)</title><rect x="1078.3" y="451.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.3" y="462.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.38%)</title><rect x="1082.7" y="515.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1085.7" y="526.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.38%)</title><rect x="1082.7" y="499.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.7" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (12 samples, 4.55%)</title><rect x="1087.2" y="515.0" width="53.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1090.2" y="526.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.38%)</title><rect x="1087.2" y="499.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.2" y="510.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.38%)</title><rect x="1087.2" y="483.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.2" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 1.89%)</title><rect x="1091.7" y="499.0" width="22.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.7" y="510.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.38%)</title><rect x="1109.5" y="483.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.5" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.14%)</title><rect x="1114.0" y="499.0" width="13.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.0" y="510.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.38%)</title><rect x="1114.0" y="483.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.0" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.76%)</title><rect x="1118.5" y="483.0" width="8.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.5" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.38%)</title><rect x="1123.0" y="467.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.0" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.38%)</title><rect x="1127.4" y="499.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.4" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.38%)</title><rect x="1131.9" y="499.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.9" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.38%)</title><rect x="1131.9" y="483.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.9" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.38%)</title><rect x="1131.9" y="467.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.9" y="478.0"></text>
</g>
<g>
<title>NodeHash::hash_find(Node const*) (1 samples, 0.38%)</title><rect x="1131.9" y="451.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.9" y="462.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.38%)</title><rect x="1136.4" y="499.0" width="4.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1139.4" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.52%)</title><rect x="1140.8" y="515.0" width="17.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.8" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.52%)</title><rect x="1140.8" y="499.0" width="17.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.8" y="510.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.76%)</title><rect x="1140.8" y="483.0" width="9.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.8" y="494.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1140.8" y="467.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.8" y="478.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.38%)</title><rect x="1140.8" y="451.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.8" y="462.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.38%)</title><rect x="1140.8" y="435.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.8" y="446.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.38%)</title><rect x="1140.8" y="419.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.8" y="430.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.38%)</title><rect x="1140.8" y="403.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.8" y="414.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.38%)</title><rect x="1140.8" y="387.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.8" y="398.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.38%)</title><rect x="1145.3" y="467.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.3" y="478.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.38%)</title><rect x="1145.3" y="451.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.3" y="462.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.38%)</title><rect x="1145.3" y="435.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.3" y="446.0"></text>
</g>
<g>
<title>MemBarCPUOrderNode::Opcode() const (1 samples, 0.38%)</title><rect x="1149.8" y="483.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.8" y="494.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1154.2" y="483.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.2" y="494.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1154.2" y="467.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.2" y="478.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.38%)</title><rect x="1154.2" y="451.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.2" y="462.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.38%)</title><rect x="1154.2" y="435.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.2" y="446.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.38%)</title><rect x="1154.2" y="419.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.2" y="430.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.38%)</title><rect x="1154.2" y="403.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.2" y="414.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.38%)</title><rect x="1154.2" y="387.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.2" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.52%)</title><rect x="1158.7" y="531.0" width="17.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.52%)</title><rect x="1158.7" y="515.0" width="17.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.52%)</title><rect x="1158.7" y="499.0" width="17.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.52%)</title><rect x="1158.7" y="483.0" width="17.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.52%)</title><rect x="1158.7" y="467.0" width="17.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.52%)</title><rect x="1158.7" y="451.0" width="17.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.7" y="435.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.7" y="419.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.7" y="403.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.7" y="387.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.7" y="371.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.7" y="355.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.7" y="339.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.7" y="323.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.7" y="307.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.7" y="291.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.7" y="275.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.7" y="259.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.7" y="270.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.38%)</title><rect x="1158.7" y="243.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.7" y="254.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.38%)</title><rect x="1158.7" y="227.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.7" y="238.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.38%)</title><rect x="1158.7" y="211.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.7" y="222.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.38%)</title><rect x="1158.7" y="195.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.7" y="206.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.38%)</title><rect x="1158.7" y="179.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.7" y="190.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.38%)</title><rect x="1158.7" y="163.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.7" y="174.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.38%)</title><rect x="1158.7" y="147.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.7" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.14%)</title><rect x="1163.2" y="435.0" width="13.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.2" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.14%)</title><rect x="1163.2" y="419.0" width="13.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.14%)</title><rect x="1163.2" y="403.0" width="13.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.14%)</title><rect x="1163.2" y="387.0" width="13.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.14%)</title><rect x="1163.2" y="371.0" width="13.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.14%)</title><rect x="1163.2" y="355.0" width="13.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.14%)</title><rect x="1163.2" y="339.0" width="13.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.14%)</title><rect x="1163.2" y="323.0" width="13.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.14%)</title><rect x="1163.2" y="307.0" width="13.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.14%)</title><rect x="1163.2" y="291.0" width="13.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.14%)</title><rect x="1163.2" y="275.0" width="13.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.14%)</title><rect x="1163.2" y="259.0" width="13.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.76%)</title><rect x="1163.2" y="243.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.2" y="254.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.38%)</title><rect x="1163.2" y="227.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.2" y="238.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.38%)</title><rect x="1163.2" y="211.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.2" y="222.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.38%)</title><rect x="1163.2" y="195.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.2" y="206.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.38%)</title><rect x="1163.2" y="179.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="190.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.38%)</title><rect x="1163.2" y="163.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.2" y="174.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.38%)</title><rect x="1163.2" y="147.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.2" y="158.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.38%)</title><rect x="1163.2" y="131.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.2" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1167.7" y="227.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1167.7" y="211.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1167.7" y="195.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1167.7" y="179.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1167.7" y="163.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1167.7" y="147.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.7" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1167.7" y="131.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.7" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1167.7" y="115.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.7" y="126.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.38%)</title><rect x="1167.7" y="99.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.7" y="110.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.38%)</title><rect x="1167.7" y="83.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.7" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.38%)</title><rect x="1167.7" y="67.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.7" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.38%)</title><rect x="1167.7" y="51.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.7" y="62.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.38%)</title><rect x="1167.7" y="35.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.38%)</title><rect x="1172.1" y="243.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.1" y="254.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.38%)</title><rect x="1176.6" y="531.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.6" y="542.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.38%)</title><rect x="1176.6" y="515.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.6" y="526.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle) (1 samples, 0.38%)</title><rect x="1176.6" y="499.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.6" y="510.0"></text>
</g>
<g>
<title>metadata_Relocation::metadata_value() (1 samples, 0.38%)</title><rect x="1176.6" y="483.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.6" y="494.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.38%)</title><rect x="1176.6" y="467.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.6" y="478.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.76%)</title><rect x="1181.1" y="563.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="574.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.76%)</title><rect x="1181.1" y="547.0" width="8.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="558.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.76%)</title><rect x="1181.1" y="531.0" width="8.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="542.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.76%)</title><rect x="1181.1" y="515.0" width="8.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="526.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.38%)</title><rect x="1181.1" y="499.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="510.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.38%)</title><rect x="1181.1" y="483.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.1" y="494.0"></text>
</g>
<g>
<title>LIR_Assembler::return_op(LIR_OprDesc*) (1 samples, 0.38%)</title><rect x="1181.1" y="467.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.1" y="478.0"></text>
</g>
<g>
<title>MacroAssembler::testl(RegisterImpl*, AddressLiteral) (1 samples, 0.38%)</title><rect x="1181.1" y="451.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="462.0"></text>
</g>
<g>
<title>Address::Address(int, unsigned char*, relocInfo::relocType) (1 samples, 0.38%)</title><rect x="1181.1" y="435.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="446.0"></text>
</g>
<g>
<title>Relocation::spec_simple(relocInfo::relocType) (1 samples, 0.38%)</title><rect x="1181.1" y="419.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.1" y="430.0"></text>
</g>
<g>
<title>RelocIterator::reloc() (1 samples, 0.38%)</title><rect x="1181.1" y="403.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.1" y="414.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.38%)</title><rect x="1185.5" y="499.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.5" y="510.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.38%)</title><rect x="1185.5" y="483.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.5" y="494.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.38%)</title><rect x="1185.5" y="467.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.5" y="478.0"></text>
</g>
<g>
<title>LIRGenerator::do_NullCheck(NullCheck*) (1 samples, 0.38%)</title><rect x="1185.5" y="451.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.5" y="462.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.38%)</title><rect x="1185.5" y="435.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.5" y="446.0"></text>
</g>
</g>
</svg>
