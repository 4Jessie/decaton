<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,618 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="10.0" y="2035.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="10.0" y="2019.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="10.0" y="2003.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="10.0" y="1987.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="10.0" y="1971.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="10.0" y="1955.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1939.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1923.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1907.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1891.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1875.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1859.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1843.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1827.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1811.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1795.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1779.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1763.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1747.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1731.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1715.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1699.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1683.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1667.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1651.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1635.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1619.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1603.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1587.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1571.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1555.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1539.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1523.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1507.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1491.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1475.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1459.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1443.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1427.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1411.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1395.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1379.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1363.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1347.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1331.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1315.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1299.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1283.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1267.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1251.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1235.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1219.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1203.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1187.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1171.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1155.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1139.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1123.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1107.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1091.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1075.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1059.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1043.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1027.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1011.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="995.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="979.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="963.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="947.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="931.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="915.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="899.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="883.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="867.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="851.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="835.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="819.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="803.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="787.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="771.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="755.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="739.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="723.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="707.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="691.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="675.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="659.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="643.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="627.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="611.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="595.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="579.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="563.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="547.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="531.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="515.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="499.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="483.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="467.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="451.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="435.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="419.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="403.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="387.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="371.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="355.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="339.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="323.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="307.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="291.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="275.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="259.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="243.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="227.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="211.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="195.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="179.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="163.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="147.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="131.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="115.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="99.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="83.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="67.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="51.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="35.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1939.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.7" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1923.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.7" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1907.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.7" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1891.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.7" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.7" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.7" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.7" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.7" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1811.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.7" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1795.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.7" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1779.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.7" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.7" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1747.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.7" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1731.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.7" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1715.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.7" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1699.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.7" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1683.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.7" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1667.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.7" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1651.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.7" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1635.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.7" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1619.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.7" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1603.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.7" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1587.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.7" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1571.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.7" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1555.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.7" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1539.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.7" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1523.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.7" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1507.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.7" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1491.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.7" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1475.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.7" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1459.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.7" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1443.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.7" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1427.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.7" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1411.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.7" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1395.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.7" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1379.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.7" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1363.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.7" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1347.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.7" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1331.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.7" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1315.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.7" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1299.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.7" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1283.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.7" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1267.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.7" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1251.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.7" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.7" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1219.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.7" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1203.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.7" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1187.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.7" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1171.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.7" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1155.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.7" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1139.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1123.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1107.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.7" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1091.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1075.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.7" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1059.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1043.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1027.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="1011.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="995.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="963.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="947.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="931.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="915.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="899.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="883.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="867.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="851.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="835.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="819.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="803.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="787.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="771.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="755.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="739.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="723.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="707.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="691.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="675.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="659.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="643.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="627.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="611.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="595.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="579.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="563.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="547.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.7" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="531.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="515.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="499.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="483.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.7" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="467.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.7" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="451.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.7" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="435.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.7" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="419.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.7" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="403.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.7" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="387.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.7" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="371.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.7" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="355.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.7" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="339.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.7" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="323.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.7" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="307.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.7" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="291.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.7" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="275.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.7" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="259.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.7" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="243.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.7" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="227.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.7" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="211.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.7" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="195.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.7" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="179.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.7" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="163.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.7" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="147.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.7" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="131.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.7" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="115.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.7" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.7" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="83.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.7" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.06%)</title><rect x="10.7" y="67.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.7" y="78.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.06%)</title><rect x="10.7" y="51.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.7" y="62.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.06%)</title><rect x="10.7" y="35.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.7" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="2035.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.5" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="2019.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.5" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="2003.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.5" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1987.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.5" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1971.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.5" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1955.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.5" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1939.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.5" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1923.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.5" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1907.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.5" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1891.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.5" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1875.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.5" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1859.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.5" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1843.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.5" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1827.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.5" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1811.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.5" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1795.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.5" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1779.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.5" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1763.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.5" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1747.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.5" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1731.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.5" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1715.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.5" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1699.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.5" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1683.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.5" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1667.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.5" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1651.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.5" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1635.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.5" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1619.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.5" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1603.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.5" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1587.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.5" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1571.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.5" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1555.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.5" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1539.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.5" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1523.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.5" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1507.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.5" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1491.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="14.5" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1475.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.5" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1459.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.5" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1443.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.5" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1427.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.5" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1411.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.5" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1395.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.5" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1379.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.5" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1363.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.5" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1347.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.5" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1331.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.5" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1315.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.5" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1299.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.5" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1283.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.5" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1267.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.5" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1251.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.5" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1235.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.5" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1219.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.5" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1203.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.5" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1187.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.5" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1171.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.5" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1155.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.5" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1139.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.5" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1123.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.5" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1107.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.5" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1091.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.5" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1075.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.5" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1059.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1043.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.5" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1027.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="1011.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="995.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="979.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="963.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="947.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="931.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="915.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="899.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="883.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="867.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="851.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="835.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="819.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="803.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="787.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="771.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="755.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="739.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="723.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="707.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="691.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="675.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="659.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="643.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="627.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="611.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="595.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="579.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="563.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="547.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="531.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.5" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="515.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.5" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="499.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.5" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="483.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.5" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="467.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.5" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="451.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.5" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="435.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.5" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="419.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.5" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="403.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.5" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="387.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.5" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="371.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.5" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="355.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.5" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="339.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.5" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="323.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.5" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="307.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.5" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="291.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.5" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="275.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.5" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="259.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.5" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="243.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.5" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="227.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.5" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="211.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.5" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="195.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.5" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="179.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.5" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="163.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.5" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="147.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.5" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="131.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.5" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="115.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.5" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="99.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.5" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="83.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.5" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="67.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.5" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="51.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.5" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="11.5" y="35.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.5" y="46.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="12.2" y="2035.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="15.2" y="2046.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.06%)</title><rect x="12.2" y="2019.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="15.2" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (299 samples, 18.48%)</title><rect x="12.9" y="2035.0" width="218.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.9" y="2046.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (299 samples, 18.48%)</title><rect x="12.9" y="2019.0" width="218.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.9" y="2030.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (6 samples, 0.37%)</title><rect x="14.4" y="2003.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.4" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.37%)</title><rect x="14.4" y="1987.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.4" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1003761366.accept (6 samples, 0.37%)</title><rect x="14.4" y="1971.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.4" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (6 samples, 0.37%)</title><rect x="14.4" y="1955.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.4" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.37%)</title><rect x="14.4" y="1939.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="17.4" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (6 samples, 0.37%)</title><rect x="14.4" y="1923.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.4" y="1934.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.06%)</title><rect x="18.0" y="1907.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.0" y="1918.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.06%)</title><rect x="18.0" y="1891.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="21.0" y="1902.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.06%)</title><rect x="18.0" y="1875.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="21.0" y="1886.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.06%)</title><rect x="18.0" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="21.0" y="1870.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.06%)</title><rect x="18.0" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="21.0" y="1854.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.06%)</title><rect x="18.0" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="21.0" y="1838.0"></text>
</g>
<g>
<title>C2Compiler::is_c2() (1 samples, 0.06%)</title><rect x="18.0" y="1811.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="21.0" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.12%)</title><rect x="18.8" y="2003.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="21.8" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.12%)</title><rect x="18.8" y="1987.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.8" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.12%)</title><rect x="18.8" y="1971.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.8" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.12%)</title><rect x="18.8" y="1955.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.8" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.12%)</title><rect x="18.8" y="1939.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.8" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.12%)</title><rect x="18.8" y="1923.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.8" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.12%)</title><rect x="18.8" y="1907.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="21.8" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.12%)</title><rect x="18.8" y="1891.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.8" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.06%)</title><rect x="19.5" y="1875.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="22.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.06%)</title><rect x="19.5" y="1859.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="22.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$266/1515146293.test (1 samples, 0.06%)</title><rect x="19.5" y="1843.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$partitionsNeedsPause$61 (1 samples, 0.06%)</title><rect x="19.5" y="1827.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.pendingTasksCount (1 samples, 0.06%)</title><rect x="19.5" y="1811.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.5" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.06%)</title><rect x="19.5" y="1795.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.06%)</title><rect x="20.2" y="2003.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.2" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.06%)</title><rect x="20.2" y="1987.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.2" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.06%)</title><rect x="20.2" y="1971.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.2" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.06%)</title><rect x="20.2" y="1955.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.2" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.06%)</title><rect x="20.2" y="1939.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.06%)</title><rect x="20.2" y="1923.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.06%)</title><rect x="20.2" y="1907.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.06%)</title><rect x="20.2" y="1891.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.06%)</title><rect x="20.2" y="1875.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.06%)</title><rect x="20.2" y="1859.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.06%)</title><rect x="20.9" y="2003.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.9" y="2014.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.06%)</title><rect x="20.9" y="1987.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="23.9" y="1998.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.06%)</title><rect x="20.9" y="1971.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="23.9" y="1982.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (227 samples, 14.03%)</title><rect x="21.7" y="2003.0" width="165.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.7" y="2014.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1002981214.accept (216 samples, 13.35%)</title><rect x="21.7" y="1987.0" width="157.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.7" y="1998.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (215 samples, 13.29%)</title><rect x="22.4" y="1971.0" width="156.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="25.4" y="1982.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (172 samples, 10.63%)</title><rect x="22.4" y="1955.0" width="125.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.4" y="1966.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (172 samples, 10.63%)</title><rect x="22.4" y="1939.0" width="125.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.4" y="1950.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (172 samples, 10.63%)</title><rect x="22.4" y="1923.0" width="125.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.4" y="1934.0">com/linecorp/de..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (172 samples, 10.63%)</title><rect x="22.4" y="1907.0" width="125.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.4" y="1918.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (172 samples, 10.63%)</title><rect x="22.4" y="1891.0" width="125.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.4" y="1902.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (172 samples, 10.63%)</title><rect x="22.4" y="1875.0" width="125.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.4" y="1886.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (111 samples, 6.86%)</title><rect x="22.4" y="1859.0" width="80.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.4" y="1870.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (25 samples, 1.55%)</title><rect x="22.4" y="1843.0" width="18.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.4" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (25 samples, 1.55%)</title><rect x="22.4" y="1827.0" width="18.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.4" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (11 samples, 0.68%)</title><rect x="32.6" y="1811.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (11 samples, 0.68%)</title><rect x="32.6" y="1795.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.6" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.49%)</title><rect x="40.6" y="1843.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="43.6" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (8 samples, 0.49%)</title><rect x="40.6" y="1827.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="43.6" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.06%)</title><rect x="41.4" y="1811.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="44.4" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.06%)</title><rect x="41.4" y="1795.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="44.4" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.37%)</title><rect x="42.1" y="1811.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (78 samples, 4.82%)</title><rect x="46.5" y="1843.0" width="56.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="49.5" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (78 samples, 4.82%)</title><rect x="46.5" y="1827.0" width="56.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="49.5" y="1838.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (77 samples, 4.76%)</title><rect x="47.2" y="1811.0" width="56.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="50.2" y="1822.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (77 samples, 4.76%)</title><rect x="47.2" y="1795.0" width="56.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.2" y="1806.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (74 samples, 4.57%)</title><rect x="49.4" y="1779.0" width="53.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="52.4" y="1790.0">sun/m..</text>
</g>
<g>
<title>Unsafe_Unpark (69 samples, 4.26%)</title><rect x="50.1" y="1763.0" width="50.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="53.1" y="1774.0">Unsaf..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.12%)</title><rect x="50.1" y="1747.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="53.1" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (36 samples, 2.22%)</title><rect x="51.6" y="1747.0" width="26.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="54.6" y="1758.0">_..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (8 samples, 0.49%)</title><rect x="77.8" y="1747.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="80.8" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (23 samples, 1.42%)</title><rect x="83.7" y="1747.0" width="16.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="86.7" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.12%)</title><rect x="100.4" y="1763.0" width="1.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="103.4" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.12%)</title><rect x="101.9" y="1763.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="104.9" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (49 samples, 3.03%)</title><rect x="103.3" y="1859.0" width="35.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="106.3" y="1870.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (49 samples, 3.03%)</title><rect x="103.3" y="1843.0" width="35.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="106.3" y="1854.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (49 samples, 3.03%)</title><rect x="103.3" y="1827.0" width="35.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="106.3" y="1838.0">jav..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.12%)</title><rect x="134.7" y="1811.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="137.7" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.25%)</title><rect x="136.2" y="1811.0" width="2.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="139.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 0.74%)</title><rect x="139.1" y="1859.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.1" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (12 samples, 0.74%)</title><rect x="139.1" y="1843.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="142.1" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (12 samples, 0.74%)</title><rect x="139.1" y="1827.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="142.1" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.06%)</title><rect x="145.6" y="1811.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.6" y="1822.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.12%)</title><rect x="146.4" y="1811.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="149.4" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (6 samples, 0.37%)</title><rect x="147.8" y="1955.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="150.8" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (6 samples, 0.37%)</title><rect x="147.8" y="1939.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="150.8" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.25%)</title><rect x="152.2" y="1955.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="155.2" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.25%)</title><rect x="152.2" y="1939.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="155.2" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.25%)</title><rect x="152.2" y="1923.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="155.2" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (33 samples, 2.04%)</title><rect x="155.1" y="1955.0" width="24.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="158.1" y="1966.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (31 samples, 1.92%)</title><rect x="155.1" y="1939.0" width="22.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="158.1" y="1950.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.49%)</title><rect x="168.3" y="1923.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="171.3" y="1934.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.12%)</title><rect x="168.3" y="1907.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.3" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.37%)</title><rect x="169.7" y="1907.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="172.7" y="1918.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.12%)</title><rect x="174.1" y="1923.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="177.1" y="1934.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.19%)</title><rect x="175.6" y="1923.0" width="2.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="178.6" y="1934.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.12%)</title><rect x="177.7" y="1939.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="180.7" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.12%)</title><rect x="179.2" y="1987.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="182.2" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.12%)</title><rect x="179.2" y="1971.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="182.2" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.12%)</title><rect x="179.2" y="1955.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="182.2" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.12%)</title><rect x="179.2" y="1939.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="182.2" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (2 samples, 0.12%)</title><rect x="179.2" y="1923.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.06%)</title><rect x="180.7" y="1987.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.7" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.06%)</title><rect x="180.7" y="1971.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="183.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.06%)</title><rect x="180.7" y="1955.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="183.7" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.06%)</title><rect x="180.7" y="1939.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (8 samples, 0.49%)</title><rect x="181.4" y="1987.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="184.4" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (8 samples, 0.49%)</title><rect x="181.4" y="1971.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="184.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.49%)</title><rect x="181.4" y="1955.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="184.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.49%)</title><rect x="181.4" y="1939.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.4" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (7 samples, 0.43%)</title><rect x="182.1" y="1923.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="185.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 3.71%)</title><rect x="187.2" y="2003.0" width="43.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="190.2" y="2014.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 3.71%)</title><rect x="187.2" y="1987.0" width="43.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="190.2" y="1998.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (40 samples, 2.47%)</title><rect x="187.9" y="1971.0" width="29.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="190.9" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (40 samples, 2.47%)</title><rect x="187.9" y="1955.0" width="29.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="190.9" y="1966.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (39 samples, 2.41%)</title><rect x="187.9" y="1939.0" width="28.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="190.9" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (35 samples, 2.16%)</title><rect x="187.9" y="1923.0" width="25.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="190.9" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (35 samples, 2.16%)</title><rect x="187.9" y="1907.0" width="25.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.9" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (13 samples, 0.80%)</title><rect x="191.6" y="1891.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="194.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.43%)</title><rect x="195.2" y="1875.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.43%)</title><rect x="195.2" y="1859.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="198.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.43%)</title><rect x="195.2" y="1843.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="198.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.43%)</title><rect x="195.2" y="1827.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.43%)</title><rect x="195.2" y="1811.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.43%)</title><rect x="195.2" y="1795.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="198.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.37%)</title><rect x="196.0" y="1779.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="199.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.06%)</title><rect x="200.3" y="1875.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.06%)</title><rect x="200.3" y="1859.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.06%)</title><rect x="200.3" y="1843.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.06%)</title><rect x="200.3" y="1827.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.3" y="1838.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.06%)</title><rect x="200.3" y="1811.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 0.93%)</title><rect x="201.1" y="1891.0" width="10.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 0.93%)</title><rect x="201.1" y="1875.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (15 samples, 0.93%)</title><rect x="201.1" y="1859.0" width="10.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="204.1" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (15 samples, 0.93%)</title><rect x="201.1" y="1843.0" width="10.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.1" y="1854.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (10 samples, 0.62%)</title><rect x="204.7" y="1827.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.7" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (10 samples, 0.62%)</title><rect x="204.7" y="1811.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.7" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (10 samples, 0.62%)</title><rect x="204.7" y="1795.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.7" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (10 samples, 0.62%)</title><rect x="204.7" y="1779.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="207.7" y="1790.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="211.3" y="1763.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="214.3" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.12%)</title><rect x="212.0" y="1891.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="215.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.19%)</title><rect x="213.5" y="1923.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="216.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.19%)</title><rect x="213.5" y="1907.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.19%)</title><rect x="213.5" y="1891.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.19%)</title><rect x="213.5" y="1875.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.19%)</title><rect x="213.5" y="1859.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (2 samples, 0.12%)</title><rect x="214.2" y="1843.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (2 samples, 0.12%)</title><rect x="214.2" y="1827.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (2 samples, 0.12%)</title><rect x="214.2" y="1811.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="217.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.06%)</title><rect x="215.7" y="1923.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.06%)</title><rect x="216.4" y="1939.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.06%)</title><rect x="216.4" y="1923.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.37%)</title><rect x="217.1" y="1971.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 0.31%)</title><rect x="217.1" y="1955.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.19%)</title><rect x="217.1" y="1939.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="220.1" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.06%)</title><rect x="217.1" y="1923.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="220.1" y="1934.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.06%)</title><rect x="217.1" y="1907.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="220.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.06%)</title><rect x="217.8" y="1923.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="220.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.06%)</title><rect x="217.8" y="1907.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="220.8" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.06%)</title><rect x="217.8" y="1891.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="220.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.06%)</title><rect x="218.6" y="1923.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.6" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.06%)</title><rect x="218.6" y="1907.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="221.6" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.06%)</title><rect x="218.6" y="1891.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.6" y="1902.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.06%)</title><rect x="218.6" y="1875.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.6" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.06%)</title><rect x="218.6" y="1859.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.6" y="1870.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.06%)</title><rect x="218.6" y="1843.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.12%)</title><rect x="219.3" y="1939.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.3" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.12%)</title><rect x="219.3" y="1923.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.12%)</title><rect x="219.3" y="1907.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="222.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.12%)</title><rect x="219.3" y="1891.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.12%)</title><rect x="219.3" y="1875.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.06%)</title><rect x="219.3" y="1859.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="222.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.06%)</title><rect x="219.3" y="1843.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.3" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.06%)</title><rect x="219.3" y="1827.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="222.3" y="1838.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.06%)</title><rect x="219.3" y="1811.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="222.3" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/2100961961.get (1 samples, 0.06%)</title><rect x="220.0" y="1859.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.0" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.lambda$makeRef$237 (1 samples, 0.06%)</title><rect x="220.0" y="1843.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.0" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.&lt;init&gt; (1 samples, 0.06%)</title><rect x="220.0" y="1827.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.06%)</title><rect x="220.8" y="1955.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.06%)</title><rect x="220.8" y="1939.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.subscription (1 samples, 0.06%)</title><rect x="220.8" y="1923.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.25%)</title><rect x="221.5" y="1971.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="224.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.25%)</title><rect x="221.5" y="1955.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.25%)</title><rect x="221.5" y="1939.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.25%)</title><rect x="221.5" y="1923.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="224.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.12%)</title><rect x="221.5" y="1907.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="224.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.12%)</title><rect x="221.5" y="1891.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.12%)</title><rect x="221.5" y="1875.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="224.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.12%)</title><rect x="221.5" y="1859.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="224.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.12%)</title><rect x="221.5" y="1843.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.5" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.12%)</title><rect x="221.5" y="1827.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.5" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="222.2" y="1811.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="225.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (2 samples, 0.12%)</title><rect x="223.0" y="1907.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.0" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.12%)</title><rect x="223.0" y="1891.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="226.0" y="1902.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.12%)</title><rect x="223.0" y="1875.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="226.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (9 samples, 0.56%)</title><rect x="224.4" y="1971.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (9 samples, 0.56%)</title><rect x="224.4" y="1955.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.4" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.12%)</title><rect x="224.4" y="1939.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/833248380.accept (2 samples, 0.12%)</title><rect x="224.4" y="1923.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.06%)</title><rect x="225.1" y="1907.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.06%)</title><rect x="225.1" y="1891.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.06%)</title><rect x="225.1" y="1875.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.1" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.06%)</title><rect x="225.1" y="1859.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.1" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.06%)</title><rect x="225.1" y="1843.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.25%)</title><rect x="225.9" y="1939.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.06%)</title><rect x="226.6" y="1923.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.06%)</title><rect x="226.6" y="1907.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.12%)</title><rect x="227.3" y="1923.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.12%)</title><rect x="227.3" y="1907.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.12%)</title><rect x="227.3" y="1891.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.12%)</title><rect x="227.3" y="1875.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.12%)</title><rect x="227.3" y="1859.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.12%)</title><rect x="227.3" y="1843.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.3" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.06%)</title><rect x="227.3" y="1827.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.3" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.06%)</title><rect x="228.1" y="1827.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.1" y="1838.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.06%)</title><rect x="228.1" y="1811.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.1" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.06%)</title><rect x="228.1" y="1795.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.1" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.06%)</title><rect x="228.1" y="1779.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/1267893537.test (1 samples, 0.06%)</title><rect x="228.1" y="1763.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.1" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.06%)</title><rect x="228.1" y="1747.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.1" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/2015725950.test (1 samples, 0.06%)</title><rect x="228.1" y="1731.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.1" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.06%)</title><rect x="228.1" y="1715.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.1" y="1726.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.06%)</title><rect x="228.1" y="1699.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.1" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.06%)</title><rect x="228.1" y="1683.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.1" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.06%)</title><rect x="228.1" y="1667.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.1" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.19%)</title><rect x="228.8" y="1939.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.8" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.06%)</title><rect x="230.2" y="1923.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.2" y="1934.0"></text>
</g>
<g>
<title>java/lang/Thread.run (746 samples, 46.11%)</title><rect x="231.0" y="2035.0" width="544.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.0" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (746 samples, 46.11%)</title><rect x="231.0" y="2019.0" width="544.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.0" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (746 samples, 46.11%)</title><rect x="231.0" y="2003.0" width="544.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="234.0" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.25%)</title><rect x="237.5" y="1987.0" width="3.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="240.5" y="1998.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.25%)</title><rect x="237.5" y="1971.0" width="3.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="240.5" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (3 samples, 0.19%)</title><rect x="240.5" y="1987.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="243.5" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/505398260.run (486 samples, 30.04%)</title><rect x="242.6" y="1987.0" width="354.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="245.6" y="1998.0">com/linecorp/decaton/processor/runtime/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (486 samples, 30.04%)</title><rect x="242.6" y="1971.0" width="354.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="245.6" y="1982.0">com/linecorp/decaton/processor/runtime/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (486 samples, 30.04%)</title><rect x="242.6" y="1955.0" width="354.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="245.6" y="1966.0">com/linecorp/decaton/processor/runtime/Processor..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.12%)</title><rect x="244.8" y="1939.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="247.8" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.49%)</title><rect x="246.3" y="1939.0" width="5.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="249.3" y="1950.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.37%)</title><rect x="247.8" y="1923.0" width="4.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="250.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (472 samples, 29.17%)</title><rect x="252.1" y="1939.0" width="344.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.1" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessP..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (1 samples, 0.06%)</title><rect x="257.2" y="1923.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="260.2" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (156 samples, 9.64%)</title><rect x="258.0" y="1923.0" width="113.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.0" y="1934.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (156 samples, 9.64%)</title><rect x="258.0" y="1907.0" width="113.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.0" y="1918.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (156 samples, 9.64%)</title><rect x="258.0" y="1891.0" width="113.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.0" y="1902.0">com/linecorp/d..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="258.0" y="1875.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="261.0" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.06%)</title><rect x="258.0" y="1859.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="261.0" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.06%)</title><rect x="258.0" y="1843.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="261.0" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (155 samples, 9.58%)</title><rect x="258.7" y="1875.0" width="113.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.7" y="1886.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (155 samples, 9.58%)</title><rect x="258.7" y="1859.0" width="113.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.7" y="1870.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (155 samples, 9.58%)</title><rect x="258.7" y="1843.0" width="113.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="261.7" y="1854.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (43 samples, 2.66%)</title><rect x="258.7" y="1827.0" width="31.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="261.7" y="1838.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (25 samples, 1.55%)</title><rect x="258.7" y="1811.0" width="18.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (25 samples, 1.55%)</title><rect x="258.7" y="1795.0" width="18.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="261.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (20 samples, 1.24%)</title><rect x="258.7" y="1779.0" width="14.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="261.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.31%)</title><rect x="273.3" y="1779.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="276.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.06%)</title><rect x="273.3" y="1763.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.3" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.19%)</title><rect x="274.0" y="1763.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.0" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.12%)</title><rect x="274.7" y="1747.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="277.7" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.12%)</title><rect x="274.7" y="1731.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.7" y="1742.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.06%)</title><rect x="276.2" y="1763.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (18 samples, 1.11%)</title><rect x="276.9" y="1811.0" width="13.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (16 samples, 0.99%)</title><rect x="278.4" y="1795.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.12%)</title><rect x="278.4" y="1779.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.4" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.06%)</title><rect x="278.4" y="1763.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="281.4" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.06%)</title><rect x="278.4" y="1747.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="281.4" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.06%)</title><rect x="278.4" y="1731.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="281.4" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.06%)</title><rect x="278.4" y="1715.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="281.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.06%)</title><rect x="279.1" y="1763.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (14 samples, 0.87%)</title><rect x="279.8" y="1779.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (105 samples, 6.49%)</title><rect x="290.0" y="1827.0" width="76.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="293.0" y="1838.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.19%)</title><rect x="290.0" y="1811.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 0.19%)</title><rect x="290.0" y="1795.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.19%)</title><rect x="290.0" y="1779.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.06%)</title><rect x="290.8" y="1763.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="293.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.06%)</title><rect x="291.5" y="1763.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="294.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.31%)</title><rect x="292.2" y="1811.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.31%)</title><rect x="292.2" y="1795.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="295.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.12%)</title><rect x="294.4" y="1779.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.49%)</title><rect x="295.9" y="1811.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.43%)</title><rect x="296.6" y="1795.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.37%)</title><rect x="296.6" y="1779.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="299.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.37%)</title><rect x="296.6" y="1763.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="299.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.19%)</title><rect x="298.8" y="1747.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="301.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.06%)</title><rect x="301.0" y="1779.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (11 samples, 0.68%)</title><rect x="301.7" y="1811.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="304.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (11 samples, 0.68%)</title><rect x="301.7" y="1795.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="304.7" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="301.7" y="1779.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="304.7" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.06%)</title><rect x="301.7" y="1763.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="304.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (10 samples, 0.62%)</title><rect x="302.4" y="1779.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="305.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (7 samples, 0.43%)</title><rect x="304.6" y="1763.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="307.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (7 samples, 0.43%)</title><rect x="304.6" y="1747.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="307.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (78 samples, 4.82%)</title><rect x="309.7" y="1811.0" width="56.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.7" y="1822.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (22 samples, 1.36%)</title><rect x="309.7" y="1795.0" width="16.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="312.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.31%)</title><rect x="311.9" y="1779.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="314.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.31%)</title><rect x="311.9" y="1763.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.31%)</title><rect x="311.9" y="1747.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (12 samples, 0.74%)</title><rect x="315.6" y="1779.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.12%)</title><rect x="324.3" y="1779.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (56 samples, 3.46%)</title><rect x="325.8" y="1795.0" width="40.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="328.8" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (56 samples, 3.46%)</title><rect x="325.8" y="1779.0" width="40.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="328.8" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (53 samples, 3.28%)</title><rect x="327.2" y="1763.0" width="38.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="330.2" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.11%)</title><rect x="330.2" y="1747.0" width="13.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="333.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.06%)</title><rect x="334.5" y="1731.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="337.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.37%)</title><rect x="335.3" y="1731.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="338.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.37%)</title><rect x="335.3" y="1715.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="338.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.37%)</title><rect x="335.3" y="1699.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="338.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.25%)</title><rect x="336.7" y="1683.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="339.7" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.19%)</title><rect x="336.7" y="1667.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="339.7" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.19%)</title><rect x="336.7" y="1651.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.7" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.06%)</title><rect x="338.2" y="1635.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="341.2" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.06%)</title><rect x="338.9" y="1667.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="341.9" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.06%)</title><rect x="339.6" y="1731.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="342.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.19%)</title><rect x="340.4" y="1731.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="343.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.19%)</title><rect x="340.4" y="1715.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="343.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.06%)</title><rect x="341.8" y="1699.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="344.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.06%)</title><rect x="342.6" y="1731.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="345.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.56%)</title><rect x="343.3" y="1747.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="346.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.31%)</title><rect x="346.2" y="1731.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="349.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.31%)</title><rect x="346.2" y="1715.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="349.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.31%)</title><rect x="346.2" y="1699.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="349.2" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.31%)</title><rect x="346.2" y="1683.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="349.2" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.06%)</title><rect x="349.9" y="1747.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="352.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (11 samples, 0.68%)</title><rect x="350.6" y="1747.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="353.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (11 samples, 0.68%)</title><rect x="350.6" y="1731.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="353.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (11 samples, 0.68%)</title><rect x="350.6" y="1715.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (11 samples, 0.68%)</title><rect x="350.6" y="1699.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.6" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 0.68%)</title><rect x="350.6" y="1683.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.6" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.56%)</title><rect x="351.3" y="1667.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.3" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor5.newInstance (4 samples, 0.25%)</title><rect x="355.0" y="1651.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="358.0" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor5.newInstance (1 samples, 0.06%)</title><rect x="357.9" y="1667.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="360.9" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (10 samples, 0.62%)</title><rect x="358.6" y="1747.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.6" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.62%)</title><rect x="358.6" y="1731.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="361.6" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.62%)</title><rect x="358.6" y="1715.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="361.6" y="1726.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.06%)</title><rect x="364.4" y="1699.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="367.4" y="1710.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.06%)</title><rect x="364.4" y="1683.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="367.4" y="1694.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.06%)</title><rect x="364.4" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="367.4" y="1678.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.06%)</title><rect x="364.4" y="1651.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="367.4" y="1662.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.06%)</title><rect x="364.4" y="1635.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="367.4" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.06%)</title><rect x="365.2" y="1699.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="368.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase._delegateDeserializer (1 samples, 0.06%)</title><rect x="365.9" y="1763.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="368.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.43%)</title><rect x="366.6" y="1827.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="369.6" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.43%)</title><rect x="366.6" y="1811.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="369.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.43%)</title><rect x="366.6" y="1795.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="369.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.43%)</title><rect x="366.6" y="1779.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="369.6" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.25%)</title><rect x="368.8" y="1763.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="371.8" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (282 samples, 17.43%)</title><rect x="371.7" y="1923.0" width="205.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="374.7" y="1934.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (44 samples, 2.72%)</title><rect x="372.5" y="1907.0" width="32.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="375.5" y="1918.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (44 samples, 2.72%)</title><rect x="372.5" y="1891.0" width="32.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="375.5" y="1902.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (42 samples, 2.60%)</title><rect x="373.9" y="1875.0" width="30.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="376.9" y="1886.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (20 samples, 1.24%)</title><rect x="374.6" y="1859.0" width="14.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="377.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (20 samples, 1.24%)</title><rect x="374.6" y="1843.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="377.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (11 samples, 0.68%)</title><rect x="381.2" y="1827.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 0.68%)</title><rect x="381.2" y="1811.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="384.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (11 samples, 0.68%)</title><rect x="381.2" y="1795.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="384.2" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.25%)</title><rect x="389.2" y="1859.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="392.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.25%)</title><rect x="389.2" y="1843.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="392.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.25%)</title><rect x="389.2" y="1827.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="392.2" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (17 samples, 1.05%)</title><rect x="392.2" y="1859.0" width="12.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.2" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 0.49%)</title><rect x="398.7" y="1843.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="401.7" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 0.49%)</title><rect x="398.7" y="1827.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="401.7" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (11 samples, 0.68%)</title><rect x="404.5" y="1907.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.5" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.56%)</title><rect x="406.0" y="1891.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (9 samples, 0.56%)</title><rect x="406.0" y="1875.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="409.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (165 samples, 10.20%)</title><rect x="412.6" y="1907.0" width="120.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="415.6" y="1918.0">com/linecorp/de..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="412.6" y="1891.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="415.6" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (164 samples, 10.14%)</title><rect x="413.3" y="1891.0" width="119.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="416.3" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="418.4" y="1875.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="421.4" y="1886.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.06%)</title><rect x="418.4" y="1859.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="421.4" y="1870.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.56%)</title><rect x="419.1" y="1875.0" width="6.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="422.1" y="1886.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.49%)</title><rect x="419.9" y="1859.0" width="5.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="422.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (71 samples, 4.39%)</title><rect x="425.7" y="1875.0" width="51.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="428.7" y="1886.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (48 samples, 2.97%)</title><rect x="435.9" y="1859.0" width="35.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="438.9" y="1870.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (46 samples, 2.84%)</title><rect x="437.4" y="1843.0" width="33.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.4" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (26 samples, 1.61%)</title><rect x="443.2" y="1827.0" width="19.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="446.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (26 samples, 1.61%)</title><rect x="443.2" y="1811.0" width="19.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="446.2" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (26 samples, 1.61%)</title><rect x="443.2" y="1795.0" width="19.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="446.2" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.56%)</title><rect x="451.2" y="1779.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="454.2" y="1790.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.06%)</title><rect x="451.2" y="1763.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="454.2" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.19%)</title><rect x="452.0" y="1763.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="455.0" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.06%)</title><rect x="452.0" y="1747.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="455.0" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.06%)</title><rect x="452.0" y="1731.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="455.0" y="1742.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.06%)</title><rect x="452.7" y="1747.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="455.7" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.06%)</title><rect x="453.4" y="1747.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="456.4" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.06%)</title><rect x="453.4" y="1731.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="456.4" y="1742.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.06%)</title><rect x="453.4" y="1715.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="456.4" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.25%)</title><rect x="454.1" y="1763.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="457.1" y="1774.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.06%)</title><rect x="455.6" y="1747.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="458.6" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.06%)</title><rect x="456.3" y="1747.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="459.3" y="1758.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.06%)</title><rect x="456.3" y="1731.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="459.3" y="1742.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.06%)</title><rect x="457.1" y="1763.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="460.1" y="1774.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.06%)</title><rect x="457.8" y="1779.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="460.8" y="1790.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.31%)</title><rect x="458.5" y="1779.0" width="3.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="461.5" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.12%)</title><rect x="462.2" y="1827.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="465.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.06%)</title><rect x="463.6" y="1827.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="466.6" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.31%)</title><rect x="464.4" y="1827.0" width="3.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="467.4" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.06%)</title><rect x="468.0" y="1827.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="471.0" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.19%)</title><rect x="468.7" y="1827.0" width="2.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="471.7" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.12%)</title><rect x="470.9" y="1859.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="473.9" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.43%)</title><rect x="472.4" y="1859.0" width="5.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="475.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.12%)</title><rect x="477.5" y="1875.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="480.5" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.56%)</title><rect x="478.9" y="1875.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="481.9" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (9 samples, 0.56%)</title><rect x="478.9" y="1859.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="481.9" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.06%)</title><rect x="478.9" y="1843.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="481.9" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.06%)</title><rect x="478.9" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="481.9" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.06%)</title><rect x="478.9" y="1811.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="481.9" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.06%)</title><rect x="478.9" y="1795.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="481.9" y="1806.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.49%)</title><rect x="479.7" y="1843.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="482.7" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.06%)</title><rect x="484.8" y="1827.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.8" y="1838.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (65 samples, 4.02%)</title><rect x="485.5" y="1875.0" width="47.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="488.5" y="1886.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (63 samples, 3.89%)</title><rect x="487.0" y="1859.0" width="45.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="490.0" y="1870.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (21 samples, 1.30%)</title><rect x="487.0" y="1843.0" width="15.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="490.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (21 samples, 1.30%)</title><rect x="487.0" y="1827.0" width="15.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="490.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (14 samples, 0.87%)</title><rect x="492.1" y="1811.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="495.1" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (14 samples, 0.87%)</title><rect x="492.1" y="1795.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="495.1" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (14 samples, 0.87%)</title><rect x="492.1" y="1779.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="495.1" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.06%)</title><rect x="502.3" y="1843.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="505.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.06%)</title><rect x="502.3" y="1827.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="505.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.06%)</title><rect x="502.3" y="1811.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="505.3" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.06%)</title><rect x="502.3" y="1795.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="505.3" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (41 samples, 2.53%)</title><rect x="503.0" y="1843.0" width="29.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="506.0" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (35 samples, 2.16%)</title><rect x="507.4" y="1827.0" width="25.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="510.4" y="1838.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.12%)</title><rect x="508.8" y="1811.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="511.8" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.31%)</title><rect x="510.3" y="1811.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="513.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.31%)</title><rect x="510.3" y="1795.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="513.3" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (26 samples, 1.61%)</title><rect x="513.9" y="1811.0" width="19.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="516.9" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.12%)</title><rect x="523.4" y="1795.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="526.4" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.49%)</title><rect x="524.9" y="1795.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="527.9" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.12%)</title><rect x="529.3" y="1779.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="532.3" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.12%)</title><rect x="529.3" y="1763.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="532.3" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.12%)</title><rect x="529.3" y="1747.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="532.3" y="1758.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.19%)</title><rect x="530.7" y="1795.0" width="2.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="533.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (45 samples, 2.78%)</title><rect x="532.9" y="1907.0" width="32.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="535.9" y="1918.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (45 samples, 2.78%)</title><rect x="532.9" y="1891.0" width="32.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="535.9" y="1902.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1713460839.process (24 samples, 1.48%)</title><rect x="535.1" y="1875.0" width="17.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="538.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (23 samples, 1.42%)</title><rect x="535.8" y="1859.0" width="16.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="538.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (22 samples, 1.36%)</title><rect x="535.8" y="1843.0" width="16.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="538.8" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.12%)</title><rect x="537.3" y="1827.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="540.3" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.12%)</title><rect x="537.3" y="1811.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="540.3" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.12%)</title><rect x="537.3" y="1795.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="540.3" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.06%)</title><rect x="538.0" y="1779.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="541.0" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.06%)</title><rect x="538.0" y="1763.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="541.0" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.06%)</title><rect x="538.7" y="1827.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="541.7" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.06%)</title><rect x="538.7" y="1811.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="541.7" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.06%)</title><rect x="538.7" y="1795.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="541.7" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.06%)</title><rect x="538.7" y="1779.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.06%)</title><rect x="538.7" y="1763.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.7" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.56%)</title><rect x="539.5" y="1827.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="542.5" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.56%)</title><rect x="539.5" y="1811.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="542.5" y="1822.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.56%)</title><rect x="539.5" y="1795.0" width="6.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="542.5" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.49%)</title><rect x="546.0" y="1827.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="549.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.06%)</title><rect x="551.1" y="1811.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="554.1" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.06%)</title><rect x="551.1" y="1795.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="554.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.06%)</title><rect x="551.9" y="1843.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="554.9" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.12%)</title><rect x="552.6" y="1875.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="555.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.12%)</title><rect x="552.6" y="1859.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="555.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/558187323.linkToTargetMethod (3 samples, 0.19%)</title><rect x="554.1" y="1875.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="557.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (3 samples, 0.19%)</title><rect x="554.1" y="1859.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="557.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1102949130.get$Lambda (3 samples, 0.19%)</title><rect x="554.1" y="1843.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="557.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1102949130.&lt;init&gt; (3 samples, 0.19%)</title><rect x="554.1" y="1827.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="557.1" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.37%)</title><rect x="556.2" y="1875.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="559.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.31%)</title><rect x="557.0" y="1859.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="560.0" y="1870.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.25%)</title><rect x="557.0" y="1843.0" width="2.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="560.0" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.06%)</title><rect x="559.9" y="1843.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="562.9" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.43%)</title><rect x="560.6" y="1875.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="563.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.12%)</title><rect x="564.3" y="1859.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="567.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 0.99%)</title><rect x="565.7" y="1907.0" width="11.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="568.7" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.12%)</title><rect x="568.6" y="1891.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="571.6" y="1902.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.12%)</title><rect x="568.6" y="1875.0" width="1.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="571.6" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.62%)</title><rect x="570.1" y="1891.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="573.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.56%)</title><rect x="570.8" y="1875.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="573.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1339661713.accept (9 samples, 0.56%)</title><rect x="570.8" y="1859.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="573.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (9 samples, 0.56%)</title><rect x="570.8" y="1843.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="573.8" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (9 samples, 0.56%)</title><rect x="570.8" y="1827.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="573.8" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (9 samples, 0.56%)</title><rect x="570.8" y="1811.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="573.8" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.37%)</title><rect x="573.0" y="1795.0" width="4.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="576.0" y="1806.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.37%)</title><rect x="573.0" y="1779.0" width="4.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="576.0" y="1790.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1344199921.linkToTargetMethod (1 samples, 0.06%)</title><rect x="577.4" y="1923.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="580.4" y="1934.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.06%)</title><rect x="577.4" y="1907.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="580.4" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/187880336.get$Lambda (1 samples, 0.06%)</title><rect x="577.4" y="1891.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="580.4" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="577.4" y="1875.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="580.4" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.06%)</title><rect x="577.4" y="1859.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="580.4" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.06%)</title><rect x="577.4" y="1843.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="580.4" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.06%)</title><rect x="577.4" y="1827.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="580.4" y="1838.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.06%)</title><rect x="577.4" y="1811.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="580.4" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 0.93%)</title><rect x="578.1" y="1923.0" width="11.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="581.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 0.74%)</title><rect x="580.3" y="1907.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="583.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.62%)</title><rect x="581.8" y="1891.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="584.8" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/187880336.accept (10 samples, 0.62%)</title><rect x="581.8" y="1875.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="584.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$44 (10 samples, 0.62%)</title><rect x="581.8" y="1859.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="584.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1352348002.complete (10 samples, 0.62%)</title><rect x="581.8" y="1843.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$54 (10 samples, 0.62%)</title><rect x="581.8" y="1827.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="584.8" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (10 samples, 0.62%)</title><rect x="581.8" y="1811.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="584.8" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.62%)</title><rect x="581.8" y="1795.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="584.8" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.62%)</title><rect x="581.8" y="1779.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="584.8" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (10 samples, 0.62%)</title><rect x="581.8" y="1763.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="584.8" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (10 samples, 0.62%)</title><rect x="581.8" y="1747.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.8" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.12%)</title><rect x="587.6" y="1731.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="590.6" y="1742.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.62%)</title><rect x="589.1" y="1923.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="592.1" y="1934.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.62%)</title><rect x="589.1" y="1907.0" width="7.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="592.1" y="1918.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.06%)</title><rect x="596.4" y="1939.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="599.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.31%)</title><rect x="597.1" y="1987.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="600.1" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.31%)</title><rect x="597.1" y="1971.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="600.1" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.31%)</title><rect x="597.1" y="1955.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="600.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.31%)</title><rect x="597.1" y="1939.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="600.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 0.19%)</title><rect x="598.5" y="1923.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="601.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (239 samples, 14.77%)</title><rect x="600.7" y="1987.0" width="174.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="603.7" y="1998.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (237 samples, 14.65%)</title><rect x="600.7" y="1971.0" width="172.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="603.7" y="1982.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndDecrement (9 samples, 0.56%)</title><rect x="605.8" y="1955.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="608.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (204 samples, 12.61%)</title><rect x="612.4" y="1955.0" width="148.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="615.4" y="1966.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (27 samples, 1.67%)</title><rect x="620.4" y="1939.0" width="19.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="623.4" y="1950.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="620.4" y="1923.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="623.4" y="1934.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.06%)</title><rect x="620.4" y="1907.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="623.4" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.06%)</title><rect x="620.4" y="1891.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="623.4" y="1902.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.06%)</title><rect x="620.4" y="1875.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="623.4" y="1886.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.06%)</title><rect x="620.4" y="1859.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="623.4" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (26 samples, 1.61%)</title><rect x="621.1" y="1923.0" width="19.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="624.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (26 samples, 1.61%)</title><rect x="621.1" y="1907.0" width="19.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="624.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (26 samples, 1.61%)</title><rect x="621.1" y="1891.0" width="19.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="624.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (166 samples, 10.26%)</title><rect x="640.1" y="1939.0" width="121.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="643.1" y="1950.0">java/util/concu..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (161 samples, 9.95%)</title><rect x="643.8" y="1923.0" width="117.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="646.8" y="1934.0">sun/misc/Unsaf..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.06%)</title><rect x="648.1" y="1907.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="651.1" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.12%)</title><rect x="648.9" y="1907.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="651.9" y="1918.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.06%)</title><rect x="650.3" y="1907.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="653.3" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (144 samples, 8.90%)</title><rect x="651.1" y="1907.0" width="105.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="654.1" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.06%)</title><rect x="655.4" y="1891.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="658.4" y="1902.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.06%)</title><rect x="656.2" y="1891.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="659.2" y="1902.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.06%)</title><rect x="656.9" y="1891.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="659.9" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 1.24%)</title><rect x="657.6" y="1891.0" width="14.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="660.6" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.25%)</title><rect x="662.7" y="1875.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="665.7" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.12%)</title><rect x="662.7" y="1859.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="665.7" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.06%)</title><rect x="663.4" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="666.4" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.12%)</title><rect x="664.2" y="1859.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="667.2" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.06%)</title><rect x="665.6" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="668.6" y="1886.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.06%)</title><rect x="666.4" y="1875.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="669.4" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.43%)</title><rect x="667.1" y="1875.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="670.1" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.06%)</title><rect x="672.2" y="1891.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="675.2" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.06%)</title><rect x="672.9" y="1891.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="675.9" y="1902.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.06%)</title><rect x="673.7" y="1891.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="676.7" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (10 samples, 0.62%)</title><rect x="674.4" y="1891.0" width="7.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="677.4" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (34 samples, 2.10%)</title><rect x="681.7" y="1891.0" width="24.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="684.7" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (49 samples, 3.03%)</title><rect x="706.5" y="1891.0" width="35.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="709.5" y="1902.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.31%)</title><rect x="742.2" y="1891.0" width="3.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="745.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.12%)</title><rect x="745.9" y="1891.0" width="1.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="748.9" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.12%)</title><rect x="747.3" y="1891.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="750.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.25%)</title><rect x="748.8" y="1891.0" width="2.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="751.8" y="1902.0"></text>
</g>
<g>
<title>_init (2 samples, 0.12%)</title><rect x="751.7" y="1891.0" width="1.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="754.7" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.12%)</title><rect x="753.2" y="1891.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="756.2" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.06%)</title><rect x="754.6" y="1891.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="757.6" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.06%)</title><rect x="755.3" y="1891.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="758.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.31%)</title><rect x="756.1" y="1907.0" width="3.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="759.1" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.12%)</title><rect x="759.7" y="1907.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="762.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (13 samples, 0.80%)</title><rect x="761.2" y="1955.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="764.2" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (12 samples, 0.74%)</title><rect x="761.9" y="1939.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="764.9" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (12 samples, 0.74%)</title><rect x="761.9" y="1923.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="764.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.25%)</title><rect x="770.7" y="1955.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="773.7" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.25%)</title><rect x="770.7" y="1939.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="773.7" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.06%)</title><rect x="772.8" y="1923.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="775.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.06%)</title><rect x="772.8" y="1907.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="775.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (2 samples, 0.12%)</title><rect x="773.6" y="1971.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="776.6" y="1982.0"></text>
</g>
<g>
<title>start_thread (569 samples, 35.17%)</title><rect x="775.0" y="2035.0" width="415.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="778.0" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (569 samples, 35.17%)</title><rect x="775.0" y="2019.0" width="415.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="778.0" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (32 samples, 1.98%)</title><rect x="775.0" y="2003.0" width="23.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="778.0" y="2014.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.37%)</title><rect x="775.0" y="1987.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="778.0" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.37%)</title><rect x="775.0" y="1971.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="778.0" y="1982.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.37%)</title><rect x="775.0" y="1955.0" width="4.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="778.0" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (26 samples, 1.61%)</title><rect x="779.4" y="1987.0" width="19.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="782.4" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.56%)</title><rect x="779.4" y="1971.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="782.4" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.12%)</title><rect x="779.4" y="1955.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="782.4" y="1966.0"></text>
</g>
<g>
<title>SpinPause (7 samples, 0.43%)</title><rect x="780.9" y="1955.0" width="5.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="783.9" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.06%)</title><rect x="786.0" y="1971.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="789.0" y="1982.0"></text>
</g>
<g>
<title>G1DefaultParGCAllocator::retire_alloc_buffers() (1 samples, 0.06%)</title><rect x="786.0" y="1955.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="789.0" y="1966.0"></text>
</g>
<g>
<title>ParGCAllocBuffer::flush_stats(PLABStats*) (1 samples, 0.06%)</title><rect x="786.0" y="1939.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="789.0" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.25%)</title><rect x="786.7" y="1971.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="789.7" y="1982.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.06%)</title><rect x="786.7" y="1955.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="789.7" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="786.7" y="1939.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="789.7" y="1950.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.06%)</title><rect x="786.7" y="1923.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="789.7" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.19%)</title><rect x="787.4" y="1955.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="790.4" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.19%)</title><rect x="787.4" y="1939.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="790.4" y="1950.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.06%)</title><rect x="788.9" y="1923.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="791.9" y="1934.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.06%)</title><rect x="788.9" y="1907.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="791.9" y="1918.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="788.9" y="1891.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="791.9" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.06%)</title><rect x="788.9" y="1875.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="791.9" y="1886.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (12 samples, 0.74%)</title><rect x="789.6" y="1971.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="792.6" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (12 samples, 0.74%)</title><rect x="789.6" y="1955.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="792.6" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (11 samples, 0.68%)</title><rect x="789.6" y="1939.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="792.6" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (11 samples, 0.68%)</title><rect x="789.6" y="1923.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="792.6" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (11 samples, 0.68%)</title><rect x="789.6" y="1907.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="792.6" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (11 samples, 0.68%)</title><rect x="789.6" y="1891.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="792.6" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (9 samples, 0.56%)</title><rect x="791.1" y="1875.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="794.1" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.19%)</title><rect x="791.8" y="1859.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="794.8" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.06%)</title><rect x="794.0" y="1859.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="797.0" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (2 samples, 0.12%)</title><rect x="794.7" y="1859.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="797.7" y="1870.0"></text>
</g>
<g>
<title>MemRegion::intersection(MemRegion) const (1 samples, 0.06%)</title><rect x="796.2" y="1859.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="799.2" y="1870.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.06%)</title><rect x="796.9" y="1859.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="799.9" y="1870.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.06%)</title><rect x="797.6" y="1939.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="800.6" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.06%)</title><rect x="797.6" y="1923.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="800.6" y="1934.0"></text>
</g>
<g>
<title>JavaThread::run() (534 samples, 33.00%)</title><rect x="798.4" y="2003.0" width="389.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="801.4" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (534 samples, 33.00%)</title><rect x="798.4" y="1987.0" width="389.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="801.4" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (533 samples, 32.94%)</title><rect x="798.4" y="1971.0" width="388.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="801.4" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (532 samples, 32.88%)</title><rect x="798.4" y="1955.0" width="388.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="801.4" y="1966.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (530 samples, 32.76%)</title><rect x="798.4" y="1939.0" width="386.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="801.4" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (530 samples, 32.76%)</title><rect x="798.4" y="1923.0" width="386.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="801.4" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int,..</text>
</g>
<g>
<title>Compile::Code_Gen() (204 samples, 12.61%)</title><rect x="798.4" y="1907.0" width="148.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="801.4" y="1918.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (6 samples, 0.37%)</title><rect x="798.4" y="1891.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="801.4" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.19%)</title><rect x="798.4" y="1875.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="801.4" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.19%)</title><rect x="800.6" y="1875.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="803.6" y="1886.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.06%)</title><rect x="800.6" y="1859.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="803.6" y="1870.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.06%)</title><rect x="800.6" y="1843.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="803.6" y="1854.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.06%)</title><rect x="800.6" y="1827.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="803.6" y="1838.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.06%)</title><rect x="800.6" y="1811.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="803.6" y="1822.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.06%)</title><rect x="801.3" y="1859.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="804.3" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.06%)</title><rect x="801.3" y="1843.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="804.3" y="1854.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.06%)</title><rect x="801.3" y="1827.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="804.3" y="1838.0"></text>
</g>
<g>
<title>loadNNode::reloc() const (1 samples, 0.06%)</title><rect x="802.0" y="1859.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="805.0" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (9 samples, 0.56%)</title><rect x="802.7" y="1891.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="805.7" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.25%)</title><rect x="802.7" y="1875.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="805.7" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.12%)</title><rect x="802.7" y="1859.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="805.7" y="1870.0"></text>
</g>
<g>
<title>ConstantOopWriteValue::write_on(DebugInfoWriteStream*) (1 samples, 0.06%)</title><rect x="802.7" y="1843.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="805.7" y="1854.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::maybe_find_index(_jobject*) (1 samples, 0.06%)</title><rect x="802.7" y="1827.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="805.7" y="1838.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.06%)</title><rect x="803.5" y="1843.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="806.5" y="1854.0"></text>
</g>
<g>
<title>GrowableArray&lt;ScopeValue*&gt;::append(ScopeValue* const&amp;) (1 samples, 0.06%)</title><rect x="804.2" y="1859.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="807.2" y="1870.0"></text>
</g>
<g>
<title>ObjectValue::write_on(DebugInfoWriteStream*) (1 samples, 0.06%)</title><rect x="804.9" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="807.9" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (4 samples, 0.25%)</title><rect x="805.7" y="1875.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="808.7" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (4 samples, 0.25%)</title><rect x="805.7" y="1859.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="808.7" y="1870.0"></text>
</g>
<g>
<title>compN_rReg_imm_klassNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.06%)</title><rect x="808.6" y="1875.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="811.6" y="1886.0"></text>
</g>
<g>
<title>immNKlassOper::constant() const (1 samples, 0.06%)</title><rect x="808.6" y="1859.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="811.6" y="1870.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (2 samples, 0.12%)</title><rect x="809.3" y="1891.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="812.3" y="1902.0"></text>
</g>
<g>
<title>Matcher::match() (19 samples, 1.17%)</title><rect x="810.8" y="1891.0" width="13.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="813.8" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.12%)</title><rect x="810.8" y="1875.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="813.8" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (17 samples, 1.05%)</title><rect x="812.2" y="1875.0" width="12.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="815.2" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (6 samples, 0.37%)</title><rect x="813.7" y="1859.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="816.7" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (7 samples, 0.43%)</title><rect x="818.1" y="1859.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="821.1" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.19%)</title><rect x="818.8" y="1843.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="821.8" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.12%)</title><rect x="818.8" y="1827.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="821.8" y="1838.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.06%)</title><rect x="818.8" y="1811.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="821.8" y="1822.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.06%)</title><rect x="818.8" y="1795.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="821.8" y="1806.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.06%)</title><rect x="819.5" y="1811.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="822.5" y="1822.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.06%)</title><rect x="819.5" y="1795.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="822.5" y="1806.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.06%)</title><rect x="820.2" y="1827.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="823.2" y="1838.0"></text>
</g>
<g>
<title>State::_sub_Op_ConP(Node const*) (1 samples, 0.06%)</title><rect x="820.2" y="1811.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="823.2" y="1822.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.12%)</title><rect x="821.0" y="1843.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="824.0" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.12%)</title><rect x="821.0" y="1827.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="824.0" y="1838.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.06%)</title><rect x="821.0" y="1811.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="824.0" y="1822.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.06%)</title><rect x="821.7" y="1811.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="824.7" y="1822.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.06%)</title><rect x="821.7" y="1795.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="824.7" y="1806.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.06%)</title><rect x="822.4" y="1843.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="825.4" y="1854.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.06%)</title><rect x="823.2" y="1859.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="826.2" y="1870.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.06%)</title><rect x="823.9" y="1859.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="826.9" y="1870.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.06%)</title><rect x="823.9" y="1843.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="826.9" y="1854.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.06%)</title><rect x="824.6" y="1891.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="827.6" y="1902.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.06%)</title><rect x="824.6" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="827.6" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.06%)</title><rect x="825.4" y="1891.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="828.4" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.06%)</title><rect x="825.4" y="1875.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="828.4" y="1886.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.06%)</title><rect x="825.4" y="1859.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="828.4" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (9 samples, 0.56%)</title><rect x="826.1" y="1891.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="829.1" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (9 samples, 0.56%)</title><rect x="826.1" y="1875.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="829.1" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (3 samples, 0.19%)</title><rect x="826.1" y="1859.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="829.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (5 samples, 0.31%)</title><rect x="828.3" y="1859.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="831.3" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (3 samples, 0.19%)</title><rect x="829.0" y="1843.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="832.0" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.06%)</title><rect x="831.2" y="1843.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="834.2" y="1854.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.06%)</title><rect x="831.2" y="1827.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="834.2" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.06%)</title><rect x="831.9" y="1859.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="834.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (157 samples, 9.70%)</title><rect x="832.6" y="1891.0" width="114.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="835.6" y="1902.0">PhaseChaitin::..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.06%)</title><rect x="832.6" y="1875.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="835.6" y="1886.0"></text>
</g>
<g>
<title>MachHaltNode::jvms() const (1 samples, 0.06%)</title><rect x="833.4" y="1875.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="836.4" y="1886.0"></text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.06%)</title><rect x="834.1" y="1875.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="837.1" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (6 samples, 0.37%)</title><rect x="834.8" y="1875.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="837.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (11 samples, 0.68%)</title><rect x="839.2" y="1875.0" width="8.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="842.2" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.06%)</title><rect x="840.7" y="1859.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="843.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (8 samples, 0.49%)</title><rect x="841.4" y="1859.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="844.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 0.37%)</title><rect x="842.9" y="1843.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="845.9" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (6 samples, 0.37%)</title><rect x="847.2" y="1875.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="850.2" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.06%)</title><rect x="848.0" y="1859.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="851.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.25%)</title><rect x="848.7" y="1859.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="851.7" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.19%)</title><rect x="849.4" y="1843.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="852.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (20 samples, 1.24%)</title><rect x="851.6" y="1875.0" width="14.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="854.6" y="1886.0"></text>
</g>
<g>
<title>MachCallNode::in_RegMask(unsigned int) const (1 samples, 0.06%)</title><rect x="864.0" y="1859.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="867.0" y="1870.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.06%)</title><rect x="864.7" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="867.7" y="1870.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.06%)</title><rect x="864.7" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="867.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.06%)</title><rect x="865.5" y="1859.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="868.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.06%)</title><rect x="865.5" y="1843.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="868.5" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (27 samples, 1.67%)</title><rect x="866.2" y="1875.0" width="19.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="869.2" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (3 samples, 0.19%)</title><rect x="870.6" y="1859.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="873.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.12%)</title><rect x="872.8" y="1859.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="875.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (15 samples, 0.93%)</title><rect x="874.2" y="1859.0" width="11.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="877.2" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.06%)</title><rect x="879.3" y="1843.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="882.3" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (7 samples, 0.43%)</title><rect x="880.0" y="1843.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="883.0" y="1854.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.06%)</title><rect x="885.2" y="1859.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="888.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.06%)</title><rect x="885.9" y="1875.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="888.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.06%)</title><rect x="885.9" y="1859.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="888.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.06%)</title><rect x="886.6" y="1875.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="889.6" y="1886.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.06%)</title><rect x="886.6" y="1859.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="889.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (12 samples, 0.74%)</title><rect x="887.3" y="1875.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="890.3" y="1886.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.06%)</title><rect x="893.9" y="1859.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="896.9" y="1870.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.12%)</title><rect x="894.6" y="1859.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="897.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.06%)</title><rect x="896.1" y="1875.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="899.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (12 samples, 0.74%)</title><rect x="896.8" y="1875.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="899.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (6 samples, 0.37%)</title><rect x="901.2" y="1859.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="904.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.12%)</title><rect x="905.6" y="1875.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="908.6" y="1886.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (29 samples, 1.79%)</title><rect x="907.0" y="1875.0" width="21.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="910.0" y="1886.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (29 samples, 1.79%)</title><rect x="907.0" y="1859.0" width="21.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="910.0" y="1870.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (29 samples, 1.79%)</title><rect x="907.0" y="1843.0" width="21.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="910.0" y="1854.0">P..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.12%)</title><rect x="908.5" y="1827.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="911.5" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.06%)</title><rect x="910.0" y="1827.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="913.0" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (22 samples, 1.36%)</title><rect x="910.7" y="1827.0" width="16.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="913.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.12%)</title><rect x="926.7" y="1827.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="929.7" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.12%)</title><rect x="926.7" y="1811.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="929.7" y="1822.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (5 samples, 0.31%)</title><rect x="928.2" y="1875.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="931.2" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.12%)</title><rect x="930.4" y="1859.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="933.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.25%)</title><rect x="931.8" y="1875.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="934.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.06%)</title><rect x="933.3" y="1859.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="936.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.06%)</title><rect x="934.0" y="1859.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="937.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.12%)</title><rect x="934.7" y="1875.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="937.7" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.12%)</title><rect x="934.7" y="1859.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="937.7" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (13 samples, 0.80%)</title><rect x="936.2" y="1875.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="939.2" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.12%)</title><rect x="939.1" y="1859.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="942.1" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (7 samples, 0.43%)</title><rect x="940.6" y="1859.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="943.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.06%)</title><rect x="945.0" y="1843.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="948.0" y="1854.0"></text>
</g>
<g>
<title>SafePointScalarObjectNode::Opcode() const (1 samples, 0.06%)</title><rect x="945.7" y="1875.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="948.7" y="1886.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.06%)</title><rect x="946.4" y="1875.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="949.4" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (306 samples, 18.91%)</title><rect x="947.1" y="1907.0" width="223.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="950.1" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.06%)</title><rect x="947.1" y="1891.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="950.1" y="1902.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.06%)</title><rect x="947.1" y="1875.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="950.1" y="1886.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.06%)</title><rect x="947.1" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="950.1" y="1870.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.06%)</title><rect x="947.1" y="1843.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="950.1" y="1854.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.06%)</title><rect x="947.9" y="1891.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="950.9" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.06%)</title><rect x="947.9" y="1875.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="950.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.06%)</title><rect x="947.9" y="1859.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="950.9" y="1870.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="947.9" y="1843.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="950.9" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.37%)</title><rect x="948.6" y="1891.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="951.6" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.37%)</title><rect x="948.6" y="1875.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="951.6" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.06%)</title><rect x="950.1" y="1859.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="953.1" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.06%)</title><rect x="950.1" y="1843.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="953.1" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.06%)</title><rect x="950.1" y="1827.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="953.1" y="1838.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.06%)</title><rect x="950.1" y="1811.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="953.1" y="1822.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.06%)</title><rect x="950.1" y="1795.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="953.1" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.06%)</title><rect x="950.1" y="1779.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="953.1" y="1790.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.06%)</title><rect x="950.1" y="1763.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="953.1" y="1774.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.06%)</title><rect x="950.1" y="1747.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="953.1" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.19%)</title><rect x="950.8" y="1859.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="953.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.19%)</title><rect x="950.8" y="1843.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="953.8" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1827.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="954.5" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1811.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="954.5" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1795.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="954.5" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1779.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="954.5" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1763.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="954.5" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1747.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="954.5" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1731.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="954.5" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1715.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="954.5" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1699.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="954.5" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1683.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="954.5" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1667.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="954.5" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1651.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="954.5" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1635.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="954.5" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1619.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="954.5" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1603.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="954.5" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1587.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="954.5" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1571.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="954.5" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1555.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="954.5" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1539.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="954.5" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1523.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="954.5" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1507.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="954.5" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1491.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="954.5" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1475.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="954.5" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1459.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="954.5" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1443.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="954.5" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1427.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="954.5" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1411.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="954.5" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="951.5" y="1395.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="954.5" y="1406.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.06%)</title><rect x="951.5" y="1379.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="954.5" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="952.2" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="955.2" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.06%)</title><rect x="952.2" y="1811.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="955.2" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.06%)</title><rect x="952.2" y="1795.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="955.2" y="1806.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.06%)</title><rect x="952.2" y="1779.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="955.2" y="1790.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.12%)</title><rect x="953.0" y="1891.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="956.0" y="1902.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.06%)</title><rect x="953.7" y="1875.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="956.7" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (3 samples, 0.19%)</title><rect x="954.4" y="1891.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="957.4" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (3 samples, 0.19%)</title><rect x="954.4" y="1875.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="957.4" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.06%)</title><rect x="955.9" y="1859.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="958.9" y="1870.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.06%)</title><rect x="955.9" y="1843.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="958.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.06%)</title><rect x="956.6" y="1891.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="959.6" y="1902.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.06%)</title><rect x="956.6" y="1875.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="959.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (257 samples, 15.88%)</title><rect x="957.4" y="1891.0" width="187.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="960.4" y="1902.0">PhaseIdealLoop::build_an..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.19%)</title><rect x="957.4" y="1875.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.4" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.19%)</title><rect x="957.4" y="1859.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.4" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.19%)</title><rect x="957.4" y="1843.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="960.4" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.19%)</title><rect x="957.4" y="1827.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="960.4" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.19%)</title><rect x="957.4" y="1811.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.4" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.19%)</title><rect x="957.4" y="1795.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="960.4" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.19%)</title><rect x="957.4" y="1779.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="960.4" y="1790.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.12%)</title><rect x="957.4" y="1763.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.4" y="1774.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="957.4" y="1747.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.4" y="1758.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="957.4" y="1731.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="960.4" y="1742.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="957.4" y="1715.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="960.4" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.06%)</title><rect x="957.4" y="1699.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="960.4" y="1710.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="958.1" y="1747.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="961.1" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.06%)</title><rect x="958.1" y="1731.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="961.1" y="1742.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.06%)</title><rect x="958.1" y="1715.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="961.1" y="1726.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="958.8" y="1763.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="961.8" y="1774.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="958.8" y="1747.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="961.8" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.06%)</title><rect x="958.8" y="1731.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="961.8" y="1742.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.06%)</title><rect x="959.5" y="1875.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="962.5" y="1886.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.06%)</title><rect x="960.3" y="1875.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="963.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (7 samples, 0.43%)</title><rect x="961.0" y="1875.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="964.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 0.56%)</title><rect x="966.1" y="1875.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="969.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.12%)</title><rect x="969.8" y="1859.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.8" y="1870.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.06%)</title><rect x="971.2" y="1859.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="974.2" y="1870.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.06%)</title><rect x="971.9" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="974.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (220 samples, 13.60%)</title><rect x="972.7" y="1875.0" width="160.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="975.7" y="1886.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (210 samples, 12.98%)</title><rect x="980.0" y="1859.0" width="153.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="983.0" y="1870.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (9 samples, 0.56%)</title><rect x="982.9" y="1843.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (197 samples, 12.18%)</title><rect x="989.4" y="1843.0" width="143.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="992.4" y="1854.0">PhaseIdealLoop::ge..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.06%)</title><rect x="1105.4" y="1827.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.06%)</title><rect x="1105.4" y="1811.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.4" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.06%)</title><rect x="1105.4" y="1795.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.4" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (33 samples, 2.04%)</title><rect x="1106.1" y="1827.0" width="24.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.1" y="1838.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (4 samples, 0.25%)</title><rect x="1130.2" y="1827.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.06%)</title><rect x="1132.4" y="1811.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.4" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (5 samples, 0.31%)</title><rect x="1133.1" y="1875.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.12%)</title><rect x="1135.3" y="1859.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.31%)</title><rect x="1136.8" y="1875.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.8" y="1886.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.06%)</title><rect x="1137.5" y="1859.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1140.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (2 samples, 0.12%)</title><rect x="1138.2" y="1859.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.06%)</title><rect x="1138.2" y="1843.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.06%)</title><rect x="1138.9" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.06%)</title><rect x="1138.9" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.06%)</title><rect x="1139.7" y="1859.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.25%)</title><rect x="1140.4" y="1875.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.25%)</title><rect x="1140.4" y="1859.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.4" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.06%)</title><rect x="1140.4" y="1843.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.4" y="1854.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.06%)</title><rect x="1140.4" y="1827.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.4" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.06%)</title><rect x="1140.4" y="1811.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.4" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.06%)</title><rect x="1140.4" y="1795.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.4" y="1806.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.06%)</title><rect x="1140.4" y="1779.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.4" y="1790.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.12%)</title><rect x="1141.1" y="1843.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.1" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.12%)</title><rect x="1141.1" y="1827.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.1" y="1838.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1142.6" y="1843.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.6" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.06%)</title><rect x="1142.6" y="1827.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.6" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1142.6" y="1811.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.6" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1142.6" y="1795.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.6" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1142.6" y="1779.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.6" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1142.6" y="1763.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.6" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1142.6" y="1747.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.6" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1142.6" y="1731.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.6" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1142.6" y="1715.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.6" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1142.6" y="1699.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.6" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1142.6" y="1683.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.6" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1142.6" y="1667.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.6" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1142.6" y="1651.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.6" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1142.6" y="1635.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.6" y="1646.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.06%)</title><rect x="1142.6" y="1619.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.6" y="1630.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="1142.6" y="1603.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.6" y="1614.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.06%)</title><rect x="1143.3" y="1875.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.3" y="1886.0"></text>
</g>
<g>
<title>StartNode::pinned() const (1 samples, 0.06%)</title><rect x="1144.1" y="1875.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.06%)</title><rect x="1144.8" y="1891.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.8" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (26 samples, 1.61%)</title><rect x="1145.5" y="1891.0" width="19.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.5" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (26 samples, 1.61%)</title><rect x="1145.5" y="1875.0" width="19.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.5" y="1886.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.06%)</title><rect x="1145.5" y="1859.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.5" y="1870.0"></text>
</g>
<g>
<title>BoolNode::hash() const (1 samples, 0.06%)</title><rect x="1146.2" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.2" y="1870.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.06%)</title><rect x="1146.2" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.2" y="1854.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1147.0" y="1859.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.0" y="1870.0"></text>
</g>
<g>
<title>IfTrueNode::IfTrueNode(IfNode*) (1 samples, 0.06%)</title><rect x="1147.0" y="1843.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.0" y="1854.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.06%)</title><rect x="1147.0" y="1827.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.0" y="1838.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (5 samples, 0.31%)</title><rect x="1147.7" y="1859.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.7" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.06%)</title><rect x="1147.7" y="1843.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.7" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.06%)</title><rect x="1147.7" y="1827.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.7" y="1838.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1148.4" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.4" y="1854.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.06%)</title><rect x="1148.4" y="1827.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.4" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.06%)</title><rect x="1148.4" y="1811.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.4" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.06%)</title><rect x="1148.4" y="1795.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.4" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.06%)</title><rect x="1148.4" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.4" y="1790.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.06%)</title><rect x="1148.4" y="1763.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.4" y="1774.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (3 samples, 0.19%)</title><rect x="1149.2" y="1843.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.2" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.12%)</title><rect x="1149.2" y="1827.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.2" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.12%)</title><rect x="1149.2" y="1811.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.2" y="1822.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.06%)</title><rect x="1150.6" y="1827.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.6" y="1838.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.12%)</title><rect x="1151.3" y="1859.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.06%)</title><rect x="1152.8" y="1859.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (8 samples, 0.49%)</title><rect x="1153.5" y="1859.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.5" y="1870.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.06%)</title><rect x="1155.0" y="1843.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.0" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.12%)</title><rect x="1155.7" y="1843.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.7" y="1854.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.06%)</title><rect x="1156.5" y="1827.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.12%)</title><rect x="1157.2" y="1843.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.2" y="1854.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.06%)</title><rect x="1157.2" y="1827.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.2" y="1838.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.06%)</title><rect x="1157.2" y="1811.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.2" y="1822.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.06%)</title><rect x="1157.9" y="1827.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.9" y="1838.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.06%)</title><rect x="1158.6" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.6" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.12%)</title><rect x="1159.4" y="1859.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.4" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.12%)</title><rect x="1159.4" y="1843.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.4" y="1854.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.06%)</title><rect x="1160.1" y="1827.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.1" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.19%)</title><rect x="1160.8" y="1859.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.8" y="1870.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.06%)</title><rect x="1160.8" y="1843.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.8" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.12%)</title><rect x="1161.6" y="1843.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.6" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.12%)</title><rect x="1163.0" y="1859.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.0" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.12%)</title><rect x="1163.0" y="1843.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.0" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.12%)</title><rect x="1163.0" y="1827.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.0" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1811.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.0" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1795.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.0" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1779.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.0" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1763.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.0" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1747.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.0" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1731.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.0" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1715.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.0" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1699.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.0" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1683.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.0" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1667.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.0" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1651.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.0" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1635.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.0" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1619.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.0" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1603.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.0" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1587.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.0" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1571.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.0" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1555.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.0" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1539.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.0" y="1550.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1523.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.0" y="1534.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.06%)</title><rect x="1163.0" y="1507.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.0" y="1518.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="1163.0" y="1491.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.0" y="1502.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.06%)</title><rect x="1163.7" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="1822.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="1163.7" y="1795.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.7" y="1806.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (3 samples, 0.19%)</title><rect x="1164.5" y="1891.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.5" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (3 samples, 0.19%)</title><rect x="1164.5" y="1875.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.5" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (3 samples, 0.19%)</title><rect x="1164.5" y="1859.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.5" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (2 samples, 0.12%)</title><rect x="1164.5" y="1843.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.5" y="1854.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.12%)</title><rect x="1164.5" y="1827.0" width="1.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1167.5" y="1838.0"></text>
</g>
<g>
<title>ciField::compute_type() (1 samples, 0.06%)</title><rect x="1165.9" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.9" y="1854.0"></text>
</g>
<g>
<title>ciField::compute_type_impl() (1 samples, 0.06%)</title><rect x="1165.9" y="1827.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.9" y="1838.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.06%)</title><rect x="1165.9" y="1811.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.9" y="1822.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.06%)</title><rect x="1165.9" y="1795.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.9" y="1806.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (4 samples, 0.25%)</title><rect x="1166.7" y="1891.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.7" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.25%)</title><rect x="1166.7" y="1875.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.25%)</title><rect x="1166.7" y="1859.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.7" y="1870.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1166.7" y="1843.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.06%)</title><rect x="1166.7" y="1827.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.06%)</title><rect x="1166.7" y="1811.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.7" y="1822.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1167.4" y="1843.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.06%)</title><rect x="1168.1" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.1" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1168.9" y="1843.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.06%)</title><rect x="1168.9" y="1827.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.9" y="1838.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1168.9" y="1811.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.9" y="1822.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.06%)</title><rect x="1169.6" y="1891.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1172.6" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (18 samples, 1.11%)</title><rect x="1170.3" y="1907.0" width="13.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.3" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (18 samples, 1.11%)</title><rect x="1170.3" y="1891.0" width="13.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 1.11%)</title><rect x="1170.3" y="1875.0" width="13.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 1.11%)</title><rect x="1170.3" y="1859.0" width="13.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.3" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (18 samples, 1.11%)</title><rect x="1170.3" y="1843.0" width="13.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.3" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (18 samples, 1.11%)</title><rect x="1170.3" y="1827.0" width="13.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.3" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.06%)</title><rect x="1170.3" y="1811.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.3" y="1822.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.06%)</title><rect x="1170.3" y="1795.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.3" y="1806.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.06%)</title><rect x="1170.3" y="1779.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.3" y="1790.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.06%)</title><rect x="1170.3" y="1763.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.3" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.06%)</title><rect x="1170.3" y="1747.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.3" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.06%)</title><rect x="1170.3" y="1731.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.3" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.06%)</title><rect x="1170.3" y="1715.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.3" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.06%)</title><rect x="1170.3" y="1699.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.3" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.06%)</title><rect x="1170.3" y="1683.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.3" y="1694.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.06%)</title><rect x="1170.3" y="1667.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.3" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1170.3" y="1651.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.3" y="1662.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1170.3" y="1635.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.3" y="1646.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.06%)</title><rect x="1170.3" y="1619.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.3" y="1630.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.06%)</title><rect x="1170.3" y="1603.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.3" y="1614.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.06%)</title><rect x="1170.3" y="1587.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.3" y="1598.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.06%)</title><rect x="1170.3" y="1571.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.3" y="1582.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.06%)</title><rect x="1170.3" y="1555.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.3" y="1566.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.06%)</title><rect x="1170.3" y="1539.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.3" y="1550.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.06%)</title><rect x="1170.3" y="1523.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.3" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.87%)</title><rect x="1171.0" y="1811.0" width="10.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.0" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.87%)</title><rect x="1171.0" y="1795.0" width="10.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.0" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.87%)</title><rect x="1171.0" y="1779.0" width="10.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.0" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.80%)</title><rect x="1171.0" y="1763.0" width="9.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.0" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (13 samples, 0.80%)</title><rect x="1171.0" y="1747.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.0" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.80%)</title><rect x="1171.0" y="1731.0" width="9.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.0" y="1742.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.12%)</title><rect x="1171.0" y="1715.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.0" y="1726.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.12%)</title><rect x="1171.0" y="1699.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.0" y="1710.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.12%)</title><rect x="1171.0" y="1683.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.0" y="1694.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.12%)</title><rect x="1171.0" y="1667.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.0" y="1678.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.12%)</title><rect x="1171.0" y="1651.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.0" y="1662.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.12%)</title><rect x="1171.0" y="1635.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.0" y="1646.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.12%)</title><rect x="1171.0" y="1619.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.0" y="1630.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.12%)</title><rect x="1171.0" y="1603.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.0" y="1614.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.06%)</title><rect x="1171.0" y="1587.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.0" y="1598.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.06%)</title><rect x="1171.0" y="1571.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.0" y="1582.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.06%)</title><rect x="1171.0" y="1555.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.0" y="1566.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.06%)</title><rect x="1171.0" y="1539.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.0" y="1550.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.06%)</title><rect x="1171.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.0" y="1534.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.06%)</title><rect x="1171.0" y="1507.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.0" y="1518.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.06%)</title><rect x="1171.0" y="1491.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.0" y="1502.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.06%)</title><rect x="1171.8" y="1587.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.8" y="1598.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.06%)</title><rect x="1171.8" y="1571.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.8" y="1582.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1171.8" y="1555.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.8" y="1566.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1171.8" y="1539.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.8" y="1550.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1171.8" y="1523.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.8" y="1534.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.06%)</title><rect x="1171.8" y="1507.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.8" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.37%)</title><rect x="1172.5" y="1715.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.37%)</title><rect x="1172.5" y="1699.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.5" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.37%)</title><rect x="1172.5" y="1683.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.5" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.37%)</title><rect x="1172.5" y="1667.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.5" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.37%)</title><rect x="1172.5" y="1651.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.5" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.31%)</title><rect x="1172.5" y="1635.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.5" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.31%)</title><rect x="1172.5" y="1619.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.5" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.31%)</title><rect x="1172.5" y="1603.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.5" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.31%)</title><rect x="1172.5" y="1587.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.31%)</title><rect x="1172.5" y="1571.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.31%)</title><rect x="1172.5" y="1555.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.31%)</title><rect x="1172.5" y="1539.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.25%)</title><rect x="1172.5" y="1523.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.5" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.25%)</title><rect x="1172.5" y="1507.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.25%)</title><rect x="1172.5" y="1491.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.25%)</title><rect x="1172.5" y="1475.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.5" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.25%)</title><rect x="1172.5" y="1459.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.5" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.19%)</title><rect x="1172.5" y="1443.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.19%)</title><rect x="1172.5" y="1427.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.19%)</title><rect x="1172.5" y="1411.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.5" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.19%)</title><rect x="1172.5" y="1395.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.5" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.19%)</title><rect x="1172.5" y="1379.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.19%)</title><rect x="1172.5" y="1363.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.12%)</title><rect x="1172.5" y="1347.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.5" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="1172.5" y="1331.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.12%)</title><rect x="1172.5" y="1315.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.12%)</title><rect x="1172.5" y="1299.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.12%)</title><rect x="1172.5" y="1283.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.12%)</title><rect x="1172.5" y="1267.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.12%)</title><rect x="1172.5" y="1251.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.5" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="1172.5" y="1235.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.5" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.12%)</title><rect x="1172.5" y="1219.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1172.5" y="1203.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1172.5" y="1187.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1172.5" y="1171.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1172.5" y="1155.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.5" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1172.5" y="1139.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.5" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1172.5" y="1123.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1172.5" y="1107.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1172.5" y="1091.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1172.5" y="1075.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1172.5" y="1059.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.5" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1172.5" y="1043.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.5" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1172.5" y="1027.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1172.5" y="1011.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1172.5" y="995.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1172.5" y="979.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="990.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.06%)</title><rect x="1172.5" y="963.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.5" y="974.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.06%)</title><rect x="1172.5" y="947.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.5" y="958.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.06%)</title><rect x="1172.5" y="931.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.5" y="942.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.06%)</title><rect x="1172.5" y="915.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.06%)</title><rect x="1173.2" y="1203.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.2" y="1214.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1173.2" y="1187.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.2" y="1198.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.06%)</title><rect x="1174.0" y="1347.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.0" y="1358.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.06%)</title><rect x="1174.0" y="1331.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.0" y="1342.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.06%)</title><rect x="1174.0" y="1315.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.0" y="1326.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.06%)</title><rect x="1174.0" y="1299.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.0" y="1310.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1174.0" y="1283.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.0" y="1294.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1174.0" y="1267.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.0" y="1278.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.06%)</title><rect x="1174.0" y="1251.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.0" y="1262.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.06%)</title><rect x="1174.0" y="1235.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.0" y="1246.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.06%)</title><rect x="1174.0" y="1219.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.0" y="1230.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.06%)</title><rect x="1174.0" y="1203.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.0" y="1214.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.06%)</title><rect x="1174.0" y="1187.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.0" y="1198.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.06%)</title><rect x="1174.0" y="1171.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.0" y="1182.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.06%)</title><rect x="1174.7" y="1443.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.7" y="1454.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.06%)</title><rect x="1174.7" y="1427.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.7" y="1438.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1174.7" y="1411.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.7" y="1422.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.06%)</title><rect x="1174.7" y="1395.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.7" y="1406.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.06%)</title><rect x="1174.7" y="1379.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.7" y="1390.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1175.4" y="1523.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.4" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1175.4" y="1507.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.4" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1175.4" y="1491.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.4" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1175.4" y="1475.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1175.4" y="1459.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1175.4" y="1443.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.4" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1175.4" y="1427.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.4" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1175.4" y="1411.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.4" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1175.4" y="1395.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.4" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1175.4" y="1379.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1175.4" y="1363.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1175.4" y="1347.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.4" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1175.4" y="1331.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.4" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1175.4" y="1315.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.4" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1175.4" y="1299.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.4" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1175.4" y="1283.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.4" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1175.4" y="1267.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.4" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1175.4" y="1251.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.4" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1175.4" y="1235.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.4" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1175.4" y="1219.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.4" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1175.4" y="1203.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.4" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1175.4" y="1187.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1175.4" y="1171.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1175.4" y="1155.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1175.4" y="1139.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1175.4" y="1123.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.4" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1175.4" y="1107.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.4" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1175.4" y="1091.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1175.4" y="1075.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1175.4" y="1059.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1175.4" y="1043.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1175.4" y="1027.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.4" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1175.4" y="1011.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.4" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1175.4" y="995.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1175.4" y="979.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1175.4" y="963.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1175.4" y="947.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1175.4" y="931.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.4" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1175.4" y="915.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1175.4" y="899.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1175.4" y="883.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1175.4" y="867.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1175.4" y="851.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.06%)</title><rect x="1175.4" y="835.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.4" y="846.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.06%)</title><rect x="1175.4" y="819.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.4" y="830.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.06%)</title><rect x="1175.4" y="803.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.4" y="814.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.06%)</title><rect x="1175.4" y="787.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.4" y="798.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.06%)</title><rect x="1175.4" y="771.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.4" y="782.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.06%)</title><rect x="1175.4" y="755.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.06%)</title><rect x="1176.1" y="1635.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.1" y="1646.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.06%)</title><rect x="1176.1" y="1619.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.1" y="1630.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.06%)</title><rect x="1176.1" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.1" y="1614.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.06%)</title><rect x="1176.1" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.1" y="1598.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1176.1" y="1571.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.1" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.06%)</title><rect x="1176.1" y="1555.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.1" y="1566.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.06%)</title><rect x="1176.1" y="1539.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1179.1" y="1550.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.31%)</title><rect x="1176.9" y="1715.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.31%)</title><rect x="1176.9" y="1699.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.31%)</title><rect x="1176.9" y="1683.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.31%)</title><rect x="1176.9" y="1667.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.31%)</title><rect x="1176.9" y="1651.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.31%)</title><rect x="1176.9" y="1635.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.31%)</title><rect x="1176.9" y="1619.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.31%)</title><rect x="1176.9" y="1603.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.31%)</title><rect x="1176.9" y="1587.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.31%)</title><rect x="1176.9" y="1571.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.31%)</title><rect x="1176.9" y="1555.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.31%)</title><rect x="1176.9" y="1539.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.31%)</title><rect x="1176.9" y="1523.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.31%)</title><rect x="1176.9" y="1507.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.31%)</title><rect x="1176.9" y="1491.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.31%)</title><rect x="1176.9" y="1475.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.31%)</title><rect x="1176.9" y="1459.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.31%)</title><rect x="1176.9" y="1443.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.25%)</title><rect x="1176.9" y="1427.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.25%)</title><rect x="1176.9" y="1411.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.25%)</title><rect x="1176.9" y="1395.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.25%)</title><rect x="1176.9" y="1379.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.25%)</title><rect x="1176.9" y="1363.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.25%)</title><rect x="1176.9" y="1347.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.25%)</title><rect x="1176.9" y="1331.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.25%)</title><rect x="1176.9" y="1315.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.25%)</title><rect x="1176.9" y="1299.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.25%)</title><rect x="1176.9" y="1283.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.25%)</title><rect x="1176.9" y="1267.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.25%)</title><rect x="1176.9" y="1251.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.25%)</title><rect x="1176.9" y="1235.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="1246.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.06%)</title><rect x="1176.9" y="1219.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.9" y="1230.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.06%)</title><rect x="1176.9" y="1203.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.9" y="1214.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.06%)</title><rect x="1176.9" y="1187.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.06%)</title><rect x="1176.9" y="1171.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.9" y="1182.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.06%)</title><rect x="1176.9" y="1155.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.06%)</title><rect x="1176.9" y="1139.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.06%)</title><rect x="1176.9" y="1123.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.06%)</title><rect x="1176.9" y="1107.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.06%)</title><rect x="1176.9" y="1091.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.9" y="1102.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.06%)</title><rect x="1176.9" y="1075.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="1086.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.06%)</title><rect x="1176.9" y="1059.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.9" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.06%)</title><rect x="1176.9" y="1043.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="1054.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.06%)</title><rect x="1176.9" y="1027.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1176.9" y="1011.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1176.9" y="995.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="1006.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.06%)</title><rect x="1176.9" y="979.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.19%)</title><rect x="1177.6" y="1219.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.6" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.19%)</title><rect x="1177.6" y="1203.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.12%)</title><rect x="1177.6" y="1187.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.12%)</title><rect x="1177.6" y="1171.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.12%)</title><rect x="1177.6" y="1155.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.12%)</title><rect x="1177.6" y="1139.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="1177.6" y="1123.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.12%)</title><rect x="1177.6" y="1107.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.12%)</title><rect x="1177.6" y="1091.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.12%)</title><rect x="1177.6" y="1075.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.12%)</title><rect x="1177.6" y="1059.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.12%)</title><rect x="1177.6" y="1043.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="1054.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.06%)</title><rect x="1177.6" y="1027.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="1038.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.06%)</title><rect x="1177.6" y="1011.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="1022.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.06%)</title><rect x="1177.6" y="995.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.06%)</title><rect x="1177.6" y="979.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.06%)</title><rect x="1177.6" y="963.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.6" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.06%)</title><rect x="1177.6" y="947.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.06%)</title><rect x="1177.6" y="931.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.06%)</title><rect x="1177.6" y="915.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::block_at(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.06%)</title><rect x="1177.6" y="899.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.6" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1178.3" y="1027.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1178.3" y="1011.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1178.3" y="995.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1178.3" y="979.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1178.3" y="963.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1178.3" y="947.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1178.3" y="931.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.3" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1178.3" y="915.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1178.3" y="899.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1178.3" y="883.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1178.3" y="867.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1178.3" y="851.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.06%)</title><rect x="1178.3" y="835.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1178.3" y="819.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.3" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1178.3" y="803.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="814.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.06%)</title><rect x="1178.3" y="787.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="798.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.06%)</title><rect x="1178.3" y="771.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="782.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.06%)</title><rect x="1178.3" y="755.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="766.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.06%)</title><rect x="1178.3" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="750.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.06%)</title><rect x="1178.3" y="723.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.06%)</title><rect x="1178.3" y="707.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.06%)</title><rect x="1178.3" y="691.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="702.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.06%)</title><rect x="1179.1" y="1187.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="1198.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.06%)</title><rect x="1179.8" y="1427.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.8" y="1438.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.06%)</title><rect x="1179.8" y="1411.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.8" y="1422.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.06%)</title><rect x="1179.8" y="1395.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.8" y="1406.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.06%)</title><rect x="1179.8" y="1379.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="1390.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.06%)</title><rect x="1179.8" y="1363.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.8" y="1374.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.06%)</title><rect x="1179.8" y="1347.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.8" y="1358.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.06%)</title><rect x="1179.8" y="1331.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.8" y="1342.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.06%)</title><rect x="1180.5" y="1763.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="1774.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.06%)</title><rect x="1180.5" y="1747.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.5" y="1758.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1180.5" y="1731.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="1742.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.06%)</title><rect x="1180.5" y="1715.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="1726.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.19%)</title><rect x="1181.2" y="1811.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.19%)</title><rect x="1181.2" y="1795.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.19%)</title><rect x="1181.2" y="1779.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.19%)</title><rect x="1181.2" y="1763.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.19%)</title><rect x="1181.2" y="1747.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.19%)</title><rect x="1181.2" y="1731.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.19%)</title><rect x="1181.2" y="1715.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.19%)</title><rect x="1181.2" y="1699.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.2" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.19%)</title><rect x="1181.2" y="1683.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.19%)</title><rect x="1181.2" y="1667.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.19%)</title><rect x="1181.2" y="1651.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.19%)</title><rect x="1181.2" y="1635.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.19%)</title><rect x="1181.2" y="1619.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.19%)</title><rect x="1181.2" y="1603.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.19%)</title><rect x="1181.2" y="1587.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.19%)</title><rect x="1181.2" y="1571.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.19%)</title><rect x="1181.2" y="1555.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.19%)</title><rect x="1181.2" y="1539.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.19%)</title><rect x="1181.2" y="1523.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.19%)</title><rect x="1181.2" y="1507.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.19%)</title><rect x="1181.2" y="1491.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.19%)</title><rect x="1181.2" y="1475.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.19%)</title><rect x="1181.2" y="1459.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.19%)</title><rect x="1181.2" y="1443.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.19%)</title><rect x="1181.2" y="1427.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.19%)</title><rect x="1181.2" y="1411.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.19%)</title><rect x="1181.2" y="1395.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.19%)</title><rect x="1181.2" y="1379.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.19%)</title><rect x="1181.2" y="1363.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.19%)</title><rect x="1181.2" y="1347.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.19%)</title><rect x="1181.2" y="1331.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.19%)</title><rect x="1181.2" y="1315.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.19%)</title><rect x="1181.2" y="1299.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.19%)</title><rect x="1181.2" y="1283.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.19%)</title><rect x="1181.2" y="1267.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.19%)</title><rect x="1181.2" y="1251.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.19%)</title><rect x="1181.2" y="1235.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="1181.2" y="1219.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.12%)</title><rect x="1181.2" y="1203.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.12%)</title><rect x="1181.2" y="1187.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.12%)</title><rect x="1181.2" y="1171.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.12%)</title><rect x="1181.2" y="1155.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1181.2" y="1139.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1181.2" y="1123.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1181.2" y="1107.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1181.2" y="1091.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1181.2" y="1075.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1181.2" y="1059.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.06%)</title><rect x="1181.2" y="1043.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="1054.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.06%)</title><rect x="1181.2" y="1027.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.2" y="1038.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.06%)</title><rect x="1181.2" y="1011.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="1022.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.06%)</title><rect x="1181.2" y="995.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.06%)</title><rect x="1182.0" y="1139.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="1150.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.06%)</title><rect x="1182.0" y="1123.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="1134.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1182.7" y="1219.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.7" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1182.7" y="1203.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.7" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1182.7" y="1187.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1182.7" y="1171.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1182.7" y="1155.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1182.7" y="1139.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1182.7" y="1123.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1182.7" y="1107.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.7" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1182.7" y="1091.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1182.7" y="1075.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1182.7" y="1059.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1182.7" y="1043.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1182.7" y="1027.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.7" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1182.7" y="1011.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.7" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1182.7" y="995.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1182.7" y="979.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1182.7" y="963.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1182.7" y="947.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1182.7" y="931.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1182.7" y="915.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1182.7" y="899.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1182.7" y="883.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1182.7" y="867.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1182.7" y="851.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.7" y="862.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.12%)</title><rect x="1183.4" y="1907.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.4" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.06%)</title><rect x="1184.2" y="1891.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.2" y="1902.0"></text>
</g>
<g>
<title>CompileBroker::collect_statistics(CompilerThread*, elapsedTimer, CompileTask*) (1 samples, 0.06%)</title><rect x="1184.9" y="1939.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.9" y="1950.0"></text>
</g>
<g>
<title>PerfString::set_string(char const*) (1 samples, 0.06%)</title><rect x="1184.9" y="1923.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.9" y="1934.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.06%)</title><rect x="1185.6" y="1939.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.6" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.06%)</title><rect x="1185.6" y="1923.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.6" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.06%)</title><rect x="1185.6" y="1907.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.6" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.06%)</title><rect x="1185.6" y="1891.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.6" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.06%)</title><rect x="1185.6" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.6" y="1886.0"></text>
</g>
<g>
<title>RangeCheckElimination::eliminate(IR*) (1 samples, 0.06%)</title><rect x="1185.6" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.6" y="1870.0"></text>
</g>
<g>
<title>RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*) (1 samples, 0.06%)</title><rect x="1185.6" y="1843.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.6" y="1854.0"></text>
</g>
<g>
<title>RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*) (1 samples, 0.06%)</title><rect x="1185.6" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.6" y="1838.0"></text>
</g>
<g>
<title>RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*) (1 samples, 0.06%)</title><rect x="1185.6" y="1811.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.6" y="1822.0"></text>
</g>
<g>
<title>RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*) (1 samples, 0.06%)</title><rect x="1185.6" y="1795.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.6" y="1806.0"></text>
</g>
<g>
<title>RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*) (1 samples, 0.06%)</title><rect x="1185.6" y="1779.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.6" y="1790.0"></text>
</g>
<g>
<title>RangeCheckEliminator::calc_bounds(BlockBegin*, BlockBegin*) (1 samples, 0.06%)</title><rect x="1185.6" y="1763.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.6" y="1774.0"></text>
</g>
<g>
<title>RangeCheckEliminator::update_bound(RangeCheckEliminator::IntegerStack&amp;, Instruction*, Instruction::Condition, Instruction*, int) (1 samples, 0.06%)</title><rect x="1185.6" y="1747.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.6" y="1758.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.06%)</title><rect x="1186.4" y="1955.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.4" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.06%)</title><rect x="1186.4" y="1939.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.4" y="1950.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.06%)</title><rect x="1186.4" y="1923.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.4" y="1934.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.06%)</title><rect x="1186.4" y="1907.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.4" y="1918.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.06%)</title><rect x="1187.1" y="1971.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.1" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.06%)</title><rect x="1187.1" y="1955.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.06%)</title><rect x="1187.1" y="1939.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.1" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.06%)</title><rect x="1187.1" y="1923.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1190.1" y="1934.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.06%)</title><rect x="1187.1" y="1907.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.1" y="1918.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.06%)</title><rect x="1187.1" y="1891.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1190.1" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.19%)</title><rect x="1187.8" y="2003.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.8" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.19%)</title><rect x="1187.8" y="1987.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.8" y="1998.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (3 samples, 0.19%)</title><rect x="1187.8" y="1971.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.8" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (3 samples, 0.19%)</title><rect x="1187.8" y="1955.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.8" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (3 samples, 0.19%)</title><rect x="1187.8" y="1939.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.8" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3 samples, 0.19%)</title><rect x="1187.8" y="1923.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.8" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.06%)</title><rect x="1187.8" y="1907.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.8" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.06%)</title><rect x="1187.8" y="1891.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.8" y="1902.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (1 samples, 0.06%)</title><rect x="1187.8" y="1875.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.8" y="1886.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.06%)</title><rect x="1188.5" y="1907.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.5" y="1918.0"></text>
</g>
<g>
<title>FreeRegionList::add_ordered(FreeRegionList*) (1 samples, 0.06%)</title><rect x="1188.5" y="1891.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.5" y="1902.0"></text>
</g>
<g>
<title>G1CollectorPolicy::record_collection_pause_start(double) (1 samples, 0.06%)</title><rect x="1189.3" y="1907.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.3" y="1918.0"></text>
</g>
<g>
<title>ageTable::compute_tenuring_threshold(unsigned long) (1 samples, 0.06%)</title><rect x="1189.3" y="1891.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.3" y="1902.0"></text>
</g>
</g>
</svg>
