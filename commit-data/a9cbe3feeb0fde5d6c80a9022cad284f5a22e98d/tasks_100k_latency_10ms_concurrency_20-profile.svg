<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="885"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="885"> </text>
<g id="frames">
<g>
<title>all (296 samples, 100.00%)</title><rect x="10.0" y="851.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="862.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.34%)</title><rect x="10.0" y="835.0" width="4.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.34%)</title><rect x="10.0" y="819.0" width="4.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (24 samples, 8.11%)</title><rect x="14.0" y="835.0" width="95.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.0" y="846.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.34%)</title><rect x="14.0" y="819.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.34%)</title><rect x="14.0" y="803.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.34%)</title><rect x="14.0" y="787.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.34%)</title><rect x="14.0" y="771.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.doCommitOffsetsAsync (1 samples, 0.34%)</title><rect x="14.0" y="755.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.34%)</title><rect x="14.0" y="739.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (23 samples, 7.77%)</title><rect x="18.0" y="819.0" width="91.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.0" y="830.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.68%)</title><rect x="18.0" y="803.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.68%)</title><rect x="18.0" y="787.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.68%)</title><rect x="18.0" y="771.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.68%)</title><rect x="18.0" y="755.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.68%)</title><rect x="18.0" y="739.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="18.0" y="723.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.34%)</title><rect x="18.0" y="707.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.34%)</title><rect x="18.0" y="691.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.34%)</title><rect x="18.0" y="675.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.34%)</title><rect x="18.0" y="659.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$265/607030834.test (1 samples, 0.34%)</title><rect x="18.0" y="643.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.34%)</title><rect x="22.0" y="723.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.34%)</title><rect x="22.0" y="707.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="22.0" y="691.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.0" y="702.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 2.03%)</title><rect x="25.9" y="803.0" width="24.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.9" y="814.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1495811397.accept (6 samples, 2.03%)</title><rect x="25.9" y="787.0" width="24.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.9" y="798.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (6 samples, 2.03%)</title><rect x="25.9" y="771.0" width="24.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.9" y="782.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 1.01%)</title><rect x="25.9" y="755.0" width="12.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 1.01%)</title><rect x="25.9" y="739.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 1.01%)</title><rect x="25.9" y="723.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.01%)</title><rect x="25.9" y="707.0" width="12.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.01%)</title><rect x="25.9" y="691.0" width="12.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.01%)</title><rect x="25.9" y="675.0" width="12.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.34%)</title><rect x="29.9" y="659.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.34%)</title><rect x="29.9" y="643.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.34%)</title><rect x="29.9" y="627.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.34%)</title><rect x="33.9" y="659.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.34%)</title><rect x="33.9" y="643.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.34%)</title><rect x="33.9" y="627.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.34%)</title><rect x="33.9" y="611.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.01%)</title><rect x="37.9" y="755.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.01%)</title><rect x="37.9" y="739.0" width="12.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.9" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.01%)</title><rect x="37.9" y="723.0" width="12.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.9" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.01%)</title><rect x="37.9" y="707.0" width="12.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.9" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.01%)</title><rect x="37.9" y="691.0" width="12.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.9" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.01%)</title><rect x="37.9" y="675.0" width="12.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.9" y="686.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="45.9" y="659.0" width="4.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="48.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 5.07%)</title><rect x="49.9" y="803.0" width="59.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.9" y="814.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 5.07%)</title><rect x="49.9" y="787.0" width="59.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="52.9" y="798.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 3.72%)</title><rect x="49.9" y="771.0" width="43.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.9" y="782.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.01%)</title><rect x="49.9" y="755.0" width="11.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.01%)</title><rect x="49.9" y="739.0" width="11.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="52.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.68%)</title><rect x="49.9" y="723.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.34%)</title><rect x="49.9" y="707.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="52.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.34%)</title><rect x="49.9" y="691.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.hasExpiredRequest (1 samples, 0.34%)</title><rect x="49.9" y="675.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.34%)</title><rect x="53.9" y="707.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="56.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.34%)</title><rect x="53.9" y="691.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.34%)</title><rect x="53.9" y="675.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.34%)</title><rect x="53.9" y="659.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.34%)</title><rect x="53.9" y="643.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.34%)</title><rect x="53.9" y="627.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.34%)</title><rect x="53.9" y="611.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="56.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.34%)</title><rect x="53.9" y="595.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.34%)</title><rect x="53.9" y="579.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="56.9" y="590.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.34%)</title><rect x="53.9" y="563.0" width="3.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="56.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.34%)</title><rect x="57.8" y="723.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="60.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.34%)</title><rect x="57.8" y="707.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.34%)</title><rect x="57.8" y="691.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="60.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.34%)</title><rect x="57.8" y="675.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.34%)</title><rect x="57.8" y="659.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.&lt;init&gt; (1 samples, 0.34%)</title><rect x="57.8" y="643.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="60.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.&lt;init&gt; (1 samples, 0.34%)</title><rect x="57.8" y="627.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 2.36%)</title><rect x="61.8" y="755.0" width="27.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.8" y="766.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (7 samples, 2.36%)</title><rect x="61.8" y="739.0" width="27.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="64.8" y="750.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (7 samples, 2.36%)</title><rect x="61.8" y="723.0" width="27.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.8" y="734.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (7 samples, 2.36%)</title><rect x="61.8" y="707.0" width="27.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.8" y="718.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (4 samples, 1.35%)</title><rect x="61.8" y="691.0" width="16.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 1.01%)</title><rect x="61.8" y="675.0" width="12.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 1.01%)</title><rect x="61.8" y="659.0" width="12.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 1.01%)</title><rect x="61.8" y="643.0" width="12.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 1.01%)</title><rect x="61.8" y="627.0" width="12.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 1.01%)</title><rect x="61.8" y="611.0" width="12.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 1.01%)</title><rect x="61.8" y="595.0" width="12.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 1.01%)</title><rect x="61.8" y="579.0" width="12.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="64.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.34%)</title><rect x="73.8" y="675.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="76.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.34%)</title><rect x="73.8" y="659.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 1.01%)</title><rect x="77.8" y="691.0" width="11.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 1.01%)</title><rect x="77.8" y="675.0" width="11.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 1.01%)</title><rect x="77.8" y="659.0" width="11.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.8" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 1.01%)</title><rect x="77.8" y="643.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="80.8" y="654.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (2 samples, 0.68%)</title><rect x="81.8" y="627.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (2 samples, 0.68%)</title><rect x="81.8" y="611.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.8" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (2 samples, 0.68%)</title><rect x="81.8" y="595.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.68%)</title><rect x="81.8" y="579.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.8" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="85.7" y="563.0" width="4.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="88.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.34%)</title><rect x="89.7" y="755.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="92.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.34%)</title><rect x="89.7" y="739.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.34%)</title><rect x="89.7" y="723.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.34%)</title><rect x="89.7" y="707.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.34%)</title><rect x="89.7" y="691.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.34%)</title><rect x="89.7" y="675.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.34%)</title><rect x="89.7" y="659.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 1.35%)</title><rect x="93.7" y="771.0" width="16.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 1.35%)</title><rect x="93.7" y="755.0" width="16.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 1.35%)</title><rect x="93.7" y="739.0" width="16.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.7" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.34%)</title><rect x="93.7" y="723.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.7" y="734.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.34%)</title><rect x="97.7" y="723.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="100.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.34%)</title><rect x="97.7" y="707.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.34%)</title><rect x="97.7" y="691.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="100.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.34%)</title><rect x="101.7" y="723.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="104.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="101.7" y="707.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.34%)</title><rect x="101.7" y="691.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="104.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.34%)</title><rect x="101.7" y="675.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="104.7" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.34%)</title><rect x="101.7" y="659.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="104.7" y="670.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.34%)</title><rect x="101.7" y="643.0" width="4.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="104.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.34%)</title><rect x="105.7" y="723.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="108.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.34%)</title><rect x="105.7" y="707.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="108.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.34%)</title><rect x="105.7" y="691.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="105.7" y="675.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="108.7" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.34%)</title><rect x="105.7" y="659.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="108.7" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (191 samples, 64.53%)</title><rect x="109.7" y="835.0" width="761.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="112.7" y="846.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (191 samples, 64.53%)</title><rect x="109.7" y="819.0" width="761.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.7" y="830.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.34%)</title><rect x="109.7" y="803.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="112.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (1 samples, 0.34%)</title><rect x="109.7" y="787.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="112.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.34%)</title><rect x="109.7" y="771.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="112.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/574530467.process (1 samples, 0.34%)</title><rect x="109.7" y="755.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="112.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (1 samples, 0.34%)</title><rect x="109.7" y="739.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.34%)</title><rect x="109.7" y="723.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="112.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (1 samples, 0.34%)</title><rect x="109.7" y="707.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="112.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (190 samples, 64.19%)</title><rect x="113.6" y="803.0" width="757.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="116.6" y="814.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1838891648.run (182 samples, 61.49%)</title><rect x="117.6" y="787.0" width="725.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="120.6" y="798.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1838891648.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (182 samples, 61.49%)</title><rect x="117.6" y="771.0" width="725.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="120.6" y="782.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (182 samples, 61.49%)</title><rect x="117.6" y="755.0" width="725.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="120.6" y="766.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (175 samples, 59.12%)</title><rect x="117.6" y="739.0" width="697.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="120.6" y="750.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (38 samples, 12.84%)</title><rect x="125.6" y="723.0" width="151.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.6" y="734.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (38 samples, 12.84%)</title><rect x="125.6" y="707.0" width="151.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="128.6" y="718.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (38 samples, 12.84%)</title><rect x="125.6" y="691.0" width="151.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.6" y="702.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 12.50%)</title><rect x="125.6" y="675.0" width="147.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.6" y="686.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 12.50%)</title><rect x="125.6" y="659.0" width="147.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="128.6" y="670.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (37 samples, 12.50%)</title><rect x="125.6" y="643.0" width="147.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="128.6" y="654.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (16 samples, 5.41%)</title><rect x="125.6" y="627.0" width="63.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="128.6" y="638.0">com/fas..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.68%)</title><rect x="149.5" y="611.0" width="8.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="152.5" y="622.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.68%)</title><rect x="149.5" y="595.0" width="8.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="152.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.68%)</title><rect x="157.5" y="611.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="160.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.68%)</title><rect x="157.5" y="595.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="160.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.68%)</title><rect x="157.5" y="579.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="160.5" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.68%)</title><rect x="157.5" y="563.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="160.5" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.68%)</title><rect x="157.5" y="547.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="160.5" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.68%)</title><rect x="157.5" y="531.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="160.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 2.03%)</title><rect x="165.5" y="611.0" width="23.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.5" y="622.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 2.03%)</title><rect x="165.5" y="595.0" width="23.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.5" y="606.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="169.5" y="579.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="172.5" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="169.5" y="563.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="172.5" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="169.5" y="547.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="172.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 1.35%)</title><rect x="173.4" y="579.0" width="16.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 1.35%)</title><rect x="173.4" y="563.0" width="16.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.34%)</title><rect x="173.4" y="547.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.4" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.34%)</title><rect x="173.4" y="531.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="176.4" y="542.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.34%)</title><rect x="173.4" y="515.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="176.4" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="173.4" y="499.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="176.4" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.34%)</title><rect x="173.4" y="483.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="176.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.68%)</title><rect x="177.4" y="547.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="180.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.34%)</title><rect x="185.4" y="547.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="188.4" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="185.4" y="531.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="188.4" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="185.4" y="515.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="188.4" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="185.4" y="499.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="188.4" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="185.4" y="483.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="188.4" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.34%)</title><rect x="185.4" y="467.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="188.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (21 samples, 7.09%)</title><rect x="189.4" y="627.0" width="83.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.4" y="638.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.34%)</title><rect x="189.4" y="611.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="192.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 1.01%)</title><rect x="193.4" y="611.0" width="11.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="196.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.01%)</title><rect x="193.4" y="595.0" width="11.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.34%)</title><rect x="201.4" y="579.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.34%)</title><rect x="201.4" y="563.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.34%)</title><rect x="201.4" y="547.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 1.35%)</title><rect x="205.3" y="611.0" width="16.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.3" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="209.3" y="595.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="212.3" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="209.3" y="579.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="212.3" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="209.3" y="563.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="212.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.68%)</title><rect x="213.3" y="595.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="216.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (13 samples, 4.39%)</title><rect x="221.3" y="611.0" width="51.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.3" y="622.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.69%)</title><rect x="221.3" y="595.0" width="19.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.68%)</title><rect x="233.2" y="579.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.68%)</title><rect x="233.2" y="563.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="236.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.68%)</title><rect x="233.2" y="547.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="236.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 2.70%)</title><rect x="241.2" y="595.0" width="31.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.2" y="606.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (8 samples, 2.70%)</title><rect x="241.2" y="579.0" width="31.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.2" y="590.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (8 samples, 2.70%)</title><rect x="241.2" y="563.0" width="31.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.2" y="574.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.68%)</title><rect x="249.2" y="547.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.68%)</title><rect x="249.2" y="531.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.68%)</title><rect x="249.2" y="515.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.68%)</title><rect x="249.2" y="499.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="252.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.68%)</title><rect x="249.2" y="483.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.68%)</title><rect x="249.2" y="467.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.68%)</title><rect x="257.2" y="547.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.34%)</title><rect x="261.1" y="531.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.34%)</title><rect x="261.1" y="515.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.34%)</title><rect x="261.1" y="499.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.1" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.34%)</title><rect x="261.1" y="483.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.34%)</title><rect x="265.1" y="547.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.34%)</title><rect x="265.1" y="531.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.34%)</title><rect x="265.1" y="515.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.34%)</title><rect x="265.1" y="499.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.1" y="510.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.34%)</title><rect x="265.1" y="483.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.1" y="494.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.34%)</title><rect x="265.1" y="467.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.1" y="478.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.34%)</title><rect x="265.1" y="451.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.34%)</title><rect x="269.1" y="547.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.1" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.34%)</title><rect x="269.1" y="531.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.1" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.34%)</title><rect x="269.1" y="515.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.34%)</title><rect x="269.1" y="499.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="272.1" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.34%)</title><rect x="273.1" y="675.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="276.1" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="273.1" y="659.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="276.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (126 samples, 42.57%)</title><rect x="277.1" y="723.0" width="502.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.1" y="734.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.taskData (1 samples, 0.34%)</title><rect x="285.1" y="707.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="288.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.34%)</title><rect x="285.1" y="691.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="288.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (17 samples, 5.74%)</title><rect x="289.1" y="707.0" width="67.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.1" y="718.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (17 samples, 5.74%)</title><rect x="289.1" y="691.0" width="67.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.1" y="702.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (17 samples, 5.74%)</title><rect x="289.1" y="675.0" width="67.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="292.1" y="686.0">ch/qos/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (13 samples, 4.39%)</title><rect x="305.0" y="659.0" width="51.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.0" y="670.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.01%)</title><rect x="344.9" y="643.0" width="11.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="347.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.01%)</title><rect x="344.9" y="627.0" width="11.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="347.9" y="638.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.34%)</title><rect x="352.8" y="611.0" width="4.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="355.8" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.68%)</title><rect x="356.8" y="707.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="359.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.68%)</title><rect x="356.8" y="691.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="359.8" y="702.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.68%)</title><rect x="356.8" y="675.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="359.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (22 samples, 7.43%)</title><rect x="364.8" y="707.0" width="87.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="367.8" y="718.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (22 samples, 7.43%)</title><rect x="364.8" y="691.0" width="87.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.8" y="702.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 2.70%)</title><rect x="368.8" y="675.0" width="31.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="371.8" y="686.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.03%)</title><rect x="372.8" y="659.0" width="23.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="375.8" y="670.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.69%)</title><rect x="376.8" y="643.0" width="19.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.8" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 1.69%)</title><rect x="376.8" y="627.0" width="19.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="379.8" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 1.69%)</title><rect x="376.8" y="611.0" width="19.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="379.8" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 1.69%)</title><rect x="376.8" y="595.0" width="19.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.8" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.01%)</title><rect x="384.7" y="579.0" width="12.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="387.7" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.34%)</title><rect x="384.7" y="563.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="387.7" y="574.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.34%)</title><rect x="384.7" y="547.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="387.7" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.68%)</title><rect x="388.7" y="563.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="391.7" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.68%)</title><rect x="388.7" y="547.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="391.7" y="558.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.34%)</title><rect x="388.7" y="531.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="391.7" y="542.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.34%)</title><rect x="392.7" y="531.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="395.7" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.34%)</title><rect x="392.7" y="515.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="395.7" y="526.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.34%)</title><rect x="396.7" y="659.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="399.7" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.34%)</title><rect x="396.7" y="643.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="399.7" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.34%)</title><rect x="396.7" y="627.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="399.7" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="396.7" y="611.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="399.7" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="396.7" y="595.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="399.7" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="396.7" y="579.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="399.7" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="396.7" y="563.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="399.7" y="574.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.34%)</title><rect x="396.7" y="547.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="399.7" y="558.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.34%)</title><rect x="400.7" y="675.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.7" y="686.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.34%)</title><rect x="400.7" y="659.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.7" y="670.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.34%)</title><rect x="400.7" y="643.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.7" y="654.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (12 samples, 4.05%)</title><rect x="404.7" y="675.0" width="47.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="407.7" y="686.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 4.05%)</title><rect x="404.7" y="659.0" width="47.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="407.7" y="670.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.34%)</title><rect x="404.7" y="643.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="407.7" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.34%)</title><rect x="404.7" y="627.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="407.7" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.34%)</title><rect x="404.7" y="611.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="407.7" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.34%)</title><rect x="404.7" y="595.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="407.7" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.34%)</title><rect x="404.7" y="579.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.7" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.34%)</title><rect x="404.7" y="563.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.7" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (11 samples, 3.72%)</title><rect x="408.6" y="643.0" width="43.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.6" y="654.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 2.03%)</title><rect x="428.6" y="627.0" width="23.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="431.6" y="638.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 2.03%)</title><rect x="428.6" y="611.0" width="23.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="431.6" y="622.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 1.01%)</title><rect x="440.5" y="595.0" width="12.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="443.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (72 samples, 24.32%)</title><rect x="452.5" y="707.0" width="287.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="455.5" y="718.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (72 samples, 24.32%)</title><rect x="452.5" y="691.0" width="287.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="455.5" y="702.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/574530467.process (59 samples, 19.93%)</title><rect x="468.4" y="675.0" width="235.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="471.4" y="686.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (58 samples, 19.59%)</title><rect x="472.4" y="659.0" width="231.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="475.4" y="670.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (58 samples, 19.59%)</title><rect x="472.4" y="643.0" width="231.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="475.4" y="654.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.34%)</title><rect x="476.4" y="627.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="479.4" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.34%)</title><rect x="476.4" y="611.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.4" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.34%)</title><rect x="476.4" y="595.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.4" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.34%)</title><rect x="476.4" y="579.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="479.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (56 samples, 18.92%)</title><rect x="480.4" y="627.0" width="223.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="483.4" y="638.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>java/lang/Thread.sleep (56 samples, 18.92%)</title><rect x="480.4" y="611.0" width="223.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="483.4" y="622.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (48 samples, 16.22%)</title><rect x="500.3" y="595.0" width="191.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="503.3" y="606.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.68%)</title><rect x="516.3" y="579.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="519.3" y="590.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.34%)</title><rect x="524.3" y="579.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="527.3" y="590.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="528.2" y="579.0" width="4.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="531.2" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="532.2" y="579.0" width="4.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="535.2" y="590.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="532.2" y="563.0" width="4.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="535.2" y="574.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 1.01%)</title><rect x="536.2" y="579.0" width="12.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="539.2" y="590.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (36 samples, 12.16%)</title><rect x="548.2" y="579.0" width="143.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="551.2" y="590.0">os::sleep(Thread*,..</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.34%)</title><rect x="576.1" y="563.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="579.1" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="580.1" y="563.0" width="4.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="583.1" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="580.1" y="547.0" width="4.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="583.1" y="558.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.01%)</title><rect x="584.1" y="563.0" width="11.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="587.1" y="574.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (15 samples, 5.07%)</title><rect x="596.0" y="563.0" width="59.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="599.0" y="574.0">__pthr..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.34%)</title><rect x="655.8" y="563.0" width="4.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="658.8" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.34%)</title><rect x="659.8" y="563.0" width="4.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="662.8" y="574.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 1.35%)</title><rect x="663.8" y="563.0" width="15.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="666.8" y="574.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.34%)</title><rect x="679.7" y="563.0" width="4.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="682.7" y="574.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.34%)</title><rect x="683.7" y="563.0" width="4.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="686.7" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.34%)</title><rect x="687.7" y="563.0" width="4.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="690.7" y="574.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.34%)</title><rect x="691.7" y="595.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="694.7" y="606.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.34%)</title><rect x="695.7" y="595.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="698.7" y="606.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.34%)</title><rect x="699.7" y="595.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="702.7" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/558187323.linkToTargetMethod (4 samples, 1.35%)</title><rect x="703.6" y="675.0" width="16.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="706.6" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (4 samples, 1.35%)</title><rect x="703.6" y="659.0" width="16.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="706.6" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1320942952.get$Lambda (4 samples, 1.35%)</title><rect x="703.6" y="643.0" width="16.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="706.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/1320942952.&lt;init&gt; (3 samples, 1.01%)</title><rect x="707.6" y="627.0" width="12.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="710.6" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.68%)</title><rect x="711.6" y="611.0" width="8.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="714.6" y="622.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.68%)</title><rect x="711.6" y="595.0" width="8.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="714.6" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.68%)</title><rect x="719.6" y="675.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="722.6" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.68%)</title><rect x="719.6" y="659.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="722.6" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.34%)</title><rect x="723.6" y="643.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="726.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (3 samples, 1.01%)</title><rect x="727.6" y="675.0" width="11.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="730.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 1.01%)</title><rect x="739.5" y="707.0" width="12.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="742.5" y="718.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 1.01%)</title><rect x="739.5" y="691.0" width="12.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="742.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.34%)</title><rect x="751.5" y="707.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="754.5" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="751.5" y="691.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="754.5" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="751.5" y="675.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="754.5" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="751.5" y="659.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="754.5" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="751.5" y="643.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="754.5" y="654.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (3 samples, 1.01%)</title><rect x="755.5" y="707.0" width="11.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="758.5" y="718.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (3 samples, 1.01%)</title><rect x="755.5" y="691.0" width="11.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="758.5" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/521806109.linkToTargetMethod (3 samples, 1.01%)</title><rect x="755.5" y="675.0" width="11.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="758.5" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/384720907.invokeStatic_D_L (3 samples, 1.01%)</title><rect x="755.5" y="659.0" width="11.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="758.5" y="670.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter$$Lambda$276/1955009949.get$Lambda (3 samples, 1.01%)</title><rect x="755.5" y="643.0" width="11.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="758.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.01%)</title><rect x="767.4" y="707.0" width="12.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="770.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.01%)</title><rect x="767.4" y="691.0" width="12.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="770.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.01%)</title><rect x="767.4" y="675.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="770.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1977979047.accept (2 samples, 0.68%)</title><rect x="767.4" y="659.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="770.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (2 samples, 0.68%)</title><rect x="767.4" y="643.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="770.4" y="654.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.68%)</title><rect x="767.4" y="627.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="770.4" y="638.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.68%)</title><rect x="767.4" y="611.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="770.4" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$289/1243798936.accept (1 samples, 0.34%)</title><rect x="775.4" y="659.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="778.4" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="775.4" y="643.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="778.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 3.04%)</title><rect x="779.4" y="723.0" width="35.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="782.4" y="734.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.69%)</title><rect x="795.3" y="707.0" width="20.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="798.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.69%)</title><rect x="795.3" y="691.0" width="20.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="798.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$289/1243798936.accept (5 samples, 1.69%)</title><rect x="795.3" y="675.0" width="20.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="798.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$44 (5 samples, 1.69%)</title><rect x="795.3" y="659.0" width="20.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="798.3" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/2001302630.complete (5 samples, 1.69%)</title><rect x="795.3" y="643.0" width="20.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="798.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$54 (5 samples, 1.69%)</title><rect x="795.3" y="627.0" width="20.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="798.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (5 samples, 1.69%)</title><rect x="795.3" y="611.0" width="20.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="798.3" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 1.69%)</title><rect x="795.3" y="595.0" width="20.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="798.3" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 1.69%)</title><rect x="795.3" y="579.0" width="20.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="798.3" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (5 samples, 1.69%)</title><rect x="795.3" y="563.0" width="20.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="798.3" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (5 samples, 1.69%)</title><rect x="795.3" y="547.0" width="20.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="798.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 2.36%)</title><rect x="815.3" y="739.0" width="27.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="818.3" y="750.0">c..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.01%)</title><rect x="831.2" y="723.0" width="12.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="834.2" y="734.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.01%)</title><rect x="831.2" y="707.0" width="12.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="834.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.34%)</title><rect x="843.2" y="787.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="846.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.34%)</title><rect x="843.2" y="771.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="846.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.34%)</title><rect x="843.2" y="755.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="846.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.34%)</title><rect x="843.2" y="739.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="846.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 2.03%)</title><rect x="847.2" y="787.0" width="23.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="850.2" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.01%)</title><rect x="847.2" y="771.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="850.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.68%)</title><rect x="847.2" y="755.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="850.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.68%)</title><rect x="847.2" y="739.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="850.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.68%)</title><rect x="847.2" y="723.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="850.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.68%)</title><rect x="847.2" y="707.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="850.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.68%)</title><rect x="847.2" y="691.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="850.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.34%)</title><rect x="855.1" y="755.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="858.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.34%)</title><rect x="855.1" y="739.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="858.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (3 samples, 1.01%)</title><rect x="859.1" y="771.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="862.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.68%)</title><rect x="871.1" y="835.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="874.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.68%)</title><rect x="871.1" y="819.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="874.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.68%)</title><rect x="871.1" y="803.0" width="8.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="874.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.34%)</title><rect x="871.1" y="787.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="874.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.34%)</title><rect x="871.1" y="771.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="874.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.34%)</title><rect x="871.1" y="755.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="874.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.34%)</title><rect x="871.1" y="739.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="874.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.34%)</title><rect x="875.1" y="787.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="878.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.34%)</title><rect x="875.1" y="771.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="878.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.34%)</title><rect x="875.1" y="755.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="878.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.values (1 samples, 0.34%)</title><rect x="875.1" y="739.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="878.1" y="750.0"></text>
</g>
<g>
<title>start_thread (78 samples, 26.35%)</title><rect x="879.1" y="835.0" width="310.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="882.1" y="846.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (78 samples, 26.35%)</title><rect x="879.1" y="819.0" width="310.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="882.1" y="830.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 4.05%)</title><rect x="879.1" y="803.0" width="47.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="882.1" y="814.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 4.05%)</title><rect x="879.1" y="787.0" width="47.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="882.1" y="798.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 4.05%)</title><rect x="879.1" y="771.0" width="47.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="882.1" y="782.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 4.05%)</title><rect x="879.1" y="755.0" width="47.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="882.1" y="766.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 2.03%)</title><rect x="895.0" y="739.0" width="23.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="898.0" y="750.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.34%)</title><rect x="914.9" y="723.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="917.9" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.34%)</title><rect x="918.9" y="739.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="921.9" y="750.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.34%)</title><rect x="922.9" y="739.0" width="4.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="925.9" y="750.0"></text>
</g>
<g>
<title>JavaThread::run() (66 samples, 22.30%)</title><rect x="926.9" y="803.0" width="263.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="929.9" y="814.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (66 samples, 22.30%)</title><rect x="926.9" y="787.0" width="263.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="929.9" y="798.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (66 samples, 22.30%)</title><rect x="926.9" y="771.0" width="263.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="929.9" y="782.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (66 samples, 22.30%)</title><rect x="926.9" y="755.0" width="263.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="929.9" y="766.0">CompileBroker::invoke_compiler_on_m..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (62 samples, 20.95%)</title><rect x="926.9" y="739.0" width="247.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="929.9" y="750.0">C2Compiler::compile_method(ciEnv*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (62 samples, 20.95%)</title><rect x="926.9" y="723.0" width="247.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="929.9" y="734.0">Compile::Compile(ciEnv*, C2Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (35 samples, 11.82%)</title><rect x="926.9" y="707.0" width="139.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="929.9" y="718.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.34%)</title><rect x="926.9" y="691.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="929.9" y="702.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.34%)</title><rect x="926.9" y="675.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="929.9" y="686.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.34%)</title><rect x="926.9" y="659.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="929.9" y="670.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.34%)</title><rect x="930.9" y="691.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="933.9" y="702.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.34%)</title><rect x="930.9" y="675.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.9" y="686.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.34%)</title><rect x="930.9" y="659.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="933.9" y="670.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.34%)</title><rect x="934.9" y="691.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="937.9" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.35%)</title><rect x="938.9" y="691.0" width="15.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="941.9" y="702.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.01%)</title><rect x="938.9" y="675.0" width="11.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="941.9" y="686.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.34%)</title><rect x="942.8" y="659.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="945.8" y="670.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.34%)</title><rect x="946.8" y="659.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="949.8" y="670.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.34%)</title><rect x="946.8" y="643.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="949.8" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.34%)</title><rect x="946.8" y="627.0" width="4.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="949.8" y="638.0"></text>
</g>
<g>
<title>PrefetchAllocationNode::ideal_reg() const (1 samples, 0.34%)</title><rect x="950.8" y="675.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="953.8" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.34%)</title><rect x="954.8" y="691.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="957.8" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.34%)</title><rect x="954.8" y="675.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="957.8" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.34%)</title><rect x="954.8" y="659.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="957.8" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.34%)</title><rect x="954.8" y="643.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="957.8" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 9.12%)</title><rect x="958.8" y="691.0" width="107.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="961.8" y="702.0">PhaseChaitin:..</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.34%)</title><rect x="962.8" y="675.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="965.8" y="686.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.34%)</title><rect x="966.8" y="675.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="969.8" y="686.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 1.01%)</title><rect x="970.7" y="675.0" width="12.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="973.7" y="686.0"></text>
</g>
<g>
<title>LiveRangeMap::compress_uf_map_for_nodes() (1 samples, 0.34%)</title><rect x="978.7" y="659.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.7" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.68%)</title><rect x="982.7" y="675.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="985.7" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.34%)</title><rect x="990.7" y="675.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="993.7" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.34%)</title><rect x="990.7" y="659.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="993.7" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.35%)</title><rect x="994.7" y="675.0" width="15.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="997.7" y="686.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.34%)</title><rect x="1006.6" y="659.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1009.6" y="670.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.34%)</title><rect x="1006.6" y="643.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1009.6" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 2.03%)</title><rect x="1010.6" y="675.0" width="23.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1013.6" y="686.0">P..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.34%)</title><rect x="1010.6" y="659.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1013.6" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.68%)</title><rect x="1014.6" y="659.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1017.6" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="1018.6" y="643.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1021.6" y="654.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.68%)</title><rect x="1022.6" y="659.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1025.6" y="670.0"></text>
</g>
<g>
<title>addL_rReg_immNode::rule() const (1 samples, 0.34%)</title><rect x="1030.5" y="659.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1033.5" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.68%)</title><rect x="1034.5" y="675.0" width="8.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1037.5" y="686.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.68%)</title><rect x="1042.5" y="675.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1045.5" y="686.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.68%)</title><rect x="1042.5" y="659.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1045.5" y="670.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.68%)</title><rect x="1042.5" y="643.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1045.5" y="654.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.68%)</title><rect x="1042.5" y="627.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1045.5" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="1046.5" y="611.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1049.5" y="622.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.01%)</title><rect x="1050.5" y="675.0" width="11.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1053.5" y="686.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.34%)</title><rect x="1058.4" y="659.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1061.4" y="670.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.34%)</title><rect x="1062.4" y="675.0" width="4.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1065.4" y="686.0"></text>
</g>
<g>
<title>Compile::Optimize() (19 samples, 6.42%)</title><rect x="1066.4" y="707.0" width="75.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1069.4" y="718.0">Compile:..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.34%)</title><rect x="1066.4" y="691.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.34%)</title><rect x="1066.4" y="675.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1069.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1066.4" y="659.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1069.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.34%)</title><rect x="1066.4" y="643.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.4" y="654.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.34%)</title><rect x="1070.4" y="691.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.4" y="702.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.34%)</title><rect x="1070.4" y="675.0" width="4.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1073.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (13 samples, 4.39%)</title><rect x="1074.4" y="691.0" width="51.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1077.4" y="702.0">Phase..</text>
</g>
<g>
<title>ParmNode::is_CFG() const (1 samples, 0.34%)</title><rect x="1074.4" y="675.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.34%)</title><rect x="1078.4" y="675.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1081.4" y="686.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.34%)</title><rect x="1078.4" y="659.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1081.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 2.36%)</title><rect x="1082.4" y="675.0" width="27.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.4" y="686.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 2.36%)</title><rect x="1082.4" y="659.0" width="27.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1085.4" y="670.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 2.36%)</title><rect x="1082.4" y="643.0" width="27.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.4" y="654.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.34%)</title><rect x="1110.3" y="675.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.34%)</title><rect x="1114.3" y="675.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.34%)</title><rect x="1114.3" y="659.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.34%)</title><rect x="1114.3" y="643.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.3" y="654.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.34%)</title><rect x="1114.3" y="627.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.3" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.68%)</title><rect x="1118.2" y="675.0" width="8.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.2" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.68%)</title><rect x="1118.2" y="659.0" width="8.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.2" y="670.0"></text>
</g>
<g>
<title>ConvI2LNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1118.2" y="643.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1121.2" y="654.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.34%)</title><rect x="1118.2" y="627.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1121.2" y="638.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.34%)</title><rect x="1118.2" y="611.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.2" y="622.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseTransform*) const (1 samples, 0.34%)</title><rect x="1122.2" y="643.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.2" y="654.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.34%)</title><rect x="1122.2" y="627.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.2" y="638.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.34%)</title><rect x="1122.2" y="611.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.2" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.01%)</title><rect x="1126.2" y="691.0" width="12.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.2" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.01%)</title><rect x="1126.2" y="675.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.2" y="686.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.34%)</title><rect x="1126.2" y="659.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.2" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.34%)</title><rect x="1130.2" y="659.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.2" y="670.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1134.2" y="659.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.2" y="670.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.34%)</title><rect x="1134.2" y="643.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.2" y="654.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.34%)</title><rect x="1138.2" y="691.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.2" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.34%)</title><rect x="1138.2" y="675.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.2" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.34%)</title><rect x="1138.2" y="659.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.2" y="670.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1138.2" y="643.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.2" y="654.0"></text>
</g>
<g>
<title>CompileWrapper::~CompileWrapper() (1 samples, 0.34%)</title><rect x="1142.2" y="707.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.2" y="718.0"></text>
</g>
<g>
<title>BufferBlob::free(BufferBlob*) (1 samples, 0.34%)</title><rect x="1142.2" y="691.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.36%)</title><rect x="1146.1" y="707.0" width="28.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.1" y="718.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.36%)</title><rect x="1146.1" y="691.0" width="28.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.1" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.36%)</title><rect x="1146.1" y="675.0" width="28.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.1" y="686.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.36%)</title><rect x="1146.1" y="659.0" width="28.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.1" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.36%)</title><rect x="1146.1" y="643.0" width="28.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.1" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 2.36%)</title><rect x="1146.1" y="627.0" width="28.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.1" y="638.0">P..</text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.34%)</title><rect x="1146.1" y="611.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.1" y="622.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.34%)</title><rect x="1146.1" y="595.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.1" y="606.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.34%)</title><rect x="1146.1" y="579.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.1" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.34%)</title><rect x="1146.1" y="563.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.1" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.69%)</title><rect x="1150.1" y="611.0" width="20.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.69%)</title><rect x="1150.1" y="595.0" width="20.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.69%)</title><rect x="1150.1" y="579.0" width="20.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.69%)</title><rect x="1150.1" y="563.0" width="20.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.69%)</title><rect x="1150.1" y="547.0" width="20.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.69%)</title><rect x="1150.1" y="531.0" width="20.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.1" y="542.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1150.1" y="515.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.1" y="526.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.34%)</title><rect x="1150.1" y="499.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.1" y="510.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.34%)</title><rect x="1150.1" y="483.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.1" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.34%)</title><rect x="1150.1" y="467.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.1" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.34%)</title><rect x="1150.1" y="451.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.1" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1150.1" y="435.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.1" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1150.1" y="419.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.1" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.34%)</title><rect x="1150.1" y="403.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.1" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.34%)</title><rect x="1150.1" y="387.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.1" y="398.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.34%)</title><rect x="1150.1" y="371.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.1" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1150.1" y="355.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.1" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1150.1" y="339.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.1" y="350.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.34%)</title><rect x="1150.1" y="323.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.1" y="334.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.34%)</title><rect x="1150.1" y="307.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.1" y="318.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.34%)</title><rect x="1150.1" y="291.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.1" y="302.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.34%)</title><rect x="1150.1" y="275.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.1" y="286.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.34%)</title><rect x="1150.1" y="259.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.1" y="270.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.34%)</title><rect x="1150.1" y="243.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.1" y="254.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.34%)</title><rect x="1150.1" y="227.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.1" y="238.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.34%)</title><rect x="1150.1" y="211.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.35%)</title><rect x="1154.1" y="515.0" width="16.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.35%)</title><rect x="1154.1" y="499.0" width="16.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.35%)</title><rect x="1154.1" y="483.0" width="16.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.01%)</title><rect x="1154.1" y="467.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.01%)</title><rect x="1154.1" y="451.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.01%)</title><rect x="1154.1" y="435.0" width="12.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.01%)</title><rect x="1154.1" y="419.0" width="12.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.01%)</title><rect x="1154.1" y="403.0" width="12.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.01%)</title><rect x="1154.1" y="387.0" width="12.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.01%)</title><rect x="1154.1" y="371.0" width="12.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.01%)</title><rect x="1154.1" y="355.0" width="12.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.01%)</title><rect x="1154.1" y="339.0" width="12.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.1" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.01%)</title><rect x="1154.1" y="323.0" width="12.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.1" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.01%)</title><rect x="1154.1" y="307.0" width="12.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.1" y="318.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.34%)</title><rect x="1154.1" y="291.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.1" y="302.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.34%)</title><rect x="1154.1" y="275.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1158.1" y="291.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1158.1" y="275.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1158.1" y="259.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.1" y="270.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1158.1" y="243.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1162.1" y="243.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.1" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1162.1" y="227.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.1" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1162.1" y="211.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1162.1" y="195.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1162.1" y="179.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1162.1" y="163.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1162.1" y="147.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.1" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.34%)</title><rect x="1162.1" y="131.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.1" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1162.1" y="115.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.1" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1162.1" y="99.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.1" y="110.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.34%)</title><rect x="1162.1" y="83.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.1" y="94.0"></text>
</g>
<g>
<title>LinkResolver::check_klass_accessability(KlassHandle, KlassHandle, Thread*) (1 samples, 0.34%)</title><rect x="1162.1" y="67.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.1" y="78.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass*, Klass*, bool) (1 samples, 0.34%)</title><rect x="1162.1" y="51.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.1" y="62.0"></text>
</g>
<g>
<title>UTF8::strrchr(signed char const*, int, signed char) (1 samples, 0.34%)</title><rect x="1162.1" y="35.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.1" y="46.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.34%)</title><rect x="1166.1" y="467.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.1" y="478.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1166.1" y="451.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.1" y="462.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.34%)</title><rect x="1166.1" y="435.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.1" y="446.0"></text>
</g>
<g>
<title>VirtualCallGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1170.1" y="611.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.1" y="622.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.34%)</title><rect x="1170.1" y="595.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.1" y="606.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1170.1" y="579.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.1" y="590.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.34%)</title><rect x="1170.1" y="563.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.1" y="574.0"></text>
</g>
<g>
<title>CatchNode::Value(PhaseTransform*) const (1 samples, 0.34%)</title><rect x="1170.1" y="547.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.1" y="558.0"></text>
</g>
<g>
<title>_init (1 samples, 0.34%)</title><rect x="1170.1" y="531.0" width="4.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1173.1" y="542.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.35%)</title><rect x="1174.1" y="739.0" width="15.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.1" y="750.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.35%)</title><rect x="1174.1" y="723.0" width="15.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.1" y="734.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.35%)</title><rect x="1174.1" y="707.0" width="15.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.1" y="718.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.34%)</title><rect x="1174.1" y="691.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.1" y="702.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.34%)</title><rect x="1174.1" y="675.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.1" y="686.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.34%)</title><rect x="1174.1" y="659.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.1" y="670.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.34%)</title><rect x="1174.1" y="643.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.1" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.34%)</title><rect x="1174.1" y="627.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.1" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.34%)</title><rect x="1174.1" y="611.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.1" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.34%)</title><rect x="1174.1" y="595.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.1" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.34%)</title><rect x="1174.1" y="579.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.1" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1174.1" y="563.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.1" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1174.1" y="547.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.1" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.34%)</title><rect x="1174.1" y="531.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.1" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.34%)</title><rect x="1174.1" y="515.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.1" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.34%)</title><rect x="1174.1" y="499.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.1" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*) (1 samples, 0.34%)</title><rect x="1174.1" y="483.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.1" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1174.1" y="467.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.1" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1174.1" y="451.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.1" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.34%)</title><rect x="1174.1" y="435.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.1" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.34%)</title><rect x="1174.1" y="419.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.1" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.34%)</title><rect x="1174.1" y="403.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.1" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*) (1 samples, 0.34%)</title><rect x="1174.1" y="387.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1174.1" y="371.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.1" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1174.1" y="355.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.1" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.34%)</title><rect x="1174.1" y="339.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.1" y="350.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.34%)</title><rect x="1174.1" y="323.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.1" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.34%)</title><rect x="1174.1" y="307.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.1" y="318.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1174.1" y="291.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.1" y="302.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1174.1" y="275.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.1" y="286.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.34%)</title><rect x="1174.1" y="259.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.1" y="270.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.34%)</title><rect x="1174.1" y="243.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.1" y="254.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.34%)</title><rect x="1174.1" y="227.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.1" y="238.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.34%)</title><rect x="1174.1" y="211.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.1" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1174.1" y="195.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.1" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1174.1" y="179.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.1" y="190.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1174.1" y="163.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.1" y="174.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.34%)</title><rect x="1174.1" y="147.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.1" y="158.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (3 samples, 1.01%)</title><rect x="1178.0" y="691.0" width="12.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.0" y="702.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (3 samples, 1.01%)</title><rect x="1178.0" y="675.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.0" y="686.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 0.68%)</title><rect x="1178.0" y="659.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.0" y="670.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.34%)</title><rect x="1178.0" y="643.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.0" y="654.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.34%)</title><rect x="1178.0" y="627.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="638.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.34%)</title><rect x="1182.0" y="643.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_nmethod(nmethod*) (1 samples, 0.34%)</title><rect x="1182.0" y="627.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.0" y="638.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.34%)</title><rect x="1182.0" y="611.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="622.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.34%)</title><rect x="1186.0" y="659.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="670.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.34%)</title><rect x="1186.0" y="643.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="654.0"></text>
</g>
</g>
</svg>
