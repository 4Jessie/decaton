<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1285"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1285"> </text>
<g id="frames">
<g>
<title>all (353 samples, 100.00%)</title><rect x="10.0" y="1251.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (30 samples, 8.50%)</title><rect x="10.0" y="1235.0" width="100.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (30 samples, 8.50%)</title><rect x="10.0" y="1219.0" width="100.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.28%)</title><rect x="10.0" y="1203.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.28%)</title><rect x="10.0" y="1187.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1457058559.accept (1 samples, 0.28%)</title><rect x="10.0" y="1171.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.28%)</title><rect x="10.0" y="1155.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.28%)</title><rect x="10.0" y="1139.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.28%)</title><rect x="10.0" y="1123.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.57%)</title><rect x="13.3" y="1203.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.57%)</title><rect x="13.3" y="1187.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.3" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.57%)</title><rect x="13.3" y="1171.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.57%)</title><rect x="13.3" y="1155.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.3" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.28%)</title><rect x="13.3" y="1139.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.3" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.28%)</title><rect x="16.7" y="1139.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.7" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.28%)</title><rect x="16.7" y="1123.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.7" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.28%)</title><rect x="16.7" y="1107.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.7" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.28%)</title><rect x="16.7" y="1091.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.7" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.28%)</title><rect x="16.7" y="1075.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.7" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.28%)</title><rect x="16.7" y="1059.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.7" y="1070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.28%)</title><rect x="16.7" y="1043.0" width="3.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="19.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.57%)</title><rect x="20.0" y="1203.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.28%)</title><rect x="20.0" y="1187.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.0" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.28%)</title><rect x="20.0" y="1171.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.0" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.28%)</title><rect x="20.0" y="1155.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.0" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.28%)</title><rect x="20.0" y="1139.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.0" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.28%)</title><rect x="20.0" y="1123.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.28%)</title><rect x="20.0" y="1107.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.28%)</title><rect x="20.0" y="1091.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.28%)</title><rect x="20.0" y="1075.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.28%)</title><rect x="20.0" y="1059.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.0" y="1070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.28%)</title><rect x="20.0" y="1043.0" width="3.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="23.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.28%)</title><rect x="23.4" y="1187.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.28%)</title><rect x="26.7" y="1203.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.7" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="26.7" y="1187.0" width="3.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="29.7" y="1198.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="26.7" y="1171.0" width="3.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="29.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 2.27%)</title><rect x="30.1" y="1203.0" width="26.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.1" y="1214.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1778373595.accept (8 samples, 2.27%)</title><rect x="30.1" y="1187.0" width="26.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.1" y="1198.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (8 samples, 2.27%)</title><rect x="30.1" y="1171.0" width="26.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.1" y="1182.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (3 samples, 0.85%)</title><rect x="36.7" y="1155.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (3 samples, 0.85%)</title><rect x="36.7" y="1139.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (3 samples, 0.85%)</title><rect x="36.7" y="1123.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 0.85%)</title><rect x="36.7" y="1107.0" width="10.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="39.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.85%)</title><rect x="36.7" y="1091.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 0.85%)</title><rect x="36.7" y="1075.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.85%)</title><rect x="36.7" y="1059.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="39.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.85%)</title><rect x="36.7" y="1043.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.85%)</title><rect x="36.7" y="1027.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.28%)</title><rect x="43.4" y="1011.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.28%)</title><rect x="46.8" y="1155.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="49.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.28%)</title><rect x="46.8" y="1139.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.isRegressing (1 samples, 0.28%)</title><rect x="46.8" y="1123.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.57%)</title><rect x="50.1" y="1155.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="53.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.57%)</title><rect x="50.1" y="1139.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 4.53%)</title><rect x="56.8" y="1203.0" width="53.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.8" y="1214.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 4.53%)</title><rect x="56.8" y="1187.0" width="53.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.8" y="1198.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 3.12%)</title><rect x="56.8" y="1171.0" width="36.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.8" y="1182.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.28%)</title><rect x="56.8" y="1155.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="59.8" y="1166.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.28%)</title><rect x="56.8" y="1139.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="59.8" y="1150.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.28%)</title><rect x="56.8" y="1123.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="59.8" y="1134.0"></text>
</g>
<g>
<title>ServiceUtil::visible_oop(oopDesc*) (1 samples, 0.28%)</title><rect x="56.8" y="1107.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="59.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.13%)</title><rect x="60.1" y="1155.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.13%)</title><rect x="60.1" y="1139.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.85%)</title><rect x="60.1" y="1123.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="63.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.28%)</title><rect x="60.1" y="1107.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.28%)</title><rect x="60.1" y="1091.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.28%)</title><rect x="60.1" y="1075.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="63.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.28%)</title><rect x="60.1" y="1059.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="63.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.28%)</title><rect x="60.1" y="1043.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.57%)</title><rect x="63.5" y="1107.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="66.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.57%)</title><rect x="63.5" y="1091.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.28%)</title><rect x="63.5" y="1075.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.28%)</title><rect x="63.5" y="1059.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="66.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.28%)</title><rect x="63.5" y="1043.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.28%)</title><rect x="63.5" y="1027.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.28%)</title><rect x="63.5" y="1011.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="66.5" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.28%)</title><rect x="63.5" y="995.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.5" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.28%)</title><rect x="63.5" y="979.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.5" y="990.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.28%)</title><rect x="63.5" y="963.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="66.5" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.28%)</title><rect x="63.5" y="947.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="66.5" y="958.0"></text>
</g>
<g>
<title>java/nio/Bits.copyFromArray (1 samples, 0.28%)</title><rect x="63.5" y="931.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="66.5" y="942.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (1 samples, 0.28%)</title><rect x="63.5" y="915.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="66.5" y="926.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory2 (1 samples, 0.28%)</title><rect x="63.5" y="899.0" width="3.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="66.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.28%)</title><rect x="66.8" y="1075.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.8" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.28%)</title><rect x="66.8" y="1059.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="69.8" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.28%)</title><rect x="66.8" y="1043.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="69.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$260/542549953.shouldBlock (1 samples, 0.28%)</title><rect x="70.2" y="1123.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="73.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.28%)</title><rect x="70.2" y="1107.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.28%)</title><rect x="70.2" y="1091.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.2" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.28%)</title><rect x="70.2" y="1075.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.2" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.28%)</title><rect x="70.2" y="1059.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.2" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.28%)</title><rect x="70.2" y="1043.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="73.2" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.28%)</title><rect x="70.2" y="1027.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="73.2" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.28%)</title><rect x="70.2" y="1011.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="73.2" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.28%)</title><rect x="70.2" y="995.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.2" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.28%)</title><rect x="70.2" y="979.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.2" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.28%)</title><rect x="70.2" y="963.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.28%)</title><rect x="70.2" y="947.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="73.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.28%)</title><rect x="70.2" y="931.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$261/1092916450.test (1 samples, 0.28%)</title><rect x="70.2" y="915.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$hasAvailableFetches$0 (1 samples, 0.28%)</title><rect x="70.2" y="899.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="73.2" y="910.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.28%)</title><rect x="70.2" y="883.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="73.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 1.70%)</title><rect x="73.5" y="1155.0" width="20.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="76.5" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.&lt;init&gt; (1 samples, 0.28%)</title><rect x="73.5" y="1139.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.42%)</title><rect x="76.9" y="1139.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.13%)</title><rect x="80.2" y="1123.0" width="13.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.13%)</title><rect x="80.2" y="1107.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.57%)</title><rect x="83.5" y="1091.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="86.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.28%)</title><rect x="86.9" y="1075.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="89.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.28%)</title><rect x="86.9" y="1059.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.28%)</title><rect x="86.9" y="1043.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="89.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.28%)</title><rect x="86.9" y="1027.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="89.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.28%)</title><rect x="86.9" y="1011.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.28%)</title><rect x="86.9" y="995.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.28%)</title><rect x="86.9" y="979.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.28%)</title><rect x="90.2" y="1091.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.28%)</title><rect x="90.2" y="1075.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="93.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.28%)</title><rect x="90.2" y="1059.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="93.2" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.28%)</title><rect x="90.2" y="1043.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="93.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.57%)</title><rect x="93.6" y="1171.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.28%)</title><rect x="93.6" y="1155.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.28%)</title><rect x="93.6" y="1139.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.6" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.28%)</title><rect x="93.6" y="1123.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.28%)</title><rect x="93.6" y="1107.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.28%)</title><rect x="93.6" y="1091.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="96.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.28%)</title><rect x="93.6" y="1075.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.28%)</title><rect x="93.6" y="1059.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.28%)</title><rect x="93.6" y="1043.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="96.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.28%)</title><rect x="93.6" y="1027.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.28%)</title><rect x="93.6" y="1011.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="96.6" y="1022.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.28%)</title><rect x="93.6" y="995.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.28%)</title><rect x="93.6" y="979.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.28%)</title><rect x="96.9" y="1155.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="99.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.28%)</title><rect x="96.9" y="1139.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.28%)</title><rect x="96.9" y="1123.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.28%)</title><rect x="96.9" y="1107.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="99.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.28%)</title><rect x="96.9" y="1091.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="99.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.28%)</title><rect x="96.9" y="1075.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="96.9" y="1059.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="96.9" y="1043.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="99.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.28%)</title><rect x="100.3" y="1171.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="103.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.28%)</title><rect x="100.3" y="1155.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.28%)</title><rect x="100.3" y="1139.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="103.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.28%)</title><rect x="100.3" y="1123.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.28%)</title><rect x="100.3" y="1107.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="103.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.28%)</title><rect x="100.3" y="1091.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="103.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.28%)</title><rect x="100.3" y="1075.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="103.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.28%)</title><rect x="100.3" y="1059.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="103.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.28%)</title><rect x="100.3" y="1043.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.28%)</title><rect x="100.3" y="1027.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="103.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.validate (1 samples, 0.28%)</title><rect x="100.3" y="1011.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.28%)</title><rect x="103.6" y="1171.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.28%)</title><rect x="103.6" y="1155.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="106.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.28%)</title><rect x="103.6" y="1139.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="106.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.wakeup (1 samples, 0.28%)</title><rect x="103.6" y="1123.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="106.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.wakeup (1 samples, 0.28%)</title><rect x="103.6" y="1107.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="106.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.28%)</title><rect x="106.9" y="1171.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="109.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="106.9" y="1155.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="109.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="106.9" y="1139.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="109.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="106.9" y="1123.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="109.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.run (219 samples, 62.04%)</title><rect x="110.3" y="1235.0" width="732.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.3" y="1246.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (219 samples, 62.04%)</title><rect x="110.3" y="1219.0" width="732.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.3" y="1230.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (219 samples, 62.04%)</title><rect x="110.3" y="1203.0" width="732.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="113.3" y="1214.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1533617416.run (202 samples, 57.22%)</title><rect x="110.3" y="1187.0" width="675.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.3" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1533617416.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (202 samples, 57.22%)</title><rect x="110.3" y="1171.0" width="675.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.3" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (202 samples, 57.22%)</title><rect x="110.3" y="1155.0" width="675.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.3" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (201 samples, 56.94%)</title><rect x="113.6" y="1139.0" width="671.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="116.6" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (49 samples, 13.88%)</title><rect x="137.0" y="1123.0" width="163.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="140.0" y="1134.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (49 samples, 13.88%)</title><rect x="137.0" y="1107.0" width="163.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="140.0" y="1118.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (49 samples, 13.88%)</title><rect x="137.0" y="1091.0" width="163.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="140.0" y="1102.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.28%)</title><rect x="137.0" y="1075.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="140.0" y="1086.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.28%)</title><rect x="137.0" y="1059.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="140.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (48 samples, 13.60%)</title><rect x="140.4" y="1075.0" width="160.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="143.4" y="1086.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (48 samples, 13.60%)</title><rect x="140.4" y="1059.0" width="160.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="143.4" y="1070.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (48 samples, 13.60%)</title><rect x="140.4" y="1043.0" width="160.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="143.4" y="1054.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (21 samples, 5.95%)</title><rect x="140.4" y="1027.0" width="70.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="143.4" y="1038.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (14 samples, 3.97%)</title><rect x="140.4" y="1011.0" width="46.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.4" y="1022.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (14 samples, 3.97%)</title><rect x="140.4" y="995.0" width="46.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="143.4" y="1006.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (10 samples, 2.83%)</title><rect x="140.4" y="979.0" width="33.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="143.4" y="990.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (2 samples, 0.57%)</title><rect x="167.1" y="963.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="170.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.13%)</title><rect x="173.8" y="979.0" width="13.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.28%)</title><rect x="173.8" y="963.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="176.8" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.85%)</title><rect x="177.1" y="963.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="180.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 1.98%)</title><rect x="187.2" y="1011.0" width="23.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.2" y="1022.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 1.98%)</title><rect x="187.2" y="995.0" width="23.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.2" y="1006.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.57%)</title><rect x="187.2" y="979.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (2 samples, 0.57%)</title><rect x="187.2" y="963.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="190.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.57%)</title><rect x="193.9" y="979.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.28%)</title><rect x="193.9" y="963.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.9" y="974.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.28%)</title><rect x="193.9" y="947.0" width="3.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="196.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (1 samples, 0.28%)</title><rect x="197.2" y="963.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="200.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.57%)</title><rect x="200.5" y="979.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.5" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="200.5" y="963.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="203.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.28%)</title><rect x="203.9" y="963.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="206.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.28%)</title><rect x="203.9" y="947.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="206.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.28%)</title><rect x="207.2" y="979.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.28%)</title><rect x="207.2" y="963.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (25 samples, 7.08%)</title><rect x="210.6" y="1027.0" width="83.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.6" y="1038.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.85%)</title><rect x="210.6" y="1011.0" width="10.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.85%)</title><rect x="210.6" y="995.0" width="10.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.28%)</title><rect x="217.3" y="979.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.28%)</title><rect x="217.3" y="963.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.28%)</title><rect x="217.3" y="947.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (22 samples, 6.23%)</title><rect x="220.6" y="1011.0" width="73.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.6" y="1022.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 1.70%)</title><rect x="223.9" y="995.0" width="20.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.28%)</title><rect x="223.9" y="979.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.28%)</title><rect x="223.9" y="963.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.28%)</title><rect x="223.9" y="947.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.13%)</title><rect x="227.3" y="979.0" width="13.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.28%)</title><rect x="240.7" y="979.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.28%)</title><rect x="240.7" y="963.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (15 samples, 4.25%)</title><rect x="244.0" y="995.0" width="50.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="247.0" y="1006.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (15 samples, 4.25%)</title><rect x="244.0" y="979.0" width="50.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.0" y="990.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (15 samples, 4.25%)</title><rect x="244.0" y="963.0" width="50.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.0" y="974.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.85%)</title><rect x="247.3" y="947.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.28%)</title><rect x="247.3" y="931.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.28%)</title><rect x="247.3" y="915.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.28%)</title><rect x="247.3" y="899.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.57%)</title><rect x="250.7" y="931.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.57%)</title><rect x="250.7" y="915.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.13%)</title><rect x="257.4" y="947.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.85%)</title><rect x="260.7" y="931.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.85%)</title><rect x="260.7" y="915.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.85%)</title><rect x="260.7" y="899.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.7" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.85%)</title><rect x="260.7" y="883.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 1.42%)</title><rect x="270.7" y="947.0" width="16.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="273.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 1.42%)</title><rect x="270.7" y="931.0" width="16.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 1.42%)</title><rect x="270.7" y="915.0" width="16.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 1.42%)</title><rect x="270.7" y="899.0" width="16.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.7" y="910.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 1.42%)</title><rect x="270.7" y="883.0" width="16.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.7" y="894.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 1.42%)</title><rect x="270.7" y="867.0" width="16.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.7" y="878.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor5.newInstance (5 samples, 1.42%)</title><rect x="270.7" y="851.0" width="16.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.28%)</title><rect x="284.1" y="835.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="287.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.57%)</title><rect x="287.5" y="947.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.57%)</title><rect x="294.1" y="1027.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="297.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.57%)</title><rect x="294.1" y="1011.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="297.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.57%)</title><rect x="294.1" y="995.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="297.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.57%)</title><rect x="294.1" y="979.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.28%)</title><rect x="297.5" y="963.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (135 samples, 38.24%)</title><rect x="300.8" y="1123.0" width="451.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="303.8" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (27 samples, 7.65%)</title><rect x="300.8" y="1107.0" width="90.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.8" y="1118.0">com/lineco..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (26 samples, 7.37%)</title><rect x="304.2" y="1091.0" width="86.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="307.2" y="1102.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (24 samples, 6.80%)</title><rect x="310.8" y="1075.0" width="80.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="313.8" y="1086.0">ch/qos/lo..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (19 samples, 5.38%)</title><rect x="327.6" y="1059.0" width="63.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.6" y="1070.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.remove (18 samples, 5.10%)</title><rect x="330.9" y="1043.0" width="60.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="333.9" y="1054.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 1.42%)</title><rect x="374.4" y="1027.0" width="16.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="377.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.85%)</title><rect x="391.1" y="1107.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="394.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.85%)</title><rect x="391.1" y="1091.0" width="10.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="394.1" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.85%)</title><rect x="391.1" y="1075.0" width="10.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="394.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (25 samples, 7.08%)</title><rect x="401.1" y="1107.0" width="83.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="404.1" y="1118.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (25 samples, 7.08%)</title><rect x="401.1" y="1091.0" width="83.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="404.1" y="1102.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 2.83%)</title><rect x="404.4" y="1075.0" width="33.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="407.4" y="1086.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 1.98%)</title><rect x="404.4" y="1059.0" width="23.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.4" y="1070.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 1.70%)</title><rect x="407.8" y="1043.0" width="20.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="410.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.85%)</title><rect x="407.8" y="1027.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="410.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.85%)</title><rect x="407.8" y="1011.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="410.8" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.85%)</title><rect x="407.8" y="995.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="410.8" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.57%)</title><rect x="407.8" y="979.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="410.8" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.57%)</title><rect x="407.8" y="963.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="410.8" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.57%)</title><rect x="407.8" y="947.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="410.8" y="958.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.28%)</title><rect x="411.1" y="931.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="414.1" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.28%)</title><rect x="414.5" y="979.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="417.5" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.57%)</title><rect x="417.8" y="1027.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.8" y="1038.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="424.5" y="1027.0" width="3.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="427.5" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.85%)</title><rect x="427.8" y="1059.0" width="10.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="430.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.28%)</title><rect x="437.9" y="1075.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.9" y="1086.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 3.68%)</title><rect x="441.2" y="1075.0" width="43.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="444.2" y="1086.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 3.68%)</title><rect x="441.2" y="1059.0" width="43.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="444.2" y="1070.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (13 samples, 3.68%)</title><rect x="441.2" y="1043.0" width="43.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="444.2" y="1054.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 3.68%)</title><rect x="441.2" y="1027.0" width="43.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="444.2" y="1038.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 1.70%)</title><rect x="464.6" y="1011.0" width="20.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="467.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 1.42%)</title><rect x="468.0" y="995.0" width="16.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="471.0" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="481.3" y="979.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="484.3" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="481.3" y="963.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="484.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (68 samples, 19.26%)</title><rect x="484.7" y="1107.0" width="227.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="487.7" y="1118.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (68 samples, 19.26%)</title><rect x="484.7" y="1091.0" width="227.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="487.7" y="1102.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/574530467.process (56 samples, 15.86%)</title><rect x="484.7" y="1075.0" width="187.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="487.7" y="1086.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (56 samples, 15.86%)</title><rect x="484.7" y="1059.0" width="187.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="487.7" y="1070.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (56 samples, 15.86%)</title><rect x="484.7" y="1043.0" width="187.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="487.7" y="1054.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.57%)</title><rect x="484.7" y="1027.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="487.7" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.57%)</title><rect x="484.7" y="1011.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="487.7" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.57%)</title><rect x="484.7" y="995.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="487.7" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.57%)</title><rect x="484.7" y="979.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="487.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (49 samples, 13.88%)</title><rect x="491.4" y="1027.0" width="163.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="494.4" y="1038.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (49 samples, 13.88%)</title><rect x="491.4" y="1011.0" width="163.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="494.4" y="1022.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (41 samples, 11.61%)</title><rect x="504.7" y="995.0" width="137.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="507.7" y="1006.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.85%)</title><rect x="511.4" y="979.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="514.4" y="990.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.28%)</title><rect x="521.4" y="979.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="524.4" y="990.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.28%)</title><rect x="524.8" y="979.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="527.8" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="528.1" y="979.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="531.1" y="990.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.57%)</title><rect x="531.5" y="979.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="534.5" y="990.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.28%)</title><rect x="538.2" y="979.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="541.2" y="990.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (30 samples, 8.50%)</title><rect x="541.5" y="979.0" width="100.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="544.5" y="990.0">os::sleep(Th..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.57%)</title><rect x="561.6" y="963.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="564.6" y="974.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.28%)</title><rect x="564.9" y="947.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="567.9" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="568.2" y="963.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="571.2" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="568.2" y="947.0" width="3.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="571.2" y="958.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.28%)</title><rect x="571.6" y="963.0" width="3.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="574.6" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.28%)</title><rect x="574.9" y="963.0" width="3.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="577.9" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (17 samples, 4.82%)</title><rect x="578.3" y="963.0" width="56.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="581.3" y="974.0">__pthr..</text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.28%)</title><rect x="635.1" y="963.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="638.1" y="974.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.28%)</title><rect x="638.4" y="963.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="641.4" y="974.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.28%)</title><rect x="641.8" y="995.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="644.8" y="1006.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.28%)</title><rect x="645.1" y="995.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="648.1" y="1006.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.28%)</title><rect x="648.5" y="995.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="651.5" y="1006.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.28%)</title><rect x="651.8" y="995.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="654.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 1.42%)</title><rect x="655.2" y="1027.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="658.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.28%)</title><rect x="668.5" y="1011.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="671.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.28%)</title><rect x="668.5" y="995.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="671.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.28%)</title><rect x="668.5" y="979.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="671.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.28%)</title><rect x="671.9" y="1075.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="674.9" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.28%)</title><rect x="671.9" y="1059.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="674.9" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 1.13%)</title><rect x="675.2" y="1075.0" width="13.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="678.2" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.28%)</title><rect x="685.2" y="1059.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="688.2" y="1070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.28%)</title><rect x="685.2" y="1043.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="688.2" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (6 samples, 1.70%)</title><rect x="688.6" y="1075.0" width="20.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="691.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (6 samples, 1.70%)</title><rect x="688.6" y="1059.0" width="20.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="691.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/574530467.process (1 samples, 0.28%)</title><rect x="705.3" y="1043.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="708.3" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.28%)</title><rect x="708.6" y="1075.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="711.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.28%)</title><rect x="708.6" y="1059.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="711.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 3.40%)</title><rect x="712.0" y="1107.0" width="40.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="715.0" y="1118.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 3.40%)</title><rect x="712.0" y="1091.0" width="40.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="715.0" y="1102.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 2.83%)</title><rect x="752.1" y="1123.0" width="33.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="755.1" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 2.83%)</title><rect x="752.1" y="1107.0" width="33.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="755.1" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 2.55%)</title><rect x="755.4" y="1091.0" width="30.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="758.4" y="1102.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/419810029.accept (9 samples, 2.55%)</title><rect x="755.4" y="1075.0" width="30.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="758.4" y="1086.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (9 samples, 2.55%)</title><rect x="755.4" y="1059.0" width="30.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="758.4" y="1070.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 2.55%)</title><rect x="755.4" y="1043.0" width="30.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="758.4" y="1054.0">co..</text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 2.55%)</title><rect x="755.4" y="1027.0" width="30.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="758.4" y="1038.0">ja..</text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 2.55%)</title><rect x="755.4" y="1011.0" width="30.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="758.4" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 1.13%)</title><rect x="785.5" y="1187.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="788.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.13%)</title><rect x="785.5" y="1171.0" width="13.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="788.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.13%)</title><rect x="785.5" y="1155.0" width="13.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="788.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.13%)</title><rect x="785.5" y="1139.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="788.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (1 samples, 0.28%)</title><rect x="795.6" y="1123.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="798.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (13 samples, 3.68%)</title><rect x="798.9" y="1187.0" width="43.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="801.9" y="1198.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (10 samples, 2.83%)</title><rect x="808.9" y="1171.0" width="33.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="811.9" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 1.70%)</title><rect x="822.3" y="1155.0" width="20.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="825.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 1.70%)</title><rect x="822.3" y="1139.0" width="20.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="825.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 1.70%)</title><rect x="822.3" y="1123.0" width="20.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="825.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 1.70%)</title><rect x="822.3" y="1107.0" width="20.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="825.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.28%)</title><rect x="842.4" y="1235.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="845.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.28%)</title><rect x="842.4" y="1219.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="845.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.28%)</title><rect x="842.4" y="1203.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="845.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.28%)</title><rect x="842.4" y="1187.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="845.4" y="1198.0"></text>
</g>
<g>
<title>start_thread (103 samples, 29.18%)</title><rect x="845.7" y="1235.0" width="344.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="848.7" y="1246.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (103 samples, 29.18%)</title><rect x="845.7" y="1219.0" width="344.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="848.7" y="1230.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 2.83%)</title><rect x="845.7" y="1203.0" width="33.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="848.7" y="1214.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 2.83%)</title><rect x="845.7" y="1187.0" width="33.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="848.7" y="1198.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 2.83%)</title><rect x="845.7" y="1171.0" width="33.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="848.7" y="1182.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (10 samples, 2.83%)</title><rect x="845.7" y="1155.0" width="33.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="848.7" y="1166.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.13%)</title><rect x="852.4" y="1139.0" width="13.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="855.4" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 0.85%)</title><rect x="855.7" y="1123.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="858.7" y="1134.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.28%)</title><rect x="865.8" y="1139.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="868.8" y="1150.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (3 samples, 0.85%)</title><rect x="869.1" y="1139.0" width="10.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="872.1" y="1150.0"></text>
</g>
<g>
<title>JavaThread::run() (92 samples, 26.06%)</title><rect x="879.1" y="1203.0" width="307.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="882.1" y="1214.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (92 samples, 26.06%)</title><rect x="879.1" y="1187.0" width="307.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="882.1" y="1198.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (92 samples, 26.06%)</title><rect x="879.1" y="1171.0" width="307.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="882.1" y="1182.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (92 samples, 26.06%)</title><rect x="879.1" y="1155.0" width="307.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="882.1" y="1166.0">CompileBroker::invoke_compiler_on_method(..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (88 samples, 24.93%)</title><rect x="879.1" y="1139.0" width="294.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="882.1" y="1150.0">C2Compiler::compile_method(ciEnv*, ciMet..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (88 samples, 24.93%)</title><rect x="879.1" y="1123.0" width="294.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="882.1" y="1134.0">Compile::Compile(ciEnv*, C2Compiler*, ci..</text>
</g>
<g>
<title>Compile::Code_Gen() (46 samples, 13.03%)</title><rect x="879.1" y="1107.0" width="153.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="882.1" y="1118.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.57%)</title><rect x="879.1" y="1091.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="882.1" y="1102.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.28%)</title><rect x="879.1" y="1075.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="882.1" y="1086.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.28%)</title><rect x="882.5" y="1075.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="885.5" y="1086.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.28%)</title><rect x="882.5" y="1059.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="885.5" y="1070.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.28%)</title><rect x="882.5" y="1043.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="885.5" y="1054.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.28%)</title><rect x="882.5" y="1027.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="885.5" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.28%)</title><rect x="882.5" y="1011.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="885.5" y="1022.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.85%)</title><rect x="885.8" y="1091.0" width="10.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="888.8" y="1102.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.28%)</title><rect x="885.8" y="1075.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="888.8" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.28%)</title><rect x="885.8" y="1059.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="888.8" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.28%)</title><rect x="885.8" y="1043.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="888.8" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.28%)</title><rect x="889.2" y="1075.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="892.2" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.28%)</title><rect x="889.2" y="1059.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="892.2" y="1070.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.28%)</title><rect x="892.5" y="1075.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="895.5" y="1086.0"></text>
</g>
<g>
<title>Assembler::movq(Address, RegisterImpl*) (1 samples, 0.28%)</title><rect x="892.5" y="1059.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="895.5" y="1070.0"></text>
</g>
<g>
<title>Assembler::prefixq(Address, RegisterImpl*) (1 samples, 0.28%)</title><rect x="892.5" y="1043.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="895.5" y="1054.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.42%)</title><rect x="895.8" y="1091.0" width="16.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="898.8" y="1102.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.57%)</title><rect x="895.8" y="1075.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="898.8" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.85%)</title><rect x="902.5" y="1075.0" width="10.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="905.5" y="1086.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.28%)</title><rect x="902.5" y="1059.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="905.5" y="1070.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.28%)</title><rect x="905.9" y="1059.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="908.9" y="1070.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.28%)</title><rect x="905.9" y="1043.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="908.9" y="1054.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.28%)</title><rect x="905.9" y="1027.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="908.9" y="1038.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.28%)</title><rect x="909.2" y="1059.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="912.2" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.85%)</title><rect x="912.5" y="1091.0" width="10.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="915.5" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.85%)</title><rect x="912.5" y="1075.0" width="10.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="915.5" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.57%)</title><rect x="912.5" y="1059.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="915.5" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.28%)</title><rect x="919.2" y="1059.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="922.2" y="1070.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.28%)</title><rect x="919.2" y="1043.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="922.2" y="1054.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.28%)</title><rect x="919.2" y="1027.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="922.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&amp;, Matcher&amp;) (1 samples, 0.28%)</title><rect x="922.6" y="1091.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="925.6" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 9.07%)</title><rect x="925.9" y="1091.0" width="107.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="928.9" y="1102.0">PhaseChaitin:..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.28%)</title><rect x="925.9" y="1075.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="928.9" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.85%)</title><rect x="929.3" y="1075.0" width="10.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="932.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.28%)</title><rect x="935.9" y="1059.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="938.9" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="935.9" y="1043.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="938.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.13%)</title><rect x="939.3" y="1075.0" width="13.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="942.3" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 2.83%)</title><rect x="952.7" y="1075.0" width="33.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="955.7" y="1086.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 1.70%)</title><rect x="966.0" y="1059.0" width="20.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="969.0" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.85%)</title><rect x="976.1" y="1043.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.1" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.13%)</title><rect x="986.1" y="1075.0" width="13.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="989.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.57%)</title><rect x="999.5" y="1075.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1002.5" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.57%)</title><rect x="999.5" y="1059.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1002.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.28%)</title><rect x="1002.8" y="1043.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1005.8" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.28%)</title><rect x="1002.8" y="1027.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1005.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.28%)</title><rect x="1006.1" y="1075.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1009.1" y="1086.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.57%)</title><rect x="1009.5" y="1075.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1012.5" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.57%)</title><rect x="1009.5" y="1059.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1012.5" y="1070.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.57%)</title><rect x="1009.5" y="1043.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1012.5" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.57%)</title><rect x="1009.5" y="1027.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1012.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.28%)</title><rect x="1016.2" y="1075.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1019.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.28%)</title><rect x="1019.5" y="1075.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1022.5" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.57%)</title><rect x="1022.9" y="1075.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1025.9" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.28%)</title><rect x="1026.2" y="1059.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.2" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1026.2" y="1043.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1029.2" y="1054.0"></text>
</g>
<g>
<title>subL_rRegNode::two_adr() const (1 samples, 0.28%)</title><rect x="1029.5" y="1075.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1032.5" y="1086.0"></text>
</g>
<g>
<title>Compile::Optimize() (35 samples, 9.92%)</title><rect x="1032.9" y="1107.0" width="117.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1035.9" y="1118.0">Compile::Optim..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.28%)</title><rect x="1032.9" y="1091.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1035.9" y="1102.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.28%)</title><rect x="1032.9" y="1075.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1035.9" y="1086.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.28%)</title><rect x="1032.9" y="1059.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1035.9" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.28%)</title><rect x="1036.2" y="1091.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1039.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.28%)</title><rect x="1036.2" y="1075.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1039.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var_and_edge(Node*, PointsToNode::EscapeState, Node*, Unique_Node_List*) (1 samples, 0.28%)</title><rect x="1036.2" y="1059.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1039.2" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.57%)</title><rect x="1039.6" y="1091.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1042.6" y="1102.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.28%)</title><rect x="1042.9" y="1075.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1045.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (23 samples, 6.52%)</title><rect x="1046.3" y="1091.0" width="76.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1049.3" y="1102.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.85%)</title><rect x="1046.3" y="1075.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1049.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.28%)</title><rect x="1052.9" y="1059.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1055.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 4.82%)</title><rect x="1056.3" y="1075.0" width="56.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1059.3" y="1086.0">PhaseI..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.28%)</title><rect x="1059.6" y="1059.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1062.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (14 samples, 3.97%)</title><rect x="1063.0" y="1059.0" width="46.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.0" y="1070.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (14 samples, 3.97%)</title><rect x="1063.0" y="1043.0" width="46.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1066.0" y="1054.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 1.70%)</title><rect x="1086.4" y="1027.0" width="20.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1089.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.28%)</title><rect x="1106.4" y="1027.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.28%)</title><rect x="1106.4" y="1011.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.4" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.28%)</title><rect x="1109.8" y="1059.0" width="3.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1112.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.57%)</title><rect x="1113.1" y="1075.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.57%)</title><rect x="1113.1" y="1059.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.1" y="1070.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1113.1" y="1043.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.1" y="1054.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1113.1" y="1027.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.1" y="1038.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.28%)</title><rect x="1113.1" y="1011.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.1" y="1022.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.28%)</title><rect x="1113.1" y="995.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.28%)</title><rect x="1116.5" y="1043.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.28%)</title><rect x="1116.5" y="1027.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.5" y="1038.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.28%)</title><rect x="1116.5" y="1011.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.5" y="1022.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.28%)</title><rect x="1119.8" y="1075.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 2.27%)</title><rect x="1123.1" y="1091.0" width="26.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.1" y="1102.0">P..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1123.1" y="1075.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.1" y="1086.0"></text>
</g>
<g>
<title>Node::Identity(PhaseTransform*) (1 samples, 0.28%)</title><rect x="1126.5" y="1075.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 1.70%)</title><rect x="1129.8" y="1075.0" width="20.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.8" y="1086.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.85%)</title><rect x="1129.8" y="1059.0" width="10.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.8" y="1070.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.28%)</title><rect x="1129.8" y="1043.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.8" y="1054.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.28%)</title><rect x="1129.8" y="1027.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.8" y="1038.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1129.8" y="1011.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.8" y="1022.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.57%)</title><rect x="1133.2" y="1043.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.2" y="1054.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.57%)</title><rect x="1133.2" y="1027.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.2" y="1038.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.57%)</title><rect x="1133.2" y="1011.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.2" y="1022.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.28%)</title><rect x="1139.9" y="1059.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.9" y="1070.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.28%)</title><rect x="1139.9" y="1043.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.9" y="1054.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.28%)</title><rect x="1139.9" y="1027.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.28%)</title><rect x="1143.2" y="1059.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.2" y="1070.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1146.5" y="1059.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.5" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.28%)</title><rect x="1146.5" y="1043.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.5" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="1027.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.5" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="1011.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.5" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="995.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.5" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="979.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.5" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="963.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.5" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="947.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.5" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="931.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.5" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="915.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.5" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="899.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.5" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="883.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.5" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="867.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.5" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="851.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.5" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="835.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.5" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="819.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.5" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="803.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.5" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.28%)</title><rect x="1146.5" y="787.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.5" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1146.5" y="771.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.42%)</title><rect x="1149.9" y="1107.0" width="16.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.9" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.42%)</title><rect x="1149.9" y="1091.0" width="16.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.42%)</title><rect x="1149.9" y="1075.0" width="16.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.42%)</title><rect x="1149.9" y="1059.0" width="16.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.9" y="1070.0"></text>
</g>
<g>
<title>GraphKit::push(Node*) (1 samples, 0.28%)</title><rect x="1149.9" y="1043.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.13%)</title><rect x="1153.2" y="1043.0" width="13.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.13%)</title><rect x="1153.2" y="1027.0" width="13.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.2" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.13%)</title><rect x="1153.2" y="1011.0" width="13.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.2" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.13%)</title><rect x="1153.2" y="995.0" width="13.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.13%)</title><rect x="1153.2" y="979.0" width="13.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.13%)</title><rect x="1153.2" y="963.0" width="13.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.28%)</title><rect x="1153.2" y="947.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.2" y="958.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.28%)</title><rect x="1153.2" y="931.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.2" y="942.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.28%)</title><rect x="1153.2" y="915.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.2" y="926.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.28%)</title><rect x="1153.2" y="899.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.85%)</title><rect x="1156.6" y="947.0" width="10.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.85%)</title><rect x="1156.6" y="931.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.6" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.85%)</title><rect x="1156.6" y="915.0" width="10.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.6" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.85%)</title><rect x="1156.6" y="899.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.85%)</title><rect x="1156.6" y="883.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1156.6" y="867.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1156.6" y="851.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.57%)</title><rect x="1156.6" y="835.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.6" y="846.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.28%)</title><rect x="1156.6" y="819.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.6" y="830.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.28%)</title><rect x="1156.6" y="803.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.6" y="814.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.28%)</title><rect x="1156.6" y="787.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.6" y="798.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1156.6" y="771.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.6" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.28%)</title><rect x="1156.6" y="755.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.6" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1159.9" y="819.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.9" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1159.9" y="803.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1159.9" y="787.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1159.9" y="771.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1159.9" y="755.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1159.9" y="739.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1159.9" y="723.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1159.9" y="707.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1159.9" y="691.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1159.9" y="675.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1159.9" y="659.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1159.9" y="643.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1159.9" y="627.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1159.9" y="611.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1159.9" y="595.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1159.9" y="579.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1159.9" y="563.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1159.9" y="547.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.9" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1159.9" y="531.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.9" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1159.9" y="515.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.9" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1159.9" y="499.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1159.9" y="483.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1159.9" y="467.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1159.9" y="451.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1159.9" y="435.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1159.9" y="419.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1159.9" y="403.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1159.9" y="387.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1159.9" y="371.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1159.9" y="355.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1159.9" y="339.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1159.9" y="323.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1159.9" y="307.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.9" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1159.9" y="291.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1159.9" y="275.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1159.9" y="259.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1159.9" y="243.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1159.9" y="227.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.9" y="238.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1159.9" y="211.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.9" y="222.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1159.9" y="195.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.9" y="206.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.28%)</title><rect x="1159.9" y="179.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.9" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.28%)</title><rect x="1159.9" y="163.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.9" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.28%)</title><rect x="1159.9" y="147.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.9" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1159.9" y="131.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.9" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1159.9" y="115.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.9" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1159.9" y="99.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.9" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putfield(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1159.9" y="83.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.9" y="94.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.28%)</title><rect x="1159.9" y="67.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.9" y="78.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1159.9" y="51.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.9" y="62.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.28%)</title><rect x="1159.9" y="35.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.9" y="46.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.28%)</title><rect x="1163.3" y="867.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.3" y="878.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.28%)</title><rect x="1163.3" y="851.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.3" y="862.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1163.3" y="835.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.3" y="846.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.28%)</title><rect x="1166.6" y="1107.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.6" y="1118.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.28%)</title><rect x="1169.9" y="1107.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.9" y="1118.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.28%)</title><rect x="1169.9" y="1091.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.9" y="1102.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.28%)</title><rect x="1169.9" y="1075.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.9" y="1086.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.28%)</title><rect x="1169.9" y="1059.0" width="3.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1172.9" y="1070.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.13%)</title><rect x="1173.3" y="1139.0" width="13.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.3" y="1150.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.85%)</title><rect x="1176.6" y="1123.0" width="10.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.6" y="1134.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.85%)</title><rect x="1176.6" y="1107.0" width="10.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.6" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.85%)</title><rect x="1176.6" y="1091.0" width="10.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.6" y="1102.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.57%)</title><rect x="1176.6" y="1075.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.6" y="1086.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.57%)</title><rect x="1176.6" y="1059.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.6" y="1070.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.57%)</title><rect x="1176.6" y="1043.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.6" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.57%)</title><rect x="1176.6" y="1027.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.6" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.57%)</title><rect x="1176.6" y="1011.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.6" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.57%)</title><rect x="1176.6" y="995.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.6" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.57%)</title><rect x="1176.6" y="979.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.6" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.57%)</title><rect x="1176.6" y="963.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.57%)</title><rect x="1176.6" y="947.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.57%)</title><rect x="1176.6" y="931.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.6" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.57%)</title><rect x="1176.6" y="915.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.6" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::if_node(Instruction*, Instruction::Condition, Instruction*, ValueStack*) (1 samples, 0.28%)</title><rect x="1176.6" y="899.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.6" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.28%)</title><rect x="1176.6" y="883.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.6" y="894.0"></text>
</g>
<g>
<title>Canonicalizer::do_If(If*) (1 samples, 0.28%)</title><rect x="1176.6" y="867.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.6" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1180.0" y="899.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.0" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.28%)</title><rect x="1180.0" y="883.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.0" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.28%)</title><rect x="1180.0" y="867.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.0" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.28%)</title><rect x="1180.0" y="851.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.0" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.28%)</title><rect x="1180.0" y="835.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.0" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1180.0" y="819.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.0" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.28%)</title><rect x="1180.0" y="803.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.0" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.28%)</title><rect x="1180.0" y="787.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.0" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.28%)</title><rect x="1180.0" y="771.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.0" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.28%)</title><rect x="1180.0" y="755.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.0" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1180.0" y="739.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.0" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.28%)</title><rect x="1180.0" y="723.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1180.0" y="707.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.0" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1180.0" y="691.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.0" y="702.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1180.0" y="675.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="686.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.28%)</title><rect x="1180.0" y="659.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.0" y="670.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.28%)</title><rect x="1183.3" y="1075.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.3" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.28%)</title><rect x="1183.3" y="1059.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="1070.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op0(LIR_Op0*) (1 samples, 0.28%)</title><rect x="1183.3" y="1043.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.3" y="1054.0"></text>
</g>
<g>
<title>LIR_Assembler::check_icache() (1 samples, 0.28%)</title><rect x="1183.3" y="1027.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.3" y="1038.0"></text>
</g>
<g>
<title>C1_MacroAssembler::inline_cache_check(RegisterImpl*, RegisterImpl*) (1 samples, 0.28%)</title><rect x="1183.3" y="1011.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.3" y="1022.0"></text>
</g>
<g>
<title>MacroAssembler::load_klass(RegisterImpl*, RegisterImpl*) (1 samples, 0.28%)</title><rect x="1183.3" y="995.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.3" y="1006.0"></text>
</g>
<g>
<title>Assembler::movl(RegisterImpl*, Address) (1 samples, 0.28%)</title><rect x="1183.3" y="979.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.3" y="990.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.28%)</title><rect x="1183.3" y="963.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.3" y="974.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.28%)</title><rect x="1186.7" y="1203.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.7" y="1214.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.28%)</title><rect x="1186.7" y="1187.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.7" y="1198.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.28%)</title><rect x="1186.7" y="1171.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.7" y="1182.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.28%)</title><rect x="1186.7" y="1155.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.7" y="1166.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.28%)</title><rect x="1186.7" y="1139.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.7" y="1150.0"></text>
</g>
</g>
</svg>
