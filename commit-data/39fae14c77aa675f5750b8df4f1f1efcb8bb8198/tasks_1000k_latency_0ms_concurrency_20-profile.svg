<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="661"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="661"> </text>
<g id="frames">
<g>
<title>all (1,068 samples, 100.00%)</title><rect x="10.0" y="627.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="638.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (277 samples, 25.94%)</title><rect x="10.0" y="611.0" width="306.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="622.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.09%)</title><rect x="10.0" y="595.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="10.0" y="579.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="10.0" y="563.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (276 samples, 25.84%)</title><rect x="11.1" y="595.0" width="304.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.1" y="606.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.47%)</title><rect x="11.1" y="579.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.1" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.47%)</title><rect x="11.1" y="563.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1398739064.accept (4 samples, 0.37%)</title><rect x="12.2" y="547.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.2" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.37%)</title><rect x="12.2" y="531.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.2" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.37%)</title><rect x="12.2" y="515.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.2" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.37%)</title><rect x="12.2" y="499.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.2" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.28%)</title><rect x="16.6" y="579.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.6" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.28%)</title><rect x="16.6" y="563.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.6" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.28%)</title><rect x="16.6" y="547.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.6" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.28%)</title><rect x="16.6" y="531.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.6" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.28%)</title><rect x="16.6" y="515.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.6" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.19%)</title><rect x="16.6" y="499.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.6" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.19%)</title><rect x="16.6" y="483.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.6" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.19%)</title><rect x="16.6" y="467.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.6" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.19%)</title><rect x="16.6" y="451.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.6" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.19%)</title><rect x="16.6" y="435.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.6" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$265/1310901769.test (1 samples, 0.09%)</title><rect x="16.6" y="419.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.6" y="430.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="17.7" y="419.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="20.7" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.09%)</title><rect x="18.8" y="499.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.8" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.09%)</title><rect x="18.8" y="483.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.8" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="18.8" y="467.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.8" y="478.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (215 samples, 20.13%)</title><rect x="19.9" y="579.0" width="237.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.9" y="590.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1696112149.accept (209 samples, 19.57%)</title><rect x="19.9" y="563.0" width="231.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.9" y="574.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (207 samples, 19.38%)</title><rect x="22.2" y="547.0" width="228.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.2" y="558.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (3 samples, 0.28%)</title><rect x="22.2" y="531.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.2" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (164 samples, 15.36%)</title><rect x="25.5" y="531.0" width="181.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.5" y="542.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (164 samples, 15.36%)</title><rect x="25.5" y="515.0" width="181.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.5" y="526.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (164 samples, 15.36%)</title><rect x="25.5" y="499.0" width="181.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.5" y="510.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (164 samples, 15.36%)</title><rect x="25.5" y="483.0" width="181.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.5" y="494.0">java/util/concurrent/Ex..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (164 samples, 15.36%)</title><rect x="25.5" y="467.0" width="181.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.5" y="478.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (164 samples, 15.36%)</title><rect x="25.5" y="451.0" width="181.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.5" y="462.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (111 samples, 10.39%)</title><rect x="25.5" y="435.0" width="122.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.5" y="446.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (26 samples, 2.43%)</title><rect x="25.5" y="419.0" width="28.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.5" y="430.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (26 samples, 2.43%)</title><rect x="25.5" y="403.0" width="28.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.5" y="414.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 1.50%)</title><rect x="36.5" y="387.0" width="17.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (16 samples, 1.50%)</title><rect x="36.5" y="371.0" width="17.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (13 samples, 1.22%)</title><rect x="54.2" y="419.0" width="14.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="57.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (13 samples, 1.22%)</title><rect x="54.2" y="403.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.56%)</title><rect x="57.5" y="387.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.5" y="398.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (5 samples, 0.47%)</title><rect x="58.6" y="371.0" width="5.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="61.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.37%)</title><rect x="64.1" y="387.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (72 samples, 6.74%)</title><rect x="68.6" y="419.0" width="79.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.6" y="430.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (72 samples, 6.74%)</title><rect x="68.6" y="403.0" width="79.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.6" y="414.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (71 samples, 6.65%)</title><rect x="68.6" y="387.0" width="78.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="71.6" y="398.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (71 samples, 6.65%)</title><rect x="68.6" y="371.0" width="78.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.6" y="382.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (71 samples, 6.65%)</title><rect x="68.6" y="355.0" width="78.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.6" y="366.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Unpark (64 samples, 5.99%)</title><rect x="70.8" y="339.0" width="70.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="73.8" y="350.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.19%)</title><rect x="71.9" y="323.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="74.9" y="334.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.19%)</title><rect x="74.1" y="323.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="77.1" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="76.3" y="323.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="79.3" y="334.0"></text>
</g>
<g>
<title>__pthread_cond_signal (41 samples, 3.84%)</title><rect x="77.4" y="323.0" width="45.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="80.4" y="334.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.19%)</title><rect x="122.7" y="323.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="125.7" y="334.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.40%)</title><rect x="124.9" y="323.0" width="16.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="127.9" y="334.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.19%)</title><rect x="141.5" y="339.0" width="2.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="144.5" y="350.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.19%)</title><rect x="143.7" y="339.0" width="2.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="146.7" y="350.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="145.9" y="339.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="148.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="147.0" y="387.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="150.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (43 samples, 4.03%)</title><rect x="148.1" y="435.0" width="47.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="151.1" y="446.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (43 samples, 4.03%)</title><rect x="148.1" y="419.0" width="47.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="151.1" y="430.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (43 samples, 4.03%)</title><rect x="148.1" y="403.0" width="47.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="151.1" y="414.0">java..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="194.5" y="387.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="197.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.66%)</title><rect x="195.6" y="435.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (7 samples, 0.66%)</title><rect x="195.6" y="419.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="198.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.66%)</title><rect x="195.6" y="403.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.28%)</title><rect x="203.4" y="435.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="206.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.28%)</title><rect x="203.4" y="419.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="206.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.28%)</title><rect x="203.4" y="403.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="206.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="203.4" y="387.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.19%)</title><rect x="204.5" y="387.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.5" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.09%)</title><rect x="206.7" y="531.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="209.7" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.09%)</title><rect x="206.7" y="515.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="209.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.09%)</title><rect x="207.8" y="531.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="207.8" y="515.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="210.8" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="207.8" y="499.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="210.8" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (38 samples, 3.56%)</title><rect x="208.9" y="531.0" width="42.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.9" y="542.0">com..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="208.9" y="515.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.9" y="526.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (36 samples, 3.37%)</title><rect x="210.0" y="515.0" width="39.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.0" y="526.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 0.66%)</title><rect x="238.7" y="499.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.7" y="510.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.19%)</title><rect x="238.7" y="483.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.7" y="494.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.19%)</title><rect x="238.7" y="467.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.7" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.19%)</title><rect x="238.7" y="451.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.7" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="239.8" y="435.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="242.8" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="239.8" y="419.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="242.8" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="239.8" y="403.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="242.8" y="414.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="239.8" y="387.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="242.8" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="239.8" y="371.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="242.8" y="382.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="240.9" y="483.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.9" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.37%)</title><rect x="242.0" y="483.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="245.0" y="494.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="246.4" y="499.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="249.4" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="247.5" y="499.0" width="2.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="250.5" y="510.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="249.8" y="515.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.8" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="249.8" y="499.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="252.8" y="510.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="249.8" y="483.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="252.8" y="494.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="250.9" y="563.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="253.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.47%)</title><rect x="252.0" y="563.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.47%)</title><rect x="252.0" y="547.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.47%)</title><rect x="252.0" y="531.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.47%)</title><rect x="252.0" y="515.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (5 samples, 0.47%)</title><rect x="252.0" y="499.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (5 samples, 0.47%)</title><rect x="252.0" y="483.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (53 samples, 4.96%)</title><rect x="257.5" y="579.0" width="58.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.5" y="590.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (53 samples, 4.96%)</title><rect x="257.5" y="563.0" width="58.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="260.5" y="574.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (34 samples, 3.18%)</title><rect x="257.5" y="547.0" width="37.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="260.5" y="558.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.09%)</title><rect x="257.5" y="531.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="257.5" y="515.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="257.5" y="499.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="260.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.update (1 samples, 0.09%)</title><rect x="257.5" y="483.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (33 samples, 3.09%)</title><rect x="258.6" y="531.0" width="36.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.6" y="542.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (32 samples, 3.00%)</title><rect x="258.6" y="515.0" width="35.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.6" y="526.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (27 samples, 2.53%)</title><rect x="258.6" y="499.0" width="29.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="261.6" y="510.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (27 samples, 2.53%)</title><rect x="258.6" y="483.0" width="29.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="261.6" y="494.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.31%)</title><rect x="259.7" y="467.0" width="15.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="262.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.75%)</title><rect x="259.7" y="451.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.75%)</title><rect x="259.7" y="435.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.75%)</title><rect x="259.7" y="419.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.7" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.75%)</title><rect x="259.7" y="403.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.7" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.75%)</title><rect x="259.7" y="387.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.7" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.75%)</title><rect x="259.7" y="371.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.7" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.75%)</title><rect x="259.7" y="355.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.7" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.56%)</title><rect x="268.5" y="451.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="271.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.56%)</title><rect x="268.5" y="435.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (6 samples, 0.56%)</title><rect x="268.5" y="419.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="271.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 1.12%)</title><rect x="275.2" y="467.0" width="13.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 1.12%)</title><rect x="275.2" y="451.0" width="13.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.56%)</title><rect x="275.2" y="435.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="278.2" y="446.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.56%)</title><rect x="275.2" y="419.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.2" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="279.6" y="403.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="282.6" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 0.56%)</title><rect x="281.8" y="435.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.8" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (6 samples, 0.56%)</title><rect x="281.8" y="419.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.8" y="430.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="287.3" y="403.0" width="1.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="290.3" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.19%)</title><rect x="288.4" y="499.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="291.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="289.5" y="483.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="292.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="289.5" y="467.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="289.5" y="451.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.09%)</title><rect x="290.6" y="499.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="290.6" y="483.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="293.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="290.6" y="467.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="293.6" y="478.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="290.6" y="451.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.6" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="290.6" y="435.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.6" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (2 samples, 0.19%)</title><rect x="291.7" y="499.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="294.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.09%)</title><rect x="294.0" y="515.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="297.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="294.0" y="499.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="297.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="294.0" y="483.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.0" y="494.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="294.0" y="467.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.0" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="294.0" y="451.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 0.47%)</title><rect x="295.1" y="547.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 0.37%)</title><rect x="295.1" y="531.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.28%)</title><rect x="295.1" y="515.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.19%)</title><rect x="296.2" y="499.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="299.2" y="510.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.19%)</title><rect x="296.2" y="483.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.2" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="296.2" y="467.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.2" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.09%)</title><rect x="296.2" y="451.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="299.2" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.09%)</title><rect x="296.2" y="435.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="299.2" y="446.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="296.2" y="419.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.2" y="430.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.size (1 samples, 0.09%)</title><rect x="297.3" y="467.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="300.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="298.4" y="515.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.4" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.09%)</title><rect x="298.4" y="499.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="301.4" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="298.4" y="483.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.4" y="494.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="298.4" y="467.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="299.5" y="531.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.09%)</title><rect x="300.6" y="547.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="303.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.75%)</title><rect x="301.7" y="547.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="304.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.37%)</title><rect x="301.7" y="531.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.37%)</title><rect x="301.7" y="515.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="304.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="301.7" y="499.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="304.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.09%)</title><rect x="302.8" y="499.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="305.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.09%)</title><rect x="302.8" y="483.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="305.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.09%)</title><rect x="302.8" y="467.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.8" y="478.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="302.8" y="451.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.8" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.19%)</title><rect x="303.9" y="499.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="303.9" y="483.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="306.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="303.9" y="467.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="306.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="303.9" y="451.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="306.9" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="303.9" y="435.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="306.9" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="303.9" y="419.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="306.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="303.9" y="403.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="306.9" y="414.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="303.9" y="387.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="306.9" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.determineHandlingOrder (1 samples, 0.09%)</title><rect x="305.0" y="483.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="308.0" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="305.0" y="467.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="308.0" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="305.0" y="451.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="308.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (4 samples, 0.37%)</title><rect x="306.1" y="531.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="309.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (4 samples, 0.37%)</title><rect x="306.1" y="515.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (4 samples, 0.37%)</title><rect x="306.1" y="499.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="309.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (4 samples, 0.37%)</title><rect x="306.1" y="483.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.09%)</title><rect x="306.1" y="467.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.09%)</title><rect x="306.1" y="451.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="309.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.addInterestOps (1 samples, 0.09%)</title><rect x="306.1" y="435.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.09%)</title><rect x="306.1" y="419.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (1 samples, 0.09%)</title><rect x="306.1" y="403.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="309.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetInterestOps (1 samples, 0.09%)</title><rect x="306.1" y="387.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.putEventOps (1 samples, 0.09%)</title><rect x="306.1" y="371.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.setInterest (1 samples, 0.09%)</title><rect x="306.1" y="355.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.1" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (3 samples, 0.28%)</title><rect x="307.2" y="467.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="310.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (3 samples, 0.28%)</title><rect x="307.2" y="451.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="310.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.09%)</title><rect x="307.2" y="435.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.09%)</title><rect x="307.2" y="419.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.2" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (2 samples, 0.19%)</title><rect x="308.3" y="435.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.3" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (2 samples, 0.19%)</title><rect x="308.3" y="419.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="311.3" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (2 samples, 0.19%)</title><rect x="308.3" y="403.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.3" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.09%)</title><rect x="308.3" y="387.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.3" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="308.3" y="371.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.3" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.09%)</title><rect x="308.3" y="355.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.3" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="308.3" y="339.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="311.3" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$6.write (1 samples, 0.09%)</title><rect x="308.3" y="323.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.3" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putLong (1 samples, 0.09%)</title><rect x="308.3" y="307.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.3" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.09%)</title><rect x="309.4" y="387.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.4" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.09%)</title><rect x="309.4" y="371.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.09%)</title><rect x="309.4" y="355.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.4" y="366.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.09%)</title><rect x="309.4" y="339.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="312.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (1 samples, 0.09%)</title><rect x="309.4" y="323.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="309.4" y="307.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="309.4" y="291.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.4" y="302.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="309.4" y="275.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.4" y="286.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="309.4" y="259.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.4" y="270.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.replaceWith (1 samples, 0.09%)</title><rect x="309.4" y="243.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.implReplaceWith (1 samples, 0.09%)</title><rect x="309.4" y="227.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.4" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.47%)</title><rect x="310.5" y="547.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.47%)</title><rect x="310.5" y="531.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.5" y="542.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="310.5" y="515.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="313.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/1644090452.accept (1 samples, 0.09%)</title><rect x="310.5" y="499.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="313.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="310.5" y="483.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="313.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="310.5" y="467.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="310.5" y="451.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="313.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="310.5" y="435.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.5" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="310.5" y="419.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="310.5" y="403.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="313.5" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.28%)</title><rect x="311.6" y="515.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="314.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.19%)</title><rect x="312.7" y="499.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="315.7" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="312.7" y="483.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="315.7" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="312.7" y="467.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="315.7" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="312.7" y="451.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="315.7" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="312.7" y="435.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="315.7" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="312.7" y="419.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="315.7" y="430.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="312.7" y="403.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="315.7" y="414.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="312.7" y="387.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.7" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="312.7" y="371.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="315.7" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="312.7" y="355.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="315.7" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="312.7" y="339.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="315.7" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.09%)</title><rect x="312.7" y="323.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="315.7" y="334.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$182/1844560820.accept (1 samples, 0.09%)</title><rect x="312.7" y="307.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="315.7" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.09%)</title><rect x="313.8" y="483.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="316.8" y="494.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="313.8" y="467.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="316.8" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="313.8" y="451.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="316.8" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="313.8" y="435.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="314.9" y="515.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="314.9" y="499.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.9" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="314.9" y="483.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="317.9" y="494.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="314.9" y="467.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="317.9" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="314.9" y="451.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="317.9" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="314.9" y="435.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="317.9" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.09%)</title><rect x="314.9" y="419.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="317.9" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.run (728 samples, 68.16%)</title><rect x="316.0" y="611.0" width="804.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.0" y="622.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (728 samples, 68.16%)</title><rect x="316.0" y="595.0" width="804.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.0" y="606.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (728 samples, 68.16%)</title><rect x="316.0" y="579.0" width="804.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.0" y="590.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1481596201.run (503 samples, 47.10%)</title><rect x="322.7" y="563.0" width="555.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.7" y="574.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1481596201.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (502 samples, 47.00%)</title><rect x="323.8" y="547.0" width="554.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="326.8" y="558.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (502 samples, 47.00%)</title><rect x="323.8" y="531.0" width="554.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="326.8" y="542.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (496 samples, 46.44%)</title><rect x="323.8" y="515.0" width="548.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="326.8" y="526.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.28%)</title><rect x="331.5" y="499.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="334.5" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (177 samples, 16.57%)</title><rect x="334.8" y="499.0" width="195.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="337.8" y="510.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (177 samples, 16.57%)</title><rect x="334.8" y="483.0" width="195.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="337.8" y="494.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (177 samples, 16.57%)</title><rect x="334.8" y="467.0" width="195.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="337.8" y="478.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (177 samples, 16.57%)</title><rect x="334.8" y="451.0" width="195.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="337.8" y="462.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (177 samples, 16.57%)</title><rect x="334.8" y="435.0" width="195.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="337.8" y="446.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (177 samples, 16.57%)</title><rect x="334.8" y="419.0" width="195.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.8" y="430.0">com/fasterxml/jackson/dat..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (67 samples, 6.27%)</title><rect x="334.8" y="403.0" width="74.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="337.8" y="414.0">com/fast..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="355.8" y="387.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="358.8" y="398.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.94%)</title><rect x="356.9" y="387.0" width="11.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="359.9" y="398.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.56%)</title><rect x="361.3" y="371.0" width="6.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="364.3" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.66%)</title><rect x="368.0" y="387.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (7 samples, 0.66%)</title><rect x="368.0" y="371.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="371.0" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 0.66%)</title><rect x="368.0" y="355.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.0" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="368.0" y="339.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="371.0" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="368.0" y="323.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="371.0" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="368.0" y="307.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="371.0" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="368.0" y="291.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="371.0" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="368.0" y="275.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="371.0" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.56%)</title><rect x="369.1" y="339.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="372.1" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (6 samples, 0.56%)</title><rect x="369.1" y="323.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="372.1" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (30 samples, 2.81%)</title><rect x="375.7" y="387.0" width="33.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="378.7" y="398.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (10 samples, 0.94%)</title><rect x="397.8" y="371.0" width="11.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="400.8" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="397.8" y="355.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="400.8" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="397.8" y="339.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="400.8" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="397.8" y="323.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="400.8" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="397.8" y="307.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="400.8" y="318.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="397.8" y="291.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="400.8" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="397.8" y="275.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="400.8" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.47%)</title><rect x="398.9" y="355.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="401.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.47%)</title><rect x="398.9" y="339.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="401.9" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 0.37%)</title><rect x="404.4" y="355.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.4" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="404.4" y="339.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="407.4" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="404.4" y="323.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="407.4" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="404.4" y="307.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="407.4" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="404.4" y="291.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="407.4" y="302.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="404.4" y="275.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="407.4" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 0.28%)</title><rect x="405.5" y="339.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.5" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.28%)</title><rect x="405.5" y="323.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.5" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.28%)</title><rect x="405.5" y="307.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="408.5" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="405.5" y="291.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="408.5" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="405.5" y="275.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="408.5" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.19%)</title><rect x="406.6" y="291.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="409.6" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="406.6" y="275.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="409.6" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="407.8" y="275.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="410.8" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="407.8" y="259.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="410.8" y="270.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="407.8" y="243.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="410.8" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (97 samples, 9.08%)</title><rect x="408.9" y="403.0" width="107.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="411.9" y="414.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.28%)</title><rect x="410.0" y="387.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (4 samples, 0.37%)</title><rect x="413.3" y="387.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="416.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.19%)</title><rect x="417.7" y="387.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.7" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.75%)</title><rect x="419.9" y="387.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="422.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.56%)</title><rect x="422.1" y="371.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="425.1" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (7 samples, 0.66%)</title><rect x="428.7" y="387.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="431.7" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.66%)</title><rect x="428.7" y="371.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="431.7" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.47%)</title><rect x="429.9" y="355.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="432.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.37%)</title><rect x="431.0" y="339.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="434.0" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.28%)</title><rect x="432.1" y="323.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="435.1" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="435.4" y="355.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="438.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.66%)</title><rect x="436.5" y="387.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="439.5" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="439.8" y="371.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="442.8" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="439.8" y="355.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="442.8" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="439.8" y="339.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="442.8" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="439.8" y="323.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="442.8" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="439.8" y="307.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="442.8" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="439.8" y="291.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="442.8" y="302.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="439.8" y="275.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="442.8" y="286.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.09%)</title><rect x="439.8" y="259.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="442.8" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.28%)</title><rect x="440.9" y="371.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="443.9" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (65 samples, 6.09%)</title><rect x="444.2" y="387.0" width="71.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="447.2" y="398.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.78%)</title><rect x="445.3" y="371.0" width="21.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="448.3" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.66%)</title><rect x="451.9" y="355.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="454.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.66%)</title><rect x="451.9" y="339.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="454.9" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.66%)</title><rect x="451.9" y="323.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="454.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="459.7" y="355.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="462.7" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="459.7" y="339.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="462.7" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (5 samples, 0.47%)</title><rect x="460.8" y="355.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="463.8" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (45 samples, 4.21%)</title><rect x="466.3" y="371.0" width="49.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="469.3" y="382.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (45 samples, 4.21%)</title><rect x="466.3" y="355.0" width="49.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="469.3" y="366.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (45 samples, 4.21%)</title><rect x="466.3" y="339.0" width="49.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="469.3" y="350.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.78%)</title><rect x="472.9" y="323.0" width="21.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="475.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.75%)</title><rect x="481.8" y="307.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="484.8" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.75%)</title><rect x="481.8" y="291.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="484.8" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.75%)</title><rect x="481.8" y="275.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="484.8" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (8 samples, 0.75%)</title><rect x="481.8" y="259.0" width="8.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="484.8" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (7 samples, 0.66%)</title><rect x="482.9" y="243.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="485.9" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 0.37%)</title><rect x="486.2" y="227.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="489.2" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (4 samples, 0.37%)</title><rect x="486.2" y="211.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="489.2" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.28%)</title><rect x="490.6" y="307.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.28%)</title><rect x="490.6" y="291.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="493.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.19%)</title><rect x="491.7" y="275.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="494.7" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 0.37%)</title><rect x="493.9" y="323.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="496.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.37%)</title><rect x="493.9" y="307.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="496.9" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="493.9" y="291.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="496.9" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="493.9" y="275.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="496.9" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="493.9" y="259.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="496.9" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="493.9" y="243.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="496.9" y="254.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="493.9" y="227.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="496.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.28%)</title><rect x="495.0" y="291.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="498.0" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.28%)</title><rect x="495.0" y="275.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="498.0" y="286.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.28%)</title><rect x="495.0" y="259.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="498.0" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.66%)</title><rect x="498.4" y="323.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="501.4" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.66%)</title><rect x="498.4" y="307.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="501.4" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.66%)</title><rect x="498.4" y="291.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="501.4" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.66%)</title><rect x="498.4" y="275.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="501.4" y="286.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.66%)</title><rect x="498.4" y="259.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="501.4" y="270.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.47%)</title><rect x="500.6" y="243.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="503.6" y="254.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (3 samples, 0.28%)</title><rect x="502.8" y="227.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="505.8" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (9 samples, 0.84%)</title><rect x="506.1" y="323.0" width="9.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="509.1" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.84%)</title><rect x="506.1" y="307.0" width="9.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="509.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.84%)</title><rect x="506.1" y="291.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="509.1" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (13 samples, 1.22%)</title><rect x="516.0" y="403.0" width="14.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="519.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.09%)</title><rect x="516.0" y="387.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="519.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 1.12%)</title><rect x="517.1" y="387.0" width="13.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="520.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 1.12%)</title><rect x="517.1" y="371.0" width="13.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="520.1" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (12 samples, 1.12%)</title><rect x="517.1" y="355.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="520.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (12 samples, 1.12%)</title><rect x="517.1" y="339.0" width="13.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="520.1" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (293 samples, 27.43%)</title><rect x="530.4" y="499.0" width="323.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="533.4" y="510.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (54 samples, 5.06%)</title><rect x="530.4" y="483.0" width="59.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="533.4" y="494.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.19%)</title><rect x="530.4" y="467.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="533.4" y="478.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (52 samples, 4.87%)</title><rect x="532.6" y="467.0" width="57.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="535.6" y="478.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (50 samples, 4.68%)</title><rect x="534.8" y="451.0" width="55.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="537.8" y="462.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.47%)</title><rect x="537.0" y="435.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="540.0" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.47%)</title><rect x="537.0" y="419.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="540.0" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.47%)</title><rect x="537.0" y="403.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="540.0" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.47%)</title><rect x="537.0" y="387.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="540.0" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="542.5" y="435.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="545.5" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.19%)</title><rect x="542.5" y="419.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.19%)</title><rect x="542.5" y="403.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="545.5" y="414.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (41 samples, 3.84%)</title><rect x="544.8" y="435.0" width="45.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="547.8" y="446.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (19 samples, 1.78%)</title><rect x="569.1" y="419.0" width="21.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="572.1" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="569.1" y="403.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="572.1" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (18 samples, 1.69%)</title><rect x="570.2" y="403.0" width="19.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="573.2" y="414.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.47%)</title><rect x="583.4" y="387.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="586.4" y="398.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="589.0" y="387.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="592.0" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.47%)</title><rect x="590.1" y="483.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="593.1" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.47%)</title><rect x="590.1" y="467.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="593.1" y="478.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.47%)</title><rect x="590.1" y="451.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="593.1" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="594.5" y="435.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="597.5" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (162 samples, 15.17%)</title><rect x="595.6" y="483.0" width="179.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="598.6" y="494.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.37%)</title><rect x="595.6" y="467.0" width="4.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="598.6" y="478.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="596.7" y="451.0" width="3.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="599.7" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (157 samples, 14.70%)</title><rect x="600.0" y="467.0" width="173.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="603.0" y="478.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (55 samples, 5.15%)</title><rect x="608.8" y="451.0" width="60.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="611.8" y="462.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (37 samples, 3.46%)</title><rect x="617.7" y="435.0" width="40.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="620.7" y="446.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (37 samples, 3.46%)</title><rect x="617.7" y="419.0" width="40.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="620.7" y="430.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (25 samples, 2.34%)</title><rect x="624.3" y="403.0" width="27.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="627.3" y="414.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (25 samples, 2.34%)</title><rect x="624.3" y="387.0" width="27.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="627.3" y="398.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (25 samples, 2.34%)</title><rect x="624.3" y="371.0" width="27.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="627.3" y="382.0">j..</text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="633.1" y="355.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="636.1" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="634.3" y="355.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="637.3" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 1.03%)</title><rect x="635.4" y="355.0" width="12.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="638.4" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="635.4" y="339.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="638.4" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.37%)</title><rect x="636.5" y="339.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="639.5" y="350.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.09%)</title><rect x="636.5" y="323.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="639.5" y="334.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.28%)</title><rect x="637.6" y="323.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="640.6" y="334.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.28%)</title><rect x="637.6" y="307.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="640.6" y="318.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (2 samples, 0.19%)</title><rect x="637.6" y="291.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="640.6" y="302.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="639.8" y="291.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="642.8" y="302.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.47%)</title><rect x="640.9" y="339.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="643.9" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.37%)</title><rect x="640.9" y="323.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="643.9" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="640.9" y="307.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="643.9" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="640.9" y="291.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="643.9" y="302.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="640.9" y="275.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="643.9" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="640.9" y="259.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="643.9" y="270.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="640.9" y="243.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="643.9" y="254.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="640.9" y="227.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="643.9" y="238.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="642.0" y="307.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="645.0" y="318.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="643.1" y="307.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="646.1" y="318.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="644.2" y="307.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="647.2" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="645.3" y="323.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="648.3" y="334.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.09%)</title><rect x="646.4" y="339.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="649.4" y="350.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.37%)</title><rect x="647.5" y="355.0" width="4.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="650.5" y="366.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.19%)</title><rect x="651.9" y="403.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="654.9" y="414.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="654.1" y="403.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="657.1" y="414.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.28%)</title><rect x="655.2" y="403.0" width="3.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="658.2" y="414.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="658.6" y="435.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="661.6" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="658.6" y="419.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="661.6" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="658.6" y="403.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="661.6" y="414.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="659.7" y="435.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="662.7" y="446.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.75%)</title><rect x="660.8" y="435.0" width="8.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="663.8" y="446.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.56%)</title><rect x="669.6" y="451.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="672.6" y="462.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.09%)</title><rect x="669.6" y="435.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="672.6" y="446.0"></text>
</g>
<g>
<title>_new_array_Java (1 samples, 0.09%)</title><rect x="669.6" y="419.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="672.6" y="430.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.47%)</title><rect x="670.7" y="435.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="673.7" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.47%)</title><rect x="670.7" y="419.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="673.7" y="430.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (88 samples, 8.24%)</title><rect x="676.2" y="451.0" width="97.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="679.2" y="462.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (86 samples, 8.05%)</title><rect x="678.4" y="435.0" width="95.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="681.4" y="446.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.66%)</title><rect x="678.4" y="419.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="681.4" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.66%)</title><rect x="678.4" y="403.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="681.4" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.66%)</title><rect x="678.4" y="387.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="681.4" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.66%)</title><rect x="678.4" y="371.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="681.4" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="686.2" y="419.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="689.2" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.19%)</title><rect x="686.2" y="403.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="689.2" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.19%)</title><rect x="686.2" y="387.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="689.2" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (77 samples, 7.21%)</title><rect x="688.4" y="419.0" width="85.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="691.4" y="430.0">java/util/..</text>
</g>
<g>
<title>java/util/HashMap.put (66 samples, 6.18%)</title><rect x="700.5" y="403.0" width="73.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="703.5" y="414.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.putVal (35 samples, 3.28%)</title><rect x="734.8" y="387.0" width="38.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="737.8" y="398.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (6 samples, 0.56%)</title><rect x="749.2" y="371.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="752.2" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 1.22%)</title><rect x="755.8" y="371.0" width="14.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="758.8" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.19%)</title><rect x="767.9" y="355.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="770.9" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="767.9" y="339.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="770.9" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="767.9" y="323.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="770.9" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="769.0" y="339.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="772.0" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="769.0" y="323.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="772.0" y="334.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.28%)</title><rect x="770.1" y="371.0" width="3.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="773.1" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="773.5" y="467.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="776.5" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (52 samples, 4.87%)</title><rect x="774.6" y="483.0" width="57.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="777.6" y="494.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (2 samples, 0.19%)</title><rect x="774.6" y="467.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="777.6" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (50 samples, 4.68%)</title><rect x="776.8" y="467.0" width="55.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="779.8" y="478.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2034428208.process (22 samples, 2.06%)</title><rect x="780.1" y="451.0" width="24.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="783.1" y="462.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (20 samples, 1.87%)</title><rect x="780.1" y="435.0" width="22.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="783.1" y="446.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.50%)</title><rect x="781.2" y="419.0" width="17.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="784.2" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.56%)</title><rect x="781.2" y="403.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="784.2" y="414.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="782.3" y="387.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="785.3" y="398.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.37%)</title><rect x="783.4" y="387.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="786.4" y="398.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.37%)</title><rect x="783.4" y="371.0" width="4.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="786.4" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.28%)</title><rect x="787.8" y="403.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="790.8" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.66%)</title><rect x="791.1" y="403.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="794.1" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.28%)</title><rect x="798.9" y="419.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="801.9" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.28%)</title><rect x="798.9" y="403.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="801.9" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (3 samples, 0.28%)</title><rect x="798.9" y="387.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="801.9" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.19%)</title><rect x="802.2" y="435.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="805.2" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.66%)</title><rect x="804.4" y="451.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="807.4" y="462.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.66%)</title><rect x="804.4" y="435.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.4" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/558187323.linkToTargetMethod (8 samples, 0.75%)</title><rect x="812.1" y="451.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="815.1" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (8 samples, 0.75%)</title><rect x="812.1" y="435.0" width="8.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="815.1" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/840189089.get$Lambda (8 samples, 0.75%)</title><rect x="812.1" y="419.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="815.1" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="812.1" y="403.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="815.1" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="812.1" y="387.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="815.1" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="812.1" y="371.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="815.1" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="812.1" y="355.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="815.1" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="812.1" y="339.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="815.1" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/840189089.&lt;init&gt; (7 samples, 0.66%)</title><rect x="813.2" y="403.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="816.2" y="414.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (3 samples, 0.28%)</title><rect x="821.0" y="451.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.0" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.19%)</title><rect x="822.1" y="435.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="825.1" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.37%)</title><rect x="824.3" y="451.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="827.3" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.19%)</title><rect x="826.5" y="435.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="829.5" y="446.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.19%)</title><rect x="826.5" y="419.0" width="2.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="829.5" y="430.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="828.7" y="451.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="831.7" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="828.7" y="435.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="831.7" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.19%)</title><rect x="829.8" y="451.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="832.8" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="830.9" y="435.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="833.9" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.19%)</title><rect x="832.0" y="483.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="835.0" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.19%)</title><rect x="832.0" y="467.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="835.0" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="832.0" y="451.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="835.0" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="833.1" y="451.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="836.1" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="833.1" y="435.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="836.1" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="833.1" y="419.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="836.1" y="430.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="833.1" y="403.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="836.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.69%)</title><rect x="834.2" y="483.0" width="19.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="837.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 1.69%)</title><rect x="834.2" y="467.0" width="19.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="837.2" y="478.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.37%)</title><rect x="838.7" y="451.0" width="4.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="841.7" y="462.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="839.8" y="435.0" width="3.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="842.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.94%)</title><rect x="843.1" y="451.0" width="11.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="846.1" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1116797930.accept (9 samples, 0.84%)</title><rect x="843.1" y="435.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="846.1" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (9 samples, 0.84%)</title><rect x="843.1" y="419.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="846.1" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 0.84%)</title><rect x="843.1" y="403.0" width="9.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="846.1" y="414.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.84%)</title><rect x="843.1" y="387.0" width="9.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="846.1" y="398.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.84%)</title><rect x="843.1" y="371.0" width="9.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="846.1" y="382.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.28%)</title><rect x="848.6" y="355.0" width="3.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="851.6" y="366.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="848.6" y="339.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="851.6" y="350.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="851.9" y="355.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="854.9" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/719480717.accept (1 samples, 0.09%)</title><rect x="853.0" y="435.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="856.0" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="853.0" y="419.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="856.0" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="853.0" y="403.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="856.0" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="853.0" y="387.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="856.0" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="853.0" y="371.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="856.0" y="382.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="853.0" y="355.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="856.0" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="853.0" y="339.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="856.0" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1344199921.linkToTargetMethod (1 samples, 0.09%)</title><rect x="854.1" y="499.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="857.1" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="854.1" y="483.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="857.1" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/719480717.get$Lambda (1 samples, 0.09%)</title><rect x="854.1" y="467.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="857.1" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="854.1" y="451.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="857.1" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="854.1" y="435.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="857.1" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="854.1" y="419.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="857.1" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="854.1" y="403.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="857.1" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="854.1" y="387.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="857.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 0.84%)</title><rect x="855.2" y="499.0" width="10.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="858.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 0.84%)</title><rect x="855.2" y="483.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="858.2" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.09%)</title><rect x="857.4" y="467.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="860.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.56%)</title><rect x="858.5" y="467.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="861.5" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/1116797930.accept (6 samples, 0.56%)</title><rect x="858.5" y="451.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="861.5" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (6 samples, 0.56%)</title><rect x="858.5" y="435.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="861.5" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (6 samples, 0.56%)</title><rect x="858.5" y="419.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="861.5" y="430.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.56%)</title><rect x="858.5" y="403.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="861.5" y="414.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.56%)</title><rect x="858.5" y="387.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="861.5" y="398.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.56%)</title><rect x="865.2" y="499.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="868.2" y="510.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.47%)</title><rect x="866.3" y="483.0" width="5.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="869.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 0.56%)</title><rect x="871.8" y="515.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="874.8" y="526.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.56%)</title><rect x="871.8" y="499.0" width="6.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="874.8" y="510.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.56%)</title><rect x="871.8" y="483.0" width="6.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="874.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.37%)</title><rect x="878.4" y="563.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="881.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.37%)</title><rect x="878.4" y="547.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="881.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.37%)</title><rect x="878.4" y="531.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="881.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.37%)</title><rect x="878.4" y="515.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="881.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.09%)</title><rect x="881.7" y="499.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="884.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (215 samples, 20.13%)</title><rect x="882.8" y="563.0" width="237.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="885.8" y="574.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (213 samples, 19.94%)</title><rect x="885.1" y="547.0" width="235.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="888.1" y="558.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (197 samples, 18.45%)</title><rect x="885.1" y="531.0" width="217.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="888.1" y="542.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (12 samples, 1.12%)</title><rect x="897.2" y="515.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="900.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.66%)</title><rect x="910.5" y="515.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="913.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (7 samples, 0.66%)</title><rect x="910.5" y="499.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="913.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (167 samples, 15.64%)</title><rect x="918.2" y="515.0" width="184.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="921.2" y="526.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (159 samples, 14.89%)</title><rect x="927.0" y="499.0" width="175.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="930.0" y="510.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="932.6" y="483.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="935.6" y="494.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.19%)</title><rect x="933.7" y="483.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="936.7" y="494.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.19%)</title><rect x="935.9" y="483.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="938.9" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="938.1" y="483.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.1" y="494.0"></text>
</g>
<g>
<title>Unsafe_Park (146 samples, 13.67%)</title><rect x="939.2" y="483.0" width="161.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="942.2" y="494.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.19%)</title><rect x="945.8" y="467.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="948.8" y="478.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (29 samples, 2.72%)</title><rect x="948.0" y="467.0" width="32.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="951.0" y="478.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (16 samples, 1.50%)</title><rect x="956.9" y="451.0" width="17.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="959.9" y="462.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.37%)</title><rect x="959.1" y="435.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="962.1" y="446.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.28%)</title><rect x="960.2" y="419.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="963.2" y="430.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.28%)</title><rect x="963.5" y="435.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="966.5" y="446.0"></text>
</g>
<g>
<title>pthread_getspecific (7 samples, 0.66%)</title><rect x="966.8" y="435.0" width="7.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="969.8" y="446.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="974.6" y="451.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="977.6" y="462.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.19%)</title><rect x="975.7" y="451.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="978.7" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.19%)</title><rect x="977.9" y="451.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="980.9" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="980.1" y="467.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="983.1" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.19%)</title><rect x="981.2" y="467.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="984.2" y="478.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.75%)</title><rect x="983.4" y="467.0" width="8.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="986.4" y="478.0"></text>
</g>
<g>
<title>__lll_unlock_wake (25 samples, 2.34%)</title><rect x="992.2" y="467.0" width="27.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="995.2" y="478.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 4.87%)</title><rect x="1019.9" y="467.0" width="57.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1022.9" y="478.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.47%)</title><rect x="1077.3" y="467.0" width="5.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1080.3" y="478.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.19%)</title><rect x="1082.8" y="467.0" width="2.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1085.8" y="478.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.28%)</title><rect x="1085.0" y="467.0" width="3.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1088.0" y="478.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.28%)</title><rect x="1088.4" y="467.0" width="3.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1091.4" y="478.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.47%)</title><rect x="1091.7" y="467.0" width="5.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1094.7" y="478.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="1097.2" y="467.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1100.2" y="478.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1098.3" y="467.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.3" y="478.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="1099.4" y="467.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1102.4" y="478.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.19%)</title><rect x="1100.5" y="483.0" width="2.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1103.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.19%)</title><rect x="1102.7" y="531.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1105.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 1.31%)</title><rect x="1104.9" y="531.0" width="15.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1107.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.31%)</title><rect x="1104.9" y="515.0" width="15.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1107.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.31%)</title><rect x="1104.9" y="499.0" width="15.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1107.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.31%)</title><rect x="1104.9" y="483.0" width="15.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1107.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1120.4" y="611.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1123.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1120.4" y="595.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1123.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1120.4" y="579.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1123.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="1120.4" y="563.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1123.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleInitiateApiVersionRequests (1 samples, 0.09%)</title><rect x="1120.4" y="547.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1123.4" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.09%)</title><rect x="1120.4" y="531.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1123.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1120.4" y="515.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1123.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1120.4" y="499.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1123.4" y="510.0"></text>
</g>
<g>
<title>start_thread (62 samples, 5.81%)</title><rect x="1121.5" y="611.0" width="68.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1124.5" y="622.0">start_t..</text>
</g>
<g>
<title>java_start(Thread*) (62 samples, 5.81%)</title><rect x="1121.5" y="595.0" width="68.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1124.5" y="606.0">java_st..</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 1.78%)</title><rect x="1121.5" y="579.0" width="21.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.5" y="590.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (8 samples, 0.75%)</title><rect x="1121.5" y="563.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.5" y="574.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.75%)</title><rect x="1121.5" y="547.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.5" y="558.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (5 samples, 0.47%)</title><rect x="1121.5" y="531.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.5" y="542.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.28%)</title><rect x="1127.0" y="531.0" width="3.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1130.0" y="542.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 1.03%)</title><rect x="1130.3" y="563.0" width="12.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.3" y="574.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.28%)</title><rect x="1130.3" y="547.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.3" y="558.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1130.3" y="531.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.3" y="542.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.19%)</title><rect x="1131.4" y="531.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1134.4" y="542.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.66%)</title><rect x="1133.7" y="547.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.7" y="558.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.37%)</title><rect x="1133.7" y="531.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.7" y="542.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.28%)</title><rect x="1133.7" y="515.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.7" y="526.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (3 samples, 0.28%)</title><rect x="1133.7" y="499.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.7" y="510.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.19%)</title><rect x="1133.7" y="483.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.7" y="494.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1135.9" y="483.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.9" y="494.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1137.0" y="515.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.0" y="526.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1137.0" y="499.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.0" y="510.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.09%)</title><rect x="1137.0" y="483.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.0" y="494.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.09%)</title><rect x="1137.0" y="467.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.0" y="478.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1137.0" y="451.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.0" y="462.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(unsigned int*) (1 samples, 0.09%)</title><rect x="1137.0" y="435.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.0" y="446.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.28%)</title><rect x="1138.1" y="531.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.1" y="542.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.28%)</title><rect x="1138.1" y="515.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.1" y="526.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1141.4" y="547.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.4" y="558.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1141.4" y="531.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.4" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.09%)</title><rect x="1141.4" y="515.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.4" y="526.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.09%)</title><rect x="1141.4" y="499.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.4" y="510.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.09%)</title><rect x="1141.4" y="483.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.4" y="494.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.09%)</title><rect x="1141.4" y="467.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.4" y="478.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.09%)</title><rect x="1141.4" y="451.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.4" y="462.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1141.4" y="435.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.4" y="446.0"></text>
</g>
<g>
<title>JavaThread::run() (41 samples, 3.84%)</title><rect x="1142.5" y="579.0" width="45.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.5" y="590.0">Java..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (41 samples, 3.84%)</title><rect x="1142.5" y="563.0" width="45.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.5" y="574.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (41 samples, 3.84%)</title><rect x="1142.5" y="547.0" width="45.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.5" y="558.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (41 samples, 3.84%)</title><rect x="1142.5" y="531.0" width="45.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.5" y="542.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (39 samples, 3.65%)</title><rect x="1142.5" y="515.0" width="43.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.5" y="526.0">C2Co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (39 samples, 3.65%)</title><rect x="1142.5" y="499.0" width="43.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.5" y="510.0">Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (25 samples, 2.34%)</title><rect x="1142.5" y="483.0" width="27.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.5" y="494.0">C..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1142.5" y="467.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.5" y="478.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1142.5" y="451.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.5" y="462.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1142.5" y="435.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.5" y="446.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.47%)</title><rect x="1143.6" y="467.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.6" y="478.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.19%)</title><rect x="1143.6" y="451.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.6" y="462.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.09%)</title><rect x="1144.7" y="435.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.7" y="446.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.28%)</title><rect x="1145.8" y="451.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.8" y="462.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.28%)</title><rect x="1145.8" y="435.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.8" y="446.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.09%)</title><rect x="1145.8" y="419.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.8" y="430.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1146.9" y="419.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.9" y="430.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1146.9" y="403.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.9" y="414.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1146.9" y="387.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.9" y="398.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="1146.9" y="371.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.9" y="382.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1148.0" y="419.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.0" y="430.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1148.0" y="403.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.0" y="414.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1148.0" y="387.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.0" y="398.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (19 samples, 1.78%)</title><rect x="1149.1" y="467.0" width="21.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.1" y="478.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1149.1" y="451.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.1" y="462.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.09%)</title><rect x="1150.2" y="451.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.2" y="462.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1151.3" y="451.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.3" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.28%)</title><rect x="1152.4" y="451.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.4" y="462.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.19%)</title><rect x="1153.5" y="435.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.5" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.09%)</title><rect x="1155.7" y="451.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.7" y="462.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.09%)</title><rect x="1155.7" y="435.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.7" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.47%)</title><rect x="1156.9" y="451.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.9" y="462.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1159.1" y="435.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.1" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.19%)</title><rect x="1160.2" y="435.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.2" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.09%)</title><rect x="1162.4" y="451.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.4" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.19%)</title><rect x="1163.5" y="451.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.5" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.09%)</title><rect x="1163.5" y="435.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.5" y="446.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.09%)</title><rect x="1163.5" y="419.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.5" y="430.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.09%)</title><rect x="1163.5" y="403.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.5" y="414.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.09%)</title><rect x="1164.6" y="435.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1167.6" y="446.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.19%)</title><rect x="1165.7" y="451.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.7" y="462.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1166.8" y="435.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.8" y="446.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.19%)</title><rect x="1167.9" y="451.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.9" y="462.0"></text>
</g>
<g>
<title>Compile::Optimize() (10 samples, 0.94%)</title><rect x="1170.1" y="483.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.1" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1170.1" y="467.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1170.1" y="451.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.1" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="435.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.1" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="419.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.1" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="403.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.1" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="387.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.1" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="371.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.1" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="355.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.1" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="339.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.1" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="323.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.1" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="307.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.1" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="291.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.1" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="275.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.1" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="259.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.1" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="243.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.1" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="227.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.1" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="211.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.1" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="195.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.1" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="179.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.1" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="163.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.1" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="147.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.1" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="131.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.1" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="115.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.1" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="99.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.1" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="83.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.1" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="67.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.1" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="51.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.1" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="35.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.1" y="46.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 0.66%)</title><rect x="1171.2" y="467.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.2" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.19%)</title><rect x="1171.2" y="451.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.2" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="451.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.4" y="462.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.09%)</title><rect x="1173.4" y="435.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.4" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.28%)</title><rect x="1174.5" y="451.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.28%)</title><rect x="1174.5" y="435.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.5" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1175.6" y="419.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.6" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.09%)</title><rect x="1176.7" y="419.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="430.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1177.8" y="451.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.8" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1177.8" y="435.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1177.8" y="419.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="430.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.19%)</title><rect x="1179.0" y="467.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.0" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.19%)</title><rect x="1179.0" y="451.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.0" y="462.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1179.0" y="435.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="446.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1179.0" y="419.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.0" y="430.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1179.0" y="403.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.0" y="414.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1179.0" y="387.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.0" y="398.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1179.0" y="371.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.0" y="382.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.09%)</title><rect x="1179.0" y="355.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.0" y="366.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1180.1" y="435.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.28%)</title><rect x="1181.2" y="483.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.28%)</title><rect x="1181.2" y="467.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.28%)</title><rect x="1181.2" y="451.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.28%)</title><rect x="1181.2" y="435.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.28%)</title><rect x="1181.2" y="419.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.28%)</title><rect x="1181.2" y="403.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.28%)</title><rect x="1181.2" y="387.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.28%)</title><rect x="1181.2" y="371.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.28%)</title><rect x="1181.2" y="355.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.28%)</title><rect x="1181.2" y="339.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.28%)</title><rect x="1181.2" y="323.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.28%)</title><rect x="1181.2" y="307.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="318.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.2" y="291.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="302.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.09%)</title><rect x="1181.2" y="275.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.3" y="291.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.3" y="275.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.3" y="259.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.3" y="243.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.3" y="227.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.3" y="211.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.3" y="195.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.3" y="179.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="190.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.09%)</title><rect x="1182.3" y="163.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.3" y="174.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1182.3" y="147.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.3" y="158.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1182.3" y="131.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.4" y="291.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.4" y="275.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.4" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.4" y="259.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.4" y="243.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.4" y="227.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.4" y="211.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.4" y="195.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.4" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.4" y="179.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.4" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.4" y="163.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.4" y="147.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.4" y="131.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.4" y="115.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1183.4" y="99.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.4" y="110.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1183.4" y="83.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.4" y="94.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1184.5" y="483.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.5" y="494.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1184.5" y="467.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="478.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.19%)</title><rect x="1185.6" y="515.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.6" y="526.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.19%)</title><rect x="1185.6" y="499.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.6" y="510.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.19%)</title><rect x="1185.6" y="483.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.6" y="494.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.19%)</title><rect x="1185.6" y="467.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.6" y="478.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1185.6" y="451.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.6" y="462.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.6" y="435.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.6" y="446.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1185.6" y="419.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.6" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1185.6" y="403.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.6" y="414.0"></text>
</g>
<g>
<title>ValueMap::kill_all() (1 samples, 0.09%)</title><rect x="1185.6" y="387.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.6" y="398.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.09%)</title><rect x="1186.7" y="451.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.7" y="462.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.09%)</title><rect x="1186.7" y="435.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.7" y="446.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle, Thread*) (1 samples, 0.09%)</title><rect x="1186.7" y="419.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="430.0"></text>
</g>
<g>
<title>java_lang_ref_Reference::pending_list_lock() (1 samples, 0.09%)</title><rect x="1186.7" y="403.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.7" y="414.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.19%)</title><rect x="1187.8" y="579.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.8" y="590.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.19%)</title><rect x="1187.8" y="563.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="574.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.19%)</title><rect x="1187.8" y="547.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.8" y="558.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.09%)</title><rect x="1188.9" y="531.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.9" y="542.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.09%)</title><rect x="1188.9" y="515.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="526.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1188.9" y="499.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.9" y="510.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1188.9" y="483.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.9" y="494.0"></text>
</g>
</g>
</svg>
