<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1285"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1285"> </text>
<g id="frames">
<g>
<title>all (1,343 samples, 100.00%)</title><rect x="10.0" y="1251.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (310 samples, 23.08%)</title><rect x="10.0" y="1235.0" width="272.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (309 samples, 23.01%)</title><rect x="10.9" y="1219.0" width="271.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1230.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.22%)</title><rect x="10.9" y="1203.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.22%)</title><rect x="10.9" y="1187.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/644657036.accept (3 samples, 0.22%)</title><rect x="10.9" y="1171.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.22%)</title><rect x="10.9" y="1155.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.22%)</title><rect x="10.9" y="1139.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.22%)</title><rect x="10.9" y="1123.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.9" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (2 samples, 0.15%)</title><rect x="11.8" y="1107.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.8" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.15%)</title><rect x="11.8" y="1091.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (7 samples, 0.52%)</title><rect x="13.5" y="1203.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.5" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (7 samples, 0.52%)</title><rect x="13.5" y="1187.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.5" y="1198.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="14.4" y="1171.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.4" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="14.4" y="1155.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.4" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="14.4" y="1139.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.4" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (5 samples, 0.37%)</title><rect x="15.3" y="1171.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (5 samples, 0.37%)</title><rect x="15.3" y="1155.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.3" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (5 samples, 0.37%)</title><rect x="15.3" y="1139.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.3" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.30%)</title><rect x="15.3" y="1123.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.3" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.22%)</title><rect x="15.3" y="1107.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="15.3" y="1091.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.3" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="15.3" y="1075.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.3" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="15.3" y="1059.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$266/472456443.test (1 samples, 0.07%)</title><rect x="15.3" y="1043.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$partitionsNeedsPause$61 (1 samples, 0.07%)</title><rect x="15.3" y="1027.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.3" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="16.2" y="1091.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.2" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="16.2" y="1075.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.2" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="16.2" y="1059.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.2" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="16.2" y="1043.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.2" y="1054.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="16.2" y="1027.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="19.2" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="17.0" y="1091.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="17.0" y="1075.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="17.0" y="1059.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.07%)</title><rect x="17.0" y="1043.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.07%)</title><rect x="17.9" y="1107.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.9" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.07%)</title><rect x="17.9" y="1091.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.9" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="17.9" y="1075.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.9" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="17.9" y="1059.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="17.9" y="1043.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="18.8" y="1123.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.8" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="18.8" y="1107.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.8" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="18.8" y="1091.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.07%)</title><rect x="19.7" y="1203.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="22.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.07%)</title><rect x="19.7" y="1187.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="19.7" y="1171.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="19.7" y="1155.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="19.7" y="1139.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.7" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="19.7" y="1123.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.7" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="19.7" y="1107.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.7" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="19.7" y="1091.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.7" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="19.7" y="1075.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="20.5" y="1203.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.5" y="1214.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="20.5" y="1187.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.5" y="1198.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="20.5" y="1171.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (210 samples, 15.64%)</title><rect x="21.4" y="1203.0" width="184.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.4" y="1214.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/214042909.accept (206 samples, 15.34%)</title><rect x="21.4" y="1187.0" width="181.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.4" y="1198.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (206 samples, 15.34%)</title><rect x="21.4" y="1171.0" width="181.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.4" y="1182.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (169 samples, 12.58%)</title><rect x="21.4" y="1155.0" width="148.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.4" y="1166.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (169 samples, 12.58%)</title><rect x="21.4" y="1139.0" width="148.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.4" y="1150.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (169 samples, 12.58%)</title><rect x="21.4" y="1123.0" width="148.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.4" y="1134.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (169 samples, 12.58%)</title><rect x="21.4" y="1107.0" width="148.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.4" y="1118.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (169 samples, 12.58%)</title><rect x="21.4" y="1091.0" width="148.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.4" y="1102.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (169 samples, 12.58%)</title><rect x="21.4" y="1075.0" width="148.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.4" y="1086.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (122 samples, 9.08%)</title><rect x="53.1" y="1059.0" width="107.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.1" y="1070.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (22 samples, 1.64%)</title><rect x="54.8" y="1043.0" width="19.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="57.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (22 samples, 1.64%)</title><rect x="54.8" y="1027.0" width="19.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="57.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (22 samples, 1.64%)</title><rect x="54.8" y="1011.0" width="19.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.82%)</title><rect x="74.1" y="1043.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (11 samples, 0.82%)</title><rect x="74.1" y="1027.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.15%)</title><rect x="78.5" y="1011.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.5" y="1022.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.15%)</title><rect x="78.5" y="995.0" width="1.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="81.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.30%)</title><rect x="80.3" y="1011.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (87 samples, 6.48%)</title><rect x="83.8" y="1043.0" width="76.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.8" y="1054.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (87 samples, 6.48%)</title><rect x="83.8" y="1027.0" width="76.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.8" y="1038.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (84 samples, 6.25%)</title><rect x="85.6" y="1011.0" width="73.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="88.6" y="1022.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (84 samples, 6.25%)</title><rect x="85.6" y="995.0" width="73.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.6" y="1006.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (83 samples, 6.18%)</title><rect x="86.4" y="979.0" width="73.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="89.4" y="990.0">sun/misc..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="89.1" y="963.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="92.1" y="974.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="90.0" y="963.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="93.0" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.15%)</title><rect x="90.8" y="963.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="93.8" y="974.0"></text>
</g>
<g>
<title>Unsafe_Unpark (69 samples, 5.14%)</title><rect x="92.6" y="963.0" width="60.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="95.6" y="974.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="93.5" y="947.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="96.5" y="958.0"></text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.30%)</title><rect x="94.3" y="947.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="97.3" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="97.9" y="947.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="100.9" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_signal (43 samples, 3.20%)</title><rect x="98.7" y="947.0" width="37.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="101.7" y="958.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.30%)</title><rect x="136.5" y="947.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="139.5" y="958.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.12%)</title><rect x="140.0" y="947.0" width="13.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="143.0" y="958.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.37%)</title><rect x="153.2" y="963.0" width="4.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="156.2" y="974.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="157.6" y="963.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="160.6" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.07%)</title><rect x="158.5" y="963.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="161.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="159.4" y="1011.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="162.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.67%)</title><rect x="160.2" y="1059.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (9 samples, 0.67%)</title><rect x="160.2" y="1043.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="163.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.67%)</title><rect x="160.2" y="1027.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.15%)</title><rect x="168.2" y="1059.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.15%)</title><rect x="168.2" y="1043.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="171.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="168.2" y="1027.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="171.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="168.2" y="1011.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="171.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="169.0" y="1027.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.07%)</title><rect x="169.0" y="1011.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="172.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (4 samples, 0.30%)</title><rect x="169.9" y="1155.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="172.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 0.30%)</title><rect x="169.9" y="1139.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="172.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.07%)</title><rect x="173.4" y="1155.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="176.4" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="173.4" y="1139.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="173.4" y="1123.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (32 samples, 2.38%)</title><rect x="174.3" y="1155.0" width="28.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="177.3" y="1166.0">co..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="174.3" y="1139.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="177.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (31 samples, 2.31%)</title><rect x="175.2" y="1139.0" width="27.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="178.2" y="1150.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (13 samples, 0.97%)</title><rect x="190.1" y="1123.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="193.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.74%)</title><rect x="190.1" y="1107.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="193.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.74%)</title><rect x="190.1" y="1091.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="193.1" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.74%)</title><rect x="190.1" y="1075.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.1" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="198.0" y="1059.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="201.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="198.9" y="1107.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="201.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.15%)</title><rect x="199.8" y="1107.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.8" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="201.5" y="1123.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="204.5" y="1134.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="202.4" y="1187.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="205.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.22%)</title><rect x="203.3" y="1187.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="206.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.22%)</title><rect x="203.3" y="1171.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.22%)</title><rect x="203.3" y="1155.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.22%)</title><rect x="203.3" y="1139.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.3" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.22%)</title><rect x="203.3" y="1123.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="206.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (87 samples, 6.48%)</title><rect x="205.9" y="1203.0" width="76.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.9" y="1214.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (87 samples, 6.48%)</title><rect x="205.9" y="1187.0" width="76.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.9" y="1198.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (47 samples, 3.50%)</title><rect x="206.8" y="1171.0" width="41.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="209.8" y="1182.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (47 samples, 3.50%)</title><rect x="206.8" y="1155.0" width="41.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.8" y="1166.0">org..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="207.7" y="1139.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.7" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="207.7" y="1123.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.07%)</title><rect x="207.7" y="1107.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (45 samples, 3.35%)</title><rect x="208.6" y="1139.0" width="39.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.6" y="1150.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (40 samples, 2.98%)</title><rect x="208.6" y="1123.0" width="35.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.6" y="1134.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (40 samples, 2.98%)</title><rect x="208.6" y="1107.0" width="35.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.6" y="1118.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 0.89%)</title><rect x="212.1" y="1091.0" width="10.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="215.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.45%)</title><rect x="216.5" y="1075.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.37%)</title><rect x="217.4" y="1059.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="220.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.37%)</title><rect x="217.4" y="1043.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="220.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.37%)</title><rect x="217.4" y="1027.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="220.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.37%)</title><rect x="217.4" y="1011.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.37%)</title><rect x="217.4" y="995.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.37%)</title><rect x="217.4" y="979.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="221.7" y="1075.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="224.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.07%)</title><rect x="221.7" y="1059.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="224.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="221.7" y="1043.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="221.7" y="1027.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="224.7" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.07%)</title><rect x="221.7" y="1011.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (24 samples, 1.79%)</title><rect x="222.6" y="1091.0" width="21.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="225.6" y="1102.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (24 samples, 1.79%)</title><rect x="222.6" y="1075.0" width="21.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="225.6" y="1086.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (16 samples, 1.19%)</title><rect x="222.6" y="1059.0" width="14.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.6" y="1070.0"></text>
</g>
<g>
<title>java/util/Optional.of (16 samples, 1.19%)</title><rect x="222.6" y="1043.0" width="14.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.6" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="234.9" y="1027.0" width="1.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="237.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (8 samples, 0.60%)</title><rect x="236.7" y="1059.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.7" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (8 samples, 0.60%)</title><rect x="236.7" y="1043.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.15%)</title><rect x="243.7" y="1123.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.15%)</title><rect x="243.7" y="1107.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="246.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="243.7" y="1091.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="243.7" y="1075.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="243.7" y="1059.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="243.7" y="1043.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="244.6" y="1043.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.07%)</title><rect x="245.5" y="1123.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="245.5" y="1107.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.07%)</title><rect x="245.5" y="1091.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="248.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="245.5" y="1075.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="248.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="245.5" y="1059.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="245.5" y="1043.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="246.4" y="1123.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="247.2" y="1123.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="247.2" y="1107.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="247.2" y="1091.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.2" y="1102.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="247.2" y="1075.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.2" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="247.2" y="1059.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (16 samples, 1.19%)</title><rect x="248.1" y="1171.0" width="14.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="251.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (11 samples, 0.82%)</title><rect x="248.1" y="1155.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.67%)</title><rect x="248.1" y="1139.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="249.0" y="1123.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/193729802.accept (1 samples, 0.07%)</title><rect x="249.0" y="1107.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.07%)</title><rect x="249.0" y="1091.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.07%)</title><rect x="249.0" y="1075.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.07%)</title><rect x="249.0" y="1059.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.07%)</title><rect x="249.0" y="1043.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="252.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.07%)</title><rect x="249.9" y="1123.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="252.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.07%)</title><rect x="250.7" y="1123.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.07%)</title><rect x="250.7" y="1107.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.22%)</title><rect x="251.6" y="1123.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.6" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.15%)</title><rect x="252.5" y="1107.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.5" y="1118.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.15%)</title><rect x="252.5" y="1091.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.15%)</title><rect x="252.5" y="1075.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.15%)</title><rect x="252.5" y="1059.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.15%)</title><rect x="252.5" y="1043.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.15%)</title><rect x="254.3" y="1123.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.15%)</title><rect x="254.3" y="1107.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.3" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="255.1" y="1091.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="255.1" y="1075.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="258.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="255.1" y="1059.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="258.1" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="255.1" y="1043.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="255.1" y="1027.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.1" y="1038.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="255.1" y="1011.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.1" y="1022.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="255.1" y="995.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="258.1" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="255.1" y="979.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$229/1391602274.apply (1 samples, 0.07%)</title><rect x="255.1" y="963.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.07%)</title><rect x="255.1" y="947.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.15%)</title><rect x="256.0" y="1139.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.0" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.15%)</title><rect x="256.0" y="1123.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="256.0" y="1107.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.15%)</title><rect x="256.0" y="1091.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="256.9" y="1075.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.9" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="256.9" y="1059.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="256.9" y="1043.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="256.9" y="1027.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.07%)</title><rect x="256.9" y="1011.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.07%)</title><rect x="256.9" y="995.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="259.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="256.9" y="979.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="259.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (5 samples, 0.37%)</title><rect x="257.8" y="1155.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (2 samples, 0.15%)</title><rect x="259.5" y="1139.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="262.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.07%)</title><rect x="261.3" y="1139.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.07%)</title><rect x="261.3" y="1123.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.15%)</title><rect x="262.2" y="1171.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.07%)</title><rect x="262.2" y="1155.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="262.2" y="1139.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="262.2" y="1123.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.07%)</title><rect x="262.2" y="1107.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.07%)</title><rect x="263.0" y="1155.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.07%)</title><rect x="263.0" y="1139.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (2 samples, 0.15%)</title><rect x="263.9" y="1171.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (13 samples, 0.97%)</title><rect x="265.7" y="1171.0" width="11.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (12 samples, 0.89%)</title><rect x="265.7" y="1155.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="265.7" y="1139.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.07%)</title><rect x="265.7" y="1123.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.07%)</title><rect x="265.7" y="1107.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="265.7" y="1091.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="268.7" y="1102.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.07%)</title><rect x="265.7" y="1075.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="268.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (11 samples, 0.82%)</title><rect x="266.6" y="1139.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 0.07%)</title><rect x="267.4" y="1123.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="270.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.07%)</title><rect x="267.4" y="1107.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.4" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="267.4" y="1091.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="270.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="267.4" y="1075.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="270.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (8 samples, 0.60%)</title><rect x="268.3" y="1123.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (8 samples, 0.60%)</title><rect x="268.3" y="1107.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (7 samples, 0.52%)</title><rect x="268.3" y="1091.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.3" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.22%)</title><rect x="268.3" y="1075.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="271.3" y="1086.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.22%)</title><rect x="268.3" y="1059.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="271.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (4 samples, 0.30%)</title><rect x="271.0" y="1075.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (4 samples, 0.30%)</title><rect x="271.0" y="1059.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (4 samples, 0.30%)</title><rect x="271.0" y="1043.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.0" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (4 samples, 0.30%)</title><rect x="271.0" y="1027.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="274.0" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="271.0" y="1011.0" width="1.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="274.0" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="272.7" y="1011.0" width="1.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="275.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.07%)</title><rect x="274.5" y="1091.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="277.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.nanoseconds (1 samples, 0.07%)</title><rect x="275.3" y="1123.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.3" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="275.3" y="1107.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="278.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="276.2" y="1155.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="276.2" y="1139.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="276.2" y="1123.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.07%)</title><rect x="276.2" y="1107.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="279.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.07%)</title><rect x="276.2" y="1091.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="279.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.&lt;init&gt; (1 samples, 0.07%)</title><rect x="276.2" y="1075.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.&lt;init&gt; (1 samples, 0.07%)</title><rect x="276.2" y="1059.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.&lt;init&gt; (1 samples, 0.07%)</title><rect x="276.2" y="1043.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="276.2" y="1027.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.37%)</title><rect x="277.1" y="1171.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.37%)</title><rect x="277.1" y="1155.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.22%)</title><rect x="277.1" y="1139.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.07%)</title><rect x="277.1" y="1123.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="280.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.07%)</title><rect x="277.1" y="1107.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="280.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.07%)</title><rect x="277.1" y="1091.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.07%)</title><rect x="277.1" y="1075.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="280.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.15%)</title><rect x="278.0" y="1123.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="278.0" y="1107.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="281.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="278.0" y="1091.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.15%)</title><rect x="278.0" y="1075.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="281.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.15%)</title><rect x="278.0" y="1059.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="281.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.15%)</title><rect x="278.0" y="1043.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.0" y="1054.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.15%)</title><rect x="278.0" y="1027.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.0" y="1038.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.15%)</title><rect x="278.0" y="1011.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.15%)</title><rect x="278.0" y="995.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="281.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.15%)</title><rect x="278.0" y="979.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="278.0" y="963.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="281.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/946235861.test (1 samples, 0.07%)</title><rect x="278.0" y="947.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/946235861.test (1 samples, 0.07%)</title><rect x="278.9" y="963.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.07%)</title><rect x="278.9" y="947.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/2100818422.test (1 samples, 0.07%)</title><rect x="278.9" y="931.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="281.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.07%)</title><rect x="278.9" y="915.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.9" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="278.9" y="899.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.9" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="278.9" y="883.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.9" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="278.9" y="867.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.07%)</title><rect x="278.9" y="851.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="281.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.07%)</title><rect x="279.7" y="1139.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.07%)</title><rect x="279.7" y="1123.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="279.7" y="1107.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="280.6" y="1139.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="283.6" y="1150.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="280.6" y="1123.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.6" y="1134.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="280.6" y="1107.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.6" y="1118.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="280.6" y="1091.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="283.6" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="280.6" y="1075.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="283.6" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="280.6" y="1059.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.6" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.07%)</title><rect x="280.6" y="1043.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="283.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="281.5" y="1171.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="281.5" y="1155.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="284.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="281.5" y="1139.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="284.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="281.5" y="1123.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="284.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="281.5" y="1107.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.07%)</title><rect x="281.5" y="1091.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Avg.update (1 samples, 0.07%)</title><rect x="281.5" y="1075.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (785 samples, 58.45%)</title><rect x="282.4" y="1235.0" width="689.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.4" y="1246.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (785 samples, 58.45%)</title><rect x="282.4" y="1219.0" width="689.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.4" y="1230.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.07%)</title><rect x="282.4" y="1203.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.07%)</title><rect x="282.4" y="1187.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="285.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (784 samples, 58.38%)</title><rect x="283.3" y="1203.0" width="688.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.3" y="1214.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1152616950.run (535 samples, 39.84%)</title><rect x="285.0" y="1187.0" width="470.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.0" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (535 samples, 39.84%)</title><rect x="285.0" y="1171.0" width="470.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.0" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTa..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (535 samples, 39.84%)</title><rect x="285.0" y="1155.0" width="470.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="288.0" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (523 samples, 38.94%)</title><rect x="285.0" y="1139.0" width="459.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.0" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.schedule..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="293.8" y="1123.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="296.8" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.74%)</title><rect x="295.6" y="1123.0" width="8.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="298.6" y="1134.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.45%)</title><rect x="299.1" y="1107.0" width="5.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="302.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.07%)</title><rect x="304.3" y="1123.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="307.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.07%)</title><rect x="304.3" y="1107.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="307.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/1387966527.get (1 samples, 0.07%)</title><rect x="304.3" y="1091.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.07%)</title><rect x="304.3" y="1075.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="307.3" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="304.3" y="1059.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="307.3" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="304.3" y="1043.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="307.3" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="304.3" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="307.3" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="304.3" y="1011.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="307.3" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="304.3" y="995.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="307.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (163 samples, 12.14%)</title><rect x="305.2" y="1123.0" width="143.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="308.2" y="1134.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (163 samples, 12.14%)</title><rect x="305.2" y="1107.0" width="143.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.2" y="1118.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (163 samples, 12.14%)</title><rect x="305.2" y="1091.0" width="143.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.2" y="1102.0">com/linecorp/decat..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="305.2" y="1075.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="308.2" y="1086.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="305.2" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="308.2" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.07%)</title><rect x="305.2" y="1043.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="308.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (162 samples, 12.06%)</title><rect x="306.1" y="1075.0" width="142.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.1" y="1086.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (162 samples, 12.06%)</title><rect x="306.1" y="1059.0" width="142.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="309.1" y="1070.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (162 samples, 12.06%)</title><rect x="306.1" y="1043.0" width="142.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.1" y="1054.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (50 samples, 3.72%)</title><rect x="306.1" y="1027.0" width="43.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="309.1" y="1038.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (17 samples, 1.27%)</title><rect x="306.1" y="1011.0" width="14.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (17 samples, 1.27%)</title><rect x="306.1" y="995.0" width="14.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="309.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (17 samples, 1.27%)</title><rect x="306.1" y="979.0" width="14.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.1" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (17 samples, 1.27%)</title><rect x="306.1" y="963.0" width="14.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.1" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.22%)</title><rect x="318.4" y="947.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="321.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.22%)</title><rect x="318.4" y="931.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="321.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (33 samples, 2.46%)</title><rect x="321.0" y="1011.0" width="29.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="324.0" y="1022.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (33 samples, 2.46%)</title><rect x="321.0" y="995.0" width="29.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.0" y="1006.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="321.0" y="979.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="324.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (15 samples, 1.12%)</title><rect x="321.9" y="979.0" width="13.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="324.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (15 samples, 1.12%)</title><rect x="321.9" y="963.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="324.9" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="334.2" y="947.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (13 samples, 0.97%)</title><rect x="335.1" y="979.0" width="11.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="338.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (13 samples, 0.97%)</title><rect x="335.1" y="963.0" width="11.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="338.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.07%)</title><rect x="340.4" y="947.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="343.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (1 samples, 0.07%)</title><rect x="341.2" y="947.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="344.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.22%)</title><rect x="342.1" y="947.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="345.1" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="343.9" y="931.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="346.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.07%)</title><rect x="344.8" y="947.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="347.8" y="958.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="345.6" y="947.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="348.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (4 samples, 0.30%)</title><rect x="346.5" y="979.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="349.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (3 samples, 0.22%)</title><rect x="346.5" y="963.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="349.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="349.2" y="963.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="352.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (96 samples, 7.15%)</title><rect x="350.0" y="1027.0" width="84.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.0" y="1038.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.30%)</title><rect x="350.0" y="1011.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="353.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.30%)</title><rect x="350.0" y="995.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="353.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (4 samples, 0.30%)</title><rect x="350.0" y="979.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="353.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (4 samples, 0.30%)</title><rect x="350.0" y="963.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="353.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (2 samples, 0.15%)</title><rect x="350.0" y="947.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="353.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (2 samples, 0.15%)</title><rect x="350.0" y="931.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="353.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (2 samples, 0.15%)</title><rect x="350.0" y="915.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="353.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.resetWithEmpty (1 samples, 0.07%)</title><rect x="351.8" y="947.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="354.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.07%)</title><rect x="352.7" y="947.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="355.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.07%)</title><rect x="353.5" y="1011.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="356.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="353.5" y="995.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="356.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 0.97%)</title><rect x="354.4" y="1011.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="357.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.82%)</title><rect x="356.2" y="995.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="359.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.45%)</title><rect x="359.7" y="979.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="362.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.30%)</title><rect x="361.5" y="963.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="364.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="364.1" y="947.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="367.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="365.0" y="979.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (11 samples, 0.82%)</title><rect x="365.8" y="1011.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="367.6" y="995.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="370.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (8 samples, 0.60%)</title><rect x="368.5" y="995.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="371.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="374.6" y="979.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="377.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="374.6" y="963.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="377.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="374.6" y="947.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="377.6" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="374.6" y="931.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="377.6" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="374.6" y="915.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="377.6" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="374.6" y="899.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="377.6" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="374.6" y="883.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="377.6" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="374.6" y="867.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="377.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (67 samples, 4.99%)</title><rect x="375.5" y="1011.0" width="58.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="378.5" y="1022.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.04%)</title><rect x="375.5" y="995.0" width="12.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="378.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.30%)</title><rect x="377.3" y="979.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="380.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.30%)</title><rect x="377.3" y="963.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="380.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.30%)</title><rect x="377.3" y="947.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="380.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.15%)</title><rect x="380.8" y="979.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="383.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.15%)</title><rect x="380.8" y="963.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="383.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (6 samples, 0.45%)</title><rect x="382.5" y="979.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="385.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (53 samples, 3.95%)</title><rect x="387.8" y="995.0" width="46.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="390.8" y="1006.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (53 samples, 3.95%)</title><rect x="387.8" y="979.0" width="46.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="390.8" y="990.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.07%)</title><rect x="390.4" y="963.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="393.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="390.4" y="947.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="393.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="390.4" y="931.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="393.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (49 samples, 3.65%)</title><rect x="391.3" y="963.0" width="43.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="394.3" y="974.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.19%)</title><rect x="392.2" y="947.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="395.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.67%)</title><rect x="395.7" y="931.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="398.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.67%)</title><rect x="395.7" y="915.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="398.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.67%)</title><rect x="395.7" y="899.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="398.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.52%)</title><rect x="397.5" y="883.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="400.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.15%)</title><rect x="403.6" y="931.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.15%)</title><rect x="403.6" y="915.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="406.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="405.4" y="931.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="408.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 0.89%)</title><rect x="406.3" y="947.0" width="10.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="409.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (11 samples, 0.82%)</title><rect x="407.1" y="931.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="410.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (11 samples, 0.82%)</title><rect x="407.1" y="915.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="410.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (11 samples, 0.82%)</title><rect x="407.1" y="899.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="410.1" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (11 samples, 0.82%)</title><rect x="407.1" y="883.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="410.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.15%)</title><rect x="416.8" y="947.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="419.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.60%)</title><rect x="418.6" y="947.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="421.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.60%)</title><rect x="418.6" y="931.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="421.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.60%)</title><rect x="418.6" y="915.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="421.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.60%)</title><rect x="418.6" y="899.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="421.6" y="910.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.60%)</title><rect x="418.6" y="883.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="421.6" y="894.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.45%)</title><rect x="420.3" y="867.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="423.8" y="851.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="426.8" y="862.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor5.newInstance (1 samples, 0.07%)</title><rect x="424.7" y="851.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="427.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.37%)</title><rect x="425.6" y="947.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="428.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.37%)</title><rect x="425.6" y="931.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="428.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.37%)</title><rect x="425.6" y="915.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="428.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.37%)</title><rect x="430.0" y="947.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="433.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (16 samples, 1.19%)</title><rect x="434.4" y="1027.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="437.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (16 samples, 1.19%)</title><rect x="434.4" y="1011.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="437.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (16 samples, 1.19%)</title><rect x="434.4" y="995.0" width="14.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="437.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (16 samples, 1.19%)</title><rect x="434.4" y="979.0" width="14.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="437.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (16 samples, 1.19%)</title><rect x="434.4" y="963.0" width="14.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="437.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (4 samples, 0.30%)</title><rect x="442.3" y="947.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="445.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (3 samples, 0.22%)</title><rect x="445.8" y="947.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="448.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (311 samples, 23.16%)</title><rect x="448.4" y="1123.0" width="273.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="451.4" y="1134.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (53 samples, 3.95%)</title><rect x="448.4" y="1107.0" width="46.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="451.4" y="1118.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.07%)</title><rect x="448.4" y="1091.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="451.4" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (52 samples, 3.87%)</title><rect x="449.3" y="1091.0" width="45.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="452.3" y="1102.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (47 samples, 3.50%)</title><rect x="453.7" y="1075.0" width="41.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="456.7" y="1086.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (19 samples, 1.41%)</title><rect x="455.5" y="1059.0" width="16.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="458.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.52%)</title><rect x="466.0" y="1043.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="469.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.52%)</title><rect x="466.0" y="1027.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="469.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.52%)</title><rect x="466.0" y="1011.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="469.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 0.97%)</title><rect x="472.2" y="1059.0" width="11.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="475.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (13 samples, 0.97%)</title><rect x="472.2" y="1043.0" width="11.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="475.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (13 samples, 0.97%)</title><rect x="472.2" y="1027.0" width="11.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="475.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.15%)</title><rect x="481.8" y="1011.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="484.8" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (13 samples, 0.97%)</title><rect x="483.6" y="1059.0" width="11.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="486.6" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 0.60%)</title><rect x="488.0" y="1043.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="491.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="488.0" y="1027.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="491.0" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.52%)</title><rect x="488.9" y="1027.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="491.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.60%)</title><rect x="495.0" y="1107.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="498.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.37%)</title><rect x="497.6" y="1091.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="500.6" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.37%)</title><rect x="497.6" y="1075.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="500.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (172 samples, 12.81%)</title><rect x="502.0" y="1107.0" width="151.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="505.0" y="1118.0">com/linecorp/decato..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="502.0" y="1091.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="505.0" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="502.0" y="1075.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="505.0" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="502.0" y="1059.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="505.0" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="502.0" y="1043.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="505.0" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="502.0" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="505.0" y="1038.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="502.0" y="1011.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="505.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (171 samples, 12.73%)</title><rect x="502.9" y="1091.0" width="150.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="505.9" y="1102.0">com/linecorp/decato..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="514.3" y="1075.0" width="2.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="517.3" y="1086.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="515.2" y="1059.0" width="1.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="518.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (48 samples, 3.57%)</title><rect x="517.0" y="1075.0" width="42.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="520.0" y="1086.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (36 samples, 2.68%)</title><rect x="521.4" y="1059.0" width="31.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="524.4" y="1070.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (35 samples, 2.61%)</title><rect x="522.2" y="1043.0" width="30.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="525.2" y="1054.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (21 samples, 1.56%)</title><rect x="529.3" y="1027.0" width="18.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="532.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (21 samples, 1.56%)</title><rect x="529.3" y="1011.0" width="18.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="532.3" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (21 samples, 1.56%)</title><rect x="529.3" y="995.0" width="18.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="532.3" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 0.82%)</title><rect x="534.5" y="979.0" width="9.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="537.5" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.45%)</title><rect x="534.5" y="963.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="537.5" y="974.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="534.5" y="947.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="537.5" y="958.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.37%)</title><rect x="535.4" y="947.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="538.4" y="958.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.30%)</title><rect x="536.3" y="931.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="539.3" y="942.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.15%)</title><rect x="536.3" y="915.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="539.3" y="926.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.15%)</title><rect x="536.3" y="899.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="539.3" y="910.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="538.1" y="915.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="541.1" y="926.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="538.9" y="915.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="541.9" y="926.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.37%)</title><rect x="539.8" y="963.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="542.8" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.22%)</title><rect x="541.6" y="947.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="544.6" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.15%)</title><rect x="541.6" y="931.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="544.6" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="542.4" y="915.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="545.4" y="926.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="542.4" y="899.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="545.4" y="910.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="543.3" y="931.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="546.3" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.30%)</title><rect x="544.2" y="979.0" width="3.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="547.2" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.30%)</title><rect x="547.7" y="1027.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="550.7" y="1038.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="551.2" y="1027.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="554.2" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="552.1" y="1027.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="555.1" y="1038.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="553.0" y="1059.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="556.0" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.45%)</title><rect x="553.9" y="1059.0" width="5.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="556.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (11 samples, 0.82%)</title><rect x="559.1" y="1075.0" width="9.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="562.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.15%)</title><rect x="559.1" y="1059.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="562.1" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="559.1" y="1043.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="562.1" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.15%)</title><rect x="559.1" y="1027.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="562.1" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.15%)</title><rect x="559.1" y="1011.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="562.1" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="560.0" y="995.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="563.0" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="560.0" y="979.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="563.0" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="560.0" y="963.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="563.0" y="974.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="560.0" y="947.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="563.0" y="958.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="560.0" y="931.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="563.0" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.toString (9 samples, 0.67%)</title><rect x="560.9" y="1059.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="563.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (9 samples, 0.67%)</title><rect x="560.9" y="1043.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="563.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (1 samples, 0.07%)</title><rect x="567.1" y="1027.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="570.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.07%)</title><rect x="567.9" y="1027.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="570.9" y="1038.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (95 samples, 7.07%)</title><rect x="568.8" y="1075.0" width="83.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="571.8" y="1086.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (93 samples, 6.92%)</title><rect x="570.6" y="1059.0" width="81.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="573.6" y="1070.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (28 samples, 2.08%)</title><rect x="570.6" y="1043.0" width="24.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="573.6" y="1054.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (17 samples, 1.27%)</title><rect x="580.2" y="1027.0" width="15.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="583.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (17 samples, 1.27%)</title><rect x="580.2" y="1011.0" width="15.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="583.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (17 samples, 1.27%)</title><rect x="580.2" y="995.0" width="15.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="583.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.82%)</title><rect x="595.2" y="1043.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="598.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (11 samples, 0.82%)</title><rect x="595.2" y="1027.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="598.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (11 samples, 0.82%)</title><rect x="595.2" y="1011.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="598.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.15%)</title><rect x="603.1" y="995.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="606.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (54 samples, 4.02%)</title><rect x="604.8" y="1043.0" width="47.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="607.8" y="1054.0">java..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.07%)</title><rect x="615.4" y="1027.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="618.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.put (41 samples, 3.05%)</title><rect x="616.3" y="1027.0" width="36.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="619.3" y="1038.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.22%)</title><rect x="616.3" y="1011.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="619.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="618.0" y="995.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="621.0" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (38 samples, 2.83%)</title><rect x="618.9" y="1011.0" width="33.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="621.9" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.15%)</title><rect x="637.3" y="995.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="640.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (14 samples, 1.04%)</title><rect x="639.1" y="995.0" width="12.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="642.1" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="646.1" y="979.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="649.1" y="990.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.22%)</title><rect x="647.0" y="979.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="650.0" y="990.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.15%)</title><rect x="649.6" y="979.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="652.6" y="990.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.07%)</title><rect x="651.4" y="995.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="654.4" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="652.3" y="1075.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="655.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (62 samples, 4.62%)</title><rect x="653.2" y="1107.0" width="54.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="656.2" y="1118.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (61 samples, 4.54%)</title><rect x="653.2" y="1091.0" width="53.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="656.2" y="1102.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2034428208.process (27 samples, 2.01%)</title><rect x="654.0" y="1075.0" width="23.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="657.0" y="1086.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (27 samples, 2.01%)</title><rect x="654.0" y="1059.0" width="23.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="657.0" y="1070.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (18 samples, 1.34%)</title><rect x="655.8" y="1043.0" width="15.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="658.8" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="656.7" y="1027.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="659.7" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="656.7" y="1011.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="659.7" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.07%)</title><rect x="656.7" y="995.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="659.7" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="656.7" y="979.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="659.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="656.7" y="963.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="659.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.52%)</title><rect x="657.6" y="1027.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="660.6" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.52%)</title><rect x="657.6" y="1011.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="660.6" y="1022.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.45%)</title><rect x="658.4" y="995.0" width="5.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="661.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.67%)</title><rect x="663.7" y="1027.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (7 samples, 0.52%)</title><rect x="671.6" y="1043.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="674.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.52%)</title><rect x="671.6" y="1027.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="674.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 0.52%)</title><rect x="671.6" y="1011.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="674.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.52%)</title><rect x="671.6" y="995.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="674.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 0.15%)</title><rect x="676.0" y="979.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="679.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.22%)</title><rect x="677.8" y="1075.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="680.8" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.22%)</title><rect x="677.8" y="1059.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="680.8" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="679.5" y="1043.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="682.5" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="679.5" y="1027.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="682.5" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="679.5" y="1011.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="682.5" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="679.5" y="995.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="682.5" y="1006.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="679.5" y="979.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="682.5" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.07%)</title><rect x="680.4" y="1075.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="683.4" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.07%)</title><rect x="680.4" y="1059.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="683.4" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 0.82%)</title><rect x="681.3" y="1075.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="684.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.67%)</title><rect x="683.0" y="1059.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="686.0" y="1070.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.37%)</title><rect x="683.0" y="1043.0" width="4.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="686.0" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.30%)</title><rect x="687.4" y="1043.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="690.4" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (6 samples, 0.45%)</title><rect x="690.9" y="1075.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="693.9" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (6 samples, 0.45%)</title><rect x="690.9" y="1059.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="693.9" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (12 samples, 0.89%)</title><rect x="696.2" y="1075.0" width="10.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="699.2" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.30%)</title><rect x="703.2" y="1059.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="706.2" y="1070.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="706.8" y="1091.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="709.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.19%)</title><rect x="707.6" y="1107.0" width="14.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="710.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.19%)</title><rect x="707.6" y="1091.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="710.6" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.15%)</title><rect x="710.3" y="1075.0" width="1.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="713.3" y="1086.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="710.3" y="1059.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="713.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.74%)</title><rect x="712.0" y="1075.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="715.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/1254590488.accept (10 samples, 0.74%)</title><rect x="712.0" y="1059.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="715.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (10 samples, 0.74%)</title><rect x="712.0" y="1043.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="715.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (10 samples, 0.74%)</title><rect x="712.0" y="1027.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="715.0" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (10 samples, 0.74%)</title><rect x="712.0" y="1011.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="715.0" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.create (10 samples, 0.74%)</title><rect x="712.0" y="995.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="715.0" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.37%)</title><rect x="716.4" y="979.0" width="4.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="719.4" y="990.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.30%)</title><rect x="717.3" y="963.0" width="3.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="720.3" y="974.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.07%)</title><rect x="720.8" y="1075.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="723.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.41%)</title><rect x="721.7" y="1123.0" width="16.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="724.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (19 samples, 1.41%)</title><rect x="721.7" y="1107.0" width="16.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="724.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 1.04%)</title><rect x="726.1" y="1091.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="729.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/1254590488.accept (14 samples, 1.04%)</title><rect x="726.1" y="1075.0" width="12.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="729.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (14 samples, 1.04%)</title><rect x="726.1" y="1059.0" width="12.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="729.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (14 samples, 1.04%)</title><rect x="726.1" y="1043.0" width="12.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="729.1" y="1054.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (14 samples, 1.04%)</title><rect x="726.1" y="1027.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="729.1" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.create (14 samples, 1.04%)</title><rect x="726.1" y="1011.0" width="12.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="729.1" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.45%)</title><rect x="738.4" y="1123.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="741.4" y="1134.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.45%)</title><rect x="738.4" y="1107.0" width="5.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="741.4" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="743.7" y="1123.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="746.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="744.5" y="1139.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="747.5" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="744.5" y="1123.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="747.5" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="744.5" y="1107.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="747.5" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="744.5" y="1091.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="747.5" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="744.5" y="1075.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="747.5" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="744.5" y="1059.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="747.5" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="744.5" y="1043.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="747.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (11 samples, 0.82%)</title><rect x="745.4" y="1139.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="748.4" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.45%)</title><rect x="748.0" y="1123.0" width="5.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="751.0" y="1134.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.45%)</title><rect x="748.0" y="1107.0" width="5.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="751.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.15%)</title><rect x="753.3" y="1123.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="756.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.52%)</title><rect x="755.1" y="1187.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="758.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.52%)</title><rect x="755.1" y="1171.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="758.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.52%)</title><rect x="755.1" y="1155.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="758.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.52%)</title><rect x="755.1" y="1139.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="758.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1152616950.run (1 samples, 0.07%)</title><rect x="760.3" y="1123.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="763.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (240 samples, 17.87%)</title><rect x="761.2" y="1187.0" width="210.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="764.2" y="1198.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (240 samples, 17.87%)</title><rect x="761.2" y="1171.0" width="210.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="764.2" y="1182.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (11 samples, 0.82%)</title><rect x="767.4" y="1155.0" width="9.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="770.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (212 samples, 15.79%)</title><rect x="777.0" y="1155.0" width="186.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="780.0" y="1166.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (30 samples, 2.23%)</title><rect x="781.4" y="1139.0" width="26.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="784.4" y="1150.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.45%)</title><rect x="807.8" y="1139.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="810.8" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.07%)</title><rect x="807.8" y="1123.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="810.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.37%)</title><rect x="808.7" y="1123.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="811.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.37%)</title><rect x="808.7" y="1107.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="811.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.37%)</title><rect x="808.7" y="1091.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="811.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (170 samples, 12.66%)</title><rect x="813.1" y="1139.0" width="149.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="816.1" y="1150.0">java/util/concurren..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (170 samples, 12.66%)</title><rect x="813.1" y="1123.0" width="149.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="816.1" y="1134.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.22%)</title><rect x="818.3" y="1107.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="821.3" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.15%)</title><rect x="821.0" y="1107.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="824.0" y="1118.0"></text>
</g>
<g>
<title>Unsafe_Park (154 samples, 11.47%)</title><rect x="822.7" y="1107.0" width="135.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="825.7" y="1118.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.22%)</title><rect x="827.1" y="1091.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="830.1" y="1102.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="829.8" y="1091.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="832.8" y="1102.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (25 samples, 1.86%)</title><rect x="830.6" y="1091.0" width="22.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="833.6" y="1102.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.74%)</title><rect x="836.8" y="1075.0" width="8.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="839.8" y="1086.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.22%)</title><rect x="837.7" y="1059.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="840.7" y="1070.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.15%)</title><rect x="838.5" y="1043.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="841.5" y="1054.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="840.3" y="1059.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="843.3" y="1070.0"></text>
</g>
<g>
<title>pthread_getspecific (5 samples, 0.37%)</title><rect x="841.2" y="1059.0" width="4.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="844.2" y="1070.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.15%)</title><rect x="845.6" y="1075.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="848.6" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.37%)</title><rect x="847.3" y="1075.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="850.3" y="1086.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.07%)</title><rect x="850.8" y="1059.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="853.8" y="1070.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.07%)</title><rect x="850.8" y="1043.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="853.8" y="1054.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="851.7" y="1075.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="854.7" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.07%)</title><rect x="852.6" y="1091.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="855.6" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.15%)</title><rect x="853.5" y="1091.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="856.5" y="1102.0"></text>
</g>
<g>
<title>_L_unlock_738 (2 samples, 0.15%)</title><rect x="855.2" y="1091.0" width="1.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="858.2" y="1102.0"></text>
</g>
<g>
<title>__lll_lock_wait (13 samples, 0.97%)</title><rect x="857.0" y="1091.0" width="11.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="860.0" y="1102.0"></text>
</g>
<g>
<title>__lll_unlock_wake (20 samples, 1.49%)</title><rect x="868.4" y="1091.0" width="17.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="871.4" y="1102.0"></text>
</g>
<g>
<title>__pthread_cond_wait (60 samples, 4.47%)</title><rect x="886.0" y="1091.0" width="52.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="889.0" y="1102.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.52%)</title><rect x="938.7" y="1091.0" width="6.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="941.7" y="1102.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="944.9" y="1091.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="947.9" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.07%)</title><rect x="945.7" y="1091.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="948.7" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.15%)</title><rect x="946.6" y="1091.0" width="1.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="949.6" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="948.4" y="1091.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="951.4" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.15%)</title><rect x="949.3" y="1091.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="952.3" y="1102.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="951.0" y="1091.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="954.0" y="1102.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.22%)</title><rect x="951.9" y="1091.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="954.9" y="1102.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (4 samples, 0.30%)</title><rect x="954.5" y="1091.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="957.5" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.22%)</title><rect x="958.0" y="1107.0" width="2.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="961.0" y="1118.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.15%)</title><rect x="960.7" y="1107.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="963.7" y="1118.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.07%)</title><rect x="962.4" y="1139.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="965.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (5 samples, 0.37%)</title><rect x="963.3" y="1155.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="966.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (5 samples, 0.37%)</title><rect x="963.3" y="1139.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="966.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (5 samples, 0.37%)</title><rect x="963.3" y="1123.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="966.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.37%)</title><rect x="967.7" y="1155.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="970.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.37%)</title><rect x="967.7" y="1139.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="970.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.15%)</title><rect x="970.3" y="1123.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="973.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.07%)</title><rect x="971.2" y="1107.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="974.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="972.1" y="1235.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="975.1" y="1246.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.07%)</title><rect x="972.1" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="975.1" y="1230.0"></text>
</g>
<g>
<title>start_thread (247 samples, 18.39%)</title><rect x="973.0" y="1235.0" width="217.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="976.0" y="1246.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (247 samples, 18.39%)</title><rect x="973.0" y="1219.0" width="217.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="976.0" y="1230.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (26 samples, 1.94%)</title><rect x="973.0" y="1203.0" width="22.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="976.0" y="1214.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (9 samples, 0.67%)</title><rect x="973.0" y="1187.0" width="7.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="976.0" y="1198.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.67%)</title><rect x="973.0" y="1171.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="976.0" y="1182.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.22%)</title><rect x="973.0" y="1155.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="976.0" y="1166.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.45%)</title><rect x="975.6" y="1155.0" width="5.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="978.6" y="1166.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.12%)</title><rect x="980.9" y="1187.0" width="13.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="983.9" y="1198.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.30%)</title><rect x="980.9" y="1171.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="983.9" y="1182.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="980.9" y="1155.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="983.9" y="1166.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.22%)</title><rect x="981.8" y="1155.0" width="2.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="984.8" y="1166.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.37%)</title><rect x="984.4" y="1171.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="987.4" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.15%)</title><rect x="984.4" y="1155.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="987.4" y="1166.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.15%)</title><rect x="984.4" y="1139.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.4" y="1150.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.15%)</title><rect x="984.4" y="1123.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="987.4" y="1134.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.15%)</title><rect x="984.4" y="1107.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="987.4" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.15%)</title><rect x="986.2" y="1155.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="989.2" y="1166.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.15%)</title><rect x="986.2" y="1139.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.2" y="1150.0"></text>
</g>
<g>
<title>ReferenceProcessor::weak_oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="987.9" y="1155.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="990.9" y="1166.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(unsigned int*) (1 samples, 0.07%)</title><rect x="987.9" y="1139.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="990.9" y="1150.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.45%)</title><rect x="988.8" y="1171.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="991.8" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.45%)</title><rect x="988.8" y="1155.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="991.8" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.30%)</title><rect x="988.8" y="1139.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="991.8" y="1150.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.30%)</title><rect x="988.8" y="1123.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="991.8" y="1134.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.30%)</title><rect x="988.8" y="1107.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="991.8" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.30%)</title><rect x="988.8" y="1091.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="991.8" y="1102.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.15%)</title><rect x="990.6" y="1075.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="993.6" y="1086.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.15%)</title><rect x="990.6" y="1059.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="993.6" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.15%)</title><rect x="992.3" y="1139.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.3" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.15%)</title><rect x="992.3" y="1123.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="995.3" y="1134.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.07%)</title><rect x="993.2" y="1107.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="996.2" y="1118.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.15%)</title><rect x="994.1" y="1187.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="997.1" y="1198.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.15%)</title><rect x="994.1" y="1171.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="997.1" y="1182.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.15%)</title><rect x="994.1" y="1155.0" width="1.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="997.1" y="1166.0"></text>
</g>
<g>
<title>JavaThread::run() (220 samples, 16.38%)</title><rect x="995.8" y="1203.0" width="193.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="998.8" y="1214.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (220 samples, 16.38%)</title><rect x="995.8" y="1187.0" width="193.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="998.8" y="1198.0">JavaThread::thread_main_i..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (218 samples, 16.23%)</title><rect x="995.8" y="1171.0" width="191.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="998.8" y="1182.0">CompileBroker::compiler_t..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (218 samples, 16.23%)</title><rect x="995.8" y="1155.0" width="191.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="998.8" y="1166.0">CompileBroker::invoke_com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (218 samples, 16.23%)</title><rect x="995.8" y="1139.0" width="191.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="998.8" y="1150.0">C2Compiler::compile_metho..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (218 samples, 16.23%)</title><rect x="995.8" y="1123.0" width="191.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="998.8" y="1134.0">Compile::Compile(ciEnv*, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (114 samples, 8.49%)</title><rect x="995.8" y="1107.0" width="100.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="998.8" y="1118.0">Compile::Cod..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.15%)</title><rect x="995.8" y="1091.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="998.8" y="1102.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.15%)</title><rect x="995.8" y="1075.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="998.8" y="1086.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.37%)</title><rect x="997.6" y="1091.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1000.6" y="1102.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.30%)</title><rect x="997.6" y="1075.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1000.6" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (3 samples, 0.22%)</title><rect x="997.6" y="1059.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1000.6" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.22%)</title><rect x="997.6" y="1043.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1000.6" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="1000.2" y="1059.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1003.2" y="1070.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.07%)</title><rect x="1000.2" y="1043.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1003.2" y="1054.0"></text>
</g>
<g>
<title>labelOper::label() const (1 samples, 0.07%)</title><rect x="1001.1" y="1075.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1004.1" y="1086.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 0.67%)</title><rect x="1002.0" y="1091.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1005.0" y="1102.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 0.67%)</title><rect x="1002.0" y="1075.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1005.0" y="1086.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.30%)</title><rect x="1002.9" y="1059.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1005.9" y="1070.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.07%)</title><rect x="1006.4" y="1059.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1009.4" y="1070.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.07%)</title><rect x="1006.4" y="1043.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1009.4" y="1054.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="1006.4" y="1027.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1009.4" y="1038.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1006.4" y="1011.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1009.4" y="1022.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.15%)</title><rect x="1007.2" y="1059.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1010.2" y="1070.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="1007.2" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1010.2" y="1054.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.07%)</title><rect x="1007.2" y="1027.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1010.2" y="1038.0"></text>
</g>
<g>
<title>MachTypeNode::MachTypeNode() (1 samples, 0.07%)</title><rect x="1007.2" y="1011.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1010.2" y="1022.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1007.2" y="995.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1010.2" y="1006.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1008.1" y="1043.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1011.1" y="1054.0"></text>
</g>
<g>
<title>MemBarNode::match(ProjNode const*, Matcher const*) (1 samples, 0.07%)</title><rect x="1009.0" y="1059.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1012.0" y="1070.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.07%)</title><rect x="1009.0" y="1043.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1012.0" y="1054.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="1009.9" y="1091.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1012.9" y="1102.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.07%)</title><rect x="1009.9" y="1075.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1012.9" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.30%)</title><rect x="1010.8" y="1091.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1013.8" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.30%)</title><rect x="1010.8" y="1075.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1013.8" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1010.8" y="1059.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1013.8" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1011.6" y="1059.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1014.6" y="1070.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="1011.6" y="1043.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1014.6" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.15%)</title><rect x="1012.5" y="1059.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1015.5" y="1070.0"></text>
</g>
<g>
<title>ConPNode::Opcode() const (1 samples, 0.07%)</title><rect x="1012.5" y="1043.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1015.5" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="1013.4" y="1043.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.4" y="1054.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::ideal_Opcode() const (1 samples, 0.07%)</title><rect x="1013.4" y="1027.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1016.4" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (93 samples, 6.92%)</title><rect x="1014.3" y="1091.0" width="81.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1017.3" y="1102.0">PhaseChai..</text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.07%)</title><rect x="1014.3" y="1075.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1017.3" y="1086.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1015.2" y="1075.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1018.2" y="1086.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.15%)</title><rect x="1016.0" y="1075.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1019.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.22%)</title><rect x="1017.8" y="1075.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1020.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.15%)</title><rect x="1018.7" y="1059.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1021.7" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (6 samples, 0.45%)</title><rect x="1020.4" y="1075.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1023.4" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="1020.4" y="1059.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1023.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (5 samples, 0.37%)</title><rect x="1021.3" y="1059.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.3" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.22%)</title><rect x="1023.1" y="1043.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1026.1" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (10 samples, 0.74%)</title><rect x="1025.7" y="1075.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1028.7" y="1086.0"></text>
</g>
<g>
<title>loadConPNode::rule() const (1 samples, 0.07%)</title><rect x="1033.6" y="1059.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1036.6" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 0.82%)</title><rect x="1034.5" y="1075.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.5" y="1086.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="1037.1" y="1059.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1040.1" y="1070.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.15%)</title><rect x="1038.0" y="1059.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1041.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.22%)</title><rect x="1039.8" y="1059.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1042.8" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="1042.4" y="1059.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1045.4" y="1070.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="1043.3" y="1059.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1046.3" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::compact() (1 samples, 0.07%)</title><rect x="1044.1" y="1075.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.45%)</title><rect x="1045.0" y="1075.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1048.0" y="1086.0"></text>
</g>
<g>
<title>RegMask::Size() const (4 samples, 0.30%)</title><rect x="1046.8" y="1059.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1049.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.15%)</title><rect x="1050.3" y="1075.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1053.3" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.52%)</title><rect x="1052.1" y="1075.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.1" y="1086.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.07%)</title><rect x="1053.8" y="1059.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1056.8" y="1070.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1054.7" y="1059.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1057.7" y="1070.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1054.7" y="1043.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1057.7" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.22%)</title><rect x="1055.6" y="1059.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1058.6" y="1070.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (22 samples, 1.64%)</title><rect x="1058.2" y="1075.0" width="19.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.2" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (22 samples, 1.64%)</title><rect x="1058.2" y="1059.0" width="19.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.2" y="1070.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (21 samples, 1.56%)</title><rect x="1059.1" y="1043.0" width="18.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1062.1" y="1054.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.15%)</title><rect x="1059.1" y="1027.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1062.1" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1060.0" y="1011.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1063.0" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (15 samples, 1.12%)</title><rect x="1060.8" y="1027.0" width="13.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1063.8" y="1038.0"></text>
</g>
<g>
<title>LRG::compute_degree(LRG&amp;) const (1 samples, 0.07%)</title><rect x="1073.1" y="1011.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (4 samples, 0.30%)</title><rect x="1074.0" y="1027.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1077.0" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1076.7" y="1011.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.22%)</title><rect x="1077.5" y="1075.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.15%)</title><rect x="1080.2" y="1075.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1083.2" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="1081.0" y="1059.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1084.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.15%)</title><rect x="1081.9" y="1075.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1084.9" y="1086.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1082.8" y="1059.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.8" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (12 samples, 0.89%)</title><rect x="1083.7" y="1075.0" width="10.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1086.7" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.30%)</title><rect x="1090.7" y="1059.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.7" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1093.4" y="1043.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.4" y="1054.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.07%)</title><rect x="1094.2" y="1075.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.2" y="1086.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.07%)</title><rect x="1094.2" y="1059.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.2" y="1070.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="1095.1" y="1075.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.1" y="1086.0"></text>
</g>
<g>
<title>Compile::Optimize() (88 samples, 6.55%)</title><rect x="1096.0" y="1107.0" width="77.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.0" y="1118.0">Compile::..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="1096.0" y="1091.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.0" y="1102.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="1096.0" y="1075.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.0" y="1086.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="1096.9" y="1091.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.9" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.15%)</title><rect x="1097.7" y="1091.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1100.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.15%)</title><rect x="1097.7" y="1075.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1100.7" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1097.7" y="1059.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.7" y="1070.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1097.7" y="1043.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1100.7" y="1054.0"></text>
</g>
<g>
<title>DecodeNKlassNode::Opcode() const (1 samples, 0.07%)</title><rect x="1098.6" y="1059.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.6" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.15%)</title><rect x="1099.5" y="1091.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.5" y="1102.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.07%)</title><rect x="1101.3" y="1091.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1104.3" y="1102.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.07%)</title><rect x="1101.3" y="1075.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.3" y="1086.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.07%)</title><rect x="1101.3" y="1059.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (69 samples, 5.14%)</title><rect x="1102.1" y="1091.0" width="60.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.1" y="1102.0">PhaseI..</text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1102.1" y="1075.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.1" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1103.0" y="1075.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.0" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1103.0" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.07%)</title><rect x="1103.0" y="1043.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.0" y="1054.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1103.0" y="1027.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1106.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.37%)</title><rect x="1103.9" y="1075.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.9" y="1086.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.15%)</title><rect x="1106.5" y="1059.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.22%)</title><rect x="1108.3" y="1075.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (53 samples, 3.95%)</title><rect x="1110.9" y="1075.0" width="46.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.9" y="1086.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (51 samples, 3.80%)</title><rect x="1112.7" y="1059.0" width="44.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.7" y="1070.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1114.4" y="1043.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (48 samples, 3.57%)</title><rect x="1115.3" y="1043.0" width="42.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.3" y="1054.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.07%)</title><rect x="1151.3" y="1027.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1151.3" y="1011.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.45%)</title><rect x="1152.2" y="1027.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.15%)</title><rect x="1157.5" y="1075.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.30%)</title><rect x="1159.2" y="1075.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.15%)</title><rect x="1161.0" y="1059.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.07%)</title><rect x="1161.0" y="1043.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1161.0" y="1027.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.07%)</title><rect x="1161.9" y="1043.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (12 samples, 0.89%)</title><rect x="1162.8" y="1091.0" width="10.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (12 samples, 0.89%)</title><rect x="1162.8" y="1075.0" width="10.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.8" y="1086.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1163.6" y="1059.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.6" y="1070.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1163.6" y="1043.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.6" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1164.5" y="1059.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.5" y="1070.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1164.5" y="1043.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.5" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1164.5" y="1027.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.5" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1164.5" y="1011.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.5" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1164.5" y="995.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1167.5" y="1006.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1165.4" y="1059.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.4" y="1070.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.07%)</title><rect x="1166.3" y="1059.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.3" y="1070.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.15%)</title><rect x="1167.2" y="1059.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.2" y="1070.0"></text>
</g>
<g>
<title>NodeHash::grow() (2 samples, 0.15%)</title><rect x="1167.2" y="1043.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.2" y="1054.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1168.0" y="1027.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1168.9" y="1059.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.15%)</title><rect x="1169.8" y="1059.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.8" y="1070.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1171.5" y="1059.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.5" y="1070.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1171.5" y="1043.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.5" y="1054.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1172.4" y="1059.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.4" y="1070.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.07%)</title><rect x="1172.4" y="1043.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.4" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 1.12%)</title><rect x="1173.3" y="1107.0" width="13.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.3" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 1.12%)</title><rect x="1173.3" y="1091.0" width="13.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 1.12%)</title><rect x="1173.3" y="1075.0" width="13.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 1.12%)</title><rect x="1173.3" y="1059.0" width="13.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (15 samples, 1.12%)</title><rect x="1173.3" y="1043.0" width="13.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 1.04%)</title><rect x="1173.3" y="1027.0" width="12.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.3" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.82%)</title><rect x="1173.3" y="1011.0" width="9.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.3" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.82%)</title><rect x="1173.3" y="995.0" width="9.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.82%)</title><rect x="1173.3" y="979.0" width="9.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.82%)</title><rect x="1173.3" y="963.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.82%)</title><rect x="1173.3" y="947.0" width="9.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.82%)</title><rect x="1173.3" y="931.0" width="9.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1173.3" y="915.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.37%)</title><rect x="1173.3" y="899.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.37%)</title><rect x="1173.3" y="883.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.37%)</title><rect x="1173.3" y="867.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.37%)</title><rect x="1173.3" y="851.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.37%)</title><rect x="1173.3" y="835.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.3" y="846.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1173.3" y="819.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.3" y="830.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1173.3" y="803.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.3" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1173.3" y="787.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.3" y="798.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1173.3" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.3" y="782.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.07%)</title><rect x="1173.3" y="755.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.30%)</title><rect x="1174.2" y="819.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.2" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.30%)</title><rect x="1174.2" y="803.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.2" y="814.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1174.2" y="787.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.2" y="798.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1174.2" y="771.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.2" y="782.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.07%)</title><rect x="1174.2" y="755.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.2" y="766.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1174.2" y="739.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.2" y="750.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1174.2" y="723.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.2" y="734.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1174.2" y="707.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1175.1" y="787.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1175.1" y="771.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1175.1" y="755.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1175.1" y="739.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.1" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.1" y="723.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.1" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.1" y="707.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.1" y="691.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.1" y="675.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.1" y="659.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1175.1" y="643.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.1" y="654.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1175.1" y="627.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.1" y="638.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1175.1" y="611.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.1" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1175.9" y="723.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1175.9" y="707.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1175.9" y="691.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1175.9" y="675.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1175.9" y="659.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1175.9" y="643.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1175.9" y="627.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1175.9" y="611.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1175.9" y="595.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1175.9" y="579.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1175.9" y="563.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1175.9" y="547.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1175.9" y="531.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1175.9" y="515.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1175.9" y="499.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1175.9" y="483.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1175.9" y="467.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1175.9" y="451.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1175.9" y="435.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.9" y="446.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1175.9" y="419.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.9" y="430.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1175.9" y="403.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.9" y="414.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.07%)</title><rect x="1175.9" y="387.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="398.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1175.9" y="371.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.9" y="382.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1175.9" y="355.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.9" y="366.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1175.9" y="339.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="419.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.8" y="403.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.8" y="387.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.8" y="371.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.8" y="355.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="366.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.07%)</title><rect x="1176.8" y="339.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.45%)</title><rect x="1177.7" y="915.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.45%)</title><rect x="1177.7" y="899.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.45%)</title><rect x="1177.7" y="883.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.45%)</title><rect x="1177.7" y="867.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.45%)</title><rect x="1177.7" y="851.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.45%)</title><rect x="1177.7" y="835.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.45%)</title><rect x="1177.7" y="819.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1177.7" y="803.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.37%)</title><rect x="1177.7" y="787.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.37%)</title><rect x="1177.7" y="771.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.37%)</title><rect x="1177.7" y="755.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.37%)</title><rect x="1177.7" y="739.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.37%)</title><rect x="1177.7" y="723.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1177.7" y="707.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.7" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.37%)</title><rect x="1177.7" y="691.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.37%)</title><rect x="1177.7" y="675.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.37%)</title><rect x="1177.7" y="659.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.37%)</title><rect x="1177.7" y="643.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.37%)</title><rect x="1177.7" y="627.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.7" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.37%)</title><rect x="1177.7" y="611.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.37%)</title><rect x="1177.7" y="595.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.37%)</title><rect x="1177.7" y="579.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.37%)</title><rect x="1177.7" y="563.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.37%)</title><rect x="1177.7" y="547.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.37%)</title><rect x="1177.7" y="531.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.30%)</title><rect x="1177.7" y="515.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.30%)</title><rect x="1177.7" y="499.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.30%)</title><rect x="1177.7" y="483.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.30%)</title><rect x="1177.7" y="467.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.30%)</title><rect x="1177.7" y="451.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.30%)</title><rect x="1177.7" y="435.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.30%)</title><rect x="1177.7" y="419.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1177.7" y="403.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1177.7" y="387.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1177.7" y="371.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1177.7" y="355.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1177.7" y="339.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1177.7" y="323.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1177.7" y="307.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1177.7" y="291.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1177.7" y="275.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1177.7" y="259.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1177.7" y="243.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1177.7" y="227.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1177.7" y="211.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.7" y="195.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.7" y="179.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.7" y="163.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1177.7" y="147.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="158.0"></text>
</g>
<g>
<title>Parse::Block::successor_for_bci(int) (1 samples, 0.07%)</title><rect x="1177.7" y="131.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="142.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1178.6" y="195.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.6" y="206.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1178.6" y="179.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1179.5" y="339.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1179.5" y="323.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.5" y="334.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.07%)</title><rect x="1179.5" y="307.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.5" y="318.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1179.5" y="291.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.5" y="302.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1179.5" y="275.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.5" y="286.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1179.5" y="259.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="270.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="1179.5" y="243.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="254.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.07%)</title><rect x="1179.5" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.5" y="238.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.07%)</title><rect x="1179.5" y="211.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.5" y="222.0"></text>
</g>
<g>
<title>ciField::ciField(fieldDescriptor*) (1 samples, 0.07%)</title><rect x="1179.5" y="195.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="206.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.07%)</title><rect x="1179.5" y="179.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="190.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1180.3" y="403.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="515.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="499.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="483.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="467.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="451.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="435.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="419.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.2" y="403.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="387.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="371.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="355.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="339.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="323.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.2" y="307.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="291.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="275.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="259.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="243.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="227.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.2" y="211.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="195.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="179.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="163.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="147.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="131.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="115.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="99.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="110.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1181.2" y="83.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="94.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="67.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="78.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.07%)</title><rect x="1181.2" y="51.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="62.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.07%)</title><rect x="1181.2" y="35.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="803.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.1" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="787.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.1" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.1" y="771.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.1" y="755.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.1" y="739.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.1" y="723.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.1" y="707.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="691.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.1" y="675.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.1" y="659.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.1" y="643.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.1" y="627.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.1" y="611.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="595.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.1" y="579.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.1" y="563.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.1" y="547.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.1" y="531.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.1" y="515.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="526.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1182.1" y="499.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="510.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1182.1" y="483.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.1" y="494.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1182.1" y="467.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.1" y="478.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1182.1" y="451.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1182.1" y="435.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1182.1" y="419.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.1" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1182.1" y="403.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.1" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1182.1" y="387.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1182.1" y="371.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.1" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1182.1" y="355.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.1" y="366.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1182.1" y="339.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1182.1" y="323.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1182.1" y="307.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.1" y="318.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1182.1" y="291.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1182.1" y="275.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.1" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1182.1" y="259.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1182.1" y="243.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="254.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.07%)</title><rect x="1182.1" y="227.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1183.0" y="1011.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.0" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.0" y="995.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.0" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1183.0" y="979.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1183.0" y="963.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1183.0" y="947.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1183.0" y="931.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1183.0" y="915.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.0" y="899.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1183.0" y="883.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1183.0" y="867.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.0" y="878.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.07%)</title><rect x="1183.0" y="851.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="862.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1183.0" y="835.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.0" y="846.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.07%)</title><rect x="1183.0" y="819.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="830.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1183.0" y="803.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="814.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1183.0" y="787.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.8" y="851.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.8" y="835.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.8" y="819.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.8" y="803.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.8" y="787.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.8" y="771.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.8" y="755.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.8" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.8" y="723.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.8" y="707.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.8" y="691.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.8" y="675.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.8" y="659.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.8" y="643.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.8" y="627.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.8" y="611.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.8" y="595.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.8" y="579.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.8" y="563.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.8" y="547.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.8" y="531.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="542.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1183.8" y="515.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="526.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1183.8" y="499.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="510.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.07%)</title><rect x="1183.8" y="483.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="494.0"></text>
</g>
<g>
<title>CounterData::is_CounterData() const (1 samples, 0.07%)</title><rect x="1183.8" y="467.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.8" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.7" y="995.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.7" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.7" y="979.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.7" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.7" y="963.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.7" y="947.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.7" y="931.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.7" y="915.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.7" y="899.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.7" y="910.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.7" y="883.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.7" y="894.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.7" y="867.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.7" y="878.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.07%)</title><rect x="1184.7" y="851.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.7" y="862.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.07%)</title><rect x="1184.7" y="835.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.7" y="846.0"></text>
</g>
<g>
<title>JVMState::clone_deep(Compile*) const (1 samples, 0.07%)</title><rect x="1184.7" y="819.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.7" y="830.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.07%)</title><rect x="1184.7" y="803.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1185.6" y="1027.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.6" y="1038.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.07%)</title><rect x="1185.6" y="1011.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.6" y="1022.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1185.6" y="995.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.6" y="1006.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="1185.6" y="979.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.6" y="990.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1186.5" y="1107.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.5" y="1118.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1186.5" y="1091.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1189.5" y="1102.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1187.4" y="1171.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.4" y="1182.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1188.2" y="1171.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.2" y="1182.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1188.2" y="1155.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.2" y="1166.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1188.2" y="1139.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.2" y="1150.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1188.2" y="1123.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1191.2" y="1134.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1188.2" y="1107.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.2" y="1118.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1188.2" y="1091.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.2" y="1102.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.07%)</title><rect x="1189.1" y="1203.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.1" y="1214.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.07%)</title><rect x="1189.1" y="1187.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.1" y="1198.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.07%)</title><rect x="1189.1" y="1171.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.1" y="1182.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.07%)</title><rect x="1189.1" y="1155.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.1" y="1166.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.07%)</title><rect x="1189.1" y="1139.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.1" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.07%)</title><rect x="1189.1" y="1123.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.1" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1189.1" y="1107.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.1" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::cleanup_after_oops_into_collection_set_do() (1 samples, 0.07%)</title><rect x="1189.1" y="1091.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.1" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::cleanUpCardTable() (1 samples, 0.07%)</title><rect x="1189.1" y="1075.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.1" y="1086.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.07%)</title><rect x="1189.1" y="1059.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.1" y="1070.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="1189.1" y="1043.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.1" y="1054.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="1189.1" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.1" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.07%)</title><rect x="1189.1" y="1011.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1192.1" y="1022.0"></text>
</g>
</g>
</svg>
