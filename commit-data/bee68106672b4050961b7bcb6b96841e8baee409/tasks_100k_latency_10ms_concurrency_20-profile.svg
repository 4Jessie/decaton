<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (275 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.36%)</title><rect x="10.0" y="483.0" width="4.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.36%)</title><rect x="10.0" y="467.0" width="4.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 10.18%)</title><rect x="14.3" y="483.0" width="120.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.3" y="494.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (28 samples, 10.18%)</title><rect x="14.3" y="467.0" width="120.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.3" y="478.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.36%)</title><rect x="14.3" y="451.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.3" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.36%)</title><rect x="14.3" y="435.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.3" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/51320506.accept (1 samples, 0.36%)</title><rect x="14.3" y="419.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.3" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.36%)</title><rect x="14.3" y="403.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.3" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.36%)</title><rect x="14.3" y="387.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.3" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.36%)</title><rect x="14.3" y="371.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.3" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.36%)</title><rect x="18.6" y="451.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.6" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.36%)</title><rect x="18.6" y="435.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.6" y="446.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 2.91%)</title><rect x="22.9" y="451.0" width="34.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.9" y="462.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1241035899.accept (8 samples, 2.91%)</title><rect x="22.9" y="435.0" width="34.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.9" y="446.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$70 (8 samples, 2.91%)</title><rect x="22.9" y="419.0" width="34.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.9" y="430.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (5 samples, 1.82%)</title><rect x="22.9" y="403.0" width="21.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.9" y="414.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (5 samples, 1.82%)</title><rect x="22.9" y="387.0" width="21.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.9" y="398.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (5 samples, 1.82%)</title><rect x="22.9" y="371.0" width="21.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.9" y="382.0">c..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 1.82%)</title><rect x="22.9" y="355.0" width="21.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.9" y="366.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 1.82%)</title><rect x="22.9" y="339.0" width="21.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.9" y="350.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 1.82%)</title><rect x="22.9" y="323.0" width="21.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.9" y="334.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.36%)</title><rect x="40.0" y="307.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.36%)</title><rect x="40.0" y="291.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.36%)</title><rect x="40.0" y="275.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.36%)</title><rect x="40.0" y="259.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.0" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.36%)</title><rect x="44.3" y="403.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.3" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="44.3" y="387.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="44.3" y="371.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.3" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.73%)</title><rect x="48.6" y="403.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="51.6" y="414.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.73%)</title><rect x="48.6" y="387.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.6" y="398.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.73%)</title><rect x="48.6" y="371.0" width="8.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="51.6" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (18 samples, 6.55%)</title><rect x="57.2" y="451.0" width="77.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="60.2" y="462.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (18 samples, 6.55%)</title><rect x="57.2" y="435.0" width="77.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.2" y="446.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 4.00%)</title><rect x="57.2" y="419.0" width="47.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="60.2" y="430.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.36%)</title><rect x="57.2" y="403.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.2" y="414.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.36%)</title><rect x="57.2" y="387.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="60.2" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.36%)</title><rect x="57.2" y="371.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="60.2" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.36%)</title><rect x="57.2" y="355.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="60.2" y="366.0"></text>
</g>
<g>
<title>ServiceUtil::visible_oop(oopDesc*) (1 samples, 0.36%)</title><rect x="57.2" y="339.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="60.2" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.73%)</title><rect x="61.5" y="403.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.5" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.73%)</title><rect x="61.5" y="387.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="64.5" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.36%)</title><rect x="61.5" y="371.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="64.5" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.36%)</title><rect x="61.5" y="355.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.5" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.36%)</title><rect x="61.5" y="339.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.5" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.36%)</title><rect x="61.5" y="323.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.5" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.36%)</title><rect x="61.5" y="307.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.5" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.36%)</title><rect x="61.5" y="291.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.5" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.36%)</title><rect x="61.5" y="275.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="64.5" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.36%)</title><rect x="61.5" y="259.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="64.5" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.36%)</title><rect x="61.5" y="243.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.5" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.36%)</title><rect x="61.5" y="227.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="64.5" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.36%)</title><rect x="61.5" y="211.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.5" y="222.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.36%)</title><rect x="61.5" y="195.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.36%)</title><rect x="61.5" y="179.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.5" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.36%)</title><rect x="61.5" y="163.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (1 samples, 0.36%)</title><rect x="61.5" y="147.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.36%)</title><rect x="61.5" y="131.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.36%)</title><rect x="61.5" y="115.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.5" y="126.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.36%)</title><rect x="61.5" y="99.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.5" y="110.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.36%)</title><rect x="61.5" y="83.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.5" y="94.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (1 samples, 0.36%)</title><rect x="61.5" y="67.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.5" y="78.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.update (1 samples, 0.36%)</title><rect x="65.8" y="371.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.8" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 2.18%)</title><rect x="70.1" y="403.0" width="25.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="73.1" y="414.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 2.18%)</title><rect x="70.1" y="387.0" width="25.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="73.1" y="398.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (6 samples, 2.18%)</title><rect x="70.1" y="371.0" width="25.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="73.1" y="382.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (6 samples, 2.18%)</title><rect x="70.1" y="355.0" width="25.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.1" y="366.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.36%)</title><rect x="78.7" y="339.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="81.7" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.36%)</title><rect x="78.7" y="323.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.7" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.36%)</title><rect x="78.7" y="307.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.7" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.36%)</title><rect x="78.7" y="291.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.7" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.36%)</title><rect x="78.7" y="275.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="81.7" y="286.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.36%)</title><rect x="78.7" y="259.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.7" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 1.09%)</title><rect x="82.9" y="339.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.9" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.36%)</title><rect x="82.9" y="323.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.9" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.73%)</title><rect x="87.2" y="323.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="90.2" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.73%)</title><rect x="87.2" y="307.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.2" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.73%)</title><rect x="87.2" y="291.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.2" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.73%)</title><rect x="95.8" y="403.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.8" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.36%)</title><rect x="100.1" y="387.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="103.1" y="398.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.36%)</title><rect x="100.1" y="371.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="103.1" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/183456992.accept (1 samples, 0.36%)</title><rect x="100.1" y="355.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.1" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.36%)</title><rect x="100.1" y="339.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.1" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.36%)</title><rect x="100.1" y="323.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.1" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.36%)</title><rect x="100.1" y="307.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="103.1" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.36%)</title><rect x="100.1" y="291.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="103.1" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="100.1" y="275.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.1" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="100.1" y="259.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.1" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 1.45%)</title><rect x="104.4" y="419.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="107.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.73%)</title><rect x="104.4" y="403.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="107.4" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.73%)</title><rect x="104.4" y="387.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.4" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.36%)</title><rect x="108.7" y="371.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="111.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.36%)</title><rect x="108.7" y="355.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="111.7" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.36%)</title><rect x="108.7" y="339.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="111.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.36%)</title><rect x="108.7" y="323.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.7" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.36%)</title><rect x="108.7" y="307.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.7" y="318.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.36%)</title><rect x="108.7" y="291.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="111.7" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.73%)</title><rect x="113.0" y="403.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="116.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.36%)</title><rect x="113.0" y="387.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="116.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.36%)</title><rect x="113.0" y="371.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="116.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.36%)</title><rect x="117.3" y="387.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="120.3" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.36%)</title><rect x="117.3" y="371.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="120.3" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.36%)</title><rect x="121.6" y="419.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="124.6" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.36%)</title><rect x="121.6" y="403.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.6" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.36%)</title><rect x="121.6" y="387.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.6" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.36%)</title><rect x="121.6" y="371.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="124.6" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.36%)</title><rect x="121.6" y="355.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="124.6" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.36%)</title><rect x="121.6" y="339.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="124.6" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.36%)</title><rect x="121.6" y="323.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="124.6" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.36%)</title><rect x="121.6" y="307.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="124.6" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.36%)</title><rect x="121.6" y="291.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="124.6" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.36%)</title><rect x="121.6" y="275.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="124.6" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.36%)</title><rect x="121.6" y="259.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="124.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.36%)</title><rect x="121.6" y="243.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="124.6" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.36%)</title><rect x="121.6" y="227.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="124.6" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.73%)</title><rect x="125.9" y="419.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="128.9" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.73%)</title><rect x="125.9" y="403.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="128.9" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.73%)</title><rect x="125.9" y="387.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="128.9" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.36%)</title><rect x="130.1" y="371.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.1" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.36%)</title><rect x="130.1" y="355.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="133.1" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.36%)</title><rect x="130.1" y="339.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="133.1" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.36%)</title><rect x="130.1" y="323.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="133.1" y="334.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.36%)</title><rect x="130.1" y="307.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="133.1" y="318.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.36%)</title><rect x="130.1" y="291.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="133.1" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.36%)</title><rect x="130.1" y="275.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="133.1" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.36%)</title><rect x="130.1" y="259.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="133.1" y="270.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.36%)</title><rect x="130.1" y="243.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="133.1" y="254.0"></text>
</g>
<g>
<title>java/lang/Thread.run (211 samples, 76.73%)</title><rect x="134.4" y="483.0" width="905.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="137.4" y="494.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (211 samples, 76.73%)</title><rect x="134.4" y="467.0" width="905.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="137.4" y="478.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (211 samples, 76.73%)</title><rect x="134.4" y="451.0" width="905.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="137.4" y="462.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1675355831.run (198 samples, 72.00%)</title><rect x="134.4" y="435.0" width="849.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="137.4" y="446.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1675355831.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$58 (198 samples, 72.00%)</title><rect x="134.4" y="419.0" width="849.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="137.4" y="430.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$58</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (198 samples, 72.00%)</title><rect x="134.4" y="403.0" width="849.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="137.4" y="414.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (193 samples, 70.18%)</title><rect x="134.4" y="387.0" width="828.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="137.4" y="398.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (36 samples, 13.09%)</title><rect x="138.7" y="371.0" width="154.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="141.7" y="382.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/580718781.extract (36 samples, 13.09%)</title><rect x="138.7" y="355.0" width="154.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="141.7" y="366.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (36 samples, 13.09%)</title><rect x="138.7" y="339.0" width="154.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="141.7" y="350.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 13.09%)</title><rect x="138.7" y="323.0" width="154.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="141.7" y="334.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 13.09%)</title><rect x="138.7" y="307.0" width="154.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="141.7" y="318.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (36 samples, 13.09%)</title><rect x="138.7" y="291.0" width="154.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="141.7" y="302.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (18 samples, 6.55%)</title><rect x="138.7" y="275.0" width="77.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.7" y="286.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (12 samples, 4.36%)</title><rect x="138.7" y="259.0" width="51.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="141.7" y="270.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (12 samples, 4.36%)</title><rect x="138.7" y="243.0" width="51.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="141.7" y="254.0">com/f..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.09%)</title><rect x="164.5" y="227.0" width="12.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="167.5" y="238.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.09%)</title><rect x="164.5" y="211.0" width="12.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="167.5" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.36%)</title><rect x="177.3" y="227.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="180.3" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.73%)</title><rect x="181.6" y="227.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="184.6" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.73%)</title><rect x="181.6" y="211.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="184.6" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.73%)</title><rect x="181.6" y="195.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.6" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.73%)</title><rect x="181.6" y="179.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.6" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.73%)</title><rect x="181.6" y="163.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.6" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 2.18%)</title><rect x="190.2" y="259.0" width="25.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.2" y="270.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (1 samples, 0.36%)</title><rect x="190.2" y="243.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="193.2" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 1.82%)</title><rect x="194.5" y="243.0" width="21.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="197.5" y="254.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 1.09%)</title><rect x="194.5" y="227.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.5" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="194.5" y="211.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="197.5" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="194.5" y="195.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="197.5" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="194.5" y="179.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="197.5" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.73%)</title><rect x="198.8" y="211.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.8" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.73%)</title><rect x="198.8" y="195.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.8" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.73%)</title><rect x="207.4" y="227.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.4" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.36%)</title><rect x="211.7" y="211.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.7" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="211.7" y="195.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="214.7" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.36%)</title><rect x="211.7" y="179.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="214.7" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (13 samples, 4.73%)</title><rect x="216.0" y="275.0" width="55.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.0" y="286.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.36%)</title><rect x="216.0" y="259.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.0" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.36%)</title><rect x="216.0" y="243.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.0" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.36%)</title><rect x="216.0" y="227.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.0" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.36%)</title><rect x="220.3" y="259.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.36%)</title><rect x="220.3" y="243.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.36%)</title><rect x="220.3" y="227.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.3" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.45%)</title><rect x="224.5" y="259.0" width="17.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.5" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.45%)</title><rect x="224.5" y="243.0" width="17.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.5" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.36%)</title><rect x="233.1" y="227.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.1" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.36%)</title><rect x="233.1" y="211.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.1" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.36%)</title><rect x="237.4" y="227.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.4" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (7 samples, 2.55%)</title><rect x="241.7" y="259.0" width="30.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.7" y="270.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.36%)</title><rect x="241.7" y="243.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.7" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.36%)</title><rect x="241.7" y="227.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.7" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.36%)</title><rect x="241.7" y="211.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.7" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.36%)</title><rect x="241.7" y="195.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.7" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 2.18%)</title><rect x="246.0" y="243.0" width="25.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="249.0" y="254.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 1.82%)</title><rect x="250.3" y="227.0" width="21.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.3" y="238.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 1.82%)</title><rect x="250.3" y="211.0" width="21.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.3" y="222.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.36%)</title><rect x="263.2" y="195.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.2" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.36%)</title><rect x="263.2" y="179.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.2" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.36%)</title><rect x="267.5" y="195.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.5" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.36%)</title><rect x="267.5" y="179.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.5" y="190.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="267.5" y="163.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="270.5" y="174.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="267.5" y="147.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="270.5" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="267.5" y="131.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="270.5" y="142.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="267.5" y="115.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="270.5" y="126.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.36%)</title><rect x="267.5" y="99.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="270.5" y="110.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.36%)</title><rect x="267.5" y="83.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="270.5" y="94.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.36%)</title><rect x="267.5" y="67.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="270.5" y="78.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.36%)</title><rect x="267.5" y="51.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="270.5" y="62.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.36%)</title><rect x="267.5" y="35.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="270.5" y="46.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 1.82%)</title><rect x="271.7" y="275.0" width="21.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.7" y="286.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 1.82%)</title><rect x="271.7" y="259.0" width="21.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.7" y="270.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 1.82%)</title><rect x="271.7" y="243.0" width="21.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.7" y="254.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.36%)</title><rect x="271.7" y="227.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.7" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 1.45%)</title><rect x="276.0" y="227.0" width="17.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 1.45%)</title><rect x="276.0" y="211.0" width="17.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.0" y="222.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (143 samples, 52.00%)</title><rect x="293.2" y="371.0" width="613.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.2" y="382.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (32 samples, 11.64%)</title><rect x="293.2" y="355.0" width="137.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.2" y="366.0">com/linecorp/deca..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (27 samples, 9.82%)</title><rect x="314.7" y="339.0" width="115.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.7" y="350.0">org/slf4j/MDC...</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (22 samples, 8.00%)</title><rect x="336.1" y="323.0" width="94.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="339.1" y="334.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.36%)</title><rect x="340.4" y="307.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="343.4" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.36%)</title><rect x="340.4" y="291.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="343.4" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.36%)</title><rect x="340.4" y="275.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="343.4" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.36%)</title><rect x="340.4" y="259.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="343.4" y="270.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (20 samples, 7.27%)</title><rect x="344.7" y="307.0" width="85.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="347.7" y="318.0">java/util/..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 2.91%)</title><rect x="396.2" y="291.0" width="34.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="399.2" y="302.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 2.91%)</title><rect x="396.2" y="275.0" width="34.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="399.2" y="286.0">ja..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.36%)</title><rect x="426.2" y="259.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="429.2" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.73%)</title><rect x="430.5" y="355.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="433.5" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.73%)</title><rect x="430.5" y="339.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="433.5" y="350.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.73%)</title><rect x="430.5" y="323.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="433.5" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="434.8" y="307.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="437.8" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="434.8" y="291.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="437.8" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="434.8" y="275.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="437.8" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="434.8" y="259.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="437.8" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.36%)</title><rect x="434.8" y="243.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="437.8" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (28 samples, 10.18%)</title><rect x="439.1" y="355.0" width="120.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="442.1" y="366.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (28 samples, 10.18%)</title><rect x="439.1" y="339.0" width="120.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="442.1" y="350.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (9 samples, 3.27%)</title><rect x="439.1" y="323.0" width="38.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="442.1" y="334.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 3.27%)</title><rect x="439.1" y="307.0" width="38.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="442.1" y="318.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 2.18%)</title><rect x="443.4" y="291.0" width="25.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="446.4" y="302.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 1.82%)</title><rect x="443.4" y="275.0" width="21.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="446.4" y="286.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 1.82%)</title><rect x="443.4" y="259.0" width="21.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="446.4" y="270.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 1.82%)</title><rect x="443.4" y="243.0" width="21.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="446.4" y="254.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.36%)</title><rect x="460.5" y="227.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="463.5" y="238.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.36%)</title><rect x="460.5" y="211.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="463.5" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="460.5" y="195.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="463.5" y="206.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.36%)</title><rect x="460.5" y="179.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="463.5" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.36%)</title><rect x="460.5" y="163.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="463.5" y="174.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.36%)</title><rect x="460.5" y="147.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="463.5" y="158.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.36%)</title><rect x="460.5" y="131.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="463.5" y="142.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.36%)</title><rect x="464.8" y="275.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="467.8" y="286.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.73%)</title><rect x="469.1" y="291.0" width="8.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="472.1" y="302.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (19 samples, 6.91%)</title><rect x="477.7" y="323.0" width="81.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="480.7" y="334.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (16 samples, 5.82%)</title><rect x="490.6" y="307.0" width="68.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="493.6" y="318.0">ch/qos/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.73%)</title><rect x="490.6" y="291.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="493.6" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.73%)</title><rect x="490.6" y="275.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="493.6" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.73%)</title><rect x="490.6" y="259.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="493.6" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.73%)</title><rect x="490.6" y="243.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="493.6" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.73%)</title><rect x="490.6" y="227.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="493.6" y="238.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (14 samples, 5.09%)</title><rect x="499.2" y="291.0" width="60.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.2" y="302.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (14 samples, 5.09%)</title><rect x="499.2" y="275.0" width="60.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="502.2" y="286.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 3.27%)</title><rect x="520.6" y="259.0" width="38.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="523.6" y="270.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.36%)</title><rect x="529.2" y="243.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="532.2" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 1.82%)</title><rect x="533.5" y="243.0" width="21.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="536.5" y="254.0">j..</text>
</g>
<g>
<title>vtable stub (1 samples, 0.36%)</title><rect x="554.9" y="243.0" width="4.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="557.9" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (69 samples, 25.09%)</title><rect x="559.2" y="355.0" width="296.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="562.2" y="366.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (69 samples, 25.09%)</title><rect x="559.2" y="339.0" width="296.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="562.2" y="350.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1895118244.process (56 samples, 20.36%)</title><rect x="580.7" y="323.0" width="240.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.7" y="334.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (56 samples, 20.36%)</title><rect x="580.7" y="307.0" width="240.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="583.7" y="318.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (56 samples, 20.36%)</title><rect x="580.7" y="291.0" width="240.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="583.7" y="302.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.73%)</title><rect x="589.3" y="275.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="592.3" y="286.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.73%)</title><rect x="589.3" y="259.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="592.3" y="270.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.73%)</title><rect x="589.3" y="243.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="592.3" y="254.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.73%)</title><rect x="589.3" y="227.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="592.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.36%)</title><rect x="593.6" y="211.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="596.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.36%)</title><rect x="593.6" y="195.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="596.6" y="206.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (51 samples, 18.55%)</title><rect x="597.9" y="275.0" width="218.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="600.9" y="286.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>java/lang/Thread.sleep (49 samples, 17.82%)</title><rect x="597.9" y="259.0" width="210.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="600.9" y="270.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.36%)</title><rect x="623.6" y="243.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="626.6" y="254.0"></text>
</g>
<g>
<title>JVM_Sleep (41 samples, 14.91%)</title><rect x="627.9" y="243.0" width="175.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="630.9" y="254.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.73%)</title><rect x="657.9" y="227.0" width="8.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="660.9" y="238.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="666.5" y="227.0" width="4.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="669.5" y="238.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.09%)</title><rect x="670.8" y="227.0" width="12.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="673.8" y="238.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.73%)</title><rect x="675.1" y="211.0" width="8.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="678.1" y="222.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.73%)</title><rect x="683.7" y="227.0" width="8.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="686.7" y="238.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (26 samples, 9.45%)</title><rect x="692.3" y="227.0" width="111.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="695.3" y="238.0">os::sleep(Thr..</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.36%)</title><rect x="735.2" y="211.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="738.2" y="222.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.73%)</title><rect x="739.5" y="211.0" width="8.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="742.5" y="222.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.73%)</title><rect x="739.5" y="195.0" width="8.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="742.5" y="206.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.36%)</title><rect x="748.0" y="211.0" width="4.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="751.0" y="222.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (8 samples, 2.91%)</title><rect x="752.3" y="211.0" width="34.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="755.3" y="222.0">__..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.36%)</title><rect x="786.7" y="211.0" width="4.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="789.7" y="222.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.36%)</title><rect x="790.9" y="211.0" width="4.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="793.9" y="222.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.36%)</title><rect x="795.2" y="211.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="798.2" y="222.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.36%)</title><rect x="799.5" y="211.0" width="4.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="802.5" y="222.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.36%)</title><rect x="803.8" y="243.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="806.8" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.73%)</title><rect x="808.1" y="259.0" width="8.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="811.1" y="270.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.73%)</title><rect x="808.1" y="243.0" width="8.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="811.1" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.36%)</title><rect x="816.7" y="275.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="819.7" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="821.0" y="323.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="824.0" y="334.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.36%)</title><rect x="821.0" y="307.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="824.0" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1172131546.linkToTargetMethod (1 samples, 0.36%)</title><rect x="825.3" y="323.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="828.3" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.36%)</title><rect x="825.3" y="307.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="828.3" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/1872420125.get$Lambda (1 samples, 0.36%)</title><rect x="825.3" y="291.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="828.3" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="825.3" y="275.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="828.3" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="825.3" y="259.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="828.3" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="825.3" y="243.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="828.3" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="825.3" y="227.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="828.3" y="238.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.36%)</title><rect x="825.3" y="211.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="828.3" y="222.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.36%)</title><rect x="829.6" y="323.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="832.6" y="334.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.36%)</title><rect x="829.6" y="307.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="832.6" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.73%)</title><rect x="833.9" y="323.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="836.9" y="334.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.73%)</title><rect x="833.9" y="307.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="836.9" y="318.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.36%)</title><rect x="833.9" y="291.0" width="4.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="836.9" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.36%)</title><rect x="838.1" y="291.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="841.1" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.36%)</title><rect x="842.4" y="323.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="845.4" y="334.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.36%)</title><rect x="842.4" y="307.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="845.4" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.73%)</title><rect x="846.7" y="323.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="849.7" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="846.7" y="307.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="849.7" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="846.7" y="291.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="849.7" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="846.7" y="275.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="849.7" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="846.7" y="259.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="849.7" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.36%)</title><rect x="851.0" y="307.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="854.0" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="851.0" y="291.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="854.0" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="851.0" y="275.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="854.0" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="851.0" y="259.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="854.0" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="851.0" y="243.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="854.0" y="254.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.36%)</title><rect x="851.0" y="227.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="854.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 4.36%)</title><rect x="855.3" y="355.0" width="51.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="858.3" y="366.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.45%)</title><rect x="889.6" y="339.0" width="17.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="892.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.45%)</title><rect x="889.6" y="323.0" width="17.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="892.6" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/1470797647.accept (4 samples, 1.45%)</title><rect x="889.6" y="307.0" width="17.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="892.6" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (4 samples, 1.45%)</title><rect x="889.6" y="291.0" width="17.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="892.6" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/329528017.complete (4 samples, 1.45%)</title><rect x="889.6" y="275.0" width="17.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="892.6" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (4 samples, 1.45%)</title><rect x="889.6" y="259.0" width="17.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="892.6" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1677017611.complete (4 samples, 1.45%)</title><rect x="889.6" y="243.0" width="17.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="892.6" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$55 (4 samples, 1.45%)</title><rect x="889.6" y="227.0" width="17.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="892.6" y="238.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (4 samples, 1.45%)</title><rect x="889.6" y="211.0" width="17.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="892.6" y="222.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.45%)</title><rect x="889.6" y="195.0" width="17.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="892.6" y="206.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.45%)</title><rect x="889.6" y="179.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="892.6" y="190.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="902.5" y="163.0" width="4.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="905.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 4.73%)</title><rect x="906.8" y="371.0" width="55.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="909.8" y="382.0">java/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (3 samples, 1.09%)</title><rect x="919.7" y="355.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="922.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 2.55%)</title><rect x="932.5" y="355.0" width="30.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="935.5" y="366.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 2.55%)</title><rect x="932.5" y="339.0" width="30.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="935.5" y="350.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/1470797647.accept (7 samples, 2.55%)</title><rect x="932.5" y="323.0" width="30.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="935.5" y="334.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (7 samples, 2.55%)</title><rect x="932.5" y="307.0" width="30.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="935.5" y="318.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/329528017.complete (7 samples, 2.55%)</title><rect x="932.5" y="291.0" width="30.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="935.5" y="302.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (7 samples, 2.55%)</title><rect x="932.5" y="275.0" width="30.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="935.5" y="286.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1677017611.complete (7 samples, 2.55%)</title><rect x="932.5" y="259.0" width="30.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="935.5" y="270.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$55 (7 samples, 2.55%)</title><rect x="932.5" y="243.0" width="30.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="935.5" y="254.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (7 samples, 2.55%)</title><rect x="932.5" y="227.0" width="30.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="935.5" y="238.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 2.55%)</title><rect x="932.5" y="211.0" width="30.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="935.5" y="222.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 2.55%)</title><rect x="932.5" y="195.0" width="30.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="935.5" y="206.0">ch..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.36%)</title><rect x="962.6" y="387.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="965.6" y="398.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.36%)</title><rect x="962.6" y="371.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="965.6" y="382.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.36%)</title><rect x="962.6" y="355.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="965.6" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="962.6" y="339.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="965.6" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="962.6" y="323.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="965.6" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="962.6" y="307.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="965.6" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="962.6" y="291.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="965.6" y="302.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.36%)</title><rect x="962.6" y="275.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="965.6" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 1.45%)</title><rect x="966.9" y="387.0" width="17.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="969.9" y="398.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="975.5" y="371.0" width="4.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="978.5" y="382.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="975.5" y="355.0" width="4.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="978.5" y="366.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.36%)</title><rect x="979.7" y="371.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="982.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.73%)</title><rect x="984.0" y="435.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="987.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.73%)</title><rect x="984.0" y="419.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="987.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.73%)</title><rect x="984.0" y="403.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="987.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.73%)</title><rect x="984.0" y="387.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="987.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 4.00%)</title><rect x="992.6" y="435.0" width="47.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="995.6" y="446.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (11 samples, 4.00%)</title><rect x="992.6" y="419.0" width="47.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="995.6" y="430.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (6 samples, 2.18%)</title><rect x="992.6" y="403.0" width="25.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="995.6" y="414.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 2.18%)</title><rect x="992.6" y="387.0" width="25.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="995.6" y="398.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 2.18%)</title><rect x="992.6" y="371.0" width="25.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="995.6" y="382.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 2.18%)</title><rect x="992.6" y="355.0" width="25.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="995.6" y="366.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 2.18%)</title><rect x="992.6" y="339.0" width="25.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="995.6" y="350.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 1.82%)</title><rect x="1018.4" y="403.0" width="21.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1021.4" y="414.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.82%)</title><rect x="1018.4" y="387.0" width="21.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1021.4" y="398.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.82%)</title><rect x="1018.4" y="371.0" width="21.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1021.4" y="382.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.82%)</title><rect x="1018.4" y="355.0" width="21.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1021.4" y="366.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.73%)</title><rect x="1039.8" y="483.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1042.8" y="494.0"></text>
</g>
<g>
<title>java/lang/Object.wait (2 samples, 0.73%)</title><rect x="1039.8" y="467.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1042.8" y="478.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.36%)</title><rect x="1044.1" y="451.0" width="4.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1047.1" y="462.0"></text>
</g>
<g>
<title>start_thread (33 samples, 12.00%)</title><rect x="1048.4" y="483.0" width="141.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1051.4" y="494.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (33 samples, 12.00%)</title><rect x="1048.4" y="467.0" width="141.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1051.4" y="478.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 6.55%)</title><rect x="1048.4" y="451.0" width="77.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1051.4" y="462.0">GangWorke..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 6.55%)</title><rect x="1048.4" y="435.0" width="77.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1051.4" y="446.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 4.73%)</title><rect x="1048.4" y="419.0" width="55.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1051.4" y="430.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (11 samples, 4.00%)</title><rect x="1057.0" y="403.0" width="47.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1060.0" y="414.0">G1Pa..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.36%)</title><rect x="1061.3" y="387.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1064.3" y="398.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 2.18%)</title><rect x="1065.6" y="387.0" width="25.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1068.6" y="398.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (4 samples, 1.45%)</title><rect x="1074.1" y="371.0" width="17.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1077.1" y="382.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.36%)</title><rect x="1091.3" y="387.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1094.3" y="398.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.73%)</title><rect x="1095.6" y="387.0" width="8.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1098.6" y="398.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 1.82%)</title><rect x="1104.2" y="419.0" width="21.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.2" y="430.0">G..</text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 1.82%)</title><rect x="1104.2" y="403.0" width="21.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.2" y="414.0">G..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 1.82%)</title><rect x="1104.2" y="387.0" width="21.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.2" y="398.0">G..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 1.82%)</title><rect x="1104.2" y="371.0" width="21.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.2" y="382.0">D..</text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 1.82%)</title><rect x="1104.2" y="355.0" width="21.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1107.2" y="366.0">R..</text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 1.82%)</title><rect x="1104.2" y="339.0" width="21.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1107.2" y="350.0">G..</text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.73%)</title><rect x="1117.1" y="323.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.1" y="334.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (2 samples, 0.73%)</title><rect x="1117.1" y="307.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.1" y="318.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (2 samples, 0.73%)</title><rect x="1117.1" y="291.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.1" y="302.0"></text>
</g>
<g>
<title>JavaThread::run() (14 samples, 5.09%)</title><rect x="1125.6" y="451.0" width="60.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.6" y="462.0">JavaTh..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (14 samples, 5.09%)</title><rect x="1125.6" y="435.0" width="60.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.6" y="446.0">JavaTh..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (14 samples, 5.09%)</title><rect x="1125.6" y="419.0" width="60.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.6" y="430.0">Compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (14 samples, 5.09%)</title><rect x="1125.6" y="403.0" width="60.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.6" y="414.0">Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (12 samples, 4.36%)</title><rect x="1125.6" y="387.0" width="51.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.6" y="398.0">C2Com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (12 samples, 4.36%)</title><rect x="1125.6" y="371.0" width="51.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.6" y="382.0">Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (6 samples, 2.18%)</title><rect x="1125.6" y="355.0" width="25.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.6" y="366.0">C..</text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (6 samples, 2.18%)</title><rect x="1125.6" y="339.0" width="25.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.6" y="350.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.36%)</title><rect x="1125.6" y="323.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.6" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.36%)</title><rect x="1129.9" y="323.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.9" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.36%)</title><rect x="1134.2" y="323.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.2" y="334.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.36%)</title><rect x="1134.2" y="307.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.2" y="318.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.36%)</title><rect x="1138.5" y="323.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.5" y="334.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.36%)</title><rect x="1138.5" y="307.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.5" y="318.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.36%)</title><rect x="1142.8" y="323.0" width="4.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1145.8" y="334.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.36%)</title><rect x="1147.1" y="323.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.1" y="334.0"></text>
</g>
<g>
<title>Compile::Optimize() (5 samples, 1.82%)</title><rect x="1151.4" y="355.0" width="21.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.4" y="366.0">C..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (2 samples, 0.73%)</title><rect x="1151.4" y="339.0" width="8.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.4" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.36%)</title><rect x="1151.4" y="323.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.4" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.36%)</title><rect x="1151.4" y="307.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.4" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.36%)</title><rect x="1151.4" y="291.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.4" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.36%)</title><rect x="1151.4" y="275.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.4" y="286.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.36%)</title><rect x="1155.7" y="323.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.7" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.36%)</title><rect x="1155.7" y="307.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.7" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.36%)</title><rect x="1155.7" y="291.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.7" y="302.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.36%)</title><rect x="1155.7" y="275.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.7" y="286.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (2 samples, 0.73%)</title><rect x="1160.0" y="339.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.0" y="350.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.36%)</title><rect x="1164.3" y="323.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.3" y="334.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.36%)</title><rect x="1168.5" y="339.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.5" y="350.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.36%)</title><rect x="1168.5" y="323.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.5" y="334.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.36%)</title><rect x="1168.5" y="307.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.5" y="318.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.36%)</title><rect x="1172.8" y="355.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.8" y="366.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.36%)</title><rect x="1172.8" y="339.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.8" y="350.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.73%)</title><rect x="1177.1" y="387.0" width="8.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="398.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.73%)</title><rect x="1177.1" y="371.0" width="8.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.1" y="382.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.73%)</title><rect x="1177.1" y="355.0" width="8.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="366.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.73%)</title><rect x="1177.1" y="339.0" width="8.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="350.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.36%)</title><rect x="1177.1" y="323.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="334.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.36%)</title><rect x="1177.1" y="307.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="318.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.36%)</title><rect x="1177.1" y="291.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="302.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.36%)</title><rect x="1177.1" y="275.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="286.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.36%)</title><rect x="1177.1" y="259.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="270.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.36%)</title><rect x="1177.1" y="243.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="254.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.36%)</title><rect x="1177.1" y="227.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.1" y="238.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.36%)</title><rect x="1177.1" y="211.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="222.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.36%)</title><rect x="1177.1" y="195.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="206.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.36%)</title><rect x="1177.1" y="179.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="190.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.36%)</title><rect x="1177.1" y="163.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="174.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.36%)</title><rect x="1177.1" y="147.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="158.0"></text>
</g>
<g>
<title>Metadata::is_method() const volatile (1 samples, 0.36%)</title><rect x="1177.1" y="131.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.1" y="142.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.36%)</title><rect x="1181.4" y="323.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.4" y="334.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.36%)</title><rect x="1181.4" y="307.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.4" y="318.0"></text>
</g>
<g>
<title>ObjectSynchronizer::current_thread_holds_lock(JavaThread*, Handle) (1 samples, 0.36%)</title><rect x="1181.4" y="291.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.4" y="302.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.36%)</title><rect x="1185.7" y="451.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.7" y="462.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.36%)</title><rect x="1185.7" y="435.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.7" y="446.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.36%)</title><rect x="1185.7" y="419.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.7" y="430.0"></text>
</g>
</g>
</svg>
