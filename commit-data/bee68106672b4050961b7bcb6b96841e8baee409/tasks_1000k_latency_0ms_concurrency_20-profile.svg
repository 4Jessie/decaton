<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,603 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="2035.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="2019.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="2003.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1987.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1971.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1955.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1939.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1923.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1907.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1891.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1875.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1859.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1843.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1827.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1811.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1795.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1779.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1763.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1747.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1731.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1715.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1699.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1683.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1667.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1651.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1635.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1619.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1603.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1587.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1571.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1555.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1539.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1523.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1507.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1491.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1475.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1459.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1443.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1427.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1411.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1395.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1379.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1363.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1347.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1331.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1315.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1299.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1283.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1267.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1251.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1235.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1219.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1203.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1187.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1171.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1155.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1139.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1123.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1107.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1091.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1075.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1059.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1043.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1027.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="1011.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="995.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="979.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="963.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="947.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="931.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="915.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="899.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="883.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="867.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="851.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="835.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="819.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="803.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="787.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="771.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="755.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="739.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="723.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="707.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="691.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="675.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="659.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="643.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="627.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="611.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="595.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="579.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="563.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="547.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="531.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="515.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="499.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="483.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="467.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="451.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="435.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="419.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="403.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="387.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="371.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="355.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="339.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="323.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="307.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="291.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="275.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="259.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="243.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="227.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="211.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="195.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="179.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="163.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="147.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="131.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="115.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="99.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="83.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="67.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="51.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="35.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.06%)</title><rect x="10.7" y="2035.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.7" y="2046.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.06%)</title><rect x="10.7" y="2019.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.7" y="2030.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.06%)</title><rect x="10.7" y="2003.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.7" y="2014.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.06%)</title><rect x="10.7" y="1987.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.7" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.06%)</title><rect x="10.7" y="1971.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.7" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1203689574.process (1 samples, 0.06%)</title><rect x="11.5" y="2035.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.5" y="2046.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (1 samples, 0.06%)</title><rect x="11.5" y="2019.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.5" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.06%)</title><rect x="11.5" y="2003.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.5" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (1 samples, 0.06%)</title><rect x="11.5" y="1987.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.5" y="1998.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.06%)</title><rect x="11.5" y="1971.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.5" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (308 samples, 19.21%)</title><rect x="12.2" y="2035.0" width="226.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.2" y="2046.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.12%)</title><rect x="12.2" y="2019.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.2" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.06%)</title><rect x="12.2" y="2003.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.2" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.06%)</title><rect x="12.2" y="1987.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.2" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.06%)</title><rect x="12.2" y="1971.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.06%)</title><rect x="12.2" y="1955.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.06%)</title><rect x="12.2" y="1939.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.06%)</title><rect x="12.2" y="1923.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.06%)</title><rect x="12.2" y="1907.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.06%)</title><rect x="12.2" y="1891.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.06%)</title><rect x="12.2" y="1875.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.06%)</title><rect x="12.2" y="1859.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.06%)</title><rect x="12.2" y="1843.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.toStruct (1 samples, 0.06%)</title><rect x="12.2" y="1827.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/RequestHeaderData.toStruct (1 samples, 0.06%)</title><rect x="12.2" y="1811.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.06%)</title><rect x="12.2" y="1795.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.06%)</title><rect x="12.2" y="1779.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.2" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.06%)</title><rect x="12.2" y="1763.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.2" y="1774.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.06%)</title><rect x="12.2" y="1747.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.2" y="1758.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.06%)</title><rect x="12.9" y="2003.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.9" y="2014.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.06%)</title><rect x="12.9" y="1987.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="15.9" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (305 samples, 19.03%)</title><rect x="13.7" y="2019.0" width="224.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="16.7" y="2030.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.31%)</title><rect x="13.7" y="2003.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.7" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.31%)</title><rect x="13.7" y="1987.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.7" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$282/1905908981.accept (5 samples, 0.31%)</title><rect x="13.7" y="1971.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.7" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.31%)</title><rect x="13.7" y="1955.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.7" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.31%)</title><rect x="13.7" y="1939.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.7" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.25%)</title><rect x="14.4" y="1923.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.4" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.12%)</title><rect x="17.4" y="2003.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.4" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.12%)</title><rect x="17.4" y="1987.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.4" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.12%)</title><rect x="17.4" y="1971.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.4" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.12%)</title><rect x="17.4" y="1955.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.4" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.12%)</title><rect x="17.4" y="1939.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.4" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.12%)</title><rect x="17.4" y="1923.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.4" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.06%)</title><rect x="17.4" y="1907.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.4" y="1918.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.06%)</title><rect x="17.4" y="1891.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.06%)</title><rect x="18.1" y="1907.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.1" y="1918.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (240 samples, 14.97%)</title><rect x="18.8" y="2003.0" width="176.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.8" y="2014.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$267/1312654572.accept (229 samples, 14.29%)</title><rect x="18.8" y="1987.0" width="168.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.8" y="1998.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$70 (228 samples, 14.22%)</title><rect x="19.6" y="1971.0" width="167.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.6" y="1982.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (176 samples, 10.98%)</title><rect x="31.3" y="1955.0" width="129.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="34.3" y="1966.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (176 samples, 10.98%)</title><rect x="31.3" y="1939.0" width="129.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.3" y="1950.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (176 samples, 10.98%)</title><rect x="31.3" y="1923.0" width="129.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.3" y="1934.0">com/linecorp/dec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (176 samples, 10.98%)</title><rect x="31.3" y="1907.0" width="129.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.3" y="1918.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (176 samples, 10.98%)</title><rect x="31.3" y="1891.0" width="129.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="34.3" y="1902.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (176 samples, 10.98%)</title><rect x="31.3" y="1875.0" width="129.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="34.3" y="1886.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (125 samples, 7.80%)</title><rect x="31.3" y="1859.0" width="92.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="34.3" y="1870.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (25 samples, 1.56%)</title><rect x="31.3" y="1843.0" width="18.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="34.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (25 samples, 1.56%)</title><rect x="31.3" y="1827.0" width="18.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.3" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (25 samples, 1.56%)</title><rect x="31.3" y="1811.0" width="18.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (25 samples, 1.56%)</title><rect x="31.3" y="1795.0" width="18.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.3" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 0.75%)</title><rect x="49.8" y="1843.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="52.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (12 samples, 0.75%)</title><rect x="49.8" y="1827.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.19%)</title><rect x="54.2" y="1811.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="57.2" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.19%)</title><rect x="54.2" y="1795.0" width="2.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="57.2" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.19%)</title><rect x="56.4" y="1811.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.4" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (88 samples, 5.49%)</title><rect x="58.6" y="1843.0" width="64.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="61.6" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (88 samples, 5.49%)</title><rect x="58.6" y="1827.0" width="64.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.6" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (83 samples, 5.18%)</title><rect x="58.6" y="1811.0" width="61.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="61.6" y="1822.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (83 samples, 5.18%)</title><rect x="58.6" y="1795.0" width="61.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.6" y="1806.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (80 samples, 4.99%)</title><rect x="60.8" y="1779.0" width="58.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.8" y="1790.0">sun/mi..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.06%)</title><rect x="61.5" y="1763.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="64.5" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (72 samples, 4.49%)</title><rect x="62.3" y="1763.0" width="53.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="65.3" y="1774.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.12%)</title><rect x="62.3" y="1747.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="65.3" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.06%)</title><rect x="63.7" y="1747.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="66.7" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (45 samples, 2.81%)</title><rect x="64.5" y="1747.0" width="33.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="67.5" y="1758.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.31%)</title><rect x="97.6" y="1747.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="100.6" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (19 samples, 1.19%)</title><rect x="101.3" y="1747.0" width="14.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="104.3" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.25%)</title><rect x="115.3" y="1763.0" width="2.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="118.3" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.12%)</title><rect x="118.2" y="1763.0" width="1.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="121.2" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (5 samples, 0.31%)</title><rect x="119.7" y="1811.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="122.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (49 samples, 3.06%)</title><rect x="123.4" y="1859.0" width="36.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="126.4" y="1870.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.12%)</title><rect x="159.4" y="1859.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="162.4" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.12%)</title><rect x="159.4" y="1843.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="162.4" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.12%)</title><rect x="159.4" y="1827.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="162.4" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.12%)</title><rect x="159.4" y="1811.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="162.4" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (5 samples, 0.31%)</title><rect x="160.9" y="1955.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.9" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.31%)</title><rect x="160.9" y="1939.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="163.9" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.19%)</title><rect x="164.6" y="1955.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="167.6" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.19%)</title><rect x="164.6" y="1939.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="167.6" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.19%)</title><rect x="164.6" y="1923.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="167.6" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (28 samples, 1.75%)</title><rect x="166.8" y="1955.0" width="20.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="169.8" y="1966.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (28 samples, 1.75%)</title><rect x="166.8" y="1939.0" width="20.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="169.8" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (19 samples, 1.19%)</title><rect x="172.7" y="1923.0" width="14.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.7" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.12%)</title><rect x="177.1" y="1907.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="180.1" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.37%)</title><rect x="178.6" y="1907.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="181.6" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 0.37%)</title><rect x="178.6" y="1891.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="181.6" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.37%)</title><rect x="178.6" y="1875.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="181.6" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="182.3" y="1859.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="185.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.06%)</title><rect x="183.0" y="1907.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="186.0" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.12%)</title><rect x="183.7" y="1907.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="186.7" y="1918.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.12%)</title><rect x="185.2" y="1907.0" width="1.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="188.2" y="1918.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.06%)</title><rect x="186.7" y="1923.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="189.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (10 samples, 0.62%)</title><rect x="187.4" y="1987.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.4" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (10 samples, 0.62%)</title><rect x="187.4" y="1971.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (10 samples, 0.62%)</title><rect x="187.4" y="1955.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (10 samples, 0.62%)</title><rect x="187.4" y="1939.0" width="7.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="190.4" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (7 samples, 0.44%)</title><rect x="189.6" y="1923.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.06%)</title><rect x="194.8" y="1987.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="197.8" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.06%)</title><rect x="194.8" y="1971.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="197.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 3.62%)</title><rect x="195.5" y="2003.0" width="42.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="198.5" y="2014.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (57 samples, 3.56%)</title><rect x="196.2" y="1987.0" width="42.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.2" y="1998.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 2.25%)</title><rect x="196.2" y="1971.0" width="26.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="199.2" y="1982.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.06%)</title><rect x="196.2" y="1955.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.06%)</title><rect x="196.2" y="1939.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="199.2" y="1950.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.06%)</title><rect x="196.2" y="1923.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="199.2" y="1934.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.06%)</title><rect x="196.2" y="1907.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="199.2" y="1918.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (1 samples, 0.06%)</title><rect x="196.2" y="1891.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="199.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (35 samples, 2.18%)</title><rect x="197.0" y="1955.0" width="25.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="200.0" y="1966.0">o..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.06%)</title><rect x="197.0" y="1939.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="200.0" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.06%)</title><rect x="197.0" y="1923.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="200.0" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.06%)</title><rect x="197.0" y="1907.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="200.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 2.12%)</title><rect x="197.7" y="1939.0" width="25.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.7" y="1950.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (29 samples, 1.81%)</title><rect x="197.7" y="1923.0" width="21.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.7" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (29 samples, 1.81%)</title><rect x="197.7" y="1907.0" width="21.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.7" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 0.75%)</title><rect x="199.2" y="1891.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.31%)</title><rect x="200.7" y="1875.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.31%)</title><rect x="200.7" y="1859.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="203.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.31%)</title><rect x="200.7" y="1843.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="203.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.31%)</title><rect x="200.7" y="1827.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.31%)</title><rect x="200.7" y="1811.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="203.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.31%)</title><rect x="200.7" y="1795.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.31%)</title><rect x="200.7" y="1779.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="203.7" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.31%)</title><rect x="204.3" y="1875.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.31%)</title><rect x="204.3" y="1859.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.06%)</title><rect x="207.3" y="1843.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="210.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.06%)</title><rect x="207.3" y="1827.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="210.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.06%)</title><rect x="207.3" y="1811.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="210.3" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="207.3" y="1795.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="210.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 0.94%)</title><rect x="208.0" y="1891.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="211.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.06%)</title><rect x="208.0" y="1875.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 0.87%)</title><rect x="208.8" y="1875.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (10 samples, 0.62%)</title><rect x="209.5" y="1859.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.5" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (10 samples, 0.62%)</title><rect x="209.5" y="1843.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="212.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.12%)</title><rect x="216.8" y="1859.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="219.8" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.12%)</title><rect x="216.8" y="1843.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.06%)</title><rect x="218.3" y="1859.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.06%)</title><rect x="218.3" y="1843.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.3" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="218.3" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="221.3" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.06%)</title><rect x="218.3" y="1811.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="221.3" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.06%)</title><rect x="218.3" y="1795.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="221.3" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.06%)</title><rect x="218.3" y="1779.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="221.3" y="1790.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.06%)</title><rect x="218.3" y="1763.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="221.3" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.06%)</title><rect x="218.3" y="1747.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="221.3" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.19%)</title><rect x="219.1" y="1923.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="222.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.19%)</title><rect x="219.1" y="1907.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.06%)</title><rect x="219.1" y="1891.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.06%)</title><rect x="219.1" y="1875.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.1" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="219.1" y="1859.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="222.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.12%)</title><rect x="219.8" y="1891.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.12%)</title><rect x="219.8" y="1875.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.06%)</title><rect x="220.5" y="1859.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.06%)</title><rect x="220.5" y="1843.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.06%)</title><rect x="221.3" y="1923.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="224.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.06%)</title><rect x="221.3" y="1907.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.06%)</title><rect x="221.3" y="1891.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="224.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.06%)</title><rect x="221.3" y="1875.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="224.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.06%)</title><rect x="222.0" y="1923.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.06%)</title><rect x="222.0" y="1907.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.06%)</title><rect x="222.0" y="1891.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="225.0" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.06%)</title><rect x="222.0" y="1875.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.0" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.06%)</title><rect x="222.0" y="1859.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="225.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.56%)</title><rect x="222.7" y="1971.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="225.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.56%)</title><rect x="222.7" y="1955.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.50%)</title><rect x="222.7" y="1939.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (3 samples, 0.19%)</title><rect x="222.7" y="1923.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (3 samples, 0.19%)</title><rect x="222.7" y="1907.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.19%)</title><rect x="222.7" y="1891.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.19%)</title><rect x="222.7" y="1875.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.12%)</title><rect x="223.5" y="1859.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.5" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.12%)</title><rect x="223.5" y="1843.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="226.5" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.12%)</title><rect x="223.5" y="1827.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="226.5" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.forEachRemaining (1 samples, 0.06%)</title><rect x="223.5" y="1811.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.5" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.06%)</title><rect x="224.2" y="1811.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.2" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.06%)</title><rect x="224.2" y="1795.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="227.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.12%)</title><rect x="224.9" y="1923.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="227.9" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.12%)</title><rect x="224.9" y="1907.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.9" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.12%)</title><rect x="224.9" y="1891.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.9" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.06%)</title><rect x="224.9" y="1875.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.9" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.06%)</title><rect x="224.9" y="1859.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="227.9" y="1870.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.06%)</title><rect x="224.9" y="1843.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.9" y="1854.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.06%)</title><rect x="225.7" y="1875.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.7" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.06%)</title><rect x="225.7" y="1859.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="228.7" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.06%)</title><rect x="225.7" y="1843.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.7" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.06%)</title><rect x="225.7" y="1827.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.19%)</title><rect x="226.4" y="1923.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.19%)</title><rect x="226.4" y="1907.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.19%)</title><rect x="226.4" y="1891.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.19%)</title><rect x="226.4" y="1875.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.19%)</title><rect x="226.4" y="1859.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.4" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.19%)</title><rect x="226.4" y="1843.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.4" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.19%)</title><rect x="226.4" y="1827.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="229.4" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (3 samples, 0.19%)</title><rect x="226.4" y="1811.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.4" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (3 samples, 0.19%)</title><rect x="226.4" y="1795.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.4" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (3 samples, 0.19%)</title><rect x="226.4" y="1779.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="229.4" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (3 samples, 0.19%)</title><rect x="226.4" y="1763.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.4" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (3 samples, 0.19%)</title><rect x="226.4" y="1747.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.4" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$230/602290465.test (3 samples, 0.19%)</title><rect x="226.4" y="1731.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.4" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.06%)</title><rect x="228.6" y="1939.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.6" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.06%)</title><rect x="228.6" y="1923.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.6" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.06%)</title><rect x="228.6" y="1907.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.06%)</title><rect x="229.4" y="1971.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="232.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.06%)</title><rect x="229.4" y="1955.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="232.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.06%)</title><rect x="229.4" y="1939.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.19%)</title><rect x="230.1" y="1971.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.19%)</title><rect x="230.1" y="1955.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.19%)</title><rect x="230.1" y="1939.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.06%)</title><rect x="230.1" y="1923.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.06%)</title><rect x="230.1" y="1907.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.12%)</title><rect x="230.8" y="1923.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.12%)</title><rect x="230.8" y="1907.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.12%)</title><rect x="230.8" y="1891.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="233.8" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.06%)</title><rect x="230.8" y="1875.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="233.8" y="1886.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.06%)</title><rect x="230.8" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="233.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.06%)</title><rect x="231.6" y="1875.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.06%)</title><rect x="231.6" y="1859.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.06%)</title><rect x="231.6" y="1843.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.6" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.06%)</title><rect x="231.6" y="1827.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.6" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.06%)</title><rect x="231.6" y="1811.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.6" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.06%)</title><rect x="231.6" y="1795.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.6" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.06%)</title><rect x="231.6" y="1779.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="234.6" y="1790.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.06%)</title><rect x="231.6" y="1763.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.6" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.31%)</title><rect x="232.3" y="1971.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.31%)</title><rect x="232.3" y="1955.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="235.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.06%)</title><rect x="233.0" y="1939.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="236.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.06%)</title><rect x="233.8" y="1939.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.06%)</title><rect x="234.5" y="1939.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="237.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.06%)</title><rect x="234.5" y="1923.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.06%)</title><rect x="234.5" y="1907.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="237.5" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.06%)</title><rect x="234.5" y="1891.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.06%)</title><rect x="235.3" y="1939.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.3" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.06%)</title><rect x="235.3" y="1923.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.3" y="1934.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.06%)</title><rect x="235.3" y="1907.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.3" y="1918.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.06%)</title><rect x="235.3" y="1891.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.3" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.06%)</title><rect x="235.3" y="1875.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.3" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.06%)</title><rect x="235.3" y="1859.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.12%)</title><rect x="236.0" y="1971.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="239.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.12%)</title><rect x="236.0" y="1955.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.12%)</title><rect x="236.0" y="1939.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.12%)</title><rect x="236.0" y="1923.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.06%)</title><rect x="236.7" y="1907.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="239.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.06%)</title><rect x="237.5" y="1971.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.06%)</title><rect x="237.5" y="1955.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.06%)</title><rect x="237.5" y="1939.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.06%)</title><rect x="237.5" y="1923.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.06%)</title><rect x="237.5" y="1907.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.5" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.06%)</title><rect x="238.2" y="2019.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.2" y="2030.0"></text>
</g>
<g>
<title>java/lang/Thread.run (784 samples, 48.91%)</title><rect x="238.9" y="2035.0" width="577.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.9" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (784 samples, 48.91%)</title><rect x="238.9" y="2019.0" width="577.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="241.9" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (784 samples, 48.91%)</title><rect x="238.9" y="2003.0" width="577.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="241.9" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$272/2083034728.run (536 samples, 33.44%)</title><rect x="244.8" y="1987.0" width="394.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.8" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$58 (536 samples, 33.44%)</title><rect x="244.8" y="1971.0" width="394.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.8" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (536 samples, 33.44%)</title><rect x="244.8" y="1955.0" width="394.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.8" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (528 samples, 32.94%)</title><rect x="244.8" y="1939.0" width="388.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="247.8" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipelin..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (1 samples, 0.06%)</title><rect x="252.9" y="1923.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.9" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (184 samples, 11.48%)</title><rect x="253.7" y="1923.0" width="135.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.7" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/580718781.extract (184 samples, 11.48%)</title><rect x="253.7" y="1907.0" width="135.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="256.7" y="1918.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (184 samples, 11.48%)</title><rect x="253.7" y="1891.0" width="135.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.7" y="1902.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (183 samples, 11.42%)</title><rect x="253.7" y="1875.0" width="134.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.7" y="1886.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (183 samples, 11.42%)</title><rect x="253.7" y="1859.0" width="134.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.7" y="1870.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (183 samples, 11.42%)</title><rect x="253.7" y="1843.0" width="134.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="256.7" y="1854.0">com/fasterxml/jac..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="253.7" y="1827.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="256.7" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.06%)</title><rect x="253.7" y="1811.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="256.7" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.06%)</title><rect x="253.7" y="1795.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="256.7" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.06%)</title><rect x="253.7" y="1779.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="256.7" y="1790.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.06%)</title><rect x="253.7" y="1763.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="256.7" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.06%)</title><rect x="253.7" y="1747.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="256.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (68 samples, 4.24%)</title><rect x="254.4" y="1827.0" width="50.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.4" y="1838.0">com/f..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="269.9" y="1811.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="272.9" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.06%)</title><rect x="269.9" y="1795.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="272.9" y="1806.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.56%)</title><rect x="270.6" y="1811.0" width="6.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="273.6" y="1822.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.37%)</title><rect x="272.8" y="1795.0" width="4.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="275.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.44%)</title><rect x="277.2" y="1811.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 0.37%)</title><rect x="277.9" y="1795.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="280.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 0.37%)</title><rect x="277.9" y="1779.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="280.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.37%)</title><rect x="277.9" y="1763.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="280.9" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.37%)</title><rect x="277.9" y="1747.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.9" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.37%)</title><rect x="277.9" y="1731.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="280.9" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (6 samples, 0.37%)</title><rect x="277.9" y="1715.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (30 samples, 1.87%)</title><rect x="282.4" y="1811.0" width="22.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.4" y="1822.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (27 samples, 1.68%)</title><rect x="282.4" y="1795.0" width="19.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.19%)</title><rect x="291.2" y="1779.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.19%)</title><rect x="291.2" y="1763.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="294.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (11 samples, 0.69%)</title><rect x="293.4" y="1779.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (11 samples, 0.69%)</title><rect x="293.4" y="1763.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.06%)</title><rect x="293.4" y="1747.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.4" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.06%)</title><rect x="293.4" y="1731.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="296.4" y="1742.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.06%)</title><rect x="293.4" y="1715.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="296.4" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.06%)</title><rect x="293.4" y="1699.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="296.4" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.06%)</title><rect x="293.4" y="1683.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="296.4" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.06%)</title><rect x="293.4" y="1667.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="296.4" y="1678.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.06%)</title><rect x="293.4" y="1651.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="296.4" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.06%)</title><rect x="293.4" y="1635.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="296.4" y="1646.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.06%)</title><rect x="293.4" y="1619.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="296.4" y="1630.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.06%)</title><rect x="293.4" y="1603.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="296.4" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (10 samples, 0.62%)</title><rect x="294.1" y="1747.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.06%)</title><rect x="301.5" y="1779.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="304.5" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="301.5" y="1763.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="304.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.06%)</title><rect x="301.5" y="1747.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="304.5" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.06%)</title><rect x="301.5" y="1731.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="304.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.19%)</title><rect x="302.2" y="1795.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="305.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (103 samples, 6.43%)</title><rect x="304.4" y="1827.0" width="75.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="307.4" y="1838.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (14 samples, 0.87%)</title><rect x="304.4" y="1811.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="307.4" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (14 samples, 0.87%)</title><rect x="304.4" y="1795.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="307.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.12%)</title><rect x="313.3" y="1779.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="316.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 0.31%)</title><rect x="314.8" y="1811.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="317.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.25%)</title><rect x="315.5" y="1795.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="318.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.25%)</title><rect x="315.5" y="1779.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="318.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.25%)</title><rect x="315.5" y="1763.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="318.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (4 samples, 0.25%)</title><rect x="315.5" y="1747.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="318.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (8 samples, 0.50%)</title><rect x="318.4" y="1811.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="321.4" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.12%)</title><rect x="318.4" y="1795.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="321.4" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.12%)</title><rect x="318.4" y="1779.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="321.4" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.12%)</title><rect x="318.4" y="1763.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="321.4" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.06%)</title><rect x="319.2" y="1747.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="322.2" y="1758.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.06%)</title><rect x="319.2" y="1731.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="322.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.37%)</title><rect x="319.9" y="1795.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="322.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 0.31%)</title><rect x="320.6" y="1779.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="323.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (76 samples, 4.74%)</title><rect x="324.3" y="1811.0" width="56.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="327.3" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 0.87%)</title><rect x="324.3" y="1795.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="327.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.37%)</title><rect x="326.5" y="1779.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="329.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.37%)</title><rect x="326.5" y="1763.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="329.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.37%)</title><rect x="326.5" y="1747.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="329.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (5 samples, 0.31%)</title><rect x="330.9" y="1779.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (62 samples, 3.87%)</title><rect x="334.6" y="1795.0" width="45.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="337.6" y="1806.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (62 samples, 3.87%)</title><rect x="334.6" y="1779.0" width="45.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="337.6" y="1790.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (62 samples, 3.87%)</title><rect x="334.6" y="1763.0" width="45.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.6" y="1774.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.31%)</title><rect x="342.7" y="1747.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="345.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (10 samples, 0.62%)</title><rect x="347.1" y="1731.0" width="7.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="350.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (10 samples, 0.62%)</title><rect x="347.1" y="1715.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="350.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (10 samples, 0.62%)</title><rect x="347.1" y="1699.0" width="7.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="350.1" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (9 samples, 0.56%)</title><rect x="347.9" y="1683.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="350.9" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.25%)</title><rect x="354.5" y="1731.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="357.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.25%)</title><rect x="354.5" y="1715.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="357.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.25%)</title><rect x="354.5" y="1699.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="357.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.06%)</title><rect x="357.4" y="1731.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="360.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.50%)</title><rect x="358.2" y="1747.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="361.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.50%)</title><rect x="358.2" y="1731.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.50%)</title><rect x="358.2" y="1715.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="361.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.50%)</title><rect x="358.2" y="1699.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="361.2" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.50%)</title><rect x="358.2" y="1683.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="361.2" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (11 samples, 0.69%)</title><rect x="364.1" y="1747.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="367.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (11 samples, 0.69%)</title><rect x="364.1" y="1731.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (11 samples, 0.69%)</title><rect x="364.1" y="1715.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="367.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (11 samples, 0.69%)</title><rect x="364.1" y="1699.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="367.1" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 0.69%)</title><rect x="364.1" y="1683.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="367.1" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (8 samples, 0.50%)</title><rect x="366.3" y="1667.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="369.3" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.06%)</title><rect x="369.2" y="1651.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="372.2" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (3 samples, 0.19%)</title><rect x="370.0" y="1651.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="373.0" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.37%)</title><rect x="372.2" y="1747.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="375.2" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.37%)</title><rect x="372.2" y="1731.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="375.2" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.37%)</title><rect x="372.2" y="1715.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="375.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.19%)</title><rect x="374.4" y="1699.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="377.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.25%)</title><rect x="376.6" y="1747.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="379.6" y="1758.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.06%)</title><rect x="379.5" y="1747.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="382.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.12%)</title><rect x="380.3" y="1827.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="383.3" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.50%)</title><rect x="381.7" y="1827.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="384.7" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.06%)</title><rect x="381.7" y="1811.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="384.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.44%)</title><rect x="382.5" y="1811.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.44%)</title><rect x="382.5" y="1795.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="385.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.44%)</title><rect x="382.5" y="1779.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="385.5" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.44%)</title><rect x="382.5" y="1763.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="385.5" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.06%)</title><rect x="387.6" y="1827.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="390.6" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.06%)</title><rect x="387.6" y="1811.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="390.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.06%)</title><rect x="387.6" y="1795.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="390.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.06%)</title><rect x="387.6" y="1779.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="390.6" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.06%)</title><rect x="388.4" y="1875.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="391.4" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="388.4" y="1859.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="391.4" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.06%)</title><rect x="388.4" y="1843.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="391.4" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (308 samples, 19.21%)</title><rect x="389.1" y="1923.0" width="226.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="392.1" y="1934.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (54 samples, 3.37%)</title><rect x="390.6" y="1907.0" width="39.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="393.6" y="1918.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.06%)</title><rect x="390.6" y="1891.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="393.6" y="1902.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (53 samples, 3.31%)</title><rect x="391.3" y="1891.0" width="39.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="394.3" y="1902.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (51 samples, 3.18%)</title><rect x="392.8" y="1875.0" width="37.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="395.8" y="1886.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.19%)</title><rect x="392.8" y="1859.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="395.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.19%)</title><rect x="392.8" y="1843.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="395.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.19%)</title><rect x="392.8" y="1827.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="395.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.19%)</title><rect x="392.8" y="1811.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="395.8" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.19%)</title><rect x="395.0" y="1859.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="398.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.19%)</title><rect x="395.0" y="1843.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="398.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.19%)</title><rect x="395.0" y="1827.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="398.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.19%)</title><rect x="395.0" y="1811.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="398.0" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (45 samples, 2.81%)</title><rect x="397.2" y="1859.0" width="33.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="400.2" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (19 samples, 1.19%)</title><rect x="416.3" y="1843.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.25%)</title><rect x="416.3" y="1827.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="419.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.06%)</title><rect x="418.5" y="1811.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="421.5" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (15 samples, 0.94%)</title><rect x="419.3" y="1827.0" width="11.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="422.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.25%)</title><rect x="426.6" y="1811.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="429.6" y="1822.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.06%)</title><rect x="429.6" y="1811.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="432.6" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.50%)</title><rect x="430.3" y="1907.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.3" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.44%)</title><rect x="431.1" y="1891.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="434.1" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.44%)</title><rect x="431.1" y="1875.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="434.1" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.12%)</title><rect x="434.7" y="1859.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="437.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (155 samples, 9.67%)</title><rect x="436.2" y="1907.0" width="114.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="439.2" y="1918.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (155 samples, 9.67%)</title><rect x="436.2" y="1891.0" width="114.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="439.2" y="1902.0">com/linecorp/d..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.12%)</title><rect x="442.8" y="1875.0" width="1.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="445.8" y="1886.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.12%)</title><rect x="442.8" y="1859.0" width="1.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="445.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (61 samples, 3.81%)</title><rect x="444.3" y="1875.0" width="44.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="447.3" y="1886.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (57 samples, 3.56%)</title><rect x="445.8" y="1859.0" width="41.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="448.8" y="1870.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (40 samples, 2.50%)</title><rect x="454.6" y="1843.0" width="29.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="457.6" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (29 samples, 1.81%)</title><rect x="459.8" y="1827.0" width="21.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="462.8" y="1838.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (29 samples, 1.81%)</title><rect x="459.8" y="1811.0" width="21.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="462.8" y="1822.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (29 samples, 1.81%)</title><rect x="459.8" y="1795.0" width="21.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="462.8" y="1806.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 0.69%)</title><rect x="465.7" y="1779.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="468.7" y="1790.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.06%)</title><rect x="465.7" y="1763.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="468.7" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.31%)</title><rect x="466.4" y="1763.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="469.4" y="1774.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.06%)</title><rect x="466.4" y="1747.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="469.4" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.25%)</title><rect x="467.1" y="1747.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="470.1" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.12%)</title><rect x="468.6" y="1731.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="471.6" y="1742.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.06%)</title><rect x="468.6" y="1715.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="471.6" y="1726.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.06%)</title><rect x="469.3" y="1715.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="472.3" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.31%)</title><rect x="470.1" y="1763.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="473.1" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.31%)</title><rect x="470.1" y="1747.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="473.1" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (3 samples, 0.19%)</title><rect x="470.1" y="1731.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="473.1" y="1742.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.06%)</title><rect x="472.3" y="1731.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="475.3" y="1742.0"></text>
</g>
<g>
<title>_init (1 samples, 0.06%)</title><rect x="473.0" y="1731.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="476.0" y="1742.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (10 samples, 0.62%)</title><rect x="473.8" y="1779.0" width="7.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="476.8" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.19%)</title><rect x="481.1" y="1827.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="484.1" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="483.3" y="1827.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="486.3" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.06%)</title><rect x="484.1" y="1843.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="487.1" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.25%)</title><rect x="484.8" y="1843.0" width="2.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="487.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.12%)</title><rect x="487.7" y="1859.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="490.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.12%)</title><rect x="487.7" y="1843.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="490.7" y="1854.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.12%)</title><rect x="487.7" y="1827.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="490.7" y="1838.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.12%)</title><rect x="487.7" y="1811.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="490.7" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.06%)</title><rect x="487.7" y="1795.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="490.7" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.06%)</title><rect x="487.7" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="490.7" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.06%)</title><rect x="488.5" y="1795.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="491.5" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.06%)</title><rect x="488.5" y="1779.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="491.5" y="1790.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.06%)</title><rect x="488.5" y="1763.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="491.5" y="1774.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (10 samples, 0.62%)</title><rect x="489.2" y="1875.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="492.2" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (4 samples, 0.25%)</title><rect x="489.2" y="1859.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="492.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (4 samples, 0.25%)</title><rect x="489.2" y="1843.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="492.2" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.25%)</title><rect x="489.2" y="1827.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="492.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.37%)</title><rect x="492.2" y="1859.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="495.2" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.12%)</title><rect x="492.2" y="1843.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="495.2" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.12%)</title><rect x="492.2" y="1827.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="495.2" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.12%)</title><rect x="492.2" y="1811.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="495.2" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.12%)</title><rect x="492.2" y="1795.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="495.2" y="1806.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.06%)</title><rect x="492.9" y="1779.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="495.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.25%)</title><rect x="493.6" y="1843.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="496.6" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (73 samples, 4.55%)</title><rect x="496.6" y="1875.0" width="53.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="499.6" y="1886.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (71 samples, 4.43%)</title><rect x="498.0" y="1859.0" width="52.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="501.0" y="1870.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.19%)</title><rect x="498.0" y="1843.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="501.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.19%)</title><rect x="498.0" y="1827.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="501.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.19%)</title><rect x="498.0" y="1811.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="501.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.19%)</title><rect x="498.0" y="1795.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="501.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.06%)</title><rect x="500.3" y="1843.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="503.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.06%)</title><rect x="500.3" y="1827.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="503.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.06%)</title><rect x="500.3" y="1811.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="503.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.06%)</title><rect x="500.3" y="1795.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="503.3" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.06%)</title><rect x="500.3" y="1779.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="503.3" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (67 samples, 4.18%)</title><rect x="501.0" y="1843.0" width="49.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="504.0" y="1854.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (56 samples, 3.49%)</title><rect x="509.1" y="1827.0" width="41.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="512.1" y="1838.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (26 samples, 1.62%)</title><rect x="531.2" y="1811.0" width="19.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="534.2" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.12%)</title><rect x="540.0" y="1795.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="543.0" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.56%)</title><rect x="541.5" y="1795.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="544.5" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="547.4" y="1779.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="550.4" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.06%)</title><rect x="547.4" y="1763.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="550.4" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.06%)</title><rect x="547.4" y="1747.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="550.4" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.06%)</title><rect x="547.4" y="1731.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="550.4" y="1742.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.19%)</title><rect x="548.1" y="1795.0" width="2.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="551.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (67 samples, 4.18%)</title><rect x="550.3" y="1907.0" width="49.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="553.3" y="1918.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (67 samples, 4.18%)</title><rect x="550.3" y="1891.0" width="49.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="553.3" y="1902.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1203689574.process (39 samples, 2.43%)</title><rect x="553.3" y="1875.0" width="28.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="556.3" y="1886.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (38 samples, 2.37%)</title><rect x="554.0" y="1859.0" width="28.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="557.0" y="1870.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (30 samples, 1.87%)</title><rect x="554.0" y="1843.0" width="22.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="557.0" y="1854.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.06%)</title><rect x="568.0" y="1827.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="571.0" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.06%)</title><rect x="568.0" y="1811.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="571.0" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.06%)</title><rect x="568.0" y="1795.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="571.0" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.06%)</title><rect x="568.0" y="1779.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="571.0" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.06%)</title><rect x="568.0" y="1763.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="571.0" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.56%)</title><rect x="568.7" y="1827.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="571.7" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.31%)</title><rect x="571.7" y="1811.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="574.7" y="1822.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.31%)</title><rect x="571.7" y="1795.0" width="3.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="574.7" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.06%)</title><rect x="575.3" y="1827.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="578.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (8 samples, 0.50%)</title><rect x="576.1" y="1843.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="579.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.31%)</title><rect x="578.3" y="1827.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="581.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.25%)</title><rect x="579.0" y="1811.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="582.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.25%)</title><rect x="579.0" y="1795.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="582.0" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.31%)</title><rect x="582.0" y="1875.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="585.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.31%)</title><rect x="582.0" y="1859.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="585.0" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.50%)</title><rect x="585.6" y="1875.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="588.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.25%)</title><rect x="588.6" y="1859.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="591.6" y="1870.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.25%)</title><rect x="588.6" y="1843.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="591.6" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.19%)</title><rect x="591.5" y="1875.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="594.5" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.19%)</title><rect x="591.5" y="1859.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="594.5" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.50%)</title><rect x="593.7" y="1875.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="596.7" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="598.2" y="1859.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="601.2" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.06%)</title><rect x="598.2" y="1843.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="601.2" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.06%)</title><rect x="598.2" y="1827.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="601.2" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.06%)</title><rect x="598.2" y="1811.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="601.2" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.06%)</title><rect x="598.2" y="1795.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="601.2" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.06%)</title><rect x="598.9" y="1859.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="601.9" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.06%)</title><rect x="598.9" y="1843.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="601.9" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.37%)</title><rect x="599.6" y="1907.0" width="16.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="602.6" y="1918.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.19%)</title><rect x="602.6" y="1891.0" width="2.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="605.6" y="1902.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.19%)</title><rect x="602.6" y="1875.0" width="2.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="605.6" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 0.87%)</title><rect x="604.8" y="1891.0" width="10.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="607.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 0.87%)</title><rect x="604.8" y="1875.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="607.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$289/1612826692.accept (1 samples, 0.06%)</title><rect x="604.8" y="1859.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="607.8" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="604.8" y="1843.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="607.8" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.06%)</title><rect x="604.8" y="1827.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="607.8" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.06%)</title><rect x="604.8" y="1811.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="607.8" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$292/1293535235.accept (13 samples, 0.81%)</title><rect x="605.5" y="1859.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="608.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (13 samples, 0.81%)</title><rect x="605.5" y="1843.0" width="9.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="608.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$270/296579321.complete (13 samples, 0.81%)</title><rect x="605.5" y="1827.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="608.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (13 samples, 0.81%)</title><rect x="605.5" y="1811.0" width="9.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="608.5" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$268/1462817484.complete (13 samples, 0.81%)</title><rect x="605.5" y="1795.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="608.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$55 (13 samples, 0.81%)</title><rect x="605.5" y="1779.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="608.5" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (13 samples, 0.81%)</title><rect x="605.5" y="1763.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="608.5" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 0.81%)</title><rect x="605.5" y="1747.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="608.5" y="1758.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 0.81%)</title><rect x="605.5" y="1731.0" width="9.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="608.5" y="1742.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.12%)</title><rect x="613.6" y="1715.0" width="1.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="616.6" y="1726.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.06%)</title><rect x="614.4" y="1699.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="617.4" y="1710.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.06%)</title><rect x="615.1" y="1891.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="618.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.19%)</title><rect x="615.8" y="1923.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="618.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.06%)</title><rect x="618.0" y="1907.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="621.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 0.94%)</title><rect x="618.8" y="1907.0" width="11.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="621.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 0.94%)</title><rect x="618.8" y="1891.0" width="11.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="621.8" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$289/1612826692.accept (1 samples, 0.06%)</title><rect x="618.8" y="1875.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="621.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$46 (1 samples, 0.06%)</title><rect x="618.8" y="1859.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="621.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.06%)</title><rect x="618.8" y="1843.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="621.8" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.06%)</title><rect x="618.8" y="1827.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="621.8" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.06%)</title><rect x="618.8" y="1811.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="621.8" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="618.8" y="1795.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="621.8" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.06%)</title><rect x="618.8" y="1779.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="621.8" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.06%)</title><rect x="618.8" y="1763.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="621.8" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.06%)</title><rect x="618.8" y="1747.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="621.8" y="1758.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.06%)</title><rect x="618.8" y="1731.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="621.8" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$292/1293535235.accept (14 samples, 0.87%)</title><rect x="619.5" y="1875.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="622.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (14 samples, 0.87%)</title><rect x="619.5" y="1859.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="622.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$270/296579321.complete (14 samples, 0.87%)</title><rect x="619.5" y="1843.0" width="10.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="622.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (14 samples, 0.87%)</title><rect x="619.5" y="1827.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="622.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$268/1462817484.complete (14 samples, 0.87%)</title><rect x="619.5" y="1811.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="622.5" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$55 (14 samples, 0.87%)</title><rect x="619.5" y="1795.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="622.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (14 samples, 0.87%)</title><rect x="619.5" y="1779.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="622.5" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 0.87%)</title><rect x="619.5" y="1763.0" width="10.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="622.5" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 0.87%)</title><rect x="619.5" y="1747.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="622.5" y="1758.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.31%)</title><rect x="629.8" y="1923.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="632.8" y="1934.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.31%)</title><rect x="629.8" y="1907.0" width="3.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="632.8" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (8 samples, 0.50%)</title><rect x="633.5" y="1939.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="636.5" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.31%)</title><rect x="635.7" y="1923.0" width="3.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="638.7" y="1934.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.31%)</title><rect x="635.7" y="1907.0" width="3.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="638.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.25%)</title><rect x="639.4" y="1987.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="642.4" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.25%)</title><rect x="639.4" y="1971.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="642.4" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.25%)</title><rect x="639.4" y="1955.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="642.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.25%)</title><rect x="639.4" y="1939.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="642.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (236 samples, 14.72%)</title><rect x="642.3" y="1987.0" width="173.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="645.3" y="1998.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (236 samples, 14.72%)</title><rect x="642.3" y="1971.0" width="173.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="645.3" y="1982.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (210 samples, 13.10%)</title><rect x="644.5" y="1955.0" width="154.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="647.5" y="1966.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.06%)</title><rect x="654.8" y="1939.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="657.8" y="1950.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="654.8" y="1923.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="657.8" y="1934.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.06%)</title><rect x="654.8" y="1907.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="657.8" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.06%)</title><rect x="654.8" y="1891.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="657.8" y="1902.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.06%)</title><rect x="654.8" y="1875.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="657.8" y="1886.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.06%)</title><rect x="654.8" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="657.8" y="1870.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.06%)</title><rect x="654.8" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="657.8" y="1854.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.06%)</title><rect x="654.8" y="1827.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="657.8" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.06%)</title><rect x="654.8" y="1811.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="657.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (27 samples, 1.68%)</title><rect x="655.6" y="1939.0" width="19.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.06%)</title><rect x="675.5" y="1939.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="678.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.06%)</title><rect x="675.5" y="1923.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="678.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.06%)</title><rect x="675.5" y="1907.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="678.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.06%)</title><rect x="675.5" y="1891.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="678.5" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.06%)</title><rect x="675.5" y="1875.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="678.5" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (167 samples, 10.42%)</title><rect x="676.2" y="1939.0" width="122.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="679.2" y="1950.0">java/util/concu..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (160 samples, 9.98%)</title><rect x="681.3" y="1923.0" width="117.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="684.3" y="1934.0">sun/misc/Unsaf..</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (5 samples, 0.31%)</title><rect x="686.5" y="1907.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="689.5" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.06%)</title><rect x="690.2" y="1907.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="693.2" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (144 samples, 8.98%)</title><rect x="690.9" y="1907.0" width="106.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="693.9" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.12%)</title><rect x="693.1" y="1891.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="696.1" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 1.25%)</title><rect x="694.6" y="1891.0" width="14.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="697.6" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.44%)</title><rect x="696.8" y="1875.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="699.8" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.25%)</title><rect x="696.8" y="1859.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="699.8" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.19%)</title><rect x="697.5" y="1843.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="700.5" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.12%)</title><rect x="699.7" y="1859.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="702.7" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.06%)</title><rect x="701.2" y="1859.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="704.2" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.12%)</title><rect x="702.0" y="1875.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="705.0" y="1886.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.06%)</title><rect x="703.4" y="1875.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="706.4" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.44%)</title><rect x="704.2" y="1875.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="707.2" y="1886.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.06%)</title><rect x="708.6" y="1859.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="711.6" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.06%)</title><rect x="708.6" y="1843.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="711.6" y="1854.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.06%)</title><rect x="709.3" y="1891.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="712.3" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.06%)</title><rect x="710.0" y="1891.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="713.0" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (10 samples, 0.62%)</title><rect x="710.8" y="1891.0" width="7.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="713.8" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (34 samples, 2.12%)</title><rect x="718.1" y="1891.0" width="25.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="721.1" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (55 samples, 3.43%)</title><rect x="743.2" y="1891.0" width="40.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="746.2" y="1902.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.25%)</title><rect x="783.7" y="1891.0" width="2.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="786.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.12%)</title><rect x="786.6" y="1891.0" width="1.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="789.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.12%)</title><rect x="788.1" y="1891.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="791.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.06%)</title><rect x="789.6" y="1891.0" width="0.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="792.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.25%)</title><rect x="790.3" y="1891.0" width="2.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="793.3" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.12%)</title><rect x="793.2" y="1891.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="796.2" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.06%)</title><rect x="794.7" y="1891.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="797.7" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.12%)</title><rect x="795.4" y="1891.0" width="1.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="798.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.12%)</title><rect x="796.9" y="1907.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="799.9" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.06%)</title><rect x="798.4" y="1907.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="801.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 1.43%)</title><rect x="799.1" y="1955.0" width="17.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="802.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 1.43%)</title><rect x="799.1" y="1939.0" width="17.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="802.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 1.43%)</title><rect x="799.1" y="1923.0" width="17.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="802.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 1.43%)</title><rect x="799.1" y="1907.0" width="17.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="802.1" y="1918.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.06%)</title><rect x="816.1" y="2035.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="819.1" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.06%)</title><rect x="816.8" y="2035.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="819.8" y="2046.0"></text>
</g>
<g>
<title>start_thread (506 samples, 31.57%)</title><rect x="817.5" y="2035.0" width="372.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="820.5" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (506 samples, 31.57%)</title><rect x="817.5" y="2019.0" width="372.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="820.5" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (29 samples, 1.81%)</title><rect x="817.5" y="2003.0" width="21.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="820.5" y="2014.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.37%)</title><rect x="817.5" y="1987.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="820.5" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.37%)</title><rect x="817.5" y="1971.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="820.5" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.12%)</title><rect x="817.5" y="1955.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="820.5" y="1966.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.25%)</title><rect x="819.0" y="1955.0" width="2.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="822.0" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (23 samples, 1.43%)</title><rect x="821.9" y="1987.0" width="17.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="824.9" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.44%)</title><rect x="821.9" y="1971.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="824.9" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.06%)</title><rect x="821.9" y="1955.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="824.9" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="821.9" y="1939.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="824.9" y="1950.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.12%)</title><rect x="822.7" y="1955.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="825.7" y="1966.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::peek() (1 samples, 0.06%)</title><rect x="823.4" y="1939.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="826.4" y="1950.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.25%)</title><rect x="824.1" y="1955.0" width="3.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="827.1" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.06%)</title><rect x="827.1" y="1971.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="830.1" y="1982.0"></text>
</g>
<g>
<title>PtrQueue::flush_impl() (1 samples, 0.06%)</title><rect x="827.1" y="1955.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="830.1" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 0.50%)</title><rect x="827.8" y="1971.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="830.8" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.31%)</title><rect x="827.8" y="1955.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="830.8" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.12%)</title><rect x="827.8" y="1939.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="830.8" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.12%)</title><rect x="827.8" y="1923.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="830.8" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.12%)</title><rect x="827.8" y="1907.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="830.8" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 0.19%)</title><rect x="829.3" y="1939.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="832.3" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 0.19%)</title><rect x="829.3" y="1923.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="832.3" y="1934.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.06%)</title><rect x="829.3" y="1907.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="832.3" y="1918.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.06%)</title><rect x="829.3" y="1891.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="832.3" y="1902.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.06%)</title><rect x="829.3" y="1875.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="832.3" y="1886.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.06%)</title><rect x="829.3" y="1859.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="832.3" y="1870.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.06%)</title><rect x="829.3" y="1843.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="832.3" y="1854.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.12%)</title><rect x="830.0" y="1907.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="833.0" y="1918.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.06%)</title><rect x="830.0" y="1891.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="833.0" y="1902.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.06%)</title><rect x="830.0" y="1875.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="833.0" y="1886.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.06%)</title><rect x="830.0" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="833.0" y="1870.0"></text>
</g>
<g>
<title>frame::update_map_with_saved_link(RegisterMap*, long**) (1 samples, 0.06%)</title><rect x="830.8" y="1891.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.8" y="1902.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.19%)</title><rect x="831.5" y="1955.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="834.5" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.19%)</title><rect x="831.5" y="1939.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="834.5" y="1950.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.06%)</title><rect x="833.0" y="1923.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="836.0" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.44%)</title><rect x="833.7" y="1971.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="836.7" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.44%)</title><rect x="833.7" y="1955.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="836.7" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.44%)</title><rect x="833.7" y="1939.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="836.7" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.44%)</title><rect x="833.7" y="1923.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="836.7" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.44%)</title><rect x="833.7" y="1907.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="836.7" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.44%)</title><rect x="833.7" y="1891.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="836.7" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.25%)</title><rect x="835.9" y="1875.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="838.9" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.06%)</title><rect x="838.1" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="841.1" y="1870.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.06%)</title><rect x="838.1" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="841.1" y="1854.0"></text>
</g>
<g>
<title>JavaThread::run() (476 samples, 29.69%)</title><rect x="838.9" y="2003.0" width="350.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="841.9" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (476 samples, 29.69%)</title><rect x="838.9" y="1987.0" width="350.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="841.9" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (475 samples, 29.63%)</title><rect x="838.9" y="1971.0" width="349.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="841.9" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (473 samples, 29.51%)</title><rect x="838.9" y="1955.0" width="348.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="841.9" y="1966.0">CompileBroker::invoke_compiler_on_method(Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (472 samples, 29.44%)</title><rect x="838.9" y="1939.0" width="347.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="841.9" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, i..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (472 samples, 29.44%)</title><rect x="838.9" y="1923.0" width="347.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="841.9" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*..</text>
</g>
<g>
<title>Compile::Code_Gen() (187 samples, 11.67%)</title><rect x="838.9" y="1907.0" width="137.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="841.9" y="1918.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.31%)</title><rect x="838.9" y="1891.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="841.9" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.19%)</title><rect x="838.9" y="1875.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="841.9" y="1886.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.06%)</title><rect x="840.3" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="843.3" y="1870.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.06%)</title><rect x="840.3" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="843.3" y="1854.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.12%)</title><rect x="841.1" y="1875.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="844.1" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.12%)</title><rect x="841.1" y="1859.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="844.1" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.06%)</title><rect x="841.8" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="844.8" y="1854.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (8 samples, 0.50%)</title><rect x="842.6" y="1891.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="845.6" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.25%)</title><rect x="842.6" y="1875.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="845.6" y="1886.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.06%)</title><rect x="842.6" y="1859.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="845.6" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.06%)</title><rect x="843.3" y="1859.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="846.3" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.06%)</title><rect x="843.3" y="1843.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="846.3" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.12%)</title><rect x="844.0" y="1859.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="847.0" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.12%)</title><rect x="844.0" y="1843.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="847.0" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.12%)</title><rect x="845.5" y="1875.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="848.5" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.12%)</title><rect x="845.5" y="1859.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="848.5" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.06%)</title><rect x="847.0" y="1875.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="850.0" y="1886.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.06%)</title><rect x="847.7" y="1875.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="850.7" y="1886.0"></text>
</g>
<g>
<title>Matcher::match() (16 samples, 1.00%)</title><rect x="848.4" y="1891.0" width="11.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="851.4" y="1902.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.06%)</title><rect x="848.4" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="851.4" y="1886.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (4 samples, 0.25%)</title><rect x="849.2" y="1875.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="852.2" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (11 samples, 0.69%)</title><rect x="852.1" y="1875.0" width="8.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="855.1" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (6 samples, 0.37%)</title><rect x="852.9" y="1859.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="855.9" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.06%)</title><rect x="857.3" y="1859.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="860.3" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.06%)</title><rect x="857.3" y="1843.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="860.3" y="1854.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.06%)</title><rect x="857.3" y="1827.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="860.3" y="1838.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.06%)</title><rect x="857.3" y="1811.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="860.3" y="1822.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.06%)</title><rect x="857.3" y="1795.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="860.3" y="1806.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.19%)</title><rect x="858.0" y="1859.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="861.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (10 samples, 0.62%)</title><rect x="860.2" y="1891.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="863.2" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (10 samples, 0.62%)</title><rect x="860.2" y="1875.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="863.2" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.06%)</title><rect x="860.2" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="863.2" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (5 samples, 0.31%)</title><rect x="861.0" y="1859.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="864.0" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.12%)</title><rect x="861.0" y="1843.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="864.0" y="1854.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.06%)</title><rect x="861.7" y="1827.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="864.7" y="1838.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.06%)</title><rect x="861.7" y="1811.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="864.7" y="1822.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.06%)</title><rect x="862.4" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="865.4" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.06%)</title><rect x="863.2" y="1843.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="866.2" y="1854.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.06%)</title><rect x="863.2" y="1827.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="866.2" y="1838.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.06%)</title><rect x="863.2" y="1811.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="866.2" y="1822.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.06%)</title><rect x="863.2" y="1795.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="866.2" y="1806.0"></text>
</g>
<g>
<title>TypeAryPtr::hash() const (1 samples, 0.06%)</title><rect x="863.2" y="1779.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="866.2" y="1790.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.06%)</title><rect x="863.9" y="1843.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="866.9" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (3 samples, 0.19%)</title><rect x="864.6" y="1859.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="867.6" y="1870.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.06%)</title><rect x="865.4" y="1843.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="868.4" y="1854.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.06%)</title><rect x="865.4" y="1827.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="868.4" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.06%)</title><rect x="866.1" y="1843.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="869.1" y="1854.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.06%)</title><rect x="866.1" y="1827.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="869.1" y="1838.0"></text>
</g>
<g>
<title>testL_regNode::ideal_Opcode() const (1 samples, 0.06%)</title><rect x="866.8" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="869.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (148 samples, 9.23%)</title><rect x="867.6" y="1891.0" width="108.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="870.6" y="1902.0">PhaseChaitin:..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.12%)</title><rect x="867.6" y="1875.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="870.6" y="1886.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (2 samples, 0.12%)</title><rect x="869.1" y="1875.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="872.1" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.12%)</title><rect x="870.5" y="1875.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="873.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (8 samples, 0.50%)</title><rect x="872.0" y="1875.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="875.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.06%)</title><rect x="873.5" y="1859.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="876.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (5 samples, 0.31%)</title><rect x="874.2" y="1859.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="877.2" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.19%)</title><rect x="875.7" y="1843.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="878.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (9 samples, 0.56%)</title><rect x="877.9" y="1875.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="880.9" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.19%)</title><rect x="878.6" y="1859.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="881.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (5 samples, 0.31%)</title><rect x="880.8" y="1859.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="883.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.06%)</title><rect x="883.0" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="886.0" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.06%)</title><rect x="883.8" y="1843.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="886.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (17 samples, 1.06%)</title><rect x="884.5" y="1875.0" width="12.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="887.5" y="1886.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.06%)</title><rect x="894.1" y="1859.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="897.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.06%)</title><rect x="894.8" y="1859.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="897.8" y="1870.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.06%)</title><rect x="894.8" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="897.8" y="1854.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.06%)</title><rect x="895.6" y="1859.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="898.6" y="1870.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.06%)</title><rect x="896.3" y="1859.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="899.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (20 samples, 1.25%)</title><rect x="897.0" y="1875.0" width="14.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="900.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.06%)</title><rect x="904.4" y="1859.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="907.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.12%)</title><rect x="905.1" y="1859.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="908.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.37%)</title><rect x="906.6" y="1859.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="909.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.19%)</title><rect x="908.8" y="1843.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="911.8" y="1854.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.06%)</title><rect x="911.0" y="1859.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="914.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.06%)</title><rect x="911.7" y="1875.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="914.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (8 samples, 0.50%)</title><rect x="912.5" y="1875.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="915.5" y="1886.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.06%)</title><rect x="916.2" y="1859.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="919.2" y="1870.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.06%)</title><rect x="916.9" y="1859.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="919.9" y="1870.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.06%)</title><rect x="917.6" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="920.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.12%)</title><rect x="918.4" y="1875.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="921.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.06%)</title><rect x="919.1" y="1859.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="922.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (11 samples, 0.69%)</title><rect x="919.8" y="1875.0" width="8.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="922.8" y="1886.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (2 samples, 0.12%)</title><rect x="922.8" y="1859.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="925.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.31%)</title><rect x="924.3" y="1859.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="927.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.06%)</title><rect x="926.5" y="1843.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="929.5" y="1854.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.06%)</title><rect x="926.5" y="1827.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="929.5" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.06%)</title><rect x="927.2" y="1843.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="930.2" y="1854.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.06%)</title><rect x="927.2" y="1827.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="930.2" y="1838.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.06%)</title><rect x="927.2" y="1811.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="930.2" y="1822.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.06%)</title><rect x="927.9" y="1875.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="930.9" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.06%)</title><rect x="927.9" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="930.9" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (36 samples, 2.25%)</title><rect x="928.7" y="1875.0" width="26.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="931.7" y="1886.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.12%)</title><rect x="928.7" y="1859.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="931.7" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (2 samples, 0.12%)</title><rect x="928.7" y="1843.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="931.7" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.06%)</title><rect x="928.7" y="1827.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="931.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.06%)</title><rect x="929.4" y="1827.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="932.4" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (34 samples, 2.12%)</title><rect x="930.1" y="1859.0" width="25.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="933.1" y="1870.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (34 samples, 2.12%)</title><rect x="930.1" y="1843.0" width="25.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="933.1" y="1854.0">P..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (6 samples, 0.37%)</title><rect x="930.1" y="1827.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="933.1" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.25%)</title><rect x="931.6" y="1811.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="934.6" y="1822.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (1 samples, 0.06%)</title><rect x="934.6" y="1827.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.6" y="1838.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.06%)</title><rect x="934.6" y="1811.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="937.6" y="1822.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (22 samples, 1.37%)</title><rect x="935.3" y="1827.0" width="16.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="938.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (5 samples, 0.31%)</title><rect x="951.5" y="1827.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="954.5" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.06%)</title><rect x="954.4" y="1811.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="957.4" y="1822.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.25%)</title><rect x="955.2" y="1875.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="958.2" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.06%)</title><rect x="955.9" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="958.9" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.12%)</title><rect x="956.7" y="1859.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="959.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (5 samples, 0.31%)</title><rect x="958.1" y="1875.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="961.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.06%)</title><rect x="961.1" y="1859.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="964.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.12%)</title><rect x="961.8" y="1875.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="964.8" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.12%)</title><rect x="961.8" y="1859.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="964.8" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (16 samples, 1.00%)</title><rect x="963.3" y="1875.0" width="11.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="966.3" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.06%)</title><rect x="969.9" y="1859.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="972.9" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (6 samples, 0.37%)</title><rect x="970.6" y="1859.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="973.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.06%)</title><rect x="973.6" y="1843.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="976.6" y="1854.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.06%)</title><rect x="974.3" y="1843.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="977.3" y="1854.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.06%)</title><rect x="975.1" y="1875.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="978.1" y="1886.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.06%)</title><rect x="975.1" y="1859.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="978.1" y="1870.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.06%)</title><rect x="975.8" y="1875.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="978.8" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (265 samples, 16.53%)</title><rect x="976.5" y="1907.0" width="195.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="979.5" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.06%)</title><rect x="976.5" y="1891.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="979.5" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.06%)</title><rect x="976.5" y="1875.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.06%)</title><rect x="976.5" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="979.5" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="976.5" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.5" y="1854.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.06%)</title><rect x="976.5" y="1827.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.5" y="1838.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.06%)</title><rect x="976.5" y="1811.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.5" y="1822.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="976.5" y="1795.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.5" y="1806.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (4 samples, 0.25%)</title><rect x="977.3" y="1891.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="980.3" y="1902.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.06%)</title><rect x="978.0" y="1875.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (2 samples, 0.12%)</title><rect x="978.7" y="1875.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.7" y="1886.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (2 samples, 0.12%)</title><rect x="978.7" y="1859.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="981.7" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (2 samples, 0.12%)</title><rect x="978.7" y="1843.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.7" y="1854.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.06%)</title><rect x="978.7" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="981.7" y="1838.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.06%)</title><rect x="978.7" y="1811.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.7" y="1822.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.06%)</title><rect x="979.5" y="1827.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="982.5" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (9 samples, 0.56%)</title><rect x="980.2" y="1891.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="983.2" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (9 samples, 0.56%)</title><rect x="980.2" y="1875.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="983.2" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var_and_edge(Node*, PointsToNode::EscapeState, Node*, Unique_Node_List*) (2 samples, 0.12%)</title><rect x="980.2" y="1859.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="983.2" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (2 samples, 0.12%)</title><rect x="981.7" y="1859.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="984.7" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.06%)</title><rect x="982.4" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.4" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.06%)</title><rect x="982.4" y="1827.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.4" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.06%)</title><rect x="982.4" y="1811.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="985.4" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (5 samples, 0.31%)</title><rect x="983.2" y="1859.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="986.2" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.31%)</title><rect x="983.2" y="1843.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.2" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.31%)</title><rect x="983.2" y="1827.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="986.2" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.06%)</title><rect x="983.2" y="1811.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="986.2" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.25%)</title><rect x="983.9" y="1811.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="986.9" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1795.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="986.9" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1779.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="986.9" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1763.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="986.9" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1747.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="986.9" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1731.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="986.9" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1715.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.9" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1699.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.9" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1683.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.9" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1667.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.9" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1651.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="986.9" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1635.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="986.9" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1619.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="986.9" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1603.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="986.9" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1587.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="986.9" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1571.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.9" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1555.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="986.9" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="983.9" y="1539.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="986.9" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.06%)</title><rect x="983.9" y="1523.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.9" y="1534.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.06%)</title><rect x="983.9" y="1507.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="986.9" y="1518.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.06%)</title><rect x="983.9" y="1491.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="986.9" y="1502.0"></text>
</g>
<g>
<title>ciInstanceKlass::super() (1 samples, 0.06%)</title><rect x="983.9" y="1475.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="986.9" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1523.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="987.6" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1507.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="987.6" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1491.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="987.6" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.6" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1459.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.6" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1443.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.6" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1427.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.6" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1411.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.6" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1395.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="987.6" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1379.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.6" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1363.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="987.6" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1347.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.6" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1331.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="987.6" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="987.6" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1299.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="987.6" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1283.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="987.6" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1267.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.6" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1251.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="987.6" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1235.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="987.6" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1219.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="987.6" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1203.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="987.6" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1187.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.6" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1171.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.6" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1155.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="987.6" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.06%)</title><rect x="984.6" y="1139.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="987.6" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="985.4" y="1795.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.4" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="985.4" y="1779.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="988.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.12%)</title><rect x="985.4" y="1763.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.4" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1747.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="988.4" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1731.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.4" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1715.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="988.4" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1699.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.4" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1683.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="988.4" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1667.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.4" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1651.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.4" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1635.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="988.4" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1619.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.4" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1603.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.4" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1587.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="988.4" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1571.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.4" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1555.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.4" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1539.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="988.4" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1523.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.4" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1507.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="988.4" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1491.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="988.4" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1475.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.4" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1459.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.4" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1443.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="988.4" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1427.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="988.4" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1411.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.4" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1395.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="988.4" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1379.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.4" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1363.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.4" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1347.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="988.4" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1331.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.4" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1315.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="988.4" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1299.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="988.4" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1283.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.4" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1267.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="988.4" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1251.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="988.4" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1235.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.4" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1219.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="988.4" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1203.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.4" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1187.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.4" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1171.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="988.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1155.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="988.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1139.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1123.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="988.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1107.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="988.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1091.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1075.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="988.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1059.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="988.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1043.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1027.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="988.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="1011.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="988.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="995.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="988.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="979.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="963.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="947.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="988.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="931.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="988.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="915.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="988.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="899.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="883.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="988.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="867.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="988.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="851.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="988.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="835.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="988.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="819.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="988.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="803.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="988.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="787.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="988.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="771.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="988.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="755.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="988.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="739.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="988.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="723.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="707.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="988.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="691.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="988.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="675.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="659.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="988.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="643.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="988.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="627.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="988.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="611.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="988.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="595.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="579.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="988.4" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="985.4" y="563.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.4" y="574.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.06%)</title><rect x="985.4" y="547.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="988.4" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="986.1" y="1747.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="989.1" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="986.1" y="1731.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="989.1" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="986.1" y="1715.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="989.1" y="1726.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.06%)</title><rect x="986.1" y="1699.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="989.1" y="1710.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.06%)</title><rect x="986.8" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="989.8" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (3 samples, 0.19%)</title><rect x="987.6" y="1891.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="990.6" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (3 samples, 0.19%)</title><rect x="987.6" y="1875.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="990.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (213 samples, 13.29%)</title><rect x="989.8" y="1891.0" width="156.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.8" y="1902.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="989.8" y="1875.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.8" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="989.8" y="1859.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.8" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="989.8" y="1843.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.06%)</title><rect x="989.8" y="1827.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="992.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.06%)</title><rect x="989.8" y="1811.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.8" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.06%)</title><rect x="989.8" y="1795.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.8" y="1806.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.06%)</title><rect x="989.8" y="1779.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="992.8" y="1790.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.12%)</title><rect x="990.5" y="1875.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="993.5" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.06%)</title><rect x="990.5" y="1859.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="993.5" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.06%)</title><rect x="990.5" y="1843.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="993.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.06%)</title><rect x="990.5" y="1827.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="993.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::rc_predicate(IdealLoopTree*, Node*, int, Node*, Node*, Node*, Node*, Node*, bool) (1 samples, 0.06%)</title><rect x="990.5" y="1811.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="993.5" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::register_new_node(Node*, Node*) (1 samples, 0.06%)</title><rect x="990.5" y="1795.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="993.5" y="1806.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.06%)</title><rect x="990.5" y="1779.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="993.5" y="1790.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.06%)</title><rect x="990.5" y="1763.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="993.5" y="1774.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.06%)</title><rect x="990.5" y="1747.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="993.5" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.06%)</title><rect x="991.2" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="994.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_new_if_for_predicate(ProjNode*, Node*, Deoptimization::DeoptReason) (1 samples, 0.06%)</title><rect x="991.2" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="994.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.06%)</title><rect x="991.2" y="1827.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="994.2" y="1838.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.06%)</title><rect x="991.2" y="1811.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="994.2" y="1822.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.06%)</title><rect x="992.0" y="1875.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (8 samples, 0.50%)</title><rect x="992.7" y="1875.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="995.7" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (4 samples, 0.25%)</title><rect x="995.7" y="1859.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="998.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.50%)</title><rect x="998.6" y="1875.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.6" y="1886.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.06%)</title><rect x="1003.0" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1006.0" y="1870.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.06%)</title><rect x="1003.8" y="1859.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1006.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (182 samples, 11.35%)</title><rect x="1004.5" y="1875.0" width="134.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.5" y="1886.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (176 samples, 10.98%)</title><rect x="1008.9" y="1859.0" width="129.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1011.9" y="1870.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.06%)</title><rect x="1009.7" y="1843.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1012.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (8 samples, 0.50%)</title><rect x="1010.4" y="1843.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1013.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (166 samples, 10.36%)</title><rect x="1016.3" y="1843.0" width="122.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1019.3" y="1854.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (5 samples, 0.31%)</title><rect x="1106.8" y="1827.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1109.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (4 samples, 0.25%)</title><rect x="1107.6" y="1811.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1110.6" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (36 samples, 2.25%)</title><rect x="1110.5" y="1827.0" width="26.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.5" y="1838.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.12%)</title><rect x="1137.0" y="1827.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.19%)</title><rect x="1138.5" y="1875.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.06%)</title><rect x="1139.9" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.25%)</title><rect x="1140.7" y="1875.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.12%)</title><rect x="1142.2" y="1859.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.06%)</title><rect x="1142.2" y="1843.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.06%)</title><rect x="1142.2" y="1827.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.06%)</title><rect x="1142.9" y="1843.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.9" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find(Node const*) (1 samples, 0.06%)</title><rect x="1142.9" y="1827.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.25%)</title><rect x="1143.6" y="1875.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.25%)</title><rect x="1143.6" y="1859.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.6" y="1870.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.06%)</title><rect x="1144.4" y="1843.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.4" y="1854.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.06%)</title><rect x="1144.4" y="1827.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.06%)</title><rect x="1145.1" y="1843.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.1" y="1854.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.06%)</title><rect x="1145.1" y="1827.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.1" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1145.8" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.8" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.06%)</title><rect x="1145.8" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.06%)</title><rect x="1146.6" y="1891.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.6" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (26 samples, 1.62%)</title><rect x="1147.3" y="1891.0" width="19.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.3" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (26 samples, 1.62%)</title><rect x="1147.3" y="1875.0" width="19.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.3" y="1886.0"></text>
</g>
<g>
<title>EncodePNode::Value(PhaseTransform*) const (1 samples, 0.06%)</title><rect x="1148.0" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.0" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.06%)</title><rect x="1148.0" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.0" y="1854.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.06%)</title><rect x="1148.0" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.0" y="1838.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1148.8" y="1859.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.06%)</title><rect x="1148.8" y="1843.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.06%)</title><rect x="1148.8" y="1827.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.8" y="1838.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.19%)</title><rect x="1149.5" y="1859.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.5" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (2 samples, 0.12%)</title><rect x="1149.5" y="1843.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.5" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.12%)</title><rect x="1149.5" y="1827.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.5" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.12%)</title><rect x="1149.5" y="1811.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.5" y="1822.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.06%)</title><rect x="1151.0" y="1843.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.0" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.06%)</title><rect x="1151.0" y="1827.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.0" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="1151.0" y="1811.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.0" y="1822.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.06%)</title><rect x="1151.7" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.7" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.12%)</title><rect x="1152.5" y="1859.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.5" y="1870.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.06%)</title><rect x="1153.2" y="1843.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.06%)</title><rect x="1153.9" y="1859.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.12%)</title><rect x="1154.7" y="1859.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.7" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.06%)</title><rect x="1155.4" y="1843.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.4" y="1854.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.06%)</title><rect x="1155.4" y="1827.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.4" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.19%)</title><rect x="1156.1" y="1859.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.1" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.12%)</title><rect x="1156.9" y="1843.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.9" y="1854.0"></text>
</g>
<g>
<title>PhiNode::simple_data_loop_check(Node*) const (1 samples, 0.06%)</title><rect x="1157.6" y="1827.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.6" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.06%)</title><rect x="1158.3" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.3" y="1870.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.06%)</title><rect x="1158.3" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.3" y="1854.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.06%)</title><rect x="1159.1" y="1859.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.1" y="1870.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.06%)</title><rect x="1159.1" y="1843.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.1" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (4 samples, 0.25%)</title><rect x="1159.8" y="1859.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.06%)</title><rect x="1159.8" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.06%)</title><rect x="1159.8" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.8" y="1838.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.12%)</title><rect x="1160.6" y="1843.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.6" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.06%)</title><rect x="1162.0" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.0" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 0.25%)</title><rect x="1162.8" y="1859.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.8" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (4 samples, 0.25%)</title><rect x="1162.8" y="1843.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.8" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.25%)</title><rect x="1162.8" y="1827.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.8" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.25%)</title><rect x="1162.8" y="1811.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.8" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.19%)</title><rect x="1162.8" y="1795.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.8" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.19%)</title><rect x="1162.8" y="1779.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.8" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.19%)</title><rect x="1162.8" y="1763.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.8" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.19%)</title><rect x="1162.8" y="1747.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.8" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.19%)</title><rect x="1162.8" y="1731.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.8" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.19%)</title><rect x="1162.8" y="1715.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.8" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.19%)</title><rect x="1162.8" y="1699.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.8" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.19%)</title><rect x="1162.8" y="1683.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.8" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.19%)</title><rect x="1162.8" y="1667.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.8" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.19%)</title><rect x="1162.8" y="1651.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.8" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.19%)</title><rect x="1162.8" y="1635.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.8" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.19%)</title><rect x="1162.8" y="1619.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.8" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.19%)</title><rect x="1162.8" y="1603.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.8" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.19%)</title><rect x="1162.8" y="1587.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.8" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.12%)</title><rect x="1162.8" y="1571.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.8" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.12%)</title><rect x="1162.8" y="1555.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.8" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.06%)</title><rect x="1162.8" y="1539.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.8" y="1550.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.06%)</title><rect x="1162.8" y="1523.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.8" y="1534.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="1162.8" y="1507.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.8" y="1518.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.06%)</title><rect x="1163.5" y="1539.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.5" y="1550.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="1163.5" y="1523.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.5" y="1534.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.06%)</title><rect x="1164.2" y="1571.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.2" y="1582.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="1164.2" y="1555.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.2" y="1566.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.06%)</title><rect x="1165.0" y="1795.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.0" y="1806.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="1165.0" y="1779.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.0" y="1790.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.06%)</title><rect x="1165.7" y="1859.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.7" y="1870.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.06%)</title><rect x="1165.7" y="1843.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.7" y="1854.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.06%)</title><rect x="1165.7" y="1827.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.7" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.06%)</title><rect x="1165.7" y="1811.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="1822.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.06%)</title><rect x="1165.7" y="1795.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.7" y="1806.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.06%)</title><rect x="1165.7" y="1779.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.7" y="1790.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.12%)</title><rect x="1166.4" y="1891.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.4" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.12%)</title><rect x="1166.4" y="1875.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.4" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.06%)</title><rect x="1166.4" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.4" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_card_mark(Node*) (1 samples, 0.06%)</title><rect x="1166.4" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.06%)</title><rect x="1166.4" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.4" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="1167.2" y="1859.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.2" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.06%)</title><rect x="1167.2" y="1843.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.2" y="1854.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.06%)</title><rect x="1167.2" y="1827.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1170.2" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.19%)</title><rect x="1167.9" y="1891.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.06%)</title><rect x="1167.9" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.06%)</title><rect x="1167.9" y="1859.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.9" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.06%)</title><rect x="1167.9" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.9" y="1854.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.06%)</title><rect x="1167.9" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.9" y="1838.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.06%)</title><rect x="1167.9" y="1811.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.9" y="1822.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.06%)</title><rect x="1168.7" y="1875.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.06%)</title><rect x="1168.7" y="1859.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.06%)</title><rect x="1168.7" y="1843.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.7" y="1854.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.06%)</title><rect x="1168.7" y="1827.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.7" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_lock_node(LockNode*) (1 samples, 0.06%)</title><rect x="1169.4" y="1875.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.4" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::opt_bits_test(Node*, Node*, int, Node*, int, int, bool) (1 samples, 0.06%)</title><rect x="1169.4" y="1859.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.4" y="1870.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.06%)</title><rect x="1169.4" y="1843.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.4" y="1854.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.06%)</title><rect x="1170.1" y="1891.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.1" y="1902.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.06%)</title><rect x="1170.9" y="1891.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1173.9" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (16 samples, 1.00%)</title><rect x="1171.6" y="1907.0" width="11.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.6" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (16 samples, 1.00%)</title><rect x="1171.6" y="1891.0" width="11.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.6" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (16 samples, 1.00%)</title><rect x="1171.6" y="1875.0" width="11.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.6" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (16 samples, 1.00%)</title><rect x="1171.6" y="1859.0" width="11.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.6" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (16 samples, 1.00%)</title><rect x="1171.6" y="1843.0" width="11.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.6" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (16 samples, 1.00%)</title><rect x="1171.6" y="1827.0" width="11.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.6" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.69%)</title><rect x="1171.6" y="1811.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.6" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.69%)</title><rect x="1171.6" y="1795.0" width="8.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.6" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.69%)</title><rect x="1171.6" y="1779.0" width="8.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.6" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.69%)</title><rect x="1171.6" y="1763.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.6" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.69%)</title><rect x="1171.6" y="1747.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.6" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.69%)</title><rect x="1171.6" y="1731.0" width="8.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.6" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.44%)</title><rect x="1171.6" y="1715.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.6" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.44%)</title><rect x="1171.6" y="1699.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.6" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.44%)</title><rect x="1171.6" y="1683.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.44%)</title><rect x="1171.6" y="1667.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.44%)</title><rect x="1171.6" y="1651.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.37%)</title><rect x="1171.6" y="1635.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.6" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.37%)</title><rect x="1171.6" y="1619.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.6" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.37%)</title><rect x="1171.6" y="1603.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.6" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.37%)</title><rect x="1171.6" y="1587.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.6" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.37%)</title><rect x="1171.6" y="1571.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.6" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.37%)</title><rect x="1171.6" y="1555.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.37%)</title><rect x="1171.6" y="1539.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.6" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.25%)</title><rect x="1171.6" y="1523.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.6" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.25%)</title><rect x="1171.6" y="1507.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.25%)</title><rect x="1171.6" y="1491.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.6" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.25%)</title><rect x="1171.6" y="1475.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.6" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.25%)</title><rect x="1171.6" y="1459.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.25%)</title><rect x="1171.6" y="1443.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.6" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.25%)</title><rect x="1171.6" y="1427.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.6" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.25%)</title><rect x="1171.6" y="1411.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.6" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.25%)</title><rect x="1171.6" y="1395.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.6" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.25%)</title><rect x="1171.6" y="1379.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.6" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.25%)</title><rect x="1171.6" y="1363.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.6" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.25%)</title><rect x="1171.6" y="1347.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.6" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.19%)</title><rect x="1171.6" y="1331.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.6" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.19%)</title><rect x="1171.6" y="1315.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.6" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.19%)</title><rect x="1171.6" y="1299.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.6" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.19%)</title><rect x="1171.6" y="1283.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.6" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.19%)</title><rect x="1171.6" y="1267.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.6" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1171.6" y="1251.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.6" y="1262.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1171.6" y="1235.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.6" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1171.6" y="1219.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.6" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1171.6" y="1203.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1171.6" y="1187.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.6" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1171.6" y="1171.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1171.6" y="1155.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.06%)</title><rect x="1171.6" y="1139.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.6" y="1150.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.06%)</title><rect x="1171.6" y="1123.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.6" y="1134.0"></text>
</g>
<g>
<title>TypeKlassPtr::as_instance_type() const (1 samples, 0.06%)</title><rect x="1171.6" y="1107.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.6" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_ptr_type(TypePtr::PTR) const (1 samples, 0.06%)</title><rect x="1171.6" y="1091.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.06%)</title><rect x="1171.6" y="1075.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.6" y="1086.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.06%)</title><rect x="1171.6" y="1059.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.6" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.06%)</title><rect x="1171.6" y="1043.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.6" y="1054.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.06%)</title><rect x="1171.6" y="1027.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.06%)</title><rect x="1172.3" y="1251.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.3" y="1262.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.06%)</title><rect x="1172.3" y="1235.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.3" y="1246.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.06%)</title><rect x="1172.3" y="1219.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.3" y="1230.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.06%)</title><rect x="1172.3" y="1203.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.3" y="1214.0"></text>
</g>
<g>
<title>BitMap::BitMap(unsigned long*, unsigned long) (1 samples, 0.06%)</title><rect x="1172.3" y="1187.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.3" y="1198.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.06%)</title><rect x="1173.1" y="1251.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.1" y="1262.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.06%)</title><rect x="1173.1" y="1235.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.1" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1173.8" y="1331.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1173.8" y="1315.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1173.8" y="1299.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1173.8" y="1283.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.8" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1173.8" y="1267.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1173.8" y="1251.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1173.8" y="1235.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.8" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1173.8" y="1219.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1173.8" y="1203.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1173.8" y="1187.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1173.8" y="1171.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1173.8" y="1155.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1173.8" y="1139.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.8" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1173.8" y="1123.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1173.8" y="1107.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1173.8" y="1091.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1173.8" y="1075.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1173.8" y="1059.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1173.8" y="1043.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.8" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1173.8" y="1027.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.8" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1173.8" y="1011.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1173.8" y="995.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.8" y="1006.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.06%)</title><rect x="1173.8" y="979.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.8" y="990.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.06%)</title><rect x="1173.8" y="963.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.8" y="974.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.06%)</title><rect x="1173.8" y="947.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.8" y="958.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.06%)</title><rect x="1173.8" y="931.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="942.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.06%)</title><rect x="1173.8" y="915.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="926.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.06%)</title><rect x="1173.8" y="899.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="910.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.06%)</title><rect x="1173.8" y="883.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="1174.5" y="1523.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="1174.5" y="1507.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.5" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.12%)</title><rect x="1174.5" y="1491.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.5" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.12%)</title><rect x="1174.5" y="1475.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.12%)</title><rect x="1174.5" y="1459.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.12%)</title><rect x="1174.5" y="1443.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1174.5" y="1427.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1174.5" y="1411.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.5" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1174.5" y="1395.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.5" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1174.5" y="1379.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1174.5" y="1363.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1174.5" y="1347.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1174.5" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1174.5" y="1315.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.5" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1174.5" y="1299.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1174.5" y="1283.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1174.5" y="1267.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1174.5" y="1251.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1174.5" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1174.5" y="1219.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1174.5" y="1203.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1174.5" y="1187.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1174.5" y="1171.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1174.5" y="1155.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1174.5" y="1139.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.5" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1174.5" y="1123.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1174.5" y="1107.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1174.5" y="1091.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1174.5" y="1075.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1174.5" y="1059.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1174.5" y="1043.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1174.5" y="1027.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.5" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1174.5" y="1011.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1174.5" y="995.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1174.5" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1174.5" y="963.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1174.5" y="947.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.5" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1174.5" y="931.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1174.5" y="915.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.5" y="926.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.06%)</title><rect x="1174.5" y="899.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="910.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.06%)</title><rect x="1174.5" y="883.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="894.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.06%)</title><rect x="1174.5" y="867.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.5" y="878.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.06%)</title><rect x="1174.5" y="851.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.5" y="862.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.06%)</title><rect x="1174.5" y="835.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="846.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.06%)</title><rect x="1174.5" y="819.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.06%)</title><rect x="1175.3" y="1427.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.3" y="1438.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.06%)</title><rect x="1175.3" y="1411.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.3" y="1422.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.06%)</title><rect x="1175.3" y="1395.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="1406.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.06%)</title><rect x="1175.3" y="1379.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.06%)</title><rect x="1176.0" y="1635.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.0" y="1646.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.06%)</title><rect x="1176.0" y="1619.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="1630.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.06%)</title><rect x="1176.0" y="1603.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.0" y="1614.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.06%)</title><rect x="1176.0" y="1587.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.0" y="1598.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.25%)</title><rect x="1176.7" y="1715.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.19%)</title><rect x="1176.7" y="1699.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.19%)</title><rect x="1176.7" y="1683.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.19%)</title><rect x="1176.7" y="1667.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.19%)</title><rect x="1176.7" y="1651.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.7" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.19%)</title><rect x="1176.7" y="1635.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.19%)</title><rect x="1176.7" y="1619.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.19%)</title><rect x="1176.7" y="1603.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.19%)</title><rect x="1176.7" y="1587.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.19%)</title><rect x="1176.7" y="1571.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.7" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.19%)</title><rect x="1176.7" y="1555.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.19%)</title><rect x="1176.7" y="1539.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.19%)</title><rect x="1176.7" y="1523.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="1176.7" y="1507.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.12%)</title><rect x="1176.7" y="1491.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.12%)</title><rect x="1176.7" y="1475.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.12%)</title><rect x="1176.7" y="1459.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.12%)</title><rect x="1176.7" y="1443.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.12%)</title><rect x="1176.7" y="1427.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.7" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="1176.7" y="1411.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.7" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.12%)</title><rect x="1176.7" y="1395.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.12%)</title><rect x="1176.7" y="1379.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.12%)</title><rect x="1176.7" y="1363.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.7" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.12%)</title><rect x="1176.7" y="1347.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.12%)</title><rect x="1176.7" y="1331.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.7" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="1176.7" y="1315.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.12%)</title><rect x="1176.7" y="1299.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.12%)</title><rect x="1176.7" y="1283.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.12%)</title><rect x="1176.7" y="1267.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.12%)</title><rect x="1176.7" y="1251.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1176.7" y="1235.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1176.7" y="1219.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.7" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1176.7" y="1203.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1176.7" y="1187.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1176.7" y="1171.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1176.7" y="1155.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1176.7" y="1139.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1176.7" y="1123.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.7" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1176.7" y="1107.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1176.7" y="1091.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1176.7" y="1075.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1176.7" y="1059.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1176.7" y="1043.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1176.7" y="1027.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1176.7" y="1011.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.7" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1176.7" y="995.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1176.7" y="979.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1176.7" y="963.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1176.7" y="947.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1176.7" y="931.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1176.7" y="915.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1176.7" y="899.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1176.7" y="883.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1176.7" y="867.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1176.7" y="851.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1176.7" y="835.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1176.7" y="819.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1176.7" y="803.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1176.7" y="787.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1176.7" y="771.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1176.7" y="755.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1176.7" y="739.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1176.7" y="723.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1176.7" y="707.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1176.7" y="691.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1176.7" y="675.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1176.7" y="659.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1176.7" y="643.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1176.7" y="627.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1176.7" y="611.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1176.7" y="595.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1176.7" y="579.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1176.7" y="563.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.06%)</title><rect x="1176.7" y="547.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.06%)</title><rect x="1176.7" y="531.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="542.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.06%)</title><rect x="1176.7" y="515.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="526.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.06%)</title><rect x="1176.7" y="499.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.7" y="510.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.06%)</title><rect x="1176.7" y="483.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="494.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.06%)</title><rect x="1176.7" y="467.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.7" y="478.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.06%)</title><rect x="1176.7" y="451.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.7" y="462.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.06%)</title><rect x="1176.7" y="435.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="446.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.06%)</title><rect x="1176.7" y="419.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="430.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.06%)</title><rect x="1176.7" y="403.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.06%)</title><rect x="1177.5" y="1235.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.06%)</title><rect x="1177.5" y="1219.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.5" y="1230.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.06%)</title><rect x="1177.5" y="1203.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="1214.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1178.2" y="1507.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.2" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1178.2" y="1491.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.2" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1178.2" y="1475.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1178.2" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1178.2" y="1443.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1178.2" y="1427.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1178.2" y="1411.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.2" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1178.2" y="1395.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.2" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1178.2" y="1379.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1178.2" y="1363.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1178.2" y="1347.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1178.2" y="1331.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.2" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1178.2" y="1315.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.2" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1178.2" y="1299.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1178.2" y="1283.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1178.2" y="1267.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1178.2" y="1251.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1178.2" y="1235.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1178.2" y="1219.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.2" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1178.2" y="1203.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.2" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1178.2" y="1187.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1178.2" y="1171.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1178.2" y="1155.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1178.2" y="1139.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1178.2" y="1123.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.2" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1178.2" y="1107.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1178.2" y="1091.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1178.2" y="1075.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1178.2" y="1059.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1178.2" y="1043.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.06%)</title><rect x="1178.2" y="1027.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.2" y="1038.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.06%)</title><rect x="1178.2" y="1011.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.2" y="1022.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.06%)</title><rect x="1178.2" y="995.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="1006.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.06%)</title><rect x="1178.2" y="979.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.2" y="990.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.06%)</title><rect x="1178.2" y="963.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="974.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1179.0" y="1699.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.0" y="1710.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1179.0" y="1683.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.0" y="1694.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1179.0" y="1667.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.0" y="1678.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1179.0" y="1651.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.0" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1179.0" y="1635.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="1646.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1179.0" y="1619.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.0" y="1630.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1179.0" y="1603.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.0" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1179.0" y="1587.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.0" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1179.0" y="1571.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.0" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1179.0" y="1555.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.0" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1179.0" y="1539.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.0" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1179.0" y="1523.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.0" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1179.0" y="1507.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.0" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1179.0" y="1491.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.0" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1179.0" y="1475.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.0" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1179.0" y="1459.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.0" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1179.0" y="1443.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.0" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1179.0" y="1427.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.0" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1179.0" y="1411.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.0" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1179.0" y="1395.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1179.0" y="1379.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.0" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1179.0" y="1363.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.0" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1179.0" y="1347.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.0" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1179.0" y="1331.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.0" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1179.0" y="1315.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.0" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1179.0" y="1299.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1179.0" y="1283.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.0" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1179.0" y="1267.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.0" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1179.0" y="1251.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1179.0" y="1235.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="1246.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.06%)</title><rect x="1179.0" y="1219.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.0" y="1230.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.06%)</title><rect x="1179.0" y="1203.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="1214.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.06%)</title><rect x="1179.0" y="1187.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="1198.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.06%)</title><rect x="1179.0" y="1171.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="1182.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.06%)</title><rect x="1179.0" y="1155.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="1166.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1179.0" y="1139.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1179.0" y="1123.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.0" y="1134.0"></text>
</g>
<g>
<title>ciEnv::check_klass_accessibility(ciKlass*, Klass*) (1 samples, 0.06%)</title><rect x="1179.0" y="1107.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.0" y="1118.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.31%)</title><rect x="1179.7" y="1811.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.7" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.25%)</title><rect x="1179.7" y="1795.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.7" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.25%)</title><rect x="1179.7" y="1779.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.25%)</title><rect x="1179.7" y="1763.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.7" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.25%)</title><rect x="1179.7" y="1747.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.7" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.25%)</title><rect x="1179.7" y="1731.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.25%)</title><rect x="1179.7" y="1715.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.25%)</title><rect x="1179.7" y="1699.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.25%)</title><rect x="1179.7" y="1683.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.25%)</title><rect x="1179.7" y="1667.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.7" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.25%)</title><rect x="1179.7" y="1651.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.7" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.25%)</title><rect x="1179.7" y="1635.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.7" y="1646.0"></text>
</g>
<g>
<title>GraphKit::push(Node*) (1 samples, 0.06%)</title><rect x="1179.7" y="1619.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="1630.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.19%)</title><rect x="1180.4" y="1619.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.19%)</title><rect x="1180.4" y="1603.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.4" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.19%)</title><rect x="1180.4" y="1587.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.19%)</title><rect x="1180.4" y="1571.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.19%)</title><rect x="1180.4" y="1555.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.12%)</title><rect x="1181.2" y="1539.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.12%)</title><rect x="1181.2" y="1523.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.2" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1181.2" y="1507.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1181.2" y="1491.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1181.2" y="1475.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1181.2" y="1459.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1181.2" y="1443.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1181.2" y="1427.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1181.2" y="1411.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1181.2" y="1395.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1181.2" y="1379.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1181.2" y="1363.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1181.2" y="1347.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1181.2" y="1331.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1181.2" y="1315.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1181.2" y="1299.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1181.2" y="1283.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1181.2" y="1267.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1181.2" y="1251.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1181.2" y="1235.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1181.2" y="1219.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1181.2" y="1203.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1181.2" y="1187.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1181.2" y="1171.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1181.2" y="1155.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1181.2" y="1139.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1181.2" y="1123.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1181.2" y="1107.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1181.2" y="1091.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1181.2" y="1075.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1181.2" y="1059.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1181.2" y="1043.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1181.2" y="1027.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="1038.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1181.2" y="1011.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.2" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1181.2" y="995.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1181.2" y="979.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1181.2" y="963.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1181.2" y="947.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1181.2" y="931.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1181.2" y="915.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1181.2" y="899.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1181.2" y="883.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1181.2" y="867.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1181.2" y="851.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1181.2" y="835.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="846.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.06%)</title><rect x="1181.2" y="819.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="830.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.06%)</title><rect x="1181.2" y="803.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="814.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.06%)</title><rect x="1181.2" y="787.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="798.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.06%)</title><rect x="1181.2" y="771.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="782.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.06%)</title><rect x="1181.2" y="755.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="766.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.06%)</title><rect x="1181.2" y="739.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="750.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.06%)</title><rect x="1181.2" y="723.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.06%)</title><rect x="1181.9" y="1507.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.9" y="1518.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1181.9" y="1491.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.9" y="1502.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.06%)</title><rect x="1181.9" y="1475.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.9" y="1486.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.06%)</title><rect x="1181.9" y="1459.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.9" y="1470.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1182.6" y="1795.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="1806.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1182.6" y="1779.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.6" y="1790.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1182.6" y="1763.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.6" y="1774.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1182.6" y="1747.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.6" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1182.6" y="1731.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.6" y="1742.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1182.6" y="1715.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.6" y="1726.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1182.6" y="1699.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="1710.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1182.6" y="1683.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.6" y="1694.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1182.6" y="1667.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1182.6" y="1651.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="1662.0"></text>
</g>
<g>
<title>Parse::ensure_phis_everywhere() (1 samples, 0.06%)</title><rect x="1182.6" y="1635.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="1646.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.06%)</title><rect x="1182.6" y="1619.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.6" y="1630.0"></text>
</g>
<g>
<title>Parse::Block::local_type_at(int) const (1 samples, 0.06%)</title><rect x="1182.6" y="1603.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.6" y="1614.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.06%)</title><rect x="1182.6" y="1587.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="1598.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.06%)</title><rect x="1182.6" y="1571.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="1582.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (3 samples, 0.19%)</title><rect x="1183.4" y="1907.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.4" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.12%)</title><rect x="1183.4" y="1891.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.4" y="1902.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.06%)</title><rect x="1184.8" y="1891.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.8" y="1902.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.06%)</title><rect x="1185.6" y="1907.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.6" y="1918.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.06%)</title><rect x="1185.6" y="1891.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.6" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.06%)</title><rect x="1185.6" y="1875.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.6" y="1886.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.06%)</title><rect x="1186.3" y="1939.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.3" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.06%)</title><rect x="1186.3" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.3" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.06%)</title><rect x="1186.3" y="1907.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.3" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.06%)</title><rect x="1186.3" y="1891.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.3" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.06%)</title><rect x="1186.3" y="1875.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.3" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.06%)</title><rect x="1186.3" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.3" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.06%)</title><rect x="1186.3" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.3" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.06%)</title><rect x="1186.3" y="1827.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.3" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.06%)</title><rect x="1186.3" y="1811.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.3" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.06%)</title><rect x="1186.3" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.3" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::if_null(ValueType*, Instruction::Condition) (1 samples, 0.06%)</title><rect x="1186.3" y="1779.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.3" y="1790.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.06%)</title><rect x="1186.3" y="1763.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.3" y="1774.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.06%)</title><rect x="1186.3" y="1747.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.3" y="1758.0"></text>
</g>
<g>
<title>Constant::hash() const (1 samples, 0.06%)</title><rect x="1186.3" y="1731.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.3" y="1742.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.12%)</title><rect x="1187.1" y="1955.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.1" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.12%)</title><rect x="1187.1" y="1939.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.1" y="1950.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.12%)</title><rect x="1187.1" y="1923.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.1" y="1934.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (1 samples, 0.06%)</title><rect x="1187.1" y="1907.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.1" y="1918.0"></text>
</g>
<g>
<title>CodeHeap::next_free(HeapBlock*) const (1 samples, 0.06%)</title><rect x="1187.1" y="1891.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="1902.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.06%)</title><rect x="1187.8" y="1907.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.8" y="1918.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.06%)</title><rect x="1188.5" y="1971.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.5" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.06%)</title><rect x="1188.5" y="1955.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.5" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.06%)</title><rect x="1188.5" y="1939.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.5" y="1950.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.06%)</title><rect x="1188.5" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.5" y="1934.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.06%)</title><rect x="1188.5" y="1907.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.5" y="1918.0"></text>
</g>
<g>
<title>_init (1 samples, 0.06%)</title><rect x="1188.5" y="1891.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1191.5" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.06%)</title><rect x="1189.3" y="2003.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.3" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.06%)</title><rect x="1189.3" y="1987.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.3" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.06%)</title><rect x="1189.3" y="1971.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.3" y="1982.0"></text>
</g>
</g>
</svg>
