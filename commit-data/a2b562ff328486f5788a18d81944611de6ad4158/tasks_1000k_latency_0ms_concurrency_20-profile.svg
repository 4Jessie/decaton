<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,530 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (269 samples, 17.58%)</title><rect x="10.8" y="2035.0" width="207.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.8" y="2046.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.13%)</title><rect x="10.8" y="2019.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.8" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.07%)</title><rect x="11.5" y="2003.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.5" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.commitOffsets (1 samples, 0.07%)</title><rect x="11.5" y="1987.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.5" y="1998.0"></text>
</g>
<g>
<title>java/util/OptionalLong.ifPresent (1 samples, 0.07%)</title><rect x="11.5" y="1971.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="14.5" y="1982.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.07%)</title><rect x="11.5" y="1955.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.5" y="1966.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="11.5" y="1939.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.5" y="1950.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="11.5" y="1923.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.5" y="1934.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.07%)</title><rect x="11.5" y="1907.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.5" y="1918.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.07%)</title><rect x="11.5" y="1891.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.5" y="1902.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokeinterface(CallInfo&amp;, Handle, constantPoolHandle, int, Thread*) (1 samples, 0.07%)</title><rect x="11.5" y="1875.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.5" y="1886.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="11.5" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.5" y="1870.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_interface_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="11.5" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.5" y="1854.0"></text>
</g>
<g>
<title>CallInfo::set_interface(KlassHandle, KlassHandle, methodHandle, methodHandle, int, Thread*) (1 samples, 0.07%)</title><rect x="11.5" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.5" y="1838.0"></text>
</g>
<g>
<title>CallInfo::set_common(KlassHandle, KlassHandle, methodHandle, methodHandle, CallInfo::CallKind, int, Thread*) (1 samples, 0.07%)</title><rect x="11.5" y="1811.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.5" y="1822.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle, int) (1 samples, 0.07%)</title><rect x="11.5" y="1795.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.5" y="1806.0"></text>
</g>
<g>
<title>CompilationPolicy::can_be_compiled(methodHandle, int) (1 samples, 0.07%)</title><rect x="11.5" y="1779.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.5" y="1790.0"></text>
</g>
<g>
<title>AbstractInterpreter::method_kind(methodHandle) (1 samples, 0.07%)</title><rect x="11.5" y="1763.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.5" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (267 samples, 17.45%)</title><rect x="12.3" y="2019.0" width="205.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.3" y="2030.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (7 samples, 0.46%)</title><rect x="12.3" y="2003.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.3" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.39%)</title><rect x="13.1" y="1987.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.1" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1346239215.accept (6 samples, 0.39%)</title><rect x="13.1" y="1971.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.1" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (6 samples, 0.39%)</title><rect x="13.1" y="1955.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.1" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.39%)</title><rect x="13.1" y="1939.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.1" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.33%)</title><rect x="13.9" y="1923.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.9" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.20%)</title><rect x="17.7" y="2003.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.7" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.20%)</title><rect x="17.7" y="1987.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.7" y="1998.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="17.7" y="1971.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="17.7" y="1955.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.7" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="17.7" y="1939.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.7" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="18.5" y="1971.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.5" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="18.5" y="1955.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="21.5" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="18.5" y="1939.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.5" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="18.5" y="1923.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.5" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="18.5" y="1907.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.5" y="1918.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="18.5" y="1891.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="21.5" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.07%)</title><rect x="19.3" y="1971.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.3" y="1982.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="19.3" y="1955.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="22.3" y="1966.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="19.3" y="1939.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="22.3" y="1950.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="19.3" y="1923.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="22.3" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="19.3" y="1907.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="22.3" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.13%)</title><rect x="20.0" y="2003.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.0" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.13%)</title><rect x="20.0" y="1987.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.0" y="1998.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (205 samples, 13.40%)</title><rect x="21.6" y="2003.0" width="158.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.6" y="2014.0">java/lang/Iterable.f..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/21539600.accept (192 samples, 12.55%)</title><rect x="21.6" y="1987.0" width="148.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.6" y="1998.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (192 samples, 12.55%)</title><rect x="21.6" y="1971.0" width="148.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.6" y="1982.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/BlacklistedKeysFilter.shouldTake (1 samples, 0.07%)</title><rect x="21.6" y="1955.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.6" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (156 samples, 10.20%)</title><rect x="22.3" y="1955.0" width="120.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="25.3" y="1966.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (156 samples, 10.20%)</title><rect x="22.3" y="1939.0" width="120.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="25.3" y="1950.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (156 samples, 10.20%)</title><rect x="22.3" y="1923.0" width="120.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.3" y="1934.0">com/linecorp/de..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="32.4" y="1907.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="35.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (138 samples, 9.02%)</title><rect x="33.1" y="1907.0" width="106.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.1" y="1918.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (138 samples, 9.02%)</title><rect x="33.1" y="1891.0" width="106.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="36.1" y="1902.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (138 samples, 9.02%)</title><rect x="33.1" y="1875.0" width="106.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="36.1" y="1886.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (112 samples, 7.32%)</title><rect x="33.1" y="1859.0" width="86.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="36.1" y="1870.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (112 samples, 7.32%)</title><rect x="33.1" y="1843.0" width="86.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="36.1" y="1854.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (112 samples, 7.32%)</title><rect x="33.1" y="1827.0" width="86.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="36.1" y="1838.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (112 samples, 7.32%)</title><rect x="33.1" y="1811.0" width="86.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="36.1" y="1822.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (112 samples, 7.32%)</title><rect x="33.1" y="1795.0" width="86.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="36.1" y="1806.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (85 samples, 5.56%)</title><rect x="54.0" y="1779.0" width="65.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.0" y="1790.0">sun/mis..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="54.7" y="1763.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="57.7" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (73 samples, 4.77%)</title><rect x="55.5" y="1763.0" width="56.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="58.5" y="1774.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.20%)</title><rect x="57.0" y="1747.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="60.0" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.20%)</title><rect x="59.4" y="1747.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="62.4" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (45 samples, 2.94%)</title><rect x="61.7" y="1747.0" width="34.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="64.7" y="1758.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.20%)</title><rect x="96.4" y="1747.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="99.4" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (17 samples, 1.11%)</title><rect x="98.7" y="1747.0" width="13.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="101.7" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.39%)</title><rect x="111.8" y="1763.0" width="4.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="114.8" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.13%)</title><rect x="116.4" y="1763.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="119.4" y="1774.0"></text>
</g>
<g>
<title>_init (2 samples, 0.13%)</title><rect x="118.0" y="1763.0" width="1.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="121.0" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (26 samples, 1.70%)</title><rect x="119.5" y="1859.0" width="20.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.5" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (26 samples, 1.70%)</title><rect x="119.5" y="1843.0" width="20.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="122.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (26 samples, 1.70%)</title><rect x="119.5" y="1827.0" width="20.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="122.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (26 samples, 1.70%)</title><rect x="119.5" y="1811.0" width="20.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="122.5" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.26%)</title><rect x="139.6" y="1907.0" width="3.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="142.6" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (4 samples, 0.26%)</title><rect x="142.7" y="1955.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="145.7" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 0.26%)</title><rect x="142.7" y="1939.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.7" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.20%)</title><rect x="145.7" y="1955.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="148.7" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.20%)</title><rect x="145.7" y="1939.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="148.7" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.20%)</title><rect x="145.7" y="1923.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.7" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (28 samples, 1.83%)</title><rect x="148.1" y="1955.0" width="21.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="151.1" y="1966.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (28 samples, 1.83%)</title><rect x="148.1" y="1939.0" width="21.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="151.1" y="1950.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 0.65%)</title><rect x="159.6" y="1923.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="162.6" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.33%)</title><rect x="161.2" y="1907.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.2" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 0.33%)</title><rect x="161.2" y="1891.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.2" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.33%)</title><rect x="161.2" y="1875.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="164.2" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="163.5" y="1859.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="166.5" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.07%)</title><rect x="163.5" y="1843.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="166.5" y="1854.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="163.5" y="1827.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="166.5" y="1838.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="163.5" y="1811.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="166.5" y="1822.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="163.5" y="1795.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="166.5" y="1806.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="164.2" y="1859.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="167.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="165.0" y="1907.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="168.0" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.13%)</title><rect x="165.8" y="1907.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.8" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.20%)</title><rect x="167.3" y="1923.0" width="2.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="170.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.07%)</title><rect x="169.6" y="1987.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.6" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.07%)</title><rect x="169.6" y="1971.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="172.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="169.6" y="1955.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.6" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.07%)</title><rect x="169.6" y="1939.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="172.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (9 samples, 0.59%)</title><rect x="170.4" y="1987.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="173.4" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (9 samples, 0.59%)</title><rect x="170.4" y="1971.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.59%)</title><rect x="170.4" y="1955.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="173.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.59%)</title><rect x="170.4" y="1939.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="173.4" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (9 samples, 0.59%)</title><rect x="170.4" y="1923.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="173.4" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (9 samples, 0.59%)</title><rect x="170.4" y="1907.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (3 samples, 0.20%)</title><rect x="177.4" y="1987.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.4" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.13%)</title><rect x="178.1" y="1971.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="181.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (50 samples, 3.27%)</title><rect x="179.7" y="2003.0" width="38.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.7" y="2014.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (50 samples, 3.27%)</title><rect x="179.7" y="1987.0" width="38.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="182.7" y="1998.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (26 samples, 1.70%)</title><rect x="179.7" y="1971.0" width="20.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="182.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (26 samples, 1.70%)</title><rect x="179.7" y="1955.0" width="20.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (26 samples, 1.70%)</title><rect x="179.7" y="1939.0" width="20.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="182.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 1.70%)</title><rect x="179.7" y="1923.0" width="20.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="182.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 1.70%)</title><rect x="179.7" y="1907.0" width="20.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.7" y="1918.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="179.7" y="1891.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="182.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (18 samples, 1.18%)</title><rect x="180.4" y="1891.0" width="13.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="183.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (1 samples, 0.07%)</title><rect x="188.9" y="1875.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="191.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.33%)</title><rect x="189.7" y="1875.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="192.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.33%)</title><rect x="189.7" y="1859.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="192.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.33%)</title><rect x="189.7" y="1843.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="192.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.33%)</title><rect x="189.7" y="1827.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.33%)</title><rect x="189.7" y="1811.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="192.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.33%)</title><rect x="189.7" y="1795.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.26%)</title><rect x="190.5" y="1779.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.5" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.07%)</title><rect x="193.6" y="1875.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.07%)</title><rect x="193.6" y="1859.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.07%)</title><rect x="193.6" y="1843.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="196.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (7 samples, 0.46%)</title><rect x="194.3" y="1891.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="197.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.46%)</title><rect x="194.3" y="1875.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="197.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.39%)</title><rect x="194.3" y="1859.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="197.3" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.39%)</title><rect x="194.3" y="1843.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.07%)</title><rect x="199.0" y="1859.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.0" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.07%)</title><rect x="199.0" y="1843.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.59%)</title><rect x="199.7" y="1971.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.59%)</title><rect x="199.7" y="1955.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.52%)</title><rect x="199.7" y="1939.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.7" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.13%)</title><rect x="201.3" y="1923.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="204.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="201.3" y="1907.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/1771957462.accept (1 samples, 0.07%)</title><rect x="201.3" y="1891.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/1771957462.accept (1 samples, 0.07%)</title><rect x="202.0" y="1907.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="205.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.07%)</title><rect x="202.0" y="1891.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.07%)</title><rect x="202.0" y="1875.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.07%)</title><rect x="202.0" y="1859.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.07%)</title><rect x="202.0" y="1843.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="205.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="202.0" y="1827.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="205.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.13%)</title><rect x="202.8" y="1923.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.13%)</title><rect x="202.8" y="1907.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.8" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (2 samples, 0.13%)</title><rect x="202.8" y="1891.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.8" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.07%)</title><rect x="203.6" y="1875.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="206.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.13%)</title><rect x="204.4" y="1923.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.13%)</title><rect x="204.4" y="1907.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="205.1" y="1891.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="208.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="205.1" y="1875.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="208.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.07%)</title><rect x="205.1" y="1859.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.1" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.07%)</title><rect x="205.1" y="1843.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="208.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="205.1" y="1827.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.1" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="205.1" y="1811.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="208.1" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="205.1" y="1795.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="208.1" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.07%)</title><rect x="205.9" y="1939.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.07%)</title><rect x="205.9" y="1923.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="208.9" y="1934.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="205.9" y="1907.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.9" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="205.9" y="1891.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.9" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="205.9" y="1875.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.52%)</title><rect x="206.7" y="1971.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="209.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.46%)</title><rect x="206.7" y="1955.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="206.7" y="1939.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.07%)</title><rect x="206.7" y="1923.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="209.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.07%)</title><rect x="206.7" y="1907.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="209.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="206.7" y="1891.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="209.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.read (1 samples, 0.07%)</title><rect x="206.7" y="1875.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="209.7" y="1886.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getShort (1 samples, 0.07%)</title><rect x="206.7" y="1859.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="209.7" y="1870.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.07%)</title><rect x="206.7" y="1843.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="209.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.39%)</title><rect x="207.4" y="1939.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="210.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.20%)</title><rect x="207.4" y="1923.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.20%)</title><rect x="207.4" y="1907.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.20%)</title><rect x="207.4" y="1891.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.20%)</title><rect x="207.4" y="1875.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="210.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.20%)</title><rect x="207.4" y="1859.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.20%)</title><rect x="207.4" y="1843.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.4" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.20%)</title><rect x="207.4" y="1827.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="210.4" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.13%)</title><rect x="207.4" y="1811.0" width="1.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="210.4" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.07%)</title><rect x="209.0" y="1811.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="212.0" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.07%)</title><rect x="209.0" y="1795.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="212.0" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.07%)</title><rect x="209.0" y="1779.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (3 samples, 0.20%)</title><rect x="209.8" y="1923.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="212.8" y="1934.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (3 samples, 0.20%)</title><rect x="209.8" y="1907.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="212.8" y="1918.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (3 samples, 0.20%)</title><rect x="209.8" y="1891.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="212.8" y="1902.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (3 samples, 0.20%)</title><rect x="209.8" y="1875.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="212.8" y="1886.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (2 samples, 0.13%)</title><rect x="209.8" y="1859.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.8" y="1870.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.07%)</title><rect x="209.8" y="1843.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="212.8" y="1854.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="209.8" y="1827.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="212.8" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1 samples, 0.07%)</title><rect x="210.5" y="1843.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="213.5" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollCtl (1 samples, 0.07%)</title><rect x="210.5" y="1827.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="213.5" y="1838.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_epollCtl (1 samples, 0.07%)</title><rect x="210.5" y="1811.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="213.5" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.07%)</title><rect x="211.3" y="1859.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="214.3" y="1870.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="212.1" y="1955.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="215.1" y="1966.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="212.1" y="1939.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="215.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.39%)</title><rect x="212.8" y="1971.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="215.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.39%)</title><rect x="212.8" y="1955.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="215.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.26%)</title><rect x="213.6" y="1939.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.6" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="213.6" y="1923.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="216.6" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="213.6" y="1907.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.6" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="213.6" y="1891.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.07%)</title><rect x="213.6" y="1875.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.6" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.07%)</title><rect x="214.4" y="1923.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="217.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.13%)</title><rect x="215.2" y="1923.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="218.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.13%)</title><rect x="215.2" y="1907.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.13%)</title><rect x="215.2" y="1891.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="218.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.13%)</title><rect x="215.2" y="1875.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.13%)</title><rect x="215.2" y="1859.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="218.2" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.13%)</title><rect x="215.2" y="1843.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.2" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.13%)</title><rect x="215.2" y="1827.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.2" y="1838.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.13%)</title><rect x="215.2" y="1811.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.2" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.13%)</title><rect x="215.2" y="1795.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.2" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.13%)</title><rect x="215.2" y="1779.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.2" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/74728069.test (2 samples, 0.13%)</title><rect x="215.2" y="1763.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.2" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (2 samples, 0.13%)</title><rect x="215.2" y="1747.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.2" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/1530340985.test (2 samples, 0.13%)</title><rect x="215.2" y="1731.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.2" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (2 samples, 0.13%)</title><rect x="215.2" y="1715.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.2" y="1726.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (2 samples, 0.13%)</title><rect x="215.2" y="1699.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.2" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (2 samples, 0.13%)</title><rect x="215.2" y="1683.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.2" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.13%)</title><rect x="215.2" y="1667.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="218.2" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (2 samples, 0.13%)</title><rect x="215.2" y="1651.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="218.2" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.07%)</title><rect x="216.7" y="1939.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.07%)</title><rect x="216.7" y="1923.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="217.5" y="1971.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="217.5" y="1955.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="217.5" y="1939.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="220.5" y="1950.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="217.5" y="1923.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="220.5" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="217.5" y="1907.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="220.5" y="1918.0"></text>
</g>
<g>
<title>java/lang/Thread.run (772 samples, 50.46%)</title><rect x="218.2" y="2035.0" width="595.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.2" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (772 samples, 50.46%)</title><rect x="218.2" y="2019.0" width="595.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="221.2" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (772 samples, 50.46%)</title><rect x="218.2" y="2003.0" width="595.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.2" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1551673675.run (546 samples, 35.69%)</title><rect x="218.2" y="1987.0" width="421.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.2" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lamb..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (546 samples, 35.69%)</title><rect x="218.2" y="1971.0" width="421.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.2" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambd..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (546 samples, 35.69%)</title><rect x="218.2" y="1955.0" width="421.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.2" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.proce..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="220.5" y="1939.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="223.5" y="1950.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="220.5" y="1923.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="223.5" y="1934.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.13%)</title><rect x="221.3" y="1939.0" width="1.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="224.3" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.72%)</title><rect x="222.9" y="1939.0" width="8.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="225.9" y="1950.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.52%)</title><rect x="225.2" y="1923.0" width="6.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="228.2" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (527 samples, 34.44%)</title><rect x="231.3" y="1939.0" width="406.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.3" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.s..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (167 samples, 10.92%)</title><rect x="242.9" y="1923.0" width="128.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="245.9" y="1934.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (167 samples, 10.92%)</title><rect x="242.9" y="1907.0" width="128.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.9" y="1918.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (167 samples, 10.92%)</title><rect x="242.9" y="1891.0" width="128.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.9" y="1902.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 10.92%)</title><rect x="242.9" y="1875.0" width="128.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="245.9" y="1886.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 10.92%)</title><rect x="242.9" y="1859.0" width="128.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="245.9" y="1870.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (167 samples, 10.92%)</title><rect x="242.9" y="1843.0" width="128.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.9" y="1854.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (63 samples, 4.12%)</title><rect x="242.9" y="1827.0" width="48.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.9" y="1838.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (27 samples, 1.76%)</title><rect x="242.9" y="1811.0" width="20.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (27 samples, 1.76%)</title><rect x="242.9" y="1795.0" width="20.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (26 samples, 1.70%)</title><rect x="242.9" y="1779.0" width="20.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="245.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.07%)</title><rect x="263.0" y="1779.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.0" y="1790.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.07%)</title><rect x="263.0" y="1763.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (36 samples, 2.35%)</title><rect x="263.7" y="1811.0" width="27.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.7" y="1822.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="263.7" y="1795.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="266.7" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="263.7" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="266.7" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="263.7" y="1763.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="266.7" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="263.7" y="1747.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="266.7" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="263.7" y="1731.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="266.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (35 samples, 2.29%)</title><rect x="264.5" y="1795.0" width="27.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.5" y="1806.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="264.5" y="1779.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="267.5" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="264.5" y="1763.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="267.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="264.5" y="1747.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="267.5" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="264.5" y="1731.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="267.5" y="1742.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="264.5" y="1715.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="267.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.07%)</title><rect x="265.3" y="1779.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.07%)</title><rect x="265.3" y="1763.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (14 samples, 0.92%)</title><rect x="266.1" y="1779.0" width="10.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.07%)</title><rect x="270.7" y="1763.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.7" y="1774.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.07%)</title><rect x="270.7" y="1747.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="273.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (2 samples, 0.13%)</title><rect x="271.5" y="1763.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (1 samples, 0.07%)</title><rect x="273.0" y="1763.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (3 samples, 0.20%)</title><rect x="273.8" y="1763.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="276.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.07%)</title><rect x="276.1" y="1763.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (13 samples, 0.85%)</title><rect x="276.8" y="1779.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.8" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.20%)</title><rect x="279.9" y="1763.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="282.9" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.20%)</title><rect x="279.9" y="1747.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="282.9" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.20%)</title><rect x="279.9" y="1731.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="282.9" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.13%)</title><rect x="279.9" y="1715.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="282.9" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="279.9" y="1699.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="282.9" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="279.9" y="1683.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="282.9" y="1694.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="279.9" y="1667.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="282.9" y="1678.0"></text>
</g>
<g>
<title>G1AllocRegion::fill_up_remaining_space(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="279.9" y="1651.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="282.9" y="1662.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="280.7" y="1699.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="283.7" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="280.7" y="1683.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="283.7" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="281.5" y="1715.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="284.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 0.39%)</title><rect x="282.2" y="1763.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.07%)</title><rect x="282.2" y="1747.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.2" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="282.2" y="1731.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="285.2" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="282.2" y="1715.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="285.2" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="282.2" y="1699.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="285.2" y="1710.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="282.2" y="1683.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="285.2" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.26%)</title><rect x="283.0" y="1747.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.07%)</title><rect x="286.1" y="1747.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.1" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="286.1" y="1731.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="289.1" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="286.1" y="1715.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="289.1" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="286.1" y="1699.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="289.1" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="286.1" y="1683.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="289.1" y="1694.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="286.1" y="1667.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="289.1" y="1678.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="286.1" y="1651.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="289.1" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (6 samples, 0.39%)</title><rect x="286.9" y="1779.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (93 samples, 6.08%)</title><rect x="291.5" y="1827.0" width="71.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.5" y="1838.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.26%)</title><rect x="291.5" y="1811.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="294.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.26%)</title><rect x="291.5" y="1795.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="294.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.20%)</title><rect x="291.5" y="1779.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.07%)</title><rect x="292.3" y="1763.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="295.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.07%)</title><rect x="293.0" y="1763.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.07%)</title><rect x="293.8" y="1779.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.07%)</title><rect x="293.8" y="1763.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="296.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.46%)</title><rect x="294.6" y="1811.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.46%)</title><rect x="294.6" y="1795.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="297.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/SimpleType.equals (6 samples, 0.39%)</title><rect x="295.4" y="1779.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="298.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.65%)</title><rect x="300.0" y="1811.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="303.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.65%)</title><rect x="300.0" y="1795.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.52%)</title><rect x="300.8" y="1779.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.39%)</title><rect x="302.3" y="1763.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="305.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.13%)</title><rect x="305.4" y="1747.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="306.9" y="1779.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="309.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.20%)</title><rect x="307.7" y="1811.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.20%)</title><rect x="307.7" y="1795.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="310.7" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="307.7" y="1779.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="310.7" y="1790.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="307.7" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="310.7" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="307.7" y="1747.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="310.7" y="1758.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="307.7" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="310.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.13%)</title><rect x="308.5" y="1779.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="311.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="309.2" y="1763.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="312.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="309.2" y="1747.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (69 samples, 4.51%)</title><rect x="310.0" y="1811.0" width="53.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="313.0" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.11%)</title><rect x="310.8" y="1795.0" width="13.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.13%)</title><rect x="319.3" y="1779.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="322.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.13%)</title><rect x="319.3" y="1763.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="322.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.13%)</title><rect x="319.3" y="1747.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="322.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (4 samples, 0.26%)</title><rect x="320.8" y="1779.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (51 samples, 3.33%)</title><rect x="323.9" y="1795.0" width="39.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="326.9" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (51 samples, 3.33%)</title><rect x="323.9" y="1779.0" width="39.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="326.9" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (46 samples, 3.01%)</title><rect x="324.7" y="1763.0" width="35.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.7" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.31%)</title><rect x="327.0" y="1747.0" width="15.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="330.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.33%)</title><rect x="335.5" y="1731.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="338.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.33%)</title><rect x="335.5" y="1715.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="338.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.33%)</title><rect x="335.5" y="1699.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="338.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.26%)</title><rect x="336.2" y="1683.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.2" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.26%)</title><rect x="336.2" y="1667.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.2" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.20%)</title><rect x="337.0" y="1651.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="340.0" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (3 samples, 0.20%)</title><rect x="337.0" y="1635.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="340.0" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="339.3" y="1731.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="342.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="339.3" y="1715.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="342.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.20%)</title><rect x="340.1" y="1731.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="343.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.13%)</title><rect x="342.4" y="1747.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="345.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.07%)</title><rect x="343.2" y="1731.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="346.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.07%)</title><rect x="343.2" y="1715.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="346.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.07%)</title><rect x="343.2" y="1699.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="346.2" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.07%)</title><rect x="343.2" y="1683.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="346.2" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (14 samples, 0.92%)</title><rect x="343.9" y="1747.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="346.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (14 samples, 0.92%)</title><rect x="343.9" y="1731.0" width="10.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="346.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (14 samples, 0.92%)</title><rect x="343.9" y="1715.0" width="10.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="346.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (14 samples, 0.92%)</title><rect x="343.9" y="1699.0" width="10.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="346.9" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.13%)</title><rect x="343.9" y="1683.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="346.9" y="1694.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (12 samples, 0.78%)</title><rect x="345.5" y="1683.0" width="9.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="348.5" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.26%)</title><rect x="351.7" y="1667.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.7" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (2 samples, 0.13%)</title><rect x="352.4" y="1651.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="355.4" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.07%)</title><rect x="354.0" y="1651.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="357.0" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/misc/ReflectUtil.isVMAnonymousClass (1 samples, 0.07%)</title><rect x="354.0" y="1635.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="357.0" y="1646.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.07%)</title><rect x="354.0" y="1619.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="357.0" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.26%)</title><rect x="354.7" y="1747.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="357.7" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.26%)</title><rect x="354.7" y="1731.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.7" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.26%)</title><rect x="354.7" y="1715.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="357.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="357.1" y="1699.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="360.1" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.20%)</title><rect x="357.8" y="1747.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="360.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (3 samples, 0.20%)</title><rect x="357.8" y="1731.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="360.8" y="1742.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.07%)</title><rect x="359.4" y="1715.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="362.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase._delegateDeserializer (4 samples, 0.26%)</title><rect x="360.1" y="1763.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="363.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.72%)</title><rect x="363.2" y="1827.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="366.2" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 0.72%)</title><rect x="363.2" y="1811.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="366.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 0.72%)</title><rect x="363.2" y="1795.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="366.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (11 samples, 0.72%)</title><rect x="363.2" y="1779.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="366.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.07%)</title><rect x="367.9" y="1763.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="370.9" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.26%)</title><rect x="368.6" y="1763.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="371.6" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (314 samples, 20.52%)</title><rect x="371.7" y="1923.0" width="242.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="374.7" y="1934.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (56 samples, 3.66%)</title><rect x="371.7" y="1907.0" width="43.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="374.7" y="1918.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (55 samples, 3.59%)</title><rect x="372.5" y="1891.0" width="42.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="375.5" y="1902.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (54 samples, 3.53%)</title><rect x="373.3" y="1875.0" width="41.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="376.3" y="1886.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.52%)</title><rect x="375.6" y="1859.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.52%)</title><rect x="375.6" y="1843.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="378.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.52%)</title><rect x="375.6" y="1827.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.52%)</title><rect x="375.6" y="1811.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="378.6" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.20%)</title><rect x="379.4" y="1795.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="382.4" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.13%)</title><rect x="380.2" y="1779.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="383.2" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (43 samples, 2.81%)</title><rect x="381.7" y="1859.0" width="33.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="384.7" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (15 samples, 0.98%)</title><rect x="403.3" y="1843.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="406.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.13%)</title><rect x="403.3" y="1827.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="406.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.13%)</title><rect x="403.3" y="1811.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.3" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (13 samples, 0.85%)</title><rect x="404.9" y="1827.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="407.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.20%)</title><rect x="411.0" y="1811.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="414.0" y="1822.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.13%)</title><rect x="413.4" y="1811.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="416.4" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.20%)</title><rect x="414.9" y="1907.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="417.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.20%)</title><rect x="414.9" y="1891.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="417.9" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.20%)</title><rect x="414.9" y="1875.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="417.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (177 samples, 11.57%)</title><rect x="417.2" y="1907.0" width="136.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="420.2" y="1918.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (177 samples, 11.57%)</title><rect x="417.2" y="1891.0" width="136.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.2" y="1902.0">com/linecorp/deca..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.33%)</title><rect x="417.2" y="1875.0" width="3.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="420.2" y="1886.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.20%)</title><rect x="418.8" y="1859.0" width="2.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="421.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (52 samples, 3.40%)</title><rect x="421.1" y="1875.0" width="40.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="424.1" y="1886.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (52 samples, 3.40%)</title><rect x="421.1" y="1859.0" width="40.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="424.1" y="1870.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (37 samples, 2.42%)</title><rect x="426.5" y="1843.0" width="28.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="429.5" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (26 samples, 1.70%)</title><rect x="431.1" y="1827.0" width="20.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="434.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (26 samples, 1.70%)</title><rect x="431.1" y="1811.0" width="20.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="434.1" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (26 samples, 1.70%)</title><rect x="431.1" y="1795.0" width="20.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="434.1" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="437.3" y="1779.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="440.3" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (14 samples, 0.92%)</title><rect x="438.0" y="1779.0" width="10.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="441.0" y="1790.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="438.0" y="1763.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="441.0" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (7 samples, 0.46%)</title><rect x="438.8" y="1763.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="441.8" y="1774.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.07%)</title><rect x="438.8" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="441.8" y="1758.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="439.6" y="1747.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="442.6" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.33%)</title><rect x="440.4" y="1747.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="443.4" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (5 samples, 0.33%)</title><rect x="440.4" y="1731.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="443.4" y="1742.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="440.4" y="1715.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="443.4" y="1726.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="440.4" y="1699.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="443.4" y="1710.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.13%)</title><rect x="441.1" y="1715.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="444.1" y="1726.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="442.7" y="1715.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="445.7" y="1726.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="443.4" y="1715.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="446.4" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.39%)</title><rect x="444.2" y="1763.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="447.2" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (6 samples, 0.39%)</title><rect x="444.2" y="1747.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="447.2" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.13%)</title><rect x="444.2" y="1731.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="447.2" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="445.0" y="1715.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="448.0" y="1726.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="445.0" y="1699.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="448.0" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="445.0" y="1683.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="448.0" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.07%)</title><rect x="445.0" y="1667.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="448.0" y="1678.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (2 samples, 0.13%)</title><rect x="445.8" y="1731.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="448.8" y="1742.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (2 samples, 0.13%)</title><rect x="447.3" y="1731.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="450.3" y="1742.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="448.8" y="1779.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="451.8" y="1790.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.13%)</title><rect x="449.6" y="1779.0" width="1.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="452.6" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.13%)</title><rect x="451.2" y="1827.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="454.2" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="452.7" y="1827.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="455.7" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.13%)</title><rect x="453.5" y="1827.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="456.5" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.52%)</title><rect x="455.0" y="1843.0" width="6.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="458.0" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="461.2" y="1875.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="464.2" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (13 samples, 0.85%)</title><rect x="461.9" y="1875.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="464.9" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.13%)</title><rect x="461.9" y="1859.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.9" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="461.9" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="464.9" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="461.9" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="464.9" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="461.9" y="1811.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="464.9" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="461.9" y="1795.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="464.9" y="1806.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="461.9" y="1779.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="464.9" y="1790.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="462.7" y="1843.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="465.7" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="462.7" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="465.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/Long.toString (11 samples, 0.72%)</title><rect x="463.5" y="1859.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="466.5" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="463.5" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="466.5" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="463.5" y="1827.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="466.5" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="463.5" y="1811.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="466.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (10 samples, 0.65%)</title><rect x="464.3" y="1843.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="467.3" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (105 samples, 6.86%)</title><rect x="472.0" y="1875.0" width="81.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="475.0" y="1886.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (90 samples, 5.88%)</title><rect x="481.2" y="1859.0" width="69.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="484.2" y="1870.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.46%)</title><rect x="483.5" y="1843.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="486.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.46%)</title><rect x="483.5" y="1827.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="486.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.46%)</title><rect x="483.5" y="1811.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="486.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.46%)</title><rect x="483.5" y="1795.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="486.5" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.20%)</title><rect x="486.6" y="1779.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="489.6" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.20%)</title><rect x="486.6" y="1763.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="489.6" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (80 samples, 5.23%)</title><rect x="488.9" y="1843.0" width="61.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="491.9" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (77 samples, 5.03%)</title><rect x="491.3" y="1827.0" width="59.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="494.3" y="1838.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (43 samples, 2.81%)</title><rect x="517.5" y="1811.0" width="33.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="520.5" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (5 samples, 0.33%)</title><rect x="533.7" y="1795.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="536.7" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.65%)</title><rect x="537.5" y="1795.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="540.5" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.20%)</title><rect x="542.9" y="1779.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="545.9" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.20%)</title><rect x="542.9" y="1763.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="545.9" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.20%)</title><rect x="542.9" y="1747.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="545.9" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="544.5" y="1731.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="547.5" y="1742.0"></text>
</g>
<g>
<title>vtable stub (7 samples, 0.46%)</title><rect x="545.2" y="1795.0" width="5.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="548.2" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 0.20%)</title><rect x="550.6" y="1859.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="553.6" y="1870.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="553.0" y="1875.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="556.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (56 samples, 3.66%)</title><rect x="553.7" y="1907.0" width="43.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="556.7" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (56 samples, 3.66%)</title><rect x="553.7" y="1891.0" width="43.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="556.7" y="1902.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1980858194.process (24 samples, 1.57%)</title><rect x="555.3" y="1875.0" width="18.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="558.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (23 samples, 1.50%)</title><rect x="555.3" y="1859.0" width="17.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="558.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.31%)</title><rect x="556.0" y="1843.0" width="15.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="559.0" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.26%)</title><rect x="557.6" y="1827.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="560.6" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.26%)</title><rect x="557.6" y="1811.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="560.6" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.26%)</title><rect x="557.6" y="1795.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="560.6" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.20%)</title><rect x="558.4" y="1779.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="561.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.13%)</title><rect x="559.1" y="1763.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="562.1" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.33%)</title><rect x="560.7" y="1827.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="563.7" y="1838.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="562.2" y="1811.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="565.2" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.13%)</title><rect x="563.0" y="1811.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="566.0" y="1822.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.13%)</title><rect x="563.0" y="1795.0" width="1.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="566.0" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="564.5" y="1827.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="567.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.52%)</title><rect x="565.3" y="1827.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="568.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="570.7" y="1811.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="573.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="570.7" y="1795.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="573.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.13%)</title><rect x="571.5" y="1843.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="574.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.13%)</title><rect x="571.5" y="1827.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="574.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.13%)</title><rect x="571.5" y="1811.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="574.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.13%)</title><rect x="571.5" y="1795.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="574.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="573.0" y="1859.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="576.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.33%)</title><rect x="573.8" y="1875.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="576.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.33%)</title><rect x="573.8" y="1859.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="576.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/558187323.linkToTargetMethod (8 samples, 0.52%)</title><rect x="577.6" y="1875.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="580.6" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (8 samples, 0.52%)</title><rect x="577.6" y="1859.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="580.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/21869328.get$Lambda (8 samples, 0.52%)</title><rect x="577.6" y="1843.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="580.6" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$280/21869328.&lt;init&gt; (8 samples, 0.52%)</title><rect x="577.6" y="1827.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="580.6" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.52%)</title><rect x="583.8" y="1875.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="586.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.46%)</title><rect x="584.6" y="1859.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="587.6" y="1870.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.39%)</title><rect x="584.6" y="1843.0" width="4.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="587.6" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.07%)</title><rect x="589.2" y="1843.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="592.2" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="590.0" y="1875.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="593.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.52%)</title><rect x="590.7" y="1875.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="593.7" y="1886.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.07%)</title><rect x="593.8" y="1859.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="596.8" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="593.8" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="596.8" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="593.8" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="596.8" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="593.8" y="1811.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="596.8" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="593.8" y="1795.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="596.8" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="593.8" y="1779.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="596.8" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="593.8" y="1763.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="596.8" y="1774.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="593.8" y="1747.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="596.8" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="593.8" y="1731.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="596.8" y="1742.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="593.8" y="1715.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="596.8" y="1726.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.07%)</title><rect x="593.8" y="1699.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="596.8" y="1710.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.20%)</title><rect x="594.6" y="1859.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="597.6" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.44%)</title><rect x="596.9" y="1907.0" width="17.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="599.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 1.44%)</title><rect x="596.9" y="1891.0" width="17.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="599.9" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.46%)</title><rect x="600.8" y="1875.0" width="5.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="603.8" y="1886.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.26%)</title><rect x="603.1" y="1859.0" width="3.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="606.1" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.59%)</title><rect x="606.2" y="1875.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/839604260.accept (9 samples, 0.59%)</title><rect x="606.2" y="1859.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="609.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (9 samples, 0.59%)</title><rect x="606.2" y="1843.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="609.2" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (9 samples, 0.59%)</title><rect x="606.2" y="1827.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="609.2" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.59%)</title><rect x="606.2" y="1811.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="609.2" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.59%)</title><rect x="606.2" y="1795.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="609.2" y="1806.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.39%)</title><rect x="608.5" y="1779.0" width="4.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="611.5" y="1790.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.39%)</title><rect x="608.5" y="1763.0" width="4.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="611.5" y="1774.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="613.1" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="616.1" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 1.37%)</title><rect x="613.9" y="1923.0" width="16.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="616.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 1.37%)</title><rect x="613.9" y="1907.0" width="16.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="616.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="616.2" y="1891.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="619.2" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (17 samples, 1.11%)</title><rect x="617.0" y="1891.0" width="13.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="620.0" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$282/839604260.accept (17 samples, 1.11%)</title><rect x="617.0" y="1875.0" width="13.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="620.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (17 samples, 1.11%)</title><rect x="617.0" y="1859.0" width="13.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="620.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (17 samples, 1.11%)</title><rect x="617.0" y="1843.0" width="13.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="620.0" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (17 samples, 1.11%)</title><rect x="617.0" y="1827.0" width="13.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="620.0" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (17 samples, 1.11%)</title><rect x="617.0" y="1811.0" width="13.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="620.0" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.65%)</title><rect x="630.1" y="1923.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="633.1" y="1934.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.65%)</title><rect x="630.1" y="1907.0" width="7.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="633.1" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.13%)</title><rect x="637.8" y="1939.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="640.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.07%)</title><rect x="638.6" y="1923.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="641.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (15 samples, 0.98%)</title><rect x="639.3" y="1987.0" width="11.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="642.3" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 0.98%)</title><rect x="639.3" y="1971.0" width="11.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="642.3" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 0.98%)</title><rect x="639.3" y="1955.0" width="11.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="642.3" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 0.98%)</title><rect x="639.3" y="1939.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="642.3" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.13%)</title><rect x="649.4" y="1923.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="652.4" y="1934.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.13%)</title><rect x="649.4" y="1907.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="652.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (211 samples, 13.79%)</title><rect x="650.9" y="1987.0" width="162.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="653.9" y="1998.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (210 samples, 13.73%)</title><rect x="651.7" y="1971.0" width="161.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="654.7" y="1982.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (195 samples, 12.75%)</title><rect x="651.7" y="1955.0" width="150.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="654.7" y="1966.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (19 samples, 1.24%)</title><rect x="656.3" y="1939.0" width="14.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="659.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.46%)</title><rect x="671.0" y="1939.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="674.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.46%)</title><rect x="671.0" y="1923.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="674.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.46%)</title><rect x="671.0" y="1907.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="674.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.46%)</title><rect x="671.0" y="1891.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="674.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.46%)</title><rect x="676.4" y="1939.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="679.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (7 samples, 0.46%)</title><rect x="676.4" y="1923.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="679.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (156 samples, 10.20%)</title><rect x="681.8" y="1939.0" width="120.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="684.8" y="1950.0">java/util/concu..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (155 samples, 10.13%)</title><rect x="682.5" y="1923.0" width="119.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="685.5" y="1934.0">sun/misc/Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.20%)</title><rect x="685.6" y="1907.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="688.6" y="1918.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.13%)</title><rect x="687.9" y="1907.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="690.9" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="689.5" y="1907.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="692.5" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (142 samples, 9.28%)</title><rect x="690.2" y="1907.0" width="109.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="693.2" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="692.5" y="1891.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="695.5" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 1.24%)</title><rect x="693.3" y="1891.0" width="14.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="696.3" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.39%)</title><rect x="698.7" y="1875.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="701.7" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="700.3" y="1859.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="703.3" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="700.3" y="1843.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="703.3" y="1854.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.20%)</title><rect x="701.0" y="1859.0" width="2.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="704.0" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.13%)</title><rect x="703.3" y="1875.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="706.3" y="1886.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="704.9" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="707.9" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.13%)</title><rect x="705.7" y="1875.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="708.7" y="1886.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="707.2" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="710.2" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="708.0" y="1891.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="711.0" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="708.7" y="1891.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="711.7" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.39%)</title><rect x="709.5" y="1891.0" width="4.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="712.5" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (36 samples, 2.35%)</title><rect x="714.1" y="1891.0" width="27.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="717.1" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (57 samples, 3.73%)</title><rect x="741.9" y="1891.0" width="44.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="744.9" y="1902.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.33%)</title><rect x="785.9" y="1891.0" width="3.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="788.9" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="789.7" y="1891.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="792.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.07%)</title><rect x="790.5" y="1891.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="793.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.20%)</title><rect x="791.3" y="1891.0" width="2.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="794.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.13%)</title><rect x="793.6" y="1891.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="796.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="795.1" y="1891.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="798.1" y="1902.0"></text>
</g>
<g>
<title>_init (2 samples, 0.13%)</title><rect x="795.9" y="1891.0" width="1.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="798.9" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="797.4" y="1891.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="800.4" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="798.2" y="1891.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="801.2" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="799.0" y="1891.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="802.0" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="799.8" y="1907.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="802.8" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.13%)</title><rect x="800.5" y="1907.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="803.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.07%)</title><rect x="802.1" y="1955.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="805.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.07%)</title><rect x="802.1" y="1939.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="805.1" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.07%)</title><rect x="802.1" y="1923.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="805.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 0.92%)</title><rect x="802.8" y="1955.0" width="10.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="805.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.92%)</title><rect x="802.8" y="1939.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="805.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.92%)</title><rect x="802.8" y="1923.0" width="10.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="805.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.92%)</title><rect x="802.8" y="1907.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="805.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="813.6" y="2035.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="816.6" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="813.6" y="2019.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="816.6" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="813.6" y="2003.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="816.6" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="813.6" y="1987.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="816.6" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.07%)</title><rect x="813.6" y="1971.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="816.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.07%)</title><rect x="813.6" y="1955.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="816.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.07%)</title><rect x="813.6" y="1939.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="816.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="813.6" y="1923.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="816.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="813.6" y="1907.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="816.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="813.6" y="1891.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="816.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="813.6" y="1875.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="816.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="813.6" y="1859.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="816.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="813.6" y="1843.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="816.6" y="1854.0"></text>
</g>
<g>
<title>start_thread (487 samples, 31.83%)</title><rect x="814.4" y="2035.0" width="375.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="817.4" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (487 samples, 31.83%)</title><rect x="814.4" y="2019.0" width="375.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="817.4" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.37%)</title><rect x="814.4" y="2003.0" width="16.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="817.4" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.33%)</title><rect x="814.4" y="1987.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="817.4" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.33%)</title><rect x="814.4" y="1971.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="817.4" y="1982.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.33%)</title><rect x="814.4" y="1955.0" width="3.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="817.4" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.05%)</title><rect x="818.3" y="1987.0" width="12.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="821.3" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.33%)</title><rect x="818.3" y="1971.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="821.3" y="1982.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.07%)</title><rect x="818.3" y="1955.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="821.3" y="1966.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="819.0" y="1955.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="822.0" y="1966.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.20%)</title><rect x="819.8" y="1955.0" width="2.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="822.8" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.46%)</title><rect x="822.1" y="1971.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="825.1" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.20%)</title><rect x="822.1" y="1955.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="825.1" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.13%)</title><rect x="822.1" y="1939.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="825.1" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.13%)</title><rect x="822.1" y="1923.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="825.1" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.13%)</title><rect x="822.1" y="1907.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="825.1" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="823.7" y="1939.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="826.7" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="823.7" y="1923.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="826.7" y="1934.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.07%)</title><rect x="823.7" y="1907.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="826.7" y="1918.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.07%)</title><rect x="823.7" y="1891.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="826.7" y="1902.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.07%)</title><rect x="823.7" y="1875.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="826.7" y="1886.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.07%)</title><rect x="823.7" y="1859.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="826.7" y="1870.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.26%)</title><rect x="824.4" y="1955.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="827.4" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.26%)</title><rect x="824.4" y="1939.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="827.4" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.26%)</title><rect x="827.5" y="1971.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="830.5" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.26%)</title><rect x="827.5" y="1955.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="830.5" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.26%)</title><rect x="827.5" y="1939.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="830.5" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.26%)</title><rect x="827.5" y="1923.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="830.5" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.26%)</title><rect x="827.5" y="1907.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="830.5" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.26%)</title><rect x="827.5" y="1891.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="830.5" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.26%)</title><rect x="827.5" y="1875.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="830.5" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="828.3" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="831.3" y="1870.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.07%)</title><rect x="828.3" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="831.3" y="1854.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (2 samples, 0.13%)</title><rect x="829.1" y="1859.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="832.1" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="829.8" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="832.8" y="1854.0"></text>
</g>
<g>
<title>JavaThread::run() (465 samples, 30.39%)</title><rect x="830.6" y="2003.0" width="358.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="833.6" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (465 samples, 30.39%)</title><rect x="830.6" y="1987.0" width="358.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="833.6" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (464 samples, 30.33%)</title><rect x="830.6" y="1971.0" width="357.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="833.6" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (463 samples, 30.26%)</title><rect x="830.6" y="1955.0" width="357.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.6" y="1966.0">CompileBroker::invoke_compiler_on_method(CompileT..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (461 samples, 30.13%)</title><rect x="830.6" y="1939.0" width="355.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="833.6" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (461 samples, 30.13%)</title><rect x="830.6" y="1923.0" width="355.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="833.6" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (174 samples, 11.37%)</title><rect x="830.6" y="1907.0" width="134.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.6" y="1918.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (7 samples, 0.46%)</title><rect x="830.6" y="1891.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="833.6" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 0.26%)</title><rect x="830.6" y="1875.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="833.6" y="1886.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.07%)</title><rect x="832.9" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="835.9" y="1870.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.07%)</title><rect x="832.9" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="835.9" y="1854.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.20%)</title><rect x="833.7" y="1875.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="836.7" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (3 samples, 0.20%)</title><rect x="833.7" y="1859.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="836.7" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.13%)</title><rect x="834.5" y="1843.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="837.5" y="1854.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.07%)</title><rect x="835.2" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="838.2" y="1838.0"></text>
</g>
<g>
<title>MacroAssembler::MacroAssembler(CodeBuffer*) (1 samples, 0.07%)</title><rect x="835.2" y="1811.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="838.2" y="1822.0"></text>
</g>
<g>
<title>AbstractAssembler::AbstractAssembler(CodeBuffer*) (1 samples, 0.07%)</title><rect x="835.2" y="1795.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="838.2" y="1806.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (9 samples, 0.59%)</title><rect x="836.0" y="1891.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="839.0" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (5 samples, 0.33%)</title><rect x="836.0" y="1875.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="839.0" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.13%)</title><rect x="836.0" y="1859.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="839.0" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.13%)</title><rect x="836.0" y="1843.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="839.0" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="837.5" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="840.5" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="837.5" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="840.5" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="838.3" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="841.3" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="838.3" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="841.3" y="1854.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="839.1" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="842.1" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.20%)</title><rect x="839.9" y="1875.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="842.9" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.20%)</title><rect x="839.9" y="1859.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="842.9" y="1870.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.07%)</title><rect x="842.2" y="1875.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="845.2" y="1886.0"></text>
</g>
<g>
<title>Matcher::match() (16 samples, 1.05%)</title><rect x="842.9" y="1891.0" width="12.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="845.9" y="1902.0"></text>
</g>
<g>
<title>EncodePNode::Opcode() const (1 samples, 0.07%)</title><rect x="842.9" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="845.9" y="1886.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.07%)</title><rect x="843.7" y="1875.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="846.7" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (14 samples, 0.92%)</title><rect x="844.5" y="1875.0" width="10.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="847.5" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (8 samples, 0.52%)</title><rect x="845.3" y="1859.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="848.3" y="1870.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.07%)</title><rect x="851.4" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="854.4" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.13%)</title><rect x="852.2" y="1859.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="855.2" y="1870.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.13%)</title><rect x="852.2" y="1843.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="855.2" y="1854.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.07%)</title><rect x="852.2" y="1827.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="855.2" y="1838.0"></text>
</g>
<g>
<title>incI_rRegNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.07%)</title><rect x="853.0" y="1827.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="856.0" y="1838.0"></text>
</g>
<g>
<title>MachProjNode::MachProjNode(Node*, unsigned int, RegMask const&amp;, unsigned int) (1 samples, 0.07%)</title><rect x="853.0" y="1811.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="856.0" y="1822.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.07%)</title><rect x="853.0" y="1795.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="856.0" y="1806.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="853.7" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="856.7" y="1870.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="853.7" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="856.7" y="1854.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="854.5" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="857.5" y="1870.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="854.5" y="1843.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="857.5" y="1854.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="855.3" y="1891.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="858.3" y="1902.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 0.07%)</title><rect x="855.3" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="858.3" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.52%)</title><rect x="856.1" y="1891.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="859.1" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (8 samples, 0.52%)</title><rect x="856.1" y="1875.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="859.1" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.13%)</title><rect x="856.1" y="1859.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="859.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.13%)</title><rect x="857.6" y="1859.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="860.6" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.13%)</title><rect x="857.6" y="1843.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="860.6" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (3 samples, 0.20%)</title><rect x="859.1" y="1859.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="862.1" y="1870.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="861.5" y="1859.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="864.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (133 samples, 8.69%)</title><rect x="862.2" y="1891.0" width="102.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="865.2" y="1902.0">PhaseChaitin..</text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.07%)</title><rect x="862.2" y="1875.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="865.2" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="863.0" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="866.0" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.20%)</title><rect x="863.8" y="1875.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="866.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (11 samples, 0.72%)</title><rect x="866.1" y="1875.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="869.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.13%)</title><rect x="867.6" y="1859.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="870.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.07%)</title><rect x="869.2" y="1859.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="872.2" y="1870.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.07%)</title><rect x="869.2" y="1843.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="872.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (5 samples, 0.33%)</title><rect x="869.9" y="1859.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="872.9" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (3 samples, 0.20%)</title><rect x="871.5" y="1843.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="874.5" y="1854.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.07%)</title><rect x="873.8" y="1859.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="876.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (6 samples, 0.39%)</title><rect x="874.6" y="1875.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="877.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="874.6" y="1859.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="877.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (5 samples, 0.33%)</title><rect x="875.3" y="1859.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="878.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.13%)</title><rect x="877.6" y="1843.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="880.6" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (19 samples, 1.24%)</title><rect x="879.2" y="1875.0" width="14.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="882.2" y="1886.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.07%)</title><rect x="890.8" y="1859.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="893.8" y="1870.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="891.5" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="894.5" y="1870.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="892.3" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="895.3" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="893.1" y="1859.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="896.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (22 samples, 1.44%)</title><rect x="893.8" y="1875.0" width="17.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="896.8" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.13%)</title><rect x="901.6" y="1859.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="904.6" y="1870.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.07%)</title><rect x="903.1" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="906.1" y="1870.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.07%)</title><rect x="903.9" y="1859.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="906.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.46%)</title><rect x="904.6" y="1859.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="907.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.26%)</title><rect x="907.0" y="1843.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="910.0" y="1854.0"></text>
</g>
<g>
<title>testN_regNode::rule() const (1 samples, 0.07%)</title><rect x="910.0" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="913.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (10 samples, 0.65%)</title><rect x="910.8" y="1875.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="913.8" y="1886.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.07%)</title><rect x="914.7" y="1859.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="917.7" y="1870.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.07%)</title><rect x="915.4" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="918.4" y="1870.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.20%)</title><rect x="916.2" y="1859.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="919.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.13%)</title><rect x="918.5" y="1875.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.07%)</title><rect x="919.3" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="922.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.46%)</title><rect x="920.1" y="1875.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="923.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="923.9" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="926.9" y="1870.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.07%)</title><rect x="924.7" y="1859.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="927.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (4 samples, 0.26%)</title><rect x="925.5" y="1875.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="928.5" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.13%)</title><rect x="927.0" y="1859.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="930.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (26 samples, 1.70%)</title><rect x="928.5" y="1875.0" width="20.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="931.5" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.13%)</title><rect x="928.5" y="1859.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="931.5" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.07%)</title><rect x="929.3" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="932.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.07%)</title><rect x="929.3" y="1827.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="932.3" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (24 samples, 1.57%)</title><rect x="930.1" y="1859.0" width="18.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="933.1" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (24 samples, 1.57%)</title><rect x="930.1" y="1843.0" width="18.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="933.1" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (5 samples, 0.33%)</title><rect x="930.1" y="1827.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="933.1" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (1 samples, 0.07%)</title><rect x="933.9" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="936.9" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (14 samples, 0.92%)</title><rect x="934.7" y="1827.0" width="10.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="937.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (4 samples, 0.26%)</title><rect x="945.5" y="1827.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="948.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (5 samples, 0.33%)</title><rect x="948.6" y="1875.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="951.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="948.6" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="951.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.26%)</title><rect x="949.4" y="1859.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="952.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (6 samples, 0.39%)</title><rect x="952.5" y="1875.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="955.5" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="956.3" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="959.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="957.1" y="1875.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.1" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="957.1" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.1" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (9 samples, 0.59%)</title><rect x="957.9" y="1875.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="960.9" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.33%)</title><rect x="960.9" y="1859.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="963.9" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="963.3" y="1843.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="966.3" y="1854.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.07%)</title><rect x="964.0" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="967.0" y="1854.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.07%)</title><rect x="964.0" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="967.0" y="1838.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="964.0" y="1811.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="967.0" y="1822.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="964.0" y="1795.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="967.0" y="1806.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.07%)</title><rect x="964.0" y="1779.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="967.0" y="1790.0"></text>
</g>
<g>
<title>Compile::Optimize() (267 samples, 17.45%)</title><rect x="964.8" y="1907.0" width="205.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="967.8" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (3 samples, 0.20%)</title><rect x="964.8" y="1891.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="967.8" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (3 samples, 0.20%)</title><rect x="964.8" y="1875.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="967.8" y="1886.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="966.3" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="969.3" y="1870.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.07%)</title><rect x="966.3" y="1843.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="969.3" y="1854.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.07%)</title><rect x="966.3" y="1827.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="969.3" y="1838.0"></text>
</g>
<g>
<title>TypeNarrowOop::remove_speculative() const (1 samples, 0.07%)</title><rect x="966.3" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="969.3" y="1822.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="966.3" y="1795.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="969.3" y="1806.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="966.3" y="1779.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="969.3" y="1790.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.13%)</title><rect x="967.1" y="1891.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="970.1" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.07%)</title><rect x="967.9" y="1875.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="970.9" y="1886.0"></text>
</g>
<g>
<title>TypeNarrowOop::remove_speculative() const (1 samples, 0.07%)</title><rect x="967.9" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="970.9" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="967.9" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="970.9" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (7 samples, 0.46%)</title><rect x="968.7" y="1891.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="971.7" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (7 samples, 0.46%)</title><rect x="968.7" y="1875.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="971.7" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="969.4" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="972.4" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.07%)</title><rect x="969.4" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="972.4" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (5 samples, 0.33%)</title><rect x="970.2" y="1859.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="973.2" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.26%)</title><rect x="970.2" y="1843.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="973.2" y="1854.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="970.2" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="973.2" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.20%)</title><rect x="971.0" y="1827.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="974.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="971.0" y="1811.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="974.0" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="971.0" y="1795.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="971.7" y="1811.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="974.7" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="971.7" y="1795.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="974.7" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="971.7" y="1779.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="974.7" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.7" y="1763.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="974.7" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.7" y="1747.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="974.7" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.7" y="1731.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="974.7" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.7" y="1715.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="974.7" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="971.7" y="1699.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="974.7" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="971.7" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="974.7" y="1694.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="971.7" y="1667.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="974.7" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.5" y="1763.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="975.5" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.5" y="1747.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="975.5" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.5" y="1731.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="975.5" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.5" y="1715.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="975.5" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.5" y="1699.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.5" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.5" y="1683.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="975.5" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.5" y="1667.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="975.5" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.5" y="1651.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="975.5" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="972.5" y="1635.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="975.5" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="972.5" y="1619.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="975.5" y="1630.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="972.5" y="1603.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="975.5" y="1614.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="973.3" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="976.3" y="1854.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="973.3" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="976.3" y="1838.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.20%)</title><rect x="974.1" y="1891.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="977.1" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.07%)</title><rect x="976.4" y="1891.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.4" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.07%)</title><rect x="976.4" y="1875.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="979.4" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.07%)</title><rect x="976.4" y="1859.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (224 samples, 14.64%)</title><rect x="977.1" y="1891.0" width="172.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="980.1" y="1902.0">PhaseIdealLoop::build_..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="977.1" y="1875.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="980.1" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="977.1" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="980.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.07%)</title><rect x="977.1" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="980.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="977.1" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.1" y="1838.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="977.1" y="1811.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="980.1" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.13%)</title><rect x="977.9" y="1875.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.9" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.13%)</title><rect x="977.9" y="1859.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="980.9" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="977.9" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="980.9" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="977.9" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="980.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="977.9" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.9" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.07%)</title><rect x="977.9" y="1795.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="980.9" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="978.7" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="978.7" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.07%)</title><rect x="978.7" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.7" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="978.7" y="1795.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="981.7" y="1806.0"></text>
</g>
<g>
<title>resource_reallocate_bytes(char*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="978.7" y="1779.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.7" y="1790.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="979.5" y="1875.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="982.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.07%)</title><rect x="979.5" y="1859.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="982.5" y="1870.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="980.2" y="1875.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="983.2" y="1886.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.07%)</title><rect x="981.0" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.26%)</title><rect x="981.8" y="1875.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="984.8" y="1886.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="984.1" y="1859.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="987.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.46%)</title><rect x="984.8" y="1875.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="989.5" y="1859.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (190 samples, 12.42%)</title><rect x="990.2" y="1875.0" width="146.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="993.2" y="1886.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="993.3" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.3" y="1870.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="993.3" y="1843.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="996.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (185 samples, 12.09%)</title><rect x="994.1" y="1859.0" width="142.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="997.1" y="1870.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (2 samples, 0.13%)</title><rect x="995.6" y="1843.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="998.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.39%)</title><rect x="997.2" y="1843.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1000.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (175 samples, 11.44%)</title><rect x="1001.8" y="1843.0" width="135.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1004.8" y="1854.0">PhaseIdealLoop::g..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.13%)</title><rect x="1113.6" y="1827.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.13%)</title><rect x="1113.6" y="1811.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.6" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (25 samples, 1.63%)</title><rect x="1115.2" y="1827.0" width="19.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.20%)</title><rect x="1134.5" y="1827.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.13%)</title><rect x="1135.2" y="1811.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.2" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.20%)</title><rect x="1136.8" y="1875.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.07%)</title><rect x="1138.3" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (9 samples, 0.59%)</title><rect x="1139.1" y="1875.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (2 samples, 0.13%)</title><rect x="1142.2" y="1859.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.07%)</title><rect x="1143.0" y="1843.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.20%)</title><rect x="1143.7" y="1859.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.7" y="1870.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.07%)</title><rect x="1144.5" y="1843.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1145.3" y="1843.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.3" y="1854.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1145.3" y="1827.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.3" y="1838.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1145.3" y="1811.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.3" y="1822.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1145.3" y="1795.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.3" y="1806.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1145.3" y="1779.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.3" y="1790.0"></text>
</g>
<g>
<title>TypeLong::hash() const (1 samples, 0.07%)</title><rect x="1145.3" y="1763.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.3" y="1774.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.20%)</title><rect x="1146.0" y="1875.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.20%)</title><rect x="1146.0" y="1859.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.0" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1146.0" y="1843.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.0" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1146.0" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.0" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1146.8" y="1843.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.8" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1146.8" y="1827.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.8" y="1838.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1147.6" y="1827.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.6" y="1838.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.07%)</title><rect x="1148.4" y="1875.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.4" y="1886.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1149.1" y="1875.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1149.9" y="1891.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.9" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (21 samples, 1.37%)</title><rect x="1150.7" y="1891.0" width="16.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.7" y="1902.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.07%)</title><rect x="1150.7" y="1875.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (20 samples, 1.31%)</title><rect x="1151.4" y="1875.0" width="15.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.4" y="1886.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1151.4" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.4" y="1870.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1152.2" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.2" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1152.2" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.2" y="1854.0"></text>
</g>
<g>
<title>LoadBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1153.0" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.0" y="1870.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1153.0" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.0" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1153.8" y="1859.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.8" y="1870.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1153.8" y="1843.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.8" y="1854.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.07%)</title><rect x="1153.8" y="1827.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.8" y="1838.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1153.8" y="1811.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.8" y="1822.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1154.5" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.5" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1154.5" y="1827.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.5" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1154.5" y="1811.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.5" y="1822.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1155.3" y="1859.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.3" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1156.8" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.8" y="1870.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1156.8" y="1843.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.8" y="1854.0"></text>
</g>
<g>
<title>TypeNarrowPtr::hash() const (1 samples, 0.07%)</title><rect x="1156.8" y="1827.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1157.6" y="1859.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (6 samples, 0.39%)</title><rect x="1158.4" y="1859.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.4" y="1870.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1159.2" y="1843.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.2" y="1854.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1159.9" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.9" y="1854.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1159.9" y="1827.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1162.9" y="1838.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1160.7" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.13%)</title><rect x="1161.5" y="1843.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.5" y="1854.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 0.13%)</title><rect x="1161.5" y="1827.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1163.0" y="1859.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1163.0" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.0" y="1854.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1163.0" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.0" y="1838.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.07%)</title><rect x="1163.8" y="1843.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.8" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1164.5" y="1859.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.5" y="1870.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.13%)</title><rect x="1164.5" y="1843.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.5" y="1854.0"></text>
</g>
<g>
<title>StoreCMNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1166.1" y="1859.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.1" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1166.1" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1166.1" y="1827.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.1" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.13%)</title><rect x="1166.9" y="1891.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.9" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.13%)</title><rect x="1166.9" y="1875.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.9" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="1166.9" y="1859.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.9" y="1870.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1167.6" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.6" y="1854.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1167.6" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.6" y="1838.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1167.6" y="1811.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.6" y="1822.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.13%)</title><rect x="1168.4" y="1891.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.4" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1168.4" y="1875.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.4" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1168.4" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.4" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1168.4" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.4" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.07%)</title><rect x="1168.4" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.4" y="1838.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.07%)</title><rect x="1168.4" y="1811.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.4" y="1822.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_unlock_node(UnlockNode*) (1 samples, 0.07%)</title><rect x="1169.2" y="1875.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.2" y="1886.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="1169.2" y="1859.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.2" y="1870.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1169.9" y="1891.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1172.9" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (18 samples, 1.18%)</title><rect x="1170.7" y="1907.0" width="13.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.7" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (18 samples, 1.18%)</title><rect x="1170.7" y="1891.0" width="13.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.7" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 1.18%)</title><rect x="1170.7" y="1875.0" width="13.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.7" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 1.18%)</title><rect x="1170.7" y="1859.0" width="13.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.7" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (18 samples, 1.18%)</title><rect x="1170.7" y="1843.0" width="13.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.7" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (18 samples, 1.18%)</title><rect x="1170.7" y="1827.0" width="13.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.7" y="1838.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1170.7" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.7" y="1822.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.07%)</title><rect x="1170.7" y="1795.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.7" y="1806.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1170.7" y="1779.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.7" y="1790.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.78%)</title><rect x="1171.5" y="1811.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.5" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.78%)</title><rect x="1171.5" y="1795.0" width="9.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.5" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.78%)</title><rect x="1171.5" y="1779.0" width="9.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.5" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.78%)</title><rect x="1171.5" y="1763.0" width="9.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.5" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 0.78%)</title><rect x="1171.5" y="1747.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.5" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.72%)</title><rect x="1171.5" y="1731.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.5" y="1742.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1171.5" y="1715.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.5" y="1726.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1171.5" y="1699.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.5" y="1710.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1171.5" y="1683.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.5" y="1694.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1171.5" y="1667.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.5" y="1678.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.46%)</title><rect x="1172.3" y="1715.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.3" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.46%)</title><rect x="1172.3" y="1699.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.3" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.46%)</title><rect x="1172.3" y="1683.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.3" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.46%)</title><rect x="1172.3" y="1667.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.3" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.46%)</title><rect x="1172.3" y="1651.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.3" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.46%)</title><rect x="1172.3" y="1635.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.3" y="1646.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1172.3" y="1619.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.3" y="1630.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1172.3" y="1603.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.3" y="1614.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1172.3" y="1587.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.3" y="1598.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1172.3" y="1571.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.3" y="1582.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1172.3" y="1555.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.3" y="1566.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1172.3" y="1539.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.3" y="1550.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1172.3" y="1523.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.3" y="1534.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1172.3" y="1507.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.3" y="1518.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1172.3" y="1491.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.3" y="1502.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1172.3" y="1475.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.3" y="1486.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1172.3" y="1459.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.3" y="1470.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1172.3" y="1443.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.3" y="1454.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1172.3" y="1427.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.3" y="1438.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.07%)</title><rect x="1172.3" y="1411.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.3" y="1422.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1173.0" y="1619.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.0" y="1630.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.07%)</title><rect x="1173.0" y="1603.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.0" y="1614.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1173.0" y="1587.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.0" y="1598.0"></text>
</g>
<g>
<title>Node::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1173.0" y="1571.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="1582.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.33%)</title><rect x="1173.8" y="1619.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.8" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.33%)</title><rect x="1173.8" y="1603.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.8" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.33%)</title><rect x="1173.8" y="1587.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.8" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.33%)</title><rect x="1173.8" y="1571.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.8" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.33%)</title><rect x="1173.8" y="1555.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.33%)</title><rect x="1173.8" y="1539.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.8" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.26%)</title><rect x="1173.8" y="1523.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.8" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.26%)</title><rect x="1173.8" y="1507.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.8" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.26%)</title><rect x="1173.8" y="1491.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.26%)</title><rect x="1173.8" y="1475.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.26%)</title><rect x="1173.8" y="1459.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1173.8" y="1443.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.8" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1173.8" y="1427.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.8" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1173.8" y="1411.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.8" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1173.8" y="1395.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1173.8" y="1379.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1173.8" y="1363.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1173.8" y="1347.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.8" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1173.8" y="1331.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.8" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1173.8" y="1315.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1173.8" y="1299.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.8" y="1310.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.07%)</title><rect x="1173.8" y="1283.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="1294.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.07%)</title><rect x="1173.8" y="1267.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.8" y="1278.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1173.8" y="1251.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="1262.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1173.8" y="1235.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.8" y="1246.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1173.8" y="1219.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="1230.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1173.8" y="1203.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.8" y="1214.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.07%)</title><rect x="1174.6" y="1395.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.6" y="1406.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.3" y="1427.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="1438.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.3" y="1411.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.3" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.3" y="1395.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.3" y="1379.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.3" y="1363.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.3" y="1347.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.3" y="1331.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.3" y="1315.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.3" y="1326.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1175.3" y="1299.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.3" y="1310.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1175.3" y="1283.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="1294.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1175.3" y="1267.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.3" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1175.3" y="1251.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.3" y="1262.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.07%)</title><rect x="1175.3" y="1235.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.3" y="1246.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.07%)</title><rect x="1175.3" y="1219.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.3" y="1230.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.07%)</title><rect x="1175.3" y="1203.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1176.1" y="1443.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.1" y="1454.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1176.1" y="1427.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.1" y="1438.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1176.1" y="1411.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.1" y="1422.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1176.1" y="1395.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="1406.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1176.1" y="1379.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.1" y="1390.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1176.1" y="1363.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.1" y="1374.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1176.1" y="1347.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.1" y="1358.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.9" y="1523.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.9" y="1507.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.9" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.9" y="1475.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.9" y="1459.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.9" y="1443.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.9" y="1427.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.9" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.9" y="1411.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.9" y="1395.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.9" y="1379.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.9" y="1363.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.9" y="1347.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.9" y="1331.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="1342.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.9" y="1315.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.9" y="1299.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.9" y="1283.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.9" y="1267.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.9" y="1251.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.9" y="1235.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.9" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.9" y="1203.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.9" y="1187.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.9" y="1171.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.9" y="1155.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.9" y="1139.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.9" y="1123.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.9" y="1107.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.9" y="1091.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.9" y="1075.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.9" y="1059.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.9" y="1043.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="1054.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.07%)</title><rect x="1176.9" y="1027.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="1038.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1176.9" y="1011.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="1022.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1177.7" y="1715.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1177.7" y="1699.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1177.7" y="1683.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.7" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1177.7" y="1667.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1177.7" y="1651.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.7" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1177.7" y="1635.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1177.7" y="1619.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.7" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1177.7" y="1603.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1177.7" y="1587.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.7" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1177.7" y="1571.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1177.7" y="1555.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1177.7" y="1539.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1177.7" y="1523.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1177.7" y="1507.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1177.7" y="1491.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1177.7" y="1475.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1177.7" y="1459.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.7" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1177.7" y="1443.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1177.7" y="1427.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1177.7" y="1411.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1177.7" y="1395.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1177.7" y="1379.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1177.7" y="1363.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1177.7" y="1347.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.7" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1177.7" y="1331.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1177.7" y="1315.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1177.7" y="1299.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1177.7" y="1283.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1177.7" y="1267.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1177.7" y="1251.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1177.7" y="1235.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.7" y="1219.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.7" y="1203.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.7" y="1187.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.7" y="1171.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.7" y="1155.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.7" y="1139.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.7" y="1123.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.7" y="1107.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.7" y="1091.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.7" y="1075.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.7" y="1059.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1177.7" y="1043.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.7" y="1027.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.7" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.7" y="1011.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.7" y="995.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="1006.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.07%)</title><rect x="1177.7" y="979.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="990.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.07%)</title><rect x="1177.7" y="963.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.7" y="974.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1177.7" y="947.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="958.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1177.7" y="931.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="942.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1177.7" y="915.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.7" y="926.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1177.7" y="899.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.7" y="910.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="1219.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="1203.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="1187.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="1171.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="1155.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="1139.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="1123.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="1107.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="1091.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="1075.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="1059.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="1043.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="1027.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="1011.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="995.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="979.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="963.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="947.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="931.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="915.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="899.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="883.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="867.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="851.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="835.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.4" y="819.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.4" y="803.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.4" y="787.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.4" y="771.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.4" y="755.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.4" y="739.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="750.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.4" y="723.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="734.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.07%)</title><rect x="1178.4" y="707.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="718.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.07%)</title><rect x="1178.4" y="691.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="702.0"></text>
</g>
<g>
<title>ciMemberName::get_vmtarget() const (1 samples, 0.07%)</title><rect x="1178.4" y="675.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.4" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1178.4" y="659.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1178.4" y="643.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="654.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1178.4" y="627.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="638.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.07%)</title><rect x="1178.4" y="611.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1178.4" y="595.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1178.4" y="579.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="590.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1178.4" y="563.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="574.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1178.4" y="547.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="558.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1178.4" y="531.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1179.2" y="1427.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.2" y="1438.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1179.2" y="1411.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.2" y="1422.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1179.2" y="1395.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.2" y="1406.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.07%)</title><rect x="1179.2" y="1379.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.2" y="1390.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1179.2" y="1363.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.2" y="1374.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1179.2" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.2" y="1358.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1179.2" y="1331.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.2" y="1342.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.07%)</title><rect x="1179.2" y="1315.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.2" y="1326.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.07%)</title><rect x="1180.0" y="1731.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="1742.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.07%)</title><rect x="1180.0" y="1715.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.0" y="1726.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool) (1 samples, 0.07%)</title><rect x="1180.0" y="1699.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.0" y="1710.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1180.0" y="1683.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="1694.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.33%)</title><rect x="1180.7" y="1811.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.33%)</title><rect x="1180.7" y="1795.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.33%)</title><rect x="1180.7" y="1779.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.7" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.33%)</title><rect x="1180.7" y="1763.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.33%)</title><rect x="1180.7" y="1747.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.33%)</title><rect x="1180.7" y="1731.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.33%)</title><rect x="1180.7" y="1715.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.26%)</title><rect x="1180.7" y="1699.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.26%)</title><rect x="1180.7" y="1683.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.26%)</title><rect x="1180.7" y="1667.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.26%)</title><rect x="1180.7" y="1651.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.26%)</title><rect x="1180.7" y="1635.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.26%)</title><rect x="1180.7" y="1619.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.7" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.26%)</title><rect x="1180.7" y="1603.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.26%)</title><rect x="1180.7" y="1587.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.26%)</title><rect x="1180.7" y="1571.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.26%)</title><rect x="1180.7" y="1555.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.26%)</title><rect x="1180.7" y="1539.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1180.7" y="1523.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.7" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1180.7" y="1507.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1180.7" y="1491.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1180.7" y="1475.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1180.7" y="1459.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1180.7" y="1443.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1180.7" y="1427.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1180.7" y="1411.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1180.7" y="1395.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1180.7" y="1379.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1180.7" y="1363.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1180.7" y="1347.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1180.7" y="1331.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1180.7" y="1315.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1180.7" y="1299.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1180.7" y="1283.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1180.7" y="1267.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1180.7" y="1251.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1180.7" y="1235.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1180.7" y="1219.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1180.7" y="1203.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1180.7" y="1187.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1180.7" y="1171.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1180.7" y="1155.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1180.7" y="1139.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1180.7" y="1123.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1180.7" y="1107.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1180.7" y="1091.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1180.7" y="1075.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1180.7" y="1059.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1180.7" y="1043.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1180.7" y="1027.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.7" y="1011.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.7" y="995.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.7" y="979.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.7" y="963.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.7" y="947.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.7" y="931.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.7" y="915.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.7" y="899.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.7" y="883.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.7" y="867.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.7" y="851.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1180.7" y="835.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1180.7" y="819.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="830.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.07%)</title><rect x="1180.7" y="803.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="814.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1180.7" y="787.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="798.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1180.7" y="771.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.5" y="1011.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.5" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.5" y="995.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.5" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.5" y="979.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.5" y="963.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.5" y="947.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.5" y="931.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.5" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.5" y="926.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1181.5" y="899.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="910.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1181.5" y="883.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.5" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1181.5" y="867.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.5" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1181.5" y="851.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.5" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1181.5" y="835.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1181.5" y="819.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::build_loop_tree(ciTypeFlow::Block*) (1 samples, 0.07%)</title><rect x="1181.5" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="1507.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="1491.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.3" y="1475.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.3" y="1459.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.3" y="1443.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.3" y="1427.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.3" y="1411.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.3" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.3" y="1395.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.3" y="1379.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.3" y="1363.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.3" y="1347.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.3" y="1331.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.3" y="1315.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="1326.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1182.3" y="1299.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="1310.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.07%)</title><rect x="1182.3" y="1283.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="1294.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1182.3" y="1267.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.3" y="1278.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1182.3" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="1262.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.07%)</title><rect x="1182.3" y="1235.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="1246.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1182.3" y="1219.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.3" y="1230.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1182.3" y="1203.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1183.1" y="1523.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="1534.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1183.1" y="1507.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.1" y="1518.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.07%)</title><rect x="1183.1" y="1491.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="1502.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1183.1" y="1475.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="1486.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1183.1" y="1459.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="1470.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1183.1" y="1443.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.1" y="1454.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.8" y="1699.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="1710.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.8" y="1683.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="1694.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.8" y="1667.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="1678.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.8" y="1651.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.8" y="1635.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="1646.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.8" y="1619.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="1630.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.8" y="1603.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.8" y="1587.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.8" y="1571.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.8" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.8" y="1555.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.8" y="1539.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.8" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.8" y="1523.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.8" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.8" y="1507.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.8" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.8" y="1491.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.8" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.8" y="1475.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.8" y="1459.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.8" y="1443.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.8" y="1427.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.8" y="1438.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1183.8" y="1411.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="1422.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1183.8" y="1395.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="1406.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1183.8" y="1379.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.8" y="1390.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1183.8" y="1363.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="1374.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.13%)</title><rect x="1184.6" y="1907.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.6" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.13%)</title><rect x="1184.6" y="1891.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.6" y="1902.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.13%)</title><rect x="1186.1" y="1939.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.1" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.13%)</title><rect x="1186.1" y="1923.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.1" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.13%)</title><rect x="1186.1" y="1907.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.1" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.13%)</title><rect x="1186.1" y="1891.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.1" y="1902.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.07%)</title><rect x="1186.1" y="1875.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.1" y="1886.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.07%)</title><rect x="1186.1" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.1" y="1870.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.07%)</title><rect x="1186.1" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.1" y="1854.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.07%)</title><rect x="1186.1" y="1827.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.1" y="1838.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.07%)</title><rect x="1186.1" y="1811.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.1" y="1822.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.07%)</title><rect x="1186.1" y="1795.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.1" y="1806.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.07%)</title><rect x="1186.1" y="1779.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.1" y="1790.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.07%)</title><rect x="1186.9" y="1875.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.9" y="1886.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.07%)</title><rect x="1186.9" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.9" y="1870.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.07%)</title><rect x="1186.9" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.9" y="1854.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.07%)</title><rect x="1186.9" y="1827.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.9" y="1838.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.07%)</title><rect x="1186.9" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.9" y="1822.0"></text>
</g>
<g>
<title>LinearScanWalker::init_vars_for_alloc(Interval*) (1 samples, 0.07%)</title><rect x="1186.9" y="1795.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.9" y="1806.0"></text>
</g>
<g>
<title>LIRGenerator::is_vreg_flag_set(int, LIRGenerator::VregFlag) (1 samples, 0.07%)</title><rect x="1186.9" y="1779.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.9" y="1790.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1187.7" y="1955.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.7" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.07%)</title><rect x="1187.7" y="1939.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.7" y="1950.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.07%)</title><rect x="1187.7" y="1923.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.7" y="1934.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1187.7" y="1907.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.7" y="1918.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.07%)</title><rect x="1187.7" y="1891.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.7" y="1902.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.07%)</title><rect x="1187.7" y="1875.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="1886.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1188.5" y="1971.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.5" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1188.5" y="1955.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.5" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1188.5" y="1939.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.5" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1188.5" y="1923.0" width="0.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1191.5" y="1934.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1188.5" y="1907.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.5" y="1918.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1188.5" y="1891.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.5" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.07%)</title><rect x="1189.2" y="2003.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.2" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.07%)</title><rect x="1189.2" y="1987.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.2" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1189.2" y="1971.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.2" y="1982.0"></text>
</g>
</g>
</svg>
