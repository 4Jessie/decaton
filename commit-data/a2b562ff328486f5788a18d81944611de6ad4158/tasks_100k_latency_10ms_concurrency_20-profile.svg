<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (414 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="2035.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="2019.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="2003.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1987.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1971.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1955.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1939.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1923.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1907.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1891.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1875.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1859.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1843.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1827.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1811.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1795.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1779.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1763.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1747.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1731.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1715.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1699.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1683.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1667.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1651.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1635.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1619.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1603.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1587.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1571.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1555.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1539.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1523.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1507.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1491.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1475.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1459.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1443.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1427.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1411.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1395.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1379.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1363.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1347.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1331.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1315.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1299.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1283.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1267.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1251.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1235.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1219.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1203.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1187.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1171.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1155.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1139.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1123.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1107.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1091.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1075.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1059.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1043.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1027.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="1011.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="995.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="979.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="963.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="947.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="931.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="915.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="899.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="883.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="867.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="851.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="835.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="819.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="803.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="787.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="771.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="755.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="739.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="723.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="707.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="691.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="675.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="659.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="643.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="627.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="611.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="595.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="579.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="563.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="547.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="531.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="515.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="499.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="483.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="467.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="451.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="435.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="419.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="403.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="387.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="371.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="355.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="339.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="323.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="307.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="291.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="275.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="259.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="243.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="227.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="211.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="195.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="179.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="163.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="147.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="131.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="115.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="99.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="83.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="67.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="51.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.24%)</title><rect x="10.0" y="35.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.24%)</title><rect x="12.9" y="2035.0" width="2.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="15.9" y="2046.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.24%)</title><rect x="12.9" y="2019.0" width="2.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="15.9" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (30 samples, 7.25%)</title><rect x="15.7" y="2035.0" width="85.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.7" y="2046.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (30 samples, 7.25%)</title><rect x="15.7" y="2019.0" width="85.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.7" y="2030.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.24%)</title><rect x="15.7" y="2003.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.7" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.24%)</title><rect x="15.7" y="1987.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="18.7" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/644657036.accept (1 samples, 0.24%)</title><rect x="15.7" y="1971.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.7" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.24%)</title><rect x="15.7" y="1955.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.7" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.24%)</title><rect x="15.7" y="1939.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.7" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.24%)</title><rect x="15.7" y="1923.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.7" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.24%)</title><rect x="18.6" y="2003.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.6" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.24%)</title><rect x="18.6" y="1987.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.6" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.24%)</title><rect x="18.6" y="1971.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.24%)</title><rect x="18.6" y="1955.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.6" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.24%)</title><rect x="21.4" y="2003.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.4" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.24%)</title><rect x="21.4" y="1987.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.4" y="1998.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 1.45%)</title><rect x="24.3" y="2003.0" width="17.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.3" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/214042909.accept (5 samples, 1.21%)</title><rect x="24.3" y="1987.0" width="14.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="27.3" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (5 samples, 1.21%)</title><rect x="24.3" y="1971.0" width="14.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.3" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.48%)</title><rect x="27.1" y="1955.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.1" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.48%)</title><rect x="27.1" y="1939.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.1" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.48%)</title><rect x="27.1" y="1923.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.48%)</title><rect x="27.1" y="1907.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.48%)</title><rect x="27.1" y="1891.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.48%)</title><rect x="27.1" y="1875.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="30.1" y="1886.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.48%)</title><rect x="27.1" y="1859.0" width="5.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="30.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.24%)</title><rect x="32.8" y="1955.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.8" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.24%)</title><rect x="32.8" y="1939.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.8" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.24%)</title><rect x="32.8" y="1923.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.24%)</title><rect x="35.7" y="1955.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="38.7" y="1966.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.24%)</title><rect x="35.7" y="1939.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.24%)</title><rect x="38.5" y="1987.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="41.5" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.24%)</title><rect x="38.5" y="1971.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.24%)</title><rect x="38.5" y="1955.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="41.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.24%)</title><rect x="38.5" y="1939.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="41.5" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.24%)</title><rect x="38.5" y="1923.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (21 samples, 5.07%)</title><rect x="41.4" y="2003.0" width="59.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.4" y="2014.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (20 samples, 4.83%)</title><rect x="41.4" y="1987.0" width="57.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.4" y="1998.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (13 samples, 3.14%)</title><rect x="41.4" y="1971.0" width="37.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="44.4" y="1982.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 1.45%)</title><rect x="41.4" y="1955.0" width="17.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 1.45%)</title><rect x="41.4" y="1939.0" width="17.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.97%)</title><rect x="41.4" y="1923.0" width="11.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (3 samples, 0.72%)</title><rect x="41.4" y="1907.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="44.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.completeNext (1 samples, 0.24%)</title><rect x="41.4" y="1891.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.requestQueue (1 samples, 0.24%)</title><rect x="41.4" y="1875.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.48%)</title><rect x="44.2" y="1891.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="47.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (2 samples, 0.48%)</title><rect x="44.2" y="1875.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.responseSchema (1 samples, 0.24%)</title><rect x="44.2" y="1859.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.schemaFor (1 samples, 0.24%)</title><rect x="44.2" y="1843.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="47.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.24%)</title><rect x="44.2" y="1827.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.24%)</title><rect x="44.2" y="1811.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="47.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.24%)</title><rect x="47.1" y="1859.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.1" y="1870.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.24%)</title><rect x="47.1" y="1843.0" width="2.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="50.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.24%)</title><rect x="49.9" y="1907.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.nanoseconds (1 samples, 0.24%)</title><rect x="49.9" y="1891.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="52.9" y="1902.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="49.9" y="1875.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="52.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.24%)</title><rect x="52.8" y="1923.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.update (1 samples, 0.24%)</title><rect x="55.6" y="1923.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 1.69%)</title><rect x="58.5" y="1955.0" width="19.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 1.45%)</title><rect x="58.5" y="1939.0" width="17.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 1.21%)</title><rect x="58.5" y="1923.0" width="14.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="61.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 1.21%)</title><rect x="58.5" y="1907.0" width="14.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="61.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.24%)</title><rect x="58.5" y="1891.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (4 samples, 0.97%)</title><rect x="61.3" y="1891.0" width="11.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="64.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 0.97%)</title><rect x="61.3" y="1875.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.97%)</title><rect x="61.3" y="1859.0" width="11.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.3" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.97%)</title><rect x="61.3" y="1843.0" width="11.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="64.3" y="1854.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (4 samples, 0.97%)</title><rect x="61.3" y="1827.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.24%)</title><rect x="72.7" y="1923.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="75.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.24%)</title><rect x="72.7" y="1907.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.24%)</title><rect x="72.7" y="1891.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.7" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.24%)</title><rect x="72.7" y="1875.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.24%)</title><rect x="72.7" y="1859.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.24%)</title><rect x="72.7" y="1843.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.24%)</title><rect x="75.6" y="1939.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords$$Lambda$272/1324401219.iterator (1 samples, 0.24%)</title><rect x="75.6" y="1923.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.72%)</title><rect x="78.4" y="1971.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="81.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 0.72%)</title><rect x="78.4" y="1955.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.24%)</title><rect x="78.4" y="1939.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="81.4" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.24%)</title><rect x="78.4" y="1923.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/193729802.accept (1 samples, 0.24%)</title><rect x="78.4" y="1907.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.24%)</title><rect x="78.4" y="1891.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.24%)</title><rect x="78.4" y="1875.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="81.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.24%)</title><rect x="78.4" y="1859.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.48%)</title><rect x="81.3" y="1939.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="84.3" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.24%)</title><rect x="81.3" y="1923.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="84.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.24%)</title><rect x="81.3" y="1907.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.24%)</title><rect x="81.3" y="1891.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="84.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.24%)</title><rect x="81.3" y="1875.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.24%)</title><rect x="81.3" y="1859.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.24%)</title><rect x="81.3" y="1843.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.3" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.24%)</title><rect x="81.3" y="1827.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.3" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.24%)</title><rect x="81.3" y="1811.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="84.3" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.24%)</title><rect x="81.3" y="1795.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.24%)</title><rect x="84.1" y="1923.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="87.1" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.24%)</title><rect x="84.1" y="1907.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.97%)</title><rect x="87.0" y="1971.0" width="11.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.97%)</title><rect x="87.0" y="1955.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.24%)</title><rect x="87.0" y="1939.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="90.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.24%)</title><rect x="87.0" y="1923.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="90.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.24%)</title><rect x="87.0" y="1907.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="90.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.24%)</title><rect x="87.0" y="1891.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="90.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.24%)</title><rect x="87.0" y="1875.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="90.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.24%)</title><rect x="87.0" y="1859.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.24%)</title><rect x="87.0" y="1843.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.24%)</title><rect x="87.0" y="1827.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.24%)</title><rect x="87.0" y="1811.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="90.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.24%)</title><rect x="87.0" y="1795.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.24%)</title><rect x="87.0" y="1779.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="90.0" y="1790.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.24%)</title><rect x="87.0" y="1763.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.0" y="1774.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.24%)</title><rect x="87.0" y="1747.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="90.0" y="1758.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.24%)</title><rect x="87.0" y="1731.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="90.0" y="1742.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.24%)</title><rect x="87.0" y="1715.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="90.0" y="1726.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (1 samples, 0.24%)</title><rect x="87.0" y="1699.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.0" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.72%)</title><rect x="89.8" y="1939.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.72%)</title><rect x="89.8" y="1923.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.72%)</title><rect x="89.8" y="1907.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.24%)</title><rect x="89.8" y="1891.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.24%)</title><rect x="89.8" y="1875.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.24%)</title><rect x="89.8" y="1859.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.24%)</title><rect x="89.8" y="1843.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.8" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.24%)</title><rect x="89.8" y="1827.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.8" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="89.8" y="1811.0" width="2.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="92.8" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (2 samples, 0.48%)</title><rect x="92.7" y="1891.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.24%)</title><rect x="98.4" y="1987.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="101.4" y="1998.0"></text>
</g>
<g>
<title>java/lang/Thread.run (228 samples, 55.07%)</title><rect x="101.2" y="2035.0" width="649.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="104.2" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (228 samples, 55.07%)</title><rect x="101.2" y="2019.0" width="649.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="104.2" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (228 samples, 55.07%)</title><rect x="101.2" y="2003.0" width="649.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="104.2" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1152616950.run (212 samples, 51.21%)</title><rect x="106.9" y="1987.0" width="604.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="109.9" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/1152616950.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57 (212 samples, 51.21%)</title><rect x="106.9" y="1971.0" width="604.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="109.9" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$57</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (212 samples, 51.21%)</title><rect x="106.9" y="1955.0" width="604.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="109.9" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (208 samples, 50.24%)</title><rect x="106.9" y="1939.0" width="592.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="109.9" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (48 samples, 11.59%)</title><rect x="118.3" y="1923.0" width="136.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="121.3" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1853205005.extract (48 samples, 11.59%)</title><rect x="118.3" y="1907.0" width="136.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="121.3" y="1918.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (48 samples, 11.59%)</title><rect x="118.3" y="1891.0" width="136.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="121.3" y="1902.0">com/linecorp/deca..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.24%)</title><rect x="124.0" y="1875.0" width="2.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="127.0" y="1886.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="124.0" y="1859.0" width="2.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="127.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (45 samples, 10.87%)</title><rect x="126.9" y="1875.0" width="128.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="129.9" y="1886.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (45 samples, 10.87%)</title><rect x="126.9" y="1859.0" width="128.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="129.9" y="1870.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (45 samples, 10.87%)</title><rect x="126.9" y="1843.0" width="128.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="129.9" y="1854.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (12 samples, 2.90%)</title><rect x="126.9" y="1827.0" width="34.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="129.9" y="1838.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (12 samples, 2.90%)</title><rect x="126.9" y="1811.0" width="34.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="129.9" y="1822.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (12 samples, 2.90%)</title><rect x="126.9" y="1795.0" width="34.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="129.9" y="1806.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (6 samples, 1.45%)</title><rect x="126.9" y="1779.0" width="17.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="129.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (6 samples, 1.45%)</title><rect x="126.9" y="1763.0" width="17.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="129.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 1.45%)</title><rect x="144.0" y="1779.0" width="17.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="147.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 1.45%)</title><rect x="144.0" y="1763.0" width="17.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="147.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.24%)</title><rect x="144.0" y="1747.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.0" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.24%)</title><rect x="144.0" y="1731.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="147.0" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.24%)</title><rect x="144.0" y="1715.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="147.0" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.24%)</title><rect x="144.0" y="1699.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="147.0" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (5 samples, 1.21%)</title><rect x="146.8" y="1747.0" width="14.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="149.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (5 samples, 1.21%)</title><rect x="146.8" y="1731.0" width="14.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="149.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (5 samples, 1.21%)</title><rect x="146.8" y="1715.0" width="14.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.8" y="1726.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.24%)</title><rect x="158.2" y="1699.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="161.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (30 samples, 7.25%)</title><rect x="161.1" y="1827.0" width="85.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="164.1" y="1838.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.48%)</title><rect x="161.1" y="1811.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="164.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.48%)</title><rect x="161.1" y="1795.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="164.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.24%)</title><rect x="163.9" y="1779.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 0.97%)</title><rect x="166.8" y="1811.0" width="11.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="169.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.72%)</title><rect x="169.6" y="1795.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.72%)</title><rect x="169.6" y="1779.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="172.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.72%)</title><rect x="169.6" y="1763.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="172.6" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.24%)</title><rect x="172.5" y="1747.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="175.5" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.24%)</title><rect x="172.5" y="1731.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="175.5" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.24%)</title><rect x="172.5" y="1715.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="175.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.24%)</title><rect x="175.3" y="1747.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="178.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.48%)</title><rect x="178.2" y="1811.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="181.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.48%)</title><rect x="178.2" y="1795.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.24%)</title><rect x="181.0" y="1779.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="184.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.24%)</title><rect x="181.0" y="1763.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="184.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.24%)</title><rect x="181.0" y="1747.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="184.0" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.24%)</title><rect x="181.0" y="1731.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="184.0" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.24%)</title><rect x="181.0" y="1715.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="184.0" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.24%)</title><rect x="181.0" y="1699.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="184.0" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (22 samples, 5.31%)</title><rect x="183.9" y="1811.0" width="62.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.9" y="1822.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.21%)</title><rect x="186.7" y="1795.0" width="14.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="189.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 1.21%)</title><rect x="186.7" y="1779.0" width="14.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="189.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.48%)</title><rect x="186.7" y="1763.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.72%)</title><rect x="192.4" y="1763.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="195.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.72%)</title><rect x="192.4" y="1747.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="195.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.72%)</title><rect x="192.4" y="1731.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="195.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.72%)</title><rect x="192.4" y="1715.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="195.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (16 samples, 3.86%)</title><rect x="201.0" y="1795.0" width="45.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.0" y="1806.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (16 samples, 3.86%)</title><rect x="201.0" y="1779.0" width="45.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="204.0" y="1790.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (16 samples, 3.86%)</title><rect x="201.0" y="1763.0" width="45.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.0" y="1774.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.72%)</title><rect x="206.7" y="1747.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="209.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.48%)</title><rect x="206.7" y="1731.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="209.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.48%)</title><rect x="206.7" y="1715.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.48%)</title><rect x="206.7" y="1699.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="209.7" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.48%)</title><rect x="206.7" y="1683.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="209.7" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.48%)</title><rect x="206.7" y="1667.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="209.7" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.24%)</title><rect x="212.4" y="1731.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="215.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.24%)</title><rect x="212.4" y="1715.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="215.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.72%)</title><rect x="215.2" y="1747.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.72%)</title><rect x="215.2" y="1731.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.2" y="1742.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.24%)</title><rect x="215.2" y="1715.0" width="2.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="218.2" y="1726.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.24%)</title><rect x="215.2" y="1699.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="218.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.48%)</title><rect x="218.1" y="1715.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.48%)</title><rect x="218.1" y="1699.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.1" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.48%)</title><rect x="218.1" y="1683.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.1" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.24%)</title><rect x="223.8" y="1747.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.72%)</title><rect x="226.6" y="1747.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.72%)</title><rect x="226.6" y="1731.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.72%)</title><rect x="226.6" y="1715.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="229.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.72%)</title><rect x="226.6" y="1699.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.6" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.72%)</title><rect x="226.6" y="1683.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.6" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.72%)</title><rect x="226.6" y="1667.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.6" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor4.newInstance (3 samples, 0.72%)</title><rect x="226.6" y="1651.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.6" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.48%)</title><rect x="235.2" y="1747.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="238.2" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.48%)</title><rect x="235.2" y="1731.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.2" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.48%)</title><rect x="235.2" y="1715.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="238.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.48%)</title><rect x="240.9" y="1747.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.72%)</title><rect x="246.6" y="1827.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.6" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.72%)</title><rect x="246.6" y="1811.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.72%)</title><rect x="246.6" y="1795.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.72%)</title><rect x="246.6" y="1779.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.6" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.72%)</title><rect x="246.6" y="1763.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.6" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (147 samples, 35.51%)</title><rect x="255.1" y="1923.0" width="419.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="258.1" y="1934.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (35 samples, 8.45%)</title><rect x="255.1" y="1907.0" width="99.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.1" y="1918.0">com/linecorp..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (35 samples, 8.45%)</title><rect x="255.1" y="1891.0" width="99.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.1" y="1902.0">org/slf4j/MD..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (19 samples, 4.59%)</title><rect x="300.7" y="1875.0" width="54.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="303.7" y="1886.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.24%)</title><rect x="303.6" y="1859.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="306.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.24%)</title><rect x="303.6" y="1843.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="306.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.24%)</title><rect x="303.6" y="1827.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="306.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.24%)</title><rect x="303.6" y="1811.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.6" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (17 samples, 4.11%)</title><rect x="306.4" y="1859.0" width="48.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.4" y="1870.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (15 samples, 3.62%)</title><rect x="312.1" y="1843.0" width="42.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="315.1" y="1854.0">java..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 2.42%)</title><rect x="326.4" y="1827.0" width="28.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="329.4" y="1838.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.24%)</title><rect x="354.9" y="1907.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="357.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.24%)</title><rect x="354.9" y="1891.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="357.9" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.24%)</title><rect x="354.9" y="1875.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="357.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (30 samples, 7.25%)</title><rect x="357.7" y="1907.0" width="85.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.7" y="1918.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (30 samples, 7.25%)</title><rect x="357.7" y="1891.0" width="85.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="360.7" y="1902.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (18 samples, 4.35%)</title><rect x="366.3" y="1875.0" width="51.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="369.3" y="1886.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (13 samples, 3.14%)</title><rect x="377.7" y="1859.0" width="37.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="380.7" y="1870.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 2.42%)</title><rect x="380.5" y="1843.0" width="28.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="383.5" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.97%)</title><rect x="394.8" y="1827.0" width="11.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="397.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 0.97%)</title><rect x="394.8" y="1811.0" width="11.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="397.8" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.97%)</title><rect x="394.8" y="1795.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="397.8" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.97%)</title><rect x="394.8" y="1779.0" width="11.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="397.8" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.48%)</title><rect x="394.8" y="1763.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="397.8" y="1774.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.48%)</title><rect x="394.8" y="1747.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="397.8" y="1758.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.24%)</title><rect x="394.8" y="1731.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="397.8" y="1742.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.24%)</title><rect x="397.6" y="1731.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="400.6" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.24%)</title><rect x="397.6" y="1715.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="400.6" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.48%)</title><rect x="400.5" y="1763.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="403.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.24%)</title><rect x="403.3" y="1747.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="406.3" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.24%)</title><rect x="403.3" y="1731.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="406.3" y="1742.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.24%)</title><rect x="406.2" y="1827.0" width="2.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="409.2" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.24%)</title><rect x="409.0" y="1843.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="412.0" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="411.9" y="1843.0" width="2.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="414.9" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="414.7" y="1859.0" width="2.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="417.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.24%)</title><rect x="417.6" y="1875.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="420.6" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.24%)</title><rect x="420.4" y="1875.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="423.4" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.24%)</title><rect x="420.4" y="1859.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="423.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.24%)</title><rect x="420.4" y="1843.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="423.4" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 1.69%)</title><rect x="423.3" y="1875.0" width="19.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="426.3" y="1886.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 1.69%)</title><rect x="423.3" y="1859.0" width="19.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="426.3" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 1.69%)</title><rect x="423.3" y="1843.0" width="19.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="426.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.97%)</title><rect x="431.8" y="1827.0" width="11.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="434.8" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.97%)</title><rect x="431.8" y="1811.0" width="11.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="434.8" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.48%)</title><rect x="431.8" y="1795.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="434.8" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.48%)</title><rect x="437.5" y="1795.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="440.5" y="1806.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.24%)</title><rect x="440.4" y="1779.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="443.4" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (65 samples, 15.70%)</title><rect x="443.2" y="1907.0" width="185.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="446.2" y="1918.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (65 samples, 15.70%)</title><rect x="443.2" y="1891.0" width="185.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="446.2" y="1902.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2034428208.process (57 samples, 13.77%)</title><rect x="446.1" y="1875.0" width="162.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="449.1" y="1886.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (57 samples, 13.77%)</title><rect x="446.1" y="1859.0" width="162.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="449.1" y="1870.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (56 samples, 13.53%)</title><rect x="446.1" y="1843.0" width="159.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="449.1" y="1854.0">com/linecorp/decaton..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.48%)</title><rect x="448.9" y="1827.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="451.9" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.48%)</title><rect x="448.9" y="1811.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="451.9" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.48%)</title><rect x="448.9" y="1795.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="451.9" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.48%)</title><rect x="448.9" y="1779.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="451.9" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.48%)</title><rect x="448.9" y="1763.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="451.9" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (52 samples, 12.56%)</title><rect x="454.6" y="1827.0" width="148.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="457.6" y="1838.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/lang/Thread.sleep (52 samples, 12.56%)</title><rect x="454.6" y="1811.0" width="148.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="457.6" y="1822.0">java/lang/Thread.sl..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.24%)</title><rect x="471.7" y="1795.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="474.7" y="1806.0"></text>
</g>
<g>
<title>JVM_Sleep (41 samples, 9.90%)</title><rect x="474.6" y="1795.0" width="116.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="477.6" y="1806.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.21%)</title><rect x="474.6" y="1779.0" width="14.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="477.6" y="1790.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.24%)</title><rect x="488.8" y="1779.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="491.8" y="1790.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.24%)</title><rect x="491.7" y="1779.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="494.7" y="1790.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 1.21%)</title><rect x="494.5" y="1779.0" width="14.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="497.5" y="1790.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (29 samples, 7.00%)</title><rect x="508.8" y="1779.0" width="82.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="511.8" y="1790.0">os::sleep..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.48%)</title><rect x="523.0" y="1763.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="526.0" y="1774.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.48%)</title><rect x="523.0" y="1747.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="526.0" y="1758.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.24%)</title><rect x="528.7" y="1763.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="531.7" y="1774.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="528.7" y="1747.0" width="2.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="531.7" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.24%)</title><rect x="531.6" y="1763.0" width="2.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="534.6" y="1774.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.24%)</title><rect x="534.4" y="1763.0" width="2.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="537.4" y="1774.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 2.90%)</title><rect x="537.3" y="1763.0" width="34.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="540.3" y="1774.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.24%)</title><rect x="571.5" y="1763.0" width="2.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="574.5" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.24%)</title><rect x="574.3" y="1763.0" width="2.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="577.3" y="1774.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.72%)</title><rect x="577.2" y="1763.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="580.2" y="1774.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.24%)</title><rect x="585.7" y="1763.0" width="2.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="588.7" y="1774.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.24%)</title><rect x="588.6" y="1763.0" width="2.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="591.6" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.24%)</title><rect x="591.4" y="1795.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="594.4" y="1806.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.24%)</title><rect x="594.3" y="1795.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="597.3" y="1806.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (2 samples, 0.48%)</title><rect x="597.1" y="1795.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="600.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.24%)</title><rect x="602.9" y="1827.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="605.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.24%)</title><rect x="605.7" y="1843.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="608.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.24%)</title><rect x="605.7" y="1827.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="608.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.24%)</title><rect x="605.7" y="1811.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="608.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.24%)</title><rect x="605.7" y="1795.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="608.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.48%)</title><rect x="608.6" y="1875.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="611.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.48%)</title><rect x="608.6" y="1859.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="611.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/558187323.linkToTargetMethod (2 samples, 0.48%)</title><rect x="614.3" y="1875.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="617.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (2 samples, 0.48%)</title><rect x="614.3" y="1859.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="617.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/965801821.get$Lambda (2 samples, 0.48%)</title><rect x="614.3" y="1843.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="617.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$279/965801821.&lt;init&gt; (2 samples, 0.48%)</title><rect x="614.3" y="1827.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="617.3" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.24%)</title><rect x="620.0" y="1875.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.24%)</title><rect x="620.0" y="1859.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="623.0" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.24%)</title><rect x="622.8" y="1875.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="625.8" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.24%)</title><rect x="625.7" y="1875.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="628.7" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 3.86%)</title><rect x="628.5" y="1907.0" width="45.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="631.5" y="1918.0">java..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.48%)</title><rect x="654.2" y="1891.0" width="5.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="657.2" y="1902.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.48%)</title><rect x="654.2" y="1875.0" width="5.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="657.2" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.97%)</title><rect x="659.9" y="1891.0" width="11.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="662.9" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.97%)</title><rect x="659.9" y="1875.0" width="11.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="662.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$283/1724770533.accept (4 samples, 0.97%)</title><rect x="659.9" y="1859.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="662.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$45 (4 samples, 0.97%)</title><rect x="659.9" y="1843.0" width="11.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="662.9" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (4 samples, 0.97%)</title><rect x="659.9" y="1827.0" width="11.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="662.9" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (4 samples, 0.97%)</title><rect x="659.9" y="1811.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="662.9" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.24%)</title><rect x="671.3" y="1891.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="674.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 1.93%)</title><rect x="674.1" y="1923.0" width="22.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="677.1" y="1934.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 1.45%)</title><rect x="679.8" y="1907.0" width="17.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="682.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 1.45%)</title><rect x="679.8" y="1891.0" width="17.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="682.8" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/1623021168.accept (6 samples, 1.45%)</title><rect x="679.8" y="1875.0" width="17.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="682.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$44 (6 samples, 1.45%)</title><rect x="679.8" y="1859.0" width="17.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="682.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/686401021.complete (6 samples, 1.45%)</title><rect x="679.8" y="1843.0" width="17.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="682.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$54 (6 samples, 1.45%)</title><rect x="679.8" y="1827.0" width="17.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="682.8" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (6 samples, 1.45%)</title><rect x="679.8" y="1811.0" width="17.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="682.8" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 1.45%)</title><rect x="679.8" y="1795.0" width="17.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="682.8" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 1.45%)</title><rect x="679.8" y="1779.0" width="17.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="682.8" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (6 samples, 1.45%)</title><rect x="679.8" y="1763.0" width="17.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="682.8" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (6 samples, 1.45%)</title><rect x="679.8" y="1747.0" width="17.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="682.8" y="1758.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.24%)</title><rect x="696.9" y="1923.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="699.9" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="696.9" y="1907.0" width="2.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="699.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 0.97%)</title><rect x="699.8" y="1939.0" width="11.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="702.8" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.48%)</title><rect x="705.5" y="1923.0" width="5.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="708.5" y="1934.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.48%)</title><rect x="705.5" y="1907.0" width="5.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="708.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.72%)</title><rect x="711.2" y="1987.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="714.2" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.72%)</title><rect x="711.2" y="1971.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="714.2" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.72%)</title><rect x="711.2" y="1955.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="714.2" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.72%)</title><rect x="711.2" y="1939.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="714.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 2.66%)</title><rect x="719.7" y="1987.0" width="31.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="722.7" y="1998.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 1.69%)</title><rect x="731.1" y="1971.0" width="20.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="734.1" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.97%)</title><rect x="739.7" y="1955.0" width="11.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="742.7" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.97%)</title><rect x="739.7" y="1939.0" width="11.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="742.7" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.97%)</title><rect x="739.7" y="1923.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="742.7" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.97%)</title><rect x="739.7" y="1907.0" width="11.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="742.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.24%)</title><rect x="751.1" y="2035.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="754.1" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.24%)</title><rect x="751.1" y="2019.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="754.1" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.24%)</title><rect x="751.1" y="2003.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="754.1" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.clean (1 samples, 0.24%)</title><rect x="751.1" y="1987.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="754.1" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (1 samples, 0.24%)</title><rect x="751.1" y="1971.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="754.1" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.&lt;init&gt; (1 samples, 0.24%)</title><rect x="751.1" y="1955.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="754.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (1 samples, 0.24%)</title><rect x="751.1" y="1939.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="754.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.24%)</title><rect x="751.1" y="1923.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="754.1" y="1934.0"></text>
</g>
<g>
<title>start_thread (153 samples, 36.96%)</title><rect x="753.9" y="2035.0" width="436.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="756.9" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (153 samples, 36.96%)</title><rect x="753.9" y="2019.0" width="436.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="756.9" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 2.90%)</title><rect x="753.9" y="2003.0" width="34.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="756.9" y="2014.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 2.90%)</title><rect x="753.9" y="1987.0" width="34.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="756.9" y="1998.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 2.17%)</title><rect x="753.9" y="1971.0" width="25.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="756.9" y="1982.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 1.93%)</title><rect x="756.8" y="1955.0" width="22.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="759.8" y="1966.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.97%)</title><rect x="762.5" y="1939.0" width="11.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="765.5" y="1950.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.24%)</title><rect x="771.0" y="1923.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="774.0" y="1934.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.24%)</title><rect x="771.0" y="1907.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="774.0" y="1918.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.48%)</title><rect x="773.9" y="1939.0" width="5.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="776.9" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.48%)</title><rect x="779.6" y="1971.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="782.6" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.24%)</title><rect x="779.6" y="1955.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="782.6" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.24%)</title><rect x="779.6" y="1939.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="782.6" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.24%)</title><rect x="779.6" y="1923.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="782.6" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.24%)</title><rect x="779.6" y="1907.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="782.6" y="1918.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.24%)</title><rect x="782.4" y="1955.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="785.4" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.24%)</title><rect x="782.4" y="1939.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="785.4" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.24%)</title><rect x="785.3" y="1971.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="788.3" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.24%)</title><rect x="785.3" y="1955.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="788.3" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.24%)</title><rect x="785.3" y="1939.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="788.3" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.24%)</title><rect x="785.3" y="1923.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="788.3" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.24%)</title><rect x="785.3" y="1907.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="788.3" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.24%)</title><rect x="785.3" y="1891.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="788.3" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.24%)</title><rect x="785.3" y="1875.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="788.3" y="1886.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.24%)</title><rect x="785.3" y="1859.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="788.3" y="1870.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.24%)</title><rect x="785.3" y="1843.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="788.3" y="1854.0"></text>
</g>
<g>
<title>JavaThread::run() (140 samples, 33.82%)</title><rect x="788.1" y="2003.0" width="399.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="791.1" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (140 samples, 33.82%)</title><rect x="788.1" y="1987.0" width="399.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="791.1" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (140 samples, 33.82%)</title><rect x="788.1" y="1971.0" width="399.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="791.1" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (139 samples, 33.57%)</title><rect x="788.1" y="1955.0" width="396.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="791.1" y="1966.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (136 samples, 32.85%)</title><rect x="788.1" y="1939.0" width="387.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="791.1" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (136 samples, 32.85%)</title><rect x="788.1" y="1923.0" width="387.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="791.1" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int,..</text>
</g>
<g>
<title>Compile::Code_Gen() (55 samples, 13.29%)</title><rect x="788.1" y="1907.0" width="156.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="791.1" y="1918.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.24%)</title><rect x="788.1" y="1891.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="791.1" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.24%)</title><rect x="788.1" y="1875.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="791.1" y="1886.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.24%)</title><rect x="788.1" y="1859.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="791.1" y="1870.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.24%)</title><rect x="788.1" y="1843.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="791.1" y="1854.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.97%)</title><rect x="791.0" y="1891.0" width="11.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="794.0" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.24%)</title><rect x="791.0" y="1875.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="794.0" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.24%)</title><rect x="791.0" y="1859.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="794.0" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.24%)</title><rect x="791.0" y="1843.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="794.0" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.24%)</title><rect x="793.8" y="1875.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="796.8" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.24%)</title><rect x="793.8" y="1859.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="796.8" y="1870.0"></text>
</g>
<g>
<title>HandlerImpl::emit_exception_handler(CodeBuffer&amp;) (1 samples, 0.24%)</title><rect x="796.7" y="1875.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="799.7" y="1886.0"></text>
</g>
<g>
<title>MacroAssembler::jump(AddressLiteral) (1 samples, 0.24%)</title><rect x="796.7" y="1859.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="799.7" y="1870.0"></text>
</g>
<g>
<title>Assembler::jmp_literal(unsigned char*, RelocationHolder const&amp;) (1 samples, 0.24%)</title><rect x="796.7" y="1843.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="799.7" y="1854.0"></text>
</g>
<g>
<title>jmpDir_shortNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.24%)</title><rect x="799.5" y="1875.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="802.5" y="1886.0"></text>
</g>
<g>
<title>Assembler::jmpb(Label&amp;) (1 samples, 0.24%)</title><rect x="799.5" y="1859.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="802.5" y="1870.0"></text>
</g>
<g>
<title>Label::add_patch_at(CodeBuffer*, int) (1 samples, 0.24%)</title><rect x="799.5" y="1843.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="802.5" y="1854.0"></text>
</g>
<g>
<title>CodeBuffer::create_patch_overflow() (1 samples, 0.24%)</title><rect x="799.5" y="1827.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="802.5" y="1838.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.21%)</title><rect x="802.4" y="1891.0" width="14.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="805.4" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.24%)</title><rect x="802.4" y="1875.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="805.4" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.97%)</title><rect x="805.2" y="1875.0" width="11.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="808.2" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.72%)</title><rect x="805.2" y="1859.0" width="8.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="808.2" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.24%)</title><rect x="813.8" y="1859.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="816.8" y="1870.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.24%)</title><rect x="816.6" y="1891.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="819.6" y="1902.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 0.24%)</title><rect x="816.6" y="1875.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="819.6" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.48%)</title><rect x="819.5" y="1891.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="822.5" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.48%)</title><rect x="819.5" y="1875.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="822.5" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.24%)</title><rect x="819.5" y="1859.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="822.5" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.24%)</title><rect x="819.5" y="1843.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="822.5" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.24%)</title><rect x="822.3" y="1859.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="825.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (42 samples, 10.14%)</title><rect x="825.2" y="1891.0" width="119.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="828.2" y="1902.0">PhaseChaitin::R..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.48%)</title><rect x="825.2" y="1875.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="828.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.48%)</title><rect x="830.9" y="1875.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.24%)</title><rect x="833.7" y="1859.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="836.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.72%)</title><rect x="836.6" y="1875.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="839.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.72%)</title><rect x="836.6" y="1859.0" width="8.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="839.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.48%)</title><rect x="839.4" y="1843.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="842.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.21%)</title><rect x="845.1" y="1875.0" width="14.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="848.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.24%)</title><rect x="856.5" y="1859.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="859.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.24%)</title><rect x="856.5" y="1843.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="859.5" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 1.45%)</title><rect x="859.4" y="1875.0" width="17.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="862.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.72%)</title><rect x="862.2" y="1859.0" width="8.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="865.2" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="867.9" y="1843.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="870.9" y="1854.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.24%)</title><rect x="870.8" y="1859.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="873.8" y="1870.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.24%)</title><rect x="873.6" y="1859.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="876.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.48%)</title><rect x="876.5" y="1875.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="879.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.48%)</title><rect x="876.5" y="1859.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="879.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.24%)</title><rect x="882.2" y="1875.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="885.2" y="1886.0"></text>
</g>
<g>
<title>loadConUL32Node::bottom_type() const (1 samples, 0.24%)</title><rect x="882.2" y="1859.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="885.2" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.24%)</title><rect x="882.2" y="1843.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="885.2" y="1854.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.24%)</title><rect x="882.2" y="1827.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="885.2" y="1838.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (15 samples, 3.62%)</title><rect x="885.0" y="1875.0" width="42.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="888.0" y="1886.0">Phas..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (15 samples, 3.62%)</title><rect x="885.0" y="1859.0" width="42.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="888.0" y="1870.0">Phas..</text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.24%)</title><rect x="885.0" y="1843.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="888.0" y="1854.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.24%)</title><rect x="885.0" y="1827.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="888.0" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (14 samples, 3.38%)</title><rect x="887.9" y="1843.0" width="39.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="890.9" y="1854.0">Pha..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.48%)</title><rect x="887.9" y="1827.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="890.9" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (11 samples, 2.66%)</title><rect x="893.6" y="1827.0" width="31.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="896.6" y="1838.0">Ph..</text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.24%)</title><rect x="924.9" y="1827.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="927.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.24%)</title><rect x="927.8" y="1875.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="930.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.24%)</title><rect x="927.8" y="1859.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="930.8" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.21%)</title><rect x="930.6" y="1875.0" width="14.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.6" y="1886.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.24%)</title><rect x="936.3" y="1859.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="939.3" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.48%)</title><rect x="939.2" y="1859.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.2" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.24%)</title><rect x="942.0" y="1843.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="945.0" y="1854.0"></text>
</g>
<g>
<title>Compile::Optimize() (74 samples, 17.87%)</title><rect x="944.9" y="1907.0" width="210.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="947.9" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.24%)</title><rect x="944.9" y="1891.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="947.9" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.24%)</title><rect x="944.9" y="1875.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="947.9" y="1886.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.24%)</title><rect x="947.7" y="1891.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="950.7" y="1902.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.24%)</title><rect x="947.7" y="1875.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="950.7" y="1886.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.24%)</title><rect x="947.7" y="1859.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="950.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (63 samples, 15.22%)</title><rect x="950.6" y="1891.0" width="179.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="953.6" y="1902.0">PhaseIdealLoop::build_a..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.48%)</title><rect x="950.6" y="1875.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="953.6" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.24%)</title><rect x="953.4" y="1859.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="956.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.72%)</title><rect x="956.3" y="1875.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="959.3" y="1886.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.24%)</title><rect x="962.0" y="1859.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="965.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (58 samples, 14.01%)</title><rect x="964.8" y="1875.0" width="165.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="967.8" y="1886.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (55 samples, 13.29%)</title><rect x="973.4" y="1859.0" width="156.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="976.4" y="1870.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 1.21%)</title><rect x="973.4" y="1843.0" width="14.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="976.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (50 samples, 12.08%)</title><rect x="987.6" y="1843.0" width="142.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="990.6" y="1854.0">PhaseIdealLoop::ge..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (10 samples, 2.42%)</title><rect x="1101.6" y="1827.0" width="28.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.6" y="1838.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 1.69%)</title><rect x="1130.1" y="1891.0" width="20.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.1" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.24%)</title><rect x="1130.1" y="1875.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.1" y="1886.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.24%)</title><rect x="1130.1" y="1859.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 1.45%)</title><rect x="1133.0" y="1875.0" width="17.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.0" y="1886.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.24%)</title><rect x="1133.0" y="1859.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.0" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.24%)</title><rect x="1135.8" y="1859.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.24%)</title><rect x="1138.7" y="1859.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.24%)</title><rect x="1141.5" y="1859.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.5" y="1870.0"></text>
</g>
<g>
<title>StoreCMNode::Ideal(PhaseGVN*, bool) (1 samples, 0.24%)</title><rect x="1144.4" y="1859.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.4" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.24%)</title><rect x="1144.4" y="1843.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.4" y="1854.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.24%)</title><rect x="1144.4" y="1827.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.4" y="1838.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.24%)</title><rect x="1147.2" y="1859.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.2" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.24%)</title><rect x="1147.2" y="1843.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.2" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.24%)</title><rect x="1147.2" y="1827.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.2" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.24%)</title><rect x="1147.2" y="1811.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.2" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.24%)</title><rect x="1147.2" y="1795.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.2" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.24%)</title><rect x="1147.2" y="1779.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.2" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.24%)</title><rect x="1147.2" y="1763.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.2" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.24%)</title><rect x="1147.2" y="1747.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.2" y="1758.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.24%)</title><rect x="1147.2" y="1731.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.2" y="1742.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.24%)</title><rect x="1147.2" y="1715.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.2" y="1726.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.24%)</title><rect x="1150.1" y="1891.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.1" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.24%)</title><rect x="1150.1" y="1875.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.1" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.24%)</title><rect x="1150.1" y="1859.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.1" y="1870.0"></text>
</g>
<g>
<title>Node::replace_edges_in_range(Node*, Node*, int, int) (1 samples, 0.24%)</title><rect x="1150.1" y="1843.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.1" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.24%)</title><rect x="1152.9" y="1891.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.9" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.24%)</title><rect x="1152.9" y="1875.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.24%)</title><rect x="1152.9" y="1859.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.9" y="1870.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.24%)</title><rect x="1152.9" y="1843.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.9" y="1854.0"></text>
</g>
<g>
<title>PhaseTransform::set_type_bottom(Node const*) (1 samples, 0.24%)</title><rect x="1152.9" y="1827.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.9" y="1838.0"></text>
</g>
<g>
<title>Compile::TracePhase::~TracePhase() (1 samples, 0.24%)</title><rect x="1155.8" y="1907.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.8" y="1918.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.21%)</title><rect x="1158.6" y="1907.0" width="14.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.6" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.21%)</title><rect x="1158.6" y="1891.0" width="14.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.6" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.21%)</title><rect x="1158.6" y="1875.0" width="14.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.6" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.21%)</title><rect x="1158.6" y="1859.0" width="14.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.6" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.21%)</title><rect x="1158.6" y="1843.0" width="14.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.6" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.21%)</title><rect x="1158.6" y="1827.0" width="14.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.6" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.21%)</title><rect x="1158.6" y="1811.0" width="14.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.6" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.21%)</title><rect x="1158.6" y="1795.0" width="14.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.6" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.21%)</title><rect x="1158.6" y="1779.0" width="14.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.6" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.21%)</title><rect x="1158.6" y="1763.0" width="14.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.6" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.21%)</title><rect x="1158.6" y="1747.0" width="14.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.6" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.21%)</title><rect x="1158.6" y="1731.0" width="14.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.6" y="1742.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 1.21%)</title><rect x="1158.6" y="1715.0" width="14.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.6" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.21%)</title><rect x="1158.6" y="1699.0" width="14.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.6" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.21%)</title><rect x="1158.6" y="1683.0" width="14.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.21%)</title><rect x="1158.6" y="1667.0" width="14.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.21%)</title><rect x="1158.6" y="1651.0" width="14.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.21%)</title><rect x="1158.6" y="1635.0" width="14.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.6" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.21%)</title><rect x="1158.6" y="1619.0" width="14.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.6" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.97%)</title><rect x="1158.6" y="1603.0" width="11.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.6" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.97%)</title><rect x="1158.6" y="1587.0" width="11.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.6" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.97%)</title><rect x="1158.6" y="1571.0" width="11.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.6" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.97%)</title><rect x="1158.6" y="1555.0" width="11.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.97%)</title><rect x="1158.6" y="1539.0" width="11.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.6" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.97%)</title><rect x="1158.6" y="1523.0" width="11.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.6" y="1534.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.24%)</title><rect x="1158.6" y="1507.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.6" y="1518.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.24%)</title><rect x="1158.6" y="1491.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.6" y="1502.0"></text>
</g>
<g>
<title>ciMethod::can_be_compiled() (1 samples, 0.24%)</title><rect x="1158.6" y="1475.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.6" y="1486.0"></text>
</g>
<g>
<title>ciEnv::comp_level() (1 samples, 0.24%)</title><rect x="1158.6" y="1459.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.6" y="1470.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.72%)</title><rect x="1161.5" y="1507.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.72%)</title><rect x="1161.5" y="1491.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.72%)</title><rect x="1161.5" y="1475.0" width="8.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.5" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.72%)</title><rect x="1161.5" y="1459.0" width="8.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.5" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.72%)</title><rect x="1161.5" y="1443.0" width="8.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.5" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.72%)</title><rect x="1161.5" y="1427.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.5" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.72%)</title><rect x="1161.5" y="1411.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.72%)</title><rect x="1161.5" y="1395.0" width="8.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.5" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.72%)</title><rect x="1161.5" y="1379.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.72%)</title><rect x="1161.5" y="1363.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.72%)</title><rect x="1161.5" y="1347.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.72%)</title><rect x="1161.5" y="1331.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.5" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.72%)</title><rect x="1161.5" y="1315.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.5" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.72%)</title><rect x="1161.5" y="1299.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.72%)</title><rect x="1161.5" y="1283.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.72%)</title><rect x="1161.5" y="1267.0" width="8.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.72%)</title><rect x="1161.5" y="1251.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.72%)</title><rect x="1161.5" y="1235.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.5" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.72%)</title><rect x="1161.5" y="1219.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.5" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.72%)</title><rect x="1161.5" y="1203.0" width="8.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.72%)</title><rect x="1161.5" y="1187.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.72%)</title><rect x="1161.5" y="1171.0" width="8.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.72%)</title><rect x="1161.5" y="1155.0" width="8.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.72%)</title><rect x="1161.5" y="1139.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.5" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.48%)</title><rect x="1161.5" y="1123.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.5" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.48%)</title><rect x="1161.5" y="1107.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.48%)</title><rect x="1161.5" y="1091.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.48%)</title><rect x="1161.5" y="1075.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.48%)</title><rect x="1161.5" y="1059.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1161.5" y="1043.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.5" y="1054.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1161.5" y="1027.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.5" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1161.5" y="1011.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1161.5" y="995.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1161.5" y="979.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1161.5" y="963.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1161.5" y="947.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1161.5" y="931.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.5" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1161.5" y="915.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.5" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1161.5" y="899.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1161.5" y="883.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1161.5" y="867.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1161.5" y="851.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.24%)</title><rect x="1161.5" y="835.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.24%)</title><rect x="1161.5" y="819.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.5" y="830.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.24%)</title><rect x="1161.5" y="803.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="814.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.24%)</title><rect x="1161.5" y="787.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.5" y="798.0"></text>
</g>
<g>
<title>PhaseGVN::transform(Node*) (1 samples, 0.24%)</title><rect x="1161.5" y="771.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.24%)</title><rect x="1164.3" y="1043.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.24%)</title><rect x="1164.3" y="1027.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.3" y="1038.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.24%)</title><rect x="1164.3" y="1011.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.3" y="1022.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.24%)</title><rect x="1164.3" y="995.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.3" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.24%)</title><rect x="1164.3" y="979.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.3" y="990.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.24%)</title><rect x="1164.3" y="963.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.3" y="974.0"></text>
</g>
<g>
<title>PhaseValues::is_IterGVN() (1 samples, 0.24%)</title><rect x="1164.3" y="947.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.3" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1167.2" y="1123.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.2" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1167.2" y="1107.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.2" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1167.2" y="1091.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1167.2" y="1075.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1167.2" y="1059.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1167.2" y="1043.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1167.2" y="1027.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.2" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1167.2" y="1011.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.2" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1167.2" y="995.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1167.2" y="979.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1167.2" y="963.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1167.2" y="947.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1167.2" y="931.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.2" y="942.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1167.2" y="915.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.2" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1167.2" y="899.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.2" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1167.2" y="883.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1167.2" y="867.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1167.2" y="851.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1167.2" y="835.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.2" y="846.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.24%)</title><rect x="1167.2" y="819.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.2" y="830.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1170.0" y="1603.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.0" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1170.0" y="1587.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.0" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1170.0" y="1571.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.0" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1170.0" y="1555.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.0" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1170.0" y="1539.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.0" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1170.0" y="1523.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.0" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1170.0" y="1507.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.0" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.24%)</title><rect x="1170.0" y="1491.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.0" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.24%)</title><rect x="1170.0" y="1475.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.0" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.24%)</title><rect x="1170.0" y="1459.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.0" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.24%)</title><rect x="1170.0" y="1443.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.0" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.24%)</title><rect x="1170.0" y="1427.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.0" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.24%)</title><rect x="1170.0" y="1411.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.0" y="1422.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.24%)</title><rect x="1170.0" y="1395.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.0" y="1406.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.24%)</title><rect x="1170.0" y="1379.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.0" y="1390.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.24%)</title><rect x="1170.0" y="1363.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.0" y="1374.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.24%)</title><rect x="1170.0" y="1347.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.0" y="1358.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.24%)</title><rect x="1170.0" y="1331.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.0" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.24%)</title><rect x="1170.0" y="1315.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.0" y="1326.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.24%)</title><rect x="1170.0" y="1299.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.0" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.24%)</title><rect x="1170.0" y="1283.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.0" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.24%)</title><rect x="1170.0" y="1267.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.0" y="1278.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.24%)</title><rect x="1170.0" y="1251.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.0" y="1262.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.24%)</title><rect x="1170.0" y="1235.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.0" y="1246.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.24%)</title><rect x="1170.0" y="1219.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.0" y="1230.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.24%)</title><rect x="1172.9" y="1907.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.9" y="1918.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.24%)</title><rect x="1172.9" y="1891.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.9" y="1902.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.72%)</title><rect x="1175.7" y="1939.0" width="8.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.7" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.72%)</title><rect x="1175.7" y="1923.0" width="8.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.7" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.72%)</title><rect x="1175.7" y="1907.0" width="8.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.7" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.72%)</title><rect x="1175.7" y="1891.0" width="8.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.7" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.24%)</title><rect x="1175.7" y="1875.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.7" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.24%)</title><rect x="1175.7" y="1859.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.24%)</title><rect x="1175.7" y="1843.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.24%)</title><rect x="1175.7" y="1827.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.24%)</title><rect x="1175.7" y="1811.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.7" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.24%)</title><rect x="1175.7" y="1795.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.7" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.24%)</title><rect x="1175.7" y="1779.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.7" y="1790.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.24%)</title><rect x="1175.7" y="1763.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.7" y="1774.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.24%)</title><rect x="1175.7" y="1747.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.7" y="1758.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.24%)</title><rect x="1175.7" y="1731.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.7" y="1742.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.24%)</title><rect x="1175.7" y="1715.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.7" y="1726.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.24%)</title><rect x="1175.7" y="1699.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.7" y="1710.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.24%)</title><rect x="1175.7" y="1683.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="1694.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.24%)</title><rect x="1175.7" y="1667.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.7" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.24%)</title><rect x="1175.7" y="1651.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.7" y="1662.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.24%)</title><rect x="1175.7" y="1635.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.7" y="1646.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.24%)</title><rect x="1175.7" y="1619.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.7" y="1630.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.24%)</title><rect x="1175.7" y="1603.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.7" y="1614.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.24%)</title><rect x="1175.7" y="1587.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="1598.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.24%)</title><rect x="1175.7" y="1571.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.7" y="1582.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.24%)</title><rect x="1175.7" y="1555.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.7" y="1566.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.24%)</title><rect x="1175.7" y="1539.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.7" y="1550.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (2 samples, 0.48%)</title><rect x="1178.6" y="1875.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.6" y="1886.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (2 samples, 0.48%)</title><rect x="1178.6" y="1859.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.6" y="1870.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle, Thread*) (1 samples, 0.24%)</title><rect x="1178.6" y="1843.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="1854.0"></text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle, Thread*) (1 samples, 0.24%)</title><rect x="1178.6" y="1827.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.6" y="1838.0"></text>
</g>
<g>
<title>MethodData::compute_allocation_size_in_bytes(methodHandle) (1 samples, 0.24%)</title><rect x="1178.6" y="1811.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="1822.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.24%)</title><rect x="1181.4" y="1843.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.4" y="1854.0"></text>
</g>
<g>
<title>Metadata::is_method() const volatile (1 samples, 0.24%)</title><rect x="1181.4" y="1827.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="1838.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.24%)</title><rect x="1184.3" y="1955.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.3" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.24%)</title><rect x="1184.3" y="1939.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="1950.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.24%)</title><rect x="1184.3" y="1923.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.3" y="1934.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.24%)</title><rect x="1184.3" y="1907.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.3" y="1918.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.24%)</title><rect x="1184.3" y="1891.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.3" y="1902.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.24%)</title><rect x="1187.1" y="2003.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.1" y="2014.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.24%)</title><rect x="1187.1" y="1987.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="1998.0"></text>
</g>
</g>
</svg>
