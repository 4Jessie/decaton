<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1285"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1285"> </text>
<g id="frames">
<g>
<title>all (291 samples, 100.00%)</title><rect x="10.0" y="1251.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (20 samples, 6.87%)</title><rect x="10.0" y="1235.0" width="81.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (4 samples, 1.37%)</title><rect x="10.0" y="1219.0" width="16.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (4 samples, 1.37%)</title><rect x="10.0" y="1203.0" width="16.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (4 samples, 1.37%)</title><rect x="10.0" y="1187.0" width="16.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (4 samples, 1.37%)</title><rect x="10.0" y="1171.0" width="16.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (4 samples, 1.37%)</title><rect x="10.0" y="1155.0" width="16.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.37%)</title><rect x="10.0" y="1139.0" width="16.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.37%)</title><rect x="10.0" y="1123.0" width="16.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.37%)</title><rect x="10.0" y="1107.0" width="16.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.69%)</title><rect x="10.0" y="1091.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.34%)</title><rect x="10.0" y="1075.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="10.0" y="1059.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="10.0" y="1043.0" width="4.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.34%)</title><rect x="14.1" y="1075.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.1" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="14.1" y="1059.0" width="4.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="17.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.69%)</title><rect x="18.1" y="1091.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.69%)</title><rect x="18.1" y="1075.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.69%)</title><rect x="18.1" y="1059.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.69%)</title><rect x="18.1" y="1043.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClientRequest.makeHeader (1 samples, 0.34%)</title><rect x="18.1" y="1027.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.forId (1 samples, 0.34%)</title><rect x="18.1" y="1011.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.34%)</title><rect x="22.2" y="1027.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.34%)</title><rect x="22.2" y="1011.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.34%)</title><rect x="22.2" y="995.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.34%)</title><rect x="22.2" y="979.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.34%)</title><rect x="22.2" y="963.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.validate (1 samples, 0.34%)</title><rect x="22.2" y="947.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.2" y="958.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.34%)</title><rect x="22.2" y="931.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="25.2" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.34%)</title><rect x="22.2" y="915.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="25.2" y="926.0"></text>
</g>
<g>
<title>JavaThread::last_frame() (1 samples, 0.34%)</title><rect x="22.2" y="899.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="25.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (16 samples, 5.50%)</title><rect x="26.2" y="1219.0" width="64.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.2" y="1230.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.34%)</title><rect x="26.2" y="1203.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.34%)</title><rect x="26.2" y="1187.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.2" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.34%)</title><rect x="26.2" y="1171.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.2" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="26.2" y="1155.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.2" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.34%)</title><rect x="26.2" y="1139.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.2" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="26.2" y="1123.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.2" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.34%)</title><rect x="26.2" y="1107.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.37%)</title><rect x="30.3" y="1203.0" width="16.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/520692097.accept (4 samples, 1.37%)</title><rect x="30.3" y="1187.0" width="16.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (4 samples, 1.37%)</title><rect x="30.3" y="1171.0" width="16.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.34%)</title><rect x="30.3" y="1155.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.34%)</title><rect x="30.3" y="1139.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.34%)</title><rect x="30.3" y="1123.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.34%)</title><rect x="30.3" y="1107.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.34%)</title><rect x="30.3" y="1091.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.03%)</title><rect x="34.3" y="1155.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="37.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.03%)</title><rect x="34.3" y="1139.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="37.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.69%)</title><rect x="34.3" y="1123.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="37.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.69%)</title><rect x="34.3" y="1107.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.69%)</title><rect x="34.3" y="1091.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="37.3" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.69%)</title><rect x="34.3" y="1075.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="37.3" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="38.4" y="1059.0" width="4.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="41.4" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="42.4" y="1123.0" width="4.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="45.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.78%)</title><rect x="46.5" y="1203.0" width="44.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.5" y="1214.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.78%)</title><rect x="46.5" y="1187.0" width="44.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="49.5" y="1198.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.41%)</title><rect x="46.5" y="1171.0" width="28.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="49.5" y="1182.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.69%)</title><rect x="50.5" y="1155.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.69%)</title><rect x="50.5" y="1139.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.34%)</title><rect x="50.5" y="1123.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="53.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.34%)</title><rect x="50.5" y="1107.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.34%)</title><rect x="50.5" y="1091.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.5" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.34%)</title><rect x="50.5" y="1075.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.5" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.34%)</title><rect x="50.5" y="1059.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="53.5" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.34%)</title><rect x="50.5" y="1043.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="53.5" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.34%)</title><rect x="50.5" y="1027.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="53.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.34%)</title><rect x="54.6" y="1123.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.34%)</title><rect x="54.6" y="1107.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.03%)</title><rect x="58.7" y="1155.0" width="12.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="61.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.03%)</title><rect x="58.7" y="1139.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.34%)</title><rect x="58.7" y="1123.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.34%)</title><rect x="58.7" y="1107.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.34%)</title><rect x="58.7" y="1091.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.34%)</title><rect x="58.7" y="1075.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.34%)</title><rect x="58.7" y="1059.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="61.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.34%)</title><rect x="58.7" y="1043.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.34%)</title><rect x="58.7" y="1027.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="61.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.34%)</title><rect x="58.7" y="1011.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.34%)</title><rect x="58.7" y="995.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.34%)</title><rect x="58.7" y="979.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="61.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.34%)</title><rect x="62.7" y="1123.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="65.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.34%)</title><rect x="62.7" y="1107.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="62.7" y="1091.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="62.7" y="1075.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.34%)</title><rect x="66.8" y="1123.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.34%)</title><rect x="66.8" y="1107.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.34%)</title><rect x="66.8" y="1091.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.34%)</title><rect x="66.8" y="1075.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.34%)</title><rect x="70.8" y="1155.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.forConsumer (1 samples, 0.34%)</title><rect x="70.8" y="1139.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.&lt;init&gt; (1 samples, 0.34%)</title><rect x="70.8" y="1123.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="73.8" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections.emptyList (1 samples, 0.34%)</title><rect x="70.8" y="1107.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="73.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 1.37%)</title><rect x="74.9" y="1171.0" width="16.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="77.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 1.37%)</title><rect x="74.9" y="1155.0" width="16.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 1.03%)</title><rect x="74.9" y="1139.0" width="12.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.34%)</title><rect x="74.9" y="1123.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="77.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/284839787.accept (1 samples, 0.34%)</title><rect x="74.9" y="1107.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.34%)</title><rect x="74.9" y="1091.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.34%)</title><rect x="74.9" y="1075.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.34%)</title><rect x="74.9" y="1059.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.34%)</title><rect x="74.9" y="1043.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.34%)</title><rect x="74.9" y="1027.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.34%)</title><rect x="74.9" y="1011.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.69%)</title><rect x="78.9" y="1123.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.9" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.69%)</title><rect x="78.9" y="1107.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.9" y="1118.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.69%)</title><rect x="78.9" y="1091.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.9" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.34%)</title><rect x="78.9" y="1075.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.9" y="1086.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.34%)</title><rect x="78.9" y="1059.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="81.9" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.34%)</title><rect x="83.0" y="1075.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="86.0" y="1086.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.34%)</title><rect x="83.0" y="1059.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="86.0" y="1070.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.34%)</title><rect x="83.0" y="1043.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="86.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.34%)</title><rect x="87.0" y="1139.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.run (146 samples, 50.17%)</title><rect x="91.1" y="1235.0" width="592.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="94.1" y="1246.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (146 samples, 50.17%)</title><rect x="91.1" y="1219.0" width="592.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="94.1" y="1230.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (146 samples, 50.17%)</title><rect x="91.1" y="1203.0" width="592.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.1" y="1214.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/761336491.run (134 samples, 46.05%)</title><rect x="91.1" y="1187.0" width="543.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="94.1" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/761336491...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (134 samples, 46.05%)</title><rect x="91.1" y="1171.0" width="543.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="94.1" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (134 samples, 46.05%)</title><rect x="91.1" y="1155.0" width="543.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="94.1" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.69%)</title><rect x="95.2" y="1139.0" width="8.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="98.2" y="1150.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.69%)</title><rect x="95.2" y="1123.0" width="8.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="98.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (130 samples, 44.67%)</title><rect x="103.3" y="1139.0" width="527.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="106.3" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (1 samples, 0.34%)</title><rect x="127.6" y="1123.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="130.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (15 samples, 5.15%)</title><rect x="131.6" y="1123.0" width="60.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="134.6" y="1134.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (15 samples, 5.15%)</title><rect x="131.6" y="1107.0" width="60.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.6" y="1118.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (15 samples, 5.15%)</title><rect x="131.6" y="1091.0" width="60.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="134.6" y="1102.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (15 samples, 5.15%)</title><rect x="131.6" y="1075.0" width="60.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.6" y="1086.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (15 samples, 5.15%)</title><rect x="131.6" y="1059.0" width="60.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="134.6" y="1070.0">com/li..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (15 samples, 5.15%)</title><rect x="131.6" y="1043.0" width="60.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="134.6" y="1054.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (7 samples, 2.41%)</title><rect x="131.6" y="1027.0" width="28.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="134.6" y="1038.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.37%)</title><rect x="131.6" y="1011.0" width="16.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="134.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.37%)</title><rect x="131.6" y="995.0" width="16.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="134.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (4 samples, 1.37%)</title><rect x="131.6" y="979.0" width="16.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="134.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.03%)</title><rect x="147.9" y="1011.0" width="12.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="150.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (8 samples, 2.75%)</title><rect x="160.0" y="1027.0" width="32.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="163.0" y="1038.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.34%)</title><rect x="160.0" y="1011.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="163.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.34%)</title><rect x="160.0" y="995.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="163.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.34%)</title><rect x="164.1" y="1011.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="167.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.34%)</title><rect x="164.1" y="995.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.34%)</title><rect x="164.1" y="979.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="167.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.34%)</title><rect x="164.1" y="963.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="167.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.34%)</title><rect x="164.1" y="947.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="167.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 2.06%)</title><rect x="168.1" y="1011.0" width="24.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.1" y="1022.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.34%)</title><rect x="168.1" y="995.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 1.72%)</title><rect x="172.2" y="995.0" width="20.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 1.72%)</title><rect x="172.2" y="979.0" width="20.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="175.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 1.72%)</title><rect x="172.2" y="963.0" width="20.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="175.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.34%)</title><rect x="172.2" y="947.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="175.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.34%)</title><rect x="176.3" y="947.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.34%)</title><rect x="176.3" y="931.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.34%)</title><rect x="176.3" y="915.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.34%)</title><rect x="176.3" y="899.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.3" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.34%)</title><rect x="176.3" y="883.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.34%)</title><rect x="180.3" y="947.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.34%)</title><rect x="180.3" y="931.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.34%)</title><rect x="180.3" y="915.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.34%)</title><rect x="180.3" y="899.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.3" y="910.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.34%)</title><rect x="180.3" y="883.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="183.3" y="894.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.34%)</title><rect x="180.3" y="867.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.3" y="878.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.34%)</title><rect x="180.3" y="851.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.69%)</title><rect x="184.4" y="947.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="187.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.69%)</title><rect x="184.4" y="931.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.4" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.69%)</title><rect x="184.4" y="915.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="187.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (102 samples, 35.05%)</title><rect x="192.5" y="1123.0" width="413.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="195.5" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (16 samples, 5.50%)</title><rect x="192.5" y="1107.0" width="64.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="195.5" y="1118.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (16 samples, 5.50%)</title><rect x="192.5" y="1091.0" width="64.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.5" y="1102.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (16 samples, 5.50%)</title><rect x="192.5" y="1075.0" width="64.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.5" y="1086.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 2.06%)</title><rect x="196.5" y="1059.0" width="24.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.5" y="1070.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 2.06%)</title><rect x="196.5" y="1043.0" width="24.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.5" y="1054.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 2.06%)</title><rect x="196.5" y="1027.0" width="24.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.5" y="1038.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 1.37%)</title><rect x="204.6" y="1011.0" width="16.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.6" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (9 samples, 3.09%)</title><rect x="220.9" y="1059.0" width="36.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.9" y="1070.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 3.09%)</title><rect x="220.9" y="1043.0" width="36.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="223.9" y="1054.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 3.09%)</title><rect x="220.9" y="1027.0" width="36.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.9" y="1038.0">jav..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.69%)</title><rect x="249.2" y="1011.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (24 samples, 8.25%)</title><rect x="257.4" y="1107.0" width="97.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="260.4" y="1118.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (24 samples, 8.25%)</title><rect x="257.4" y="1091.0" width="97.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.4" y="1102.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 1.72%)</title><rect x="257.4" y="1075.0" width="20.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="260.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.69%)</title><rect x="261.4" y="1059.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.69%)</title><rect x="261.4" y="1043.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.4" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="265.5" y="1027.0" width="4.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="268.5" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.69%)</title><rect x="269.5" y="1059.0" width="8.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="272.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.69%)</title><rect x="277.6" y="1075.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.69%)</title><rect x="277.6" y="1059.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.69%)</title><rect x="277.6" y="1043.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.6" y="1054.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (17 samples, 5.84%)</title><rect x="285.7" y="1075.0" width="69.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.7" y="1086.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (16 samples, 5.50%)</title><rect x="289.8" y="1059.0" width="64.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.8" y="1070.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.03%)</title><rect x="289.8" y="1043.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.03%)</title><rect x="289.8" y="1027.0" width="12.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 1.03%)</title><rect x="289.8" y="1011.0" width="12.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.34%)</title><rect x="297.9" y="995.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="300.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.34%)</title><rect x="302.0" y="1043.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="305.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.34%)</title><rect x="302.0" y="1027.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.34%)</title><rect x="302.0" y="1011.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="305.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.34%)</title><rect x="302.0" y="995.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="305.0" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (12 samples, 4.12%)</title><rect x="306.0" y="1043.0" width="48.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.0" y="1054.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 3.44%)</title><rect x="314.1" y="1027.0" width="40.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="317.1" y="1038.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.34%)</title><rect x="314.1" y="1011.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="317.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.34%)</title><rect x="314.1" y="995.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.1" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 3.09%)</title><rect x="318.2" y="1011.0" width="36.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.2" y="1022.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 1.03%)</title><rect x="334.4" y="995.0" width="12.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="337.4" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.69%)</title><rect x="338.5" y="979.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="341.5" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.34%)</title><rect x="338.5" y="963.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="341.5" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.34%)</title><rect x="338.5" y="947.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="341.5" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="342.5" y="963.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="345.5" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="342.5" y="947.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="345.5" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="342.5" y="931.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="345.5" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.34%)</title><rect x="342.5" y="915.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="345.5" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.34%)</title><rect x="342.5" y="899.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="345.5" y="910.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.34%)</title><rect x="342.5" y="883.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="345.5" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.34%)</title><rect x="342.5" y="867.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="345.5" y="878.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.34%)</title><rect x="342.5" y="851.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="345.5" y="862.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.34%)</title><rect x="342.5" y="835.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="345.5" y="846.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.34%)</title><rect x="342.5" y="819.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="345.5" y="830.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.69%)</title><rect x="346.6" y="995.0" width="8.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="349.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (58 samples, 19.93%)</title><rect x="354.7" y="1107.0" width="235.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="357.7" y="1118.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (58 samples, 19.93%)</title><rect x="354.7" y="1091.0" width="235.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="357.7" y="1102.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="354.7" y="1075.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="357.7" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="354.7" y="1059.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="357.7" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="354.7" y="1043.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="357.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/2032810883.process (51 samples, 17.53%)</title><rect x="358.7" y="1075.0" width="206.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="361.7" y="1086.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (51 samples, 17.53%)</title><rect x="358.7" y="1059.0" width="206.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="361.7" y="1070.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (51 samples, 17.53%)</title><rect x="358.7" y="1043.0" width="206.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="361.7" y="1054.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (50 samples, 17.18%)</title><rect x="362.8" y="1027.0" width="202.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="365.8" y="1038.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>java/lang/Thread.sleep (49 samples, 16.84%)</title><rect x="362.8" y="1011.0" width="198.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="365.8" y="1022.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (44 samples, 15.12%)</title><rect x="379.0" y="995.0" width="178.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="382.0" y="1006.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.69%)</title><rect x="403.3" y="979.0" width="8.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="406.3" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 2.06%)</title><rect x="411.4" y="979.0" width="24.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="414.4" y="990.0">_..</text>
</g>
<g>
<title>[vdso] (5 samples, 1.72%)</title><rect x="415.5" y="963.0" width="20.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="418.5" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.69%)</title><rect x="435.8" y="979.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="438.8" y="990.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.69%)</title><rect x="443.9" y="979.0" width="8.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="446.9" y="990.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (26 samples, 8.93%)</title><rect x="452.0" y="979.0" width="105.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="455.0" y="990.0">os::sleep(Thr..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="480.4" y="963.0" width="4.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="483.4" y="974.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.03%)</title><rect x="484.4" y="963.0" width="12.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="487.4" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.69%)</title><rect x="496.6" y="963.0" width="8.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="499.6" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 3.09%)</title><rect x="504.7" y="963.0" width="36.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="507.7" y="974.0">__p..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.34%)</title><rect x="541.2" y="963.0" width="4.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="544.2" y="974.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.03%)</title><rect x="545.3" y="963.0" width="12.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="548.3" y="974.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.34%)</title><rect x="557.4" y="995.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="560.4" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.34%)</title><rect x="561.5" y="1011.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="564.5" y="1022.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="561.5" y="995.0" width="4.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="564.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (4 samples, 1.37%)</title><rect x="565.5" y="1075.0" width="16.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="568.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (4 samples, 1.37%)</title><rect x="565.5" y="1059.0" width="16.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="568.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/2047610764.get$Lambda (4 samples, 1.37%)</title><rect x="565.5" y="1043.0" width="16.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="568.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/2047610764.&lt;init&gt; (3 samples, 1.03%)</title><rect x="569.6" y="1027.0" width="12.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="572.6" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="577.7" y="1011.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="580.7" y="1022.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="577.7" y="995.0" width="4.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="580.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.34%)</title><rect x="581.8" y="1075.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="584.8" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.34%)</title><rect x="581.8" y="1059.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="584.8" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.34%)</title><rect x="581.8" y="1043.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="584.8" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.34%)</title><rect x="585.8" y="1075.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="588.8" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.34%)</title><rect x="585.8" y="1059.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="588.8" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.34%)</title><rect x="585.8" y="1043.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="588.8" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="585.8" y="1027.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="588.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.34%)</title><rect x="589.9" y="1107.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="592.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.34%)</title><rect x="589.9" y="1091.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="592.9" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="589.9" y="1075.0" width="4.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="592.9" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="589.9" y="1059.0" width="4.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="592.9" y="1070.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (1 samples, 0.34%)</title><rect x="593.9" y="1107.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="596.9" y="1118.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (1 samples, 0.34%)</title><rect x="593.9" y="1091.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="596.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/778825878.linkToTargetMethod (1 samples, 0.34%)</title><rect x="593.9" y="1075.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="596.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/996711508.invokeStatic_D_L (1 samples, 0.34%)</title><rect x="593.9" y="1059.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="596.9" y="1070.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter$$Lambda$276/1220565189.get$Lambda (1 samples, 0.34%)</title><rect x="593.9" y="1043.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="596.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.69%)</title><rect x="598.0" y="1107.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="601.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.69%)</title><rect x="598.0" y="1091.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="601.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.69%)</title><rect x="598.0" y="1075.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="601.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/651949993.accept (2 samples, 0.69%)</title><rect x="598.0" y="1059.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="601.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (2 samples, 0.69%)</title><rect x="598.0" y="1043.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="601.0" y="1054.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.69%)</title><rect x="598.0" y="1027.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="601.0" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.69%)</title><rect x="598.0" y="1011.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="601.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.37%)</title><rect x="606.1" y="1123.0" width="16.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.37%)</title><rect x="606.1" y="1107.0" width="16.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="609.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.34%)</title><rect x="606.1" y="1091.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="609.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.03%)</title><rect x="610.1" y="1091.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="613.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/651949993.accept (3 samples, 1.03%)</title><rect x="610.1" y="1075.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="613.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (3 samples, 1.03%)</title><rect x="610.1" y="1059.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="613.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 1.03%)</title><rect x="610.1" y="1043.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="613.1" y="1054.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 1.03%)</title><rect x="610.1" y="1027.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="613.1" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 1.03%)</title><rect x="610.1" y="1011.0" width="12.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="613.1" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.69%)</title><rect x="622.3" y="1123.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="625.3" y="1134.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.69%)</title><rect x="622.3" y="1107.0" width="8.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="625.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.34%)</title><rect x="630.4" y="1139.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="633.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 1.37%)</title><rect x="634.5" y="1187.0" width="16.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="637.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.37%)</title><rect x="634.5" y="1171.0" width="16.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="637.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.37%)</title><rect x="634.5" y="1155.0" width="16.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="637.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.37%)</title><rect x="634.5" y="1139.0" width="16.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="637.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (1 samples, 0.34%)</title><rect x="646.6" y="1123.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="649.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 2.75%)</title><rect x="650.7" y="1187.0" width="32.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="653.7" y="1198.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (8 samples, 2.75%)</title><rect x="650.7" y="1171.0" width="32.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="653.7" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4 samples, 1.37%)</title><rect x="650.7" y="1155.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="653.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 1.37%)</title><rect x="650.7" y="1139.0" width="16.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="653.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.37%)</title><rect x="650.7" y="1123.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="653.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.37%)</title><rect x="650.7" y="1107.0" width="16.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="653.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.37%)</title><rect x="650.7" y="1091.0" width="16.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="653.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.37%)</title><rect x="666.9" y="1155.0" width="16.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="669.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.37%)</title><rect x="666.9" y="1139.0" width="16.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="669.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.37%)</title><rect x="666.9" y="1123.0" width="16.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="669.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.37%)</title><rect x="666.9" y="1107.0" width="16.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="669.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.34%)</title><rect x="683.1" y="1235.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="686.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.34%)</title><rect x="683.1" y="1219.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="686.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.34%)</title><rect x="683.1" y="1203.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="686.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.&lt;init&gt; (1 samples, 0.34%)</title><rect x="683.1" y="1187.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="686.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.update (1 samples, 0.34%)</title><rect x="683.1" y="1171.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="686.1" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="683.1" y="1155.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="686.1" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="683.1" y="1139.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="686.1" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="683.1" y="1123.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="686.1" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="683.1" y="1107.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="686.1" y="1118.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.34%)</title><rect x="683.1" y="1091.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="686.1" y="1102.0"></text>
</g>
<g>
<title>start_thread (124 samples, 42.61%)</title><rect x="687.2" y="1235.0" width="502.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="690.2" y="1246.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (124 samples, 42.61%)</title><rect x="687.2" y="1219.0" width="502.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="690.2" y="1230.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 2.41%)</title><rect x="687.2" y="1203.0" width="28.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="690.2" y="1214.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 2.41%)</title><rect x="687.2" y="1187.0" width="28.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="690.2" y="1198.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.06%)</title><rect x="687.2" y="1171.0" width="24.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="690.2" y="1182.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 2.06%)</title><rect x="687.2" y="1155.0" width="24.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="690.2" y="1166.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.34%)</title><rect x="707.5" y="1139.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="710.5" y="1150.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.34%)</title><rect x="711.5" y="1171.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="714.5" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.34%)</title><rect x="711.5" y="1155.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="714.5" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.34%)</title><rect x="711.5" y="1139.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="714.5" y="1150.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.34%)</title><rect x="711.5" y="1123.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="714.5" y="1134.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.34%)</title><rect x="711.5" y="1107.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="714.5" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.34%)</title><rect x="711.5" y="1091.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="714.5" y="1102.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.34%)</title><rect x="711.5" y="1075.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="714.5" y="1086.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.34%)</title><rect x="711.5" y="1059.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="714.5" y="1070.0"></text>
</g>
<g>
<title>G1ParPushHeapRSClosure::do_oop(unsigned int*) (1 samples, 0.34%)</title><rect x="711.5" y="1043.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="714.5" y="1054.0"></text>
</g>
<g>
<title>JavaThread::run() (117 samples, 40.21%)</title><rect x="715.6" y="1203.0" width="474.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="718.6" y="1214.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (117 samples, 40.21%)</title><rect x="715.6" y="1187.0" width="474.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="718.6" y="1198.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (117 samples, 40.21%)</title><rect x="715.6" y="1171.0" width="474.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="718.6" y="1182.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (117 samples, 40.21%)</title><rect x="715.6" y="1155.0" width="474.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="718.6" y="1166.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (115 samples, 39.52%)</title><rect x="715.6" y="1139.0" width="466.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="718.6" y="1150.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (115 samples, 39.52%)</title><rect x="715.6" y="1123.0" width="466.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="718.6" y="1134.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (81 samples, 27.84%)</title><rect x="715.6" y="1107.0" width="328.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="718.6" y="1118.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.34%)</title><rect x="715.6" y="1091.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="718.6" y="1102.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.34%)</title><rect x="715.6" y="1075.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="718.6" y="1086.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.03%)</title><rect x="719.6" y="1091.0" width="12.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="722.6" y="1102.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.34%)</title><rect x="719.6" y="1075.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="722.6" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.34%)</title><rect x="719.6" y="1059.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="722.6" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.34%)</title><rect x="719.6" y="1043.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="722.6" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.69%)</title><rect x="723.7" y="1075.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="726.7" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.69%)</title><rect x="723.7" y="1059.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="726.7" y="1070.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 2.06%)</title><rect x="731.8" y="1091.0" width="24.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="734.8" y="1102.0">M..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.34%)</title><rect x="731.8" y="1075.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="734.8" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.72%)</title><rect x="735.8" y="1075.0" width="20.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="738.8" y="1086.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.69%)</title><rect x="735.8" y="1059.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="738.8" y="1070.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.34%)</title><rect x="744.0" y="1059.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="747.0" y="1070.0"></text>
</g>
<g>
<title>Node::clone() const (2 samples, 0.69%)</title><rect x="748.0" y="1059.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="751.0" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 1.72%)</title><rect x="756.1" y="1091.0" width="20.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="759.1" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.34%)</title><rect x="756.1" y="1075.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="759.1" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.37%)</title><rect x="760.2" y="1075.0" width="16.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="763.2" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 1.03%)</title><rect x="760.2" y="1059.0" width="12.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="763.2" y="1070.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.34%)</title><rect x="764.2" y="1043.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="767.2" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.34%)</title><rect x="768.3" y="1043.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="771.3" y="1054.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.34%)</title><rect x="768.3" y="1027.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="771.3" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.34%)</title><rect x="768.3" y="1011.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="771.3" y="1022.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.34%)</title><rect x="768.3" y="995.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="771.3" y="1006.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.34%)</title><rect x="768.3" y="979.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="771.3" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.34%)</title><rect x="772.3" y="1059.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="775.3" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (66 samples, 22.68%)</title><rect x="776.4" y="1091.0" width="267.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="779.4" y="1102.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.69%)</title><rect x="776.4" y="1075.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="779.4" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 1.37%)</title><rect x="784.5" y="1075.0" width="16.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="787.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 1.03%)</title><rect x="788.6" y="1059.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="791.6" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.34%)</title><rect x="792.6" y="1043.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="795.6" y="1054.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.34%)</title><rect x="796.7" y="1043.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="799.7" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 1.37%)</title><rect x="800.7" y="1075.0" width="16.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="803.7" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.34%)</title><rect x="804.8" y="1059.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="807.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.69%)</title><rect x="808.8" y="1059.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="811.8" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="812.9" y="1043.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="815.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 2.75%)</title><rect x="816.9" y="1075.0" width="32.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="819.9" y="1086.0">Ph..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.34%)</title><rect x="841.3" y="1059.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="844.3" y="1070.0"></text>
</g>
<g>
<title>decodeKlass_not_nullNode::rule() const (1 samples, 0.34%)</title><rect x="845.3" y="1059.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="848.3" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 3.44%)</title><rect x="849.4" y="1075.0" width="40.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="852.4" y="1086.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.69%)</title><rect x="869.7" y="1059.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="872.7" y="1070.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.34%)</title><rect x="877.8" y="1059.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="880.8" y="1070.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.34%)</title><rect x="881.8" y="1059.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="884.8" y="1070.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.34%)</title><rect x="881.8" y="1043.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="884.8" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.34%)</title><rect x="885.9" y="1059.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="888.9" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.03%)</title><rect x="889.9" y="1075.0" width="12.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="892.9" y="1086.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.34%)</title><rect x="894.0" y="1059.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="897.0" y="1070.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.34%)</title><rect x="898.0" y="1059.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="901.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.34%)</title><rect x="902.1" y="1075.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="905.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.69%)</title><rect x="906.2" y="1075.0" width="8.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="909.2" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.34%)</title><rect x="906.2" y="1059.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="909.2" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.34%)</title><rect x="910.2" y="1059.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="913.2" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.34%)</title><rect x="914.3" y="1075.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="917.3" y="1086.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (21 samples, 7.22%)</title><rect x="918.3" y="1075.0" width="85.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="921.3" y="1086.0">PhaseCoale..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (21 samples, 7.22%)</title><rect x="918.3" y="1059.0" width="85.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="921.3" y="1070.0">PhaseConse..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (21 samples, 7.22%)</title><rect x="918.3" y="1043.0" width="85.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="921.3" y="1054.0">PhaseConse..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.34%)</title><rect x="918.3" y="1027.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="921.3" y="1038.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (5 samples, 1.72%)</title><rect x="922.4" y="1027.0" width="20.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="925.4" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="938.6" y="1011.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="941.6" y="1022.0"></text>
</g>
<g>
<title>LiveRangeMap::find(Node const*) (1 samples, 0.34%)</title><rect x="942.6" y="1027.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="945.6" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (14 samples, 4.81%)</title><rect x="946.7" y="1027.0" width="56.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="949.7" y="1038.0">PhaseC..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.69%)</title><rect x="995.4" y="1011.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="998.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.69%)</title><rect x="1003.5" y="1075.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1006.5" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="1007.5" y="1059.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1010.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.69%)</title><rect x="1011.6" y="1075.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1014.6" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="1015.6" y="1059.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1018.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.34%)</title><rect x="1019.7" y="1075.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1022.7" y="1086.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.34%)</title><rect x="1019.7" y="1059.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1022.7" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.72%)</title><rect x="1023.7" y="1075.0" width="20.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1026.7" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.03%)</title><rect x="1031.9" y="1059.0" width="12.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.9" y="1070.0"></text>
</g>
<g>
<title>Compile::Optimize() (27 samples, 9.28%)</title><rect x="1044.0" y="1107.0" width="109.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1047.0" y="1118.0">Compile::Opti..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.69%)</title><rect x="1044.0" y="1091.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.69%)</title><rect x="1044.0" y="1075.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.69%)</title><rect x="1044.0" y="1059.0" width="8.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.69%)</title><rect x="1044.0" y="1043.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.69%)</title><rect x="1044.0" y="1027.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.69%)</title><rect x="1044.0" y="1011.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.34%)</title><rect x="1044.0" y="995.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1047.0" y="1006.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.34%)</title><rect x="1044.0" y="979.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.0" y="990.0"></text>
</g>
<g>
<title>TypeOopPtr::speculative() const (1 samples, 0.34%)</title><rect x="1044.0" y="963.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1048.1" y="995.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1051.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1048.1" y="979.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1051.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1048.1" y="963.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1051.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1048.1" y="947.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.1" y="958.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.34%)</title><rect x="1048.1" y="931.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1051.1" y="942.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.34%)</title><rect x="1052.1" y="1091.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.1" y="1102.0"></text>
</g>
<g>
<title>PhaseCCP::saturate(Type const*, Type const*, Type const*) const (1 samples, 0.34%)</title><rect x="1052.1" y="1075.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1055.1" y="1086.0"></text>
</g>
<g>
<title>TypeInt::widen(Type const*, Type const*) const (1 samples, 0.34%)</title><rect x="1052.1" y="1059.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1055.1" y="1070.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.34%)</title><rect x="1052.1" y="1043.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1055.1" y="1054.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.34%)</title><rect x="1052.1" y="1027.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1055.1" y="1038.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.34%)</title><rect x="1052.1" y="1011.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1055.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (20 samples, 6.87%)</title><rect x="1056.2" y="1091.0" width="81.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1059.2" y="1102.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.69%)</title><rect x="1056.2" y="1075.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1059.2" y="1086.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.34%)</title><rect x="1060.2" y="1059.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1063.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.34%)</title><rect x="1064.3" y="1075.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1067.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (11 samples, 3.78%)</title><rect x="1068.4" y="1075.0" width="44.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1071.4" y="1086.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (10 samples, 3.44%)</title><rect x="1072.4" y="1059.0" width="40.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1075.4" y="1070.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (9 samples, 3.09%)</title><rect x="1072.4" y="1043.0" width="36.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1075.4" y="1054.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.69%)</title><rect x="1092.7" y="1027.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.69%)</title><rect x="1092.7" y="1011.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.34%)</title><rect x="1100.8" y="1027.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1103.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.34%)</title><rect x="1104.8" y="1027.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.34%)</title><rect x="1108.9" y="1043.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.34%)</title><rect x="1113.0" y="1075.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 1.03%)</title><rect x="1117.0" y="1075.0" width="12.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.34%)</title><rect x="1125.1" y="1059.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.1" y="1070.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.34%)</title><rect x="1125.1" y="1043.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.34%)</title><rect x="1129.2" y="1075.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.34%)</title><rect x="1129.2" y="1059.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.2" y="1070.0"></text>
</g>
<g>
<title>CmpINode::Opcode() const (1 samples, 0.34%)</title><rect x="1129.2" y="1043.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.2" y="1054.0"></text>
</g>
<g>
<title>RegionNode::pinned() const (1 samples, 0.34%)</title><rect x="1133.2" y="1075.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.69%)</title><rect x="1137.3" y="1091.0" width="8.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.69%)</title><rect x="1137.3" y="1075.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.3" y="1086.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1137.3" y="1059.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.3" y="1070.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.34%)</title><rect x="1137.3" y="1043.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.3" y="1054.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.34%)</title><rect x="1137.3" y="1027.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.3" y="1038.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.34%)</title><rect x="1137.3" y="1011.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.3" y="1022.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1141.3" y="1059.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.34%)</title><rect x="1141.3" y="1043.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.3" y="1054.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.34%)</title><rect x="1141.3" y="1027.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.3" y="1038.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.34%)</title><rect x="1141.3" y="1011.0" width="4.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1144.3" y="1022.0"></text>
</g>
<g>
<title>TypeLong::filter_helper(Type const*, bool) const (1 samples, 0.34%)</title><rect x="1145.4" y="1091.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.4" y="1102.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.34%)</title><rect x="1149.5" y="1091.0" width="4.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1152.5" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.41%)</title><rect x="1153.5" y="1107.0" width="28.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.5" y="1118.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.41%)</title><rect x="1153.5" y="1091.0" width="28.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.5" y="1102.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.41%)</title><rect x="1153.5" y="1075.0" width="28.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.5" y="1086.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.41%)</title><rect x="1153.5" y="1059.0" width="28.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.5" y="1070.0">Pa..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.34%)</title><rect x="1153.5" y="1043.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.5" y="1054.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.34%)</title><rect x="1153.5" y="1027.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.5" y="1038.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.34%)</title><rect x="1153.5" y="1011.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.5" y="1022.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.34%)</title><rect x="1153.5" y="995.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.5" y="1006.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.34%)</title><rect x="1153.5" y="979.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.06%)</title><rect x="1157.6" y="1043.0" width="24.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.6" y="1054.0">P..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.72%)</title><rect x="1157.6" y="1027.0" width="20.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.6" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.72%)</title><rect x="1157.6" y="1011.0" width="20.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.6" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.72%)</title><rect x="1157.6" y="995.0" width="20.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.72%)</title><rect x="1157.6" y="979.0" width="20.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.72%)</title><rect x="1157.6" y="963.0" width="20.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.72%)</title><rect x="1157.6" y="947.0" width="20.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.72%)</title><rect x="1157.6" y="931.0" width="20.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.6" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1157.6" y="915.0" width="8.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.6" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1157.6" y="899.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1157.6" y="883.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1157.6" y="867.0" width="8.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1157.6" y="851.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1157.6" y="835.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1157.6" y="819.0" width="8.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1157.6" y="803.0" width="8.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.6" y="814.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.34%)</title><rect x="1157.6" y="787.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.6" y="798.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.34%)</title><rect x="1157.6" y="771.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.6" y="782.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.34%)</title><rect x="1157.6" y="755.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.6" y="766.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.34%)</title><rect x="1157.6" y="739.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.6" y="750.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.34%)</title><rect x="1157.6" y="723.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.6" y="734.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.34%)</title><rect x="1157.6" y="707.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.6" y="718.0"></text>
</g>
<g>
<title>_init (1 samples, 0.34%)</title><rect x="1157.6" y="691.0" width="4.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1160.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1161.6" y="787.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1161.6" y="771.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1161.6" y="755.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1161.6" y="739.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.6" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1161.6" y="723.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1161.6" y="707.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1161.6" y="691.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1161.6" y="675.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1161.6" y="659.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1161.6" y="643.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1161.6" y="627.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1161.6" y="611.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1161.6" y="595.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1161.6" y="579.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1161.6" y="563.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1161.6" y="547.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1161.6" y="531.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1161.6" y="515.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1161.6" y="499.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1161.6" y="483.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1161.6" y="467.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1161.6" y="451.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1161.6" y="435.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1161.6" y="419.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1161.6" y="403.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1161.6" y="387.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1161.6" y="371.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1161.6" y="355.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.6" y="366.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.34%)</title><rect x="1161.6" y="339.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.6" y="350.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.34%)</title><rect x="1161.6" y="323.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.6" y="334.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.34%)</title><rect x="1161.6" y="307.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.6" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.03%)</title><rect x="1165.7" y="915.0" width="12.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.7" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.03%)</title><rect x="1165.7" y="899.0" width="12.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.7" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.03%)</title><rect x="1165.7" y="883.0" width="12.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.03%)</title><rect x="1165.7" y="867.0" width="12.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.03%)</title><rect x="1165.7" y="851.0" width="12.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.03%)</title><rect x="1165.7" y="835.0" width="12.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.03%)</title><rect x="1165.7" y="819.0" width="12.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.7" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.03%)</title><rect x="1165.7" y="803.0" width="12.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.7" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.03%)</title><rect x="1165.7" y="787.0" width="12.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.03%)</title><rect x="1165.7" y="771.0" width="12.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.03%)</title><rect x="1165.7" y="755.0" width="12.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.03%)</title><rect x="1165.7" y="739.0" width="12.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.03%)</title><rect x="1165.7" y="723.0" width="12.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.7" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.03%)</title><rect x="1165.7" y="707.0" width="12.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.7" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.03%)</title><rect x="1165.7" y="691.0" width="12.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.03%)</title><rect x="1165.7" y="675.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.03%)</title><rect x="1165.7" y="659.0" width="12.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.03%)</title><rect x="1165.7" y="643.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1165.7" y="627.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.7" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1165.7" y="611.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.7" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.34%)</title><rect x="1165.7" y="595.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.7" y="606.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.34%)</title><rect x="1165.7" y="579.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.34%)</title><rect x="1165.7" y="563.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.7" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.34%)</title><rect x="1165.7" y="547.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.7" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1165.7" y="531.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.7" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1165.7" y="515.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::compute_exceptions() (1 samples, 0.34%)</title><rect x="1165.7" y="499.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.7" y="510.0"></text>
</g>
<g>
<title>ciExceptionHandler::catch_klass() (1 samples, 0.34%)</title><rect x="1165.7" y="483.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.7" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1165.7" y="467.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.7" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1165.7" y="451.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.7" y="462.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.34%)</title><rect x="1165.7" y="435.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.7" y="446.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.34%)</title><rect x="1165.7" y="419.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.7" y="430.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.34%)</title><rect x="1165.7" y="403.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.7" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1169.7" y="611.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1169.7" y="595.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1169.7" y="579.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1169.7" y="563.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1169.7" y="547.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1169.7" y="531.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1169.7" y="515.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1169.7" y="499.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1169.7" y="483.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1169.7" y="467.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1169.7" y="451.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1169.7" y="435.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.7" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1169.7" y="419.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1169.7" y="403.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1169.7" y="387.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1169.7" y="371.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1169.7" y="355.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1169.7" y="339.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1169.7" y="323.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.7" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1169.7" y="307.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.7" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1169.7" y="291.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1169.7" y="275.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1169.7" y="259.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1169.7" y="243.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.34%)</title><rect x="1169.7" y="227.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.34%)</title><rect x="1169.7" y="211.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.7" y="222.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.34%)</title><rect x="1169.7" y="195.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.7" y="206.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.34%)</title><rect x="1169.7" y="179.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.7" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.34%)</title><rect x="1169.7" y="163.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.7" y="174.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1169.7" y="147.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.7" y="158.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1169.7" y="131.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.7" y="142.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.34%)</title><rect x="1169.7" y="115.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.7" y="126.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.34%)</title><rect x="1169.7" y="99.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.7" y="110.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.34%)</title><rect x="1169.7" y="83.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.7" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.34%)</title><rect x="1169.7" y="67.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.7" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.34%)</title><rect x="1169.7" y="51.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.7" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.34%)</title><rect x="1169.7" y="35.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.34%)</title><rect x="1173.8" y="627.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.8" y="638.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.34%)</title><rect x="1173.8" y="611.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.34%)</title><rect x="1177.8" y="1027.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="1038.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.34%)</title><rect x="1177.8" y="1011.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.8" y="1022.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.34%)</title><rect x="1177.8" y="995.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.8" y="1006.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.34%)</title><rect x="1177.8" y="979.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.8" y="990.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.34%)</title><rect x="1177.8" y="963.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.8" y="974.0"></text>
</g>
<g>
<title>Node::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1177.8" y="947.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.8" y="958.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.69%)</title><rect x="1181.9" y="1139.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.9" y="1150.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.69%)</title><rect x="1181.9" y="1123.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.9" y="1134.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.69%)</title><rect x="1181.9" y="1107.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.9" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.69%)</title><rect x="1181.9" y="1091.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.9" y="1102.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.34%)</title><rect x="1181.9" y="1075.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.9" y="1086.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.34%)</title><rect x="1181.9" y="1059.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.9" y="1070.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.34%)</title><rect x="1181.9" y="1043.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.9" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.34%)</title><rect x="1181.9" y="1027.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.9" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.34%)</title><rect x="1181.9" y="1011.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.9" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.34%)</title><rect x="1181.9" y="995.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.9" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.34%)</title><rect x="1181.9" y="979.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.9" y="990.0"></text>
</g>
<g>
<title>ObjectType::base() const (1 samples, 0.34%)</title><rect x="1181.9" y="963.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.9" y="974.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.34%)</title><rect x="1185.9" y="1075.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.9" y="1086.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.34%)</title><rect x="1185.9" y="1059.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.9" y="1070.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.34%)</title><rect x="1185.9" y="1043.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.9" y="1054.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.34%)</title><rect x="1185.9" y="1027.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.9" y="1038.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.34%)</title><rect x="1185.9" y="1011.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="1022.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.34%)</title><rect x="1185.9" y="995.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.9" y="1006.0"></text>
</g>
<g>
<title>LinearScanWalker::set_use_pos(Interval*, int, bool) (1 samples, 0.34%)</title><rect x="1185.9" y="979.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="990.0"></text>
</g>
</g>
</svg>
