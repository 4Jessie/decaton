<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1189"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1189"> </text>
<g id="frames">
<g>
<title>all (1,114 samples, 100.00%)</title><rect x="10.0" y="1155.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (258 samples, 23.16%)</title><rect x="10.0" y="1139.0" width="273.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1150.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.09%)</title><rect x="10.0" y="1123.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (256 samples, 22.98%)</title><rect x="11.1" y="1123.0" width="271.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="1134.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.36%)</title><rect x="12.1" y="1107.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.1" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.36%)</title><rect x="12.1" y="1091.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/2050807863.accept (4 samples, 0.36%)</title><rect x="12.1" y="1075.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.36%)</title><rect x="12.1" y="1059.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.27%)</title><rect x="13.2" y="1043.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.2" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.18%)</title><rect x="14.2" y="1027.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.2" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.09%)</title><rect x="15.3" y="1011.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (5 samples, 0.45%)</title><rect x="16.4" y="1107.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.09%)</title><rect x="16.4" y="1091.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.36%)</title><rect x="17.4" y="1091.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.4" y="1102.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.18%)</title><rect x="17.4" y="1075.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.18%)</title><rect x="17.4" y="1059.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (2 samples, 0.18%)</title><rect x="17.4" y="1043.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="19.5" y="1075.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.5" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="19.5" y="1059.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="19.5" y="1043.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="19.5" y="1027.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="19.5" y="1011.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="19.5" y="995.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="19.5" y="979.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="19.5" y="963.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$265/461655725.test (1 samples, 0.09%)</title><rect x="19.5" y="947.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="20.6" y="1011.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.6" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="20.6" y="995.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="20.6" y="979.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="20.6" y="963.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.6" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (195 samples, 17.50%)</title><rect x="21.7" y="1107.0" width="206.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.7" y="1118.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1219383282.accept (184 samples, 16.52%)</title><rect x="21.7" y="1091.0" width="194.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.7" y="1102.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$66 (181 samples, 16.25%)</title><rect x="24.8" y="1075.0" width="191.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.8" y="1086.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (146 samples, 13.11%)</title><rect x="26.9" y="1059.0" width="154.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.9" y="1070.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (146 samples, 13.11%)</title><rect x="26.9" y="1043.0" width="154.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.9" y="1054.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (146 samples, 13.11%)</title><rect x="26.9" y="1027.0" width="154.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.9" y="1038.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (146 samples, 13.11%)</title><rect x="26.9" y="1011.0" width="154.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.9" y="1022.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (146 samples, 13.11%)</title><rect x="26.9" y="995.0" width="154.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.9" y="1006.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (131 samples, 11.76%)</title><rect x="42.8" y="979.0" width="138.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.8" y="990.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (101 samples, 9.07%)</title><rect x="43.9" y="963.0" width="107.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.9" y="974.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (101 samples, 9.07%)</title><rect x="43.9" y="947.0" width="107.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.9" y="958.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (101 samples, 9.07%)</title><rect x="43.9" y="931.0" width="107.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.9" y="942.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (101 samples, 9.07%)</title><rect x="43.9" y="915.0" width="107.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.9" y="926.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (101 samples, 9.07%)</title><rect x="43.9" y="899.0" width="107.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.9" y="910.0">java/util/con..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (57 samples, 5.12%)</title><rect x="90.5" y="883.0" width="60.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.5" y="894.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Unpark (46 samples, 4.13%)</title><rect x="92.6" y="867.0" width="48.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="95.6" y="878.0">Unsa..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="93.7" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="96.7" y="862.0"></text>
</g>
<g>
<title>__pthread_cond_signal (29 samples, 2.60%)</title><rect x="94.7" y="851.0" width="30.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="97.7" y="862.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.18%)</title><rect x="125.5" y="851.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="128.5" y="862.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.17%)</title><rect x="127.6" y="851.0" width="13.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="130.6" y="862.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.36%)</title><rect x="141.3" y="867.0" width="4.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="144.3" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.36%)</title><rect x="145.6" y="867.0" width="4.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="148.6" y="878.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="149.8" y="867.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="152.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (29 samples, 2.60%)</title><rect x="150.9" y="963.0" width="30.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="153.9" y="974.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (29 samples, 2.60%)</title><rect x="150.9" y="947.0" width="30.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.9" y="958.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (29 samples, 2.60%)</title><rect x="150.9" y="931.0" width="30.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="153.9" y="942.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (29 samples, 2.60%)</title><rect x="150.9" y="915.0" width="30.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="153.9" y="926.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (5 samples, 0.45%)</title><rect x="181.6" y="1059.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="184.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.45%)</title><rect x="181.6" y="1043.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.18%)</title><rect x="186.9" y="1059.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="189.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.18%)</title><rect x="186.9" y="1043.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="189.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.18%)</title><rect x="186.9" y="1027.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="189.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (24 samples, 2.15%)</title><rect x="189.0" y="1059.0" width="25.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.0" y="1070.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (24 samples, 2.15%)</title><rect x="189.0" y="1043.0" width="25.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="192.0" y="1054.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.54%)</title><rect x="203.8" y="1027.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="206.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.36%)</title><rect x="203.8" y="1011.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="206.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 0.36%)</title><rect x="203.8" y="995.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.8" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.36%)</title><rect x="203.8" y="979.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.8" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.18%)</title><rect x="208.1" y="1011.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="211.1" y="1022.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="210.2" y="1027.0" width="1.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="213.2" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="211.3" y="1027.0" width="3.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="214.3" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="214.4" y="1059.0" width="2.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="217.4" y="1070.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.27%)</title><rect x="216.6" y="1091.0" width="3.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="219.6" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="219.7" y="1091.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.09%)</title><rect x="219.7" y="1075.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.7" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="219.7" y="1059.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="219.7" y="1043.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="222.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="219.7" y="1027.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.63%)</title><rect x="220.8" y="1091.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.63%)</title><rect x="220.8" y="1075.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.63%)</title><rect x="220.8" y="1059.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.63%)</title><rect x="220.8" y="1043.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 4.58%)</title><rect x="228.2" y="1107.0" width="54.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.2" y="1118.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 4.58%)</title><rect x="228.2" y="1091.0" width="54.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.2" y="1102.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (33 samples, 2.96%)</title><rect x="228.2" y="1075.0" width="35.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.2" y="1086.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.18%)</title><rect x="228.2" y="1059.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (2 samples, 0.18%)</title><rect x="228.2" y="1043.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.2" y="1054.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.09%)</title><rect x="228.2" y="1027.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="231.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="229.3" y="1027.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="232.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="230.3" y="1059.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="230.3" y="1043.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="230.3" y="1027.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="230.3" y="1011.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="230.3" y="995.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="233.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="230.3" y="979.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (30 samples, 2.69%)</title><rect x="231.4" y="1059.0" width="31.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.4" y="1070.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (30 samples, 2.69%)</title><rect x="231.4" y="1043.0" width="31.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="234.4" y="1054.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 2.33%)</title><rect x="231.4" y="1027.0" width="27.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.4" y="1038.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.33%)</title><rect x="231.4" y="1011.0" width="27.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.4" y="1022.0">o..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="232.4" y="995.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="235.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.26%)</title><rect x="233.5" y="995.0" width="14.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.09%)</title><rect x="240.9" y="979.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.09%)</title><rect x="240.9" y="963.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.09%)</title><rect x="240.9" y="947.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.09%)</title><rect x="240.9" y="931.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.9" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="240.9" y="915.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.45%)</title><rect x="242.0" y="979.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.45%)</title><rect x="242.0" y="963.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="245.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.45%)</title><rect x="242.0" y="947.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.45%)</title><rect x="242.0" y="931.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.45%)</title><rect x="242.0" y="915.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.45%)</title><rect x="242.0" y="899.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.45%)</title><rect x="242.0" y="883.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="245.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.09%)</title><rect x="247.3" y="979.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (1 samples, 0.09%)</title><rect x="247.3" y="963.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (1 samples, 0.09%)</title><rect x="247.3" y="947.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 0.90%)</title><rect x="248.3" y="995.0" width="10.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="251.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 0.72%)</title><rect x="250.4" y="979.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="253.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.45%)</title><rect x="250.4" y="963.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.4" y="974.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.45%)</title><rect x="250.4" y="947.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.4" y="958.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="254.7" y="931.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="257.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.27%)</title><rect x="255.7" y="963.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.7" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.27%)</title><rect x="255.7" y="947.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.27%)</title><rect x="258.9" y="1027.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.27%)</title><rect x="258.9" y="1011.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.18%)</title><rect x="258.9" y="995.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="261.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.18%)</title><rect x="258.9" y="979.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.9" y="990.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="260.0" y="963.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="263.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="261.0" y="995.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="261.0" y="979.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="261.0" y="963.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="264.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="261.0" y="947.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="261.0" y="931.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="264.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="262.1" y="1027.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="262.1" y="1011.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="262.1" y="995.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="262.1" y="979.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="262.1" y="963.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.81%)</title><rect x="263.2" y="1075.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.72%)</title><rect x="263.2" y="1059.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.45%)</title><rect x="263.2" y="1043.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.18%)</title><rect x="263.2" y="1027.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="266.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/311497529.accept (2 samples, 0.18%)</title><rect x="263.2" y="1011.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.18%)</title><rect x="263.2" y="995.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="263.2" y="979.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="266.2" y="990.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.09%)</title><rect x="263.2" y="963.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="266.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$227/1834022002.apply (1 samples, 0.09%)</title><rect x="263.2" y="947.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.09%)</title><rect x="263.2" y="931.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="264.2" y="979.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="264.2" y="963.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="264.2" y="947.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="265.3" y="1027.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="265.3" y="1011.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.3" y="1022.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="265.3" y="995.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="265.3" y="979.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="268.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="265.3" y="963.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.3" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="265.3" y="947.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.09%)</title><rect x="265.3" y="931.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.18%)</title><rect x="266.3" y="1027.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.18%)</title><rect x="266.3" y="1011.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.3" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="266.3" y="995.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.3" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="266.3" y="979.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.3" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="266.3" y="963.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.3" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="266.3" y="947.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.3" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="266.3" y="931.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.3" y="942.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="266.3" y="915.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.3" y="926.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.09%)</title><rect x="266.3" y="899.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.09%)</title><rect x="267.4" y="995.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.4" y="1006.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="267.4" y="979.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="267.4" y="963.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="270.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="267.4" y="947.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.27%)</title><rect x="268.5" y="1043.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (3 samples, 0.27%)</title><rect x="268.5" y="1027.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="271.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.27%)</title><rect x="268.5" y="1011.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (3 samples, 0.27%)</title><rect x="268.5" y="995.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.18%)</title><rect x="269.5" y="979.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="272.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="269.5" y="963.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="272.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="269.5" y="947.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="272.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.18%)</title><rect x="269.5" y="931.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.5" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (2 samples, 0.18%)</title><rect x="269.5" y="915.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.5" y="926.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (2 samples, 0.18%)</title><rect x="269.5" y="899.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="272.5" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.18%)</title><rect x="269.5" y="883.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.5" y="894.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (2 samples, 0.18%)</title><rect x="269.5" y="867.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$239/545380273.test (1 samples, 0.09%)</title><rect x="270.6" y="851.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$hasAllFetchPositions$4 (1 samples, 0.09%)</title><rect x="270.6" y="835.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="271.6" y="1059.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsAutoAssigned (1 samples, 0.09%)</title><rect x="271.6" y="1043.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.36%)</title><rect x="272.7" y="1075.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.27%)</title><rect x="272.7" y="1059.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.09%)</title><rect x="272.7" y="1043.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.09%)</title><rect x="272.7" y="1027.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.09%)</title><rect x="272.7" y="1011.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.09%)</title><rect x="272.7" y="995.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getString (1 samples, 0.09%)</title><rect x="272.7" y="979.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.09%)</title><rect x="272.7" y="963.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.18%)</title><rect x="273.8" y="1043.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.18%)</title><rect x="273.8" y="1027.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.09%)</title><rect x="273.8" y="1011.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="273.8" y="995.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="276.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="273.8" y="979.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="273.8" y="963.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="273.8" y="947.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.09%)</title><rect x="273.8" y="931.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="274.8" y="1011.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="274.8" y="995.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="274.8" y="979.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="274.8" y="963.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="274.8" y="947.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.8" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="274.8" y="931.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.8" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="274.8" y="915.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="277.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="275.9" y="1059.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="275.9" y="1043.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="278.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="275.9" y="1027.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.09%)</title><rect x="275.9" y="1011.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="275.9" y="995.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="278.9" y="1006.0"></text>
</g>
<g>
<title>java/util/EnumMap.get (1 samples, 0.09%)</title><rect x="275.9" y="979.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.27%)</title><rect x="276.9" y="1075.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.27%)</title><rect x="276.9" y="1059.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.18%)</title><rect x="278.0" y="1043.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.09%)</title><rect x="278.0" y="1027.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="278.0" y="1011.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="279.0" y="1027.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="279.0" y="1011.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="282.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="279.0" y="995.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="279.0" y="979.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="279.0" y="963.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="282.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="279.0" y="947.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="279.0" y="931.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="282.0" y="942.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="279.0" y="915.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="282.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.18%)</title><rect x="280.1" y="1075.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="280.1" y="1059.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="283.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="280.1" y="1043.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="280.1" y="1027.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.18%)</title><rect x="280.1" y="1011.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="283.1" y="1022.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="281.2" y="995.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="284.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="282.2" y="1123.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="285.2" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="282.2" y="1107.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="285.2" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="282.2" y="1091.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="285.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (689 samples, 61.85%)</title><rect x="283.3" y="1139.0" width="729.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.3" y="1150.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (689 samples, 61.85%)</title><rect x="283.3" y="1123.0" width="729.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.3" y="1134.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (689 samples, 61.85%)</title><rect x="283.3" y="1107.0" width="729.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.3" y="1118.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/544802852.run (484 samples, 43.45%)</title><rect x="286.5" y="1091.0" width="512.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.5" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/544802..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (484 samples, 43.45%)</title><rect x="286.5" y="1075.0" width="512.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.5" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (481 samples, 43.18%)</title><rect x="289.6" y="1059.0" width="509.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.6" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (469 samples, 42.10%)</title><rect x="289.6" y="1043.0" width="496.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.6" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenP..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="299.2" y="1027.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="302.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (151 samples, 13.55%)</title><rect x="300.2" y="1027.0" width="160.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.2" y="1038.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (151 samples, 13.55%)</title><rect x="300.2" y="1011.0" width="160.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="303.2" y="1022.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (151 samples, 13.55%)</title><rect x="300.2" y="995.0" width="160.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="303.2" y="1006.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (16 samples, 1.44%)</title><rect x="308.7" y="979.0" width="17.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="311.7" y="990.0"></text>
</g>
<g>
<title>[vdso] (11 samples, 0.99%)</title><rect x="314.0" y="963.0" width="11.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="317.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (126 samples, 11.31%)</title><rect x="325.7" y="979.0" width="133.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.7" y="990.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (126 samples, 11.31%)</title><rect x="325.7" y="963.0" width="133.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="328.7" y="974.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (126 samples, 11.31%)</title><rect x="325.7" y="947.0" width="133.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="328.7" y="958.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (22 samples, 1.97%)</title><rect x="325.7" y="931.0" width="23.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.7" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (22 samples, 1.97%)</title><rect x="325.7" y="915.0" width="23.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.7" y="926.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (22 samples, 1.97%)</title><rect x="325.7" y="899.0" width="23.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="328.7" y="910.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (14 samples, 1.26%)</title><rect x="325.7" y="883.0" width="14.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="328.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (14 samples, 1.26%)</title><rect x="325.7" y="867.0" width="14.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.byteOffset (1 samples, 0.09%)</title><rect x="339.4" y="851.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="342.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (8 samples, 0.72%)</title><rect x="340.5" y="883.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="343.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (8 samples, 0.72%)</title><rect x="340.5" y="867.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="343.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.09%)</title><rect x="340.5" y="851.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="343.5" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="340.5" y="835.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="343.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (7 samples, 0.63%)</title><rect x="341.5" y="851.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="344.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (7 samples, 0.63%)</title><rect x="341.5" y="835.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="344.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (7 samples, 0.63%)</title><rect x="341.5" y="819.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="344.5" y="830.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="347.9" y="803.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="350.9" y="814.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.09%)</title><rect x="347.9" y="787.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="350.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (91 samples, 8.17%)</title><rect x="349.0" y="931.0" width="96.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="352.0" y="942.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.27%)</title><rect x="349.0" y="915.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="352.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 0.27%)</title><rect x="349.0" y="899.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="352.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.27%)</title><rect x="349.0" y="883.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="352.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.27%)</title><rect x="349.0" y="867.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="352.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (3 samples, 0.27%)</title><rect x="349.0" y="851.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="352.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (3 samples, 0.27%)</title><rect x="349.0" y="835.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="352.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (3 samples, 0.27%)</title><rect x="349.0" y="819.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="352.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="350.0" y="803.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="353.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.byteOffset (1 samples, 0.09%)</title><rect x="351.1" y="803.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.54%)</title><rect x="352.1" y="915.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="355.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.54%)</title><rect x="352.1" y="899.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="355.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.27%)</title><rect x="355.3" y="883.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="358.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 0.36%)</title><rect x="358.5" y="915.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.27%)</title><rect x="359.6" y="899.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="362.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.27%)</title><rect x="359.6" y="883.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="362.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.18%)</title><rect x="360.6" y="867.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="363.6" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="360.6" y="851.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="363.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="361.7" y="851.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="364.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.36%)</title><rect x="362.7" y="915.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.27%)</title><rect x="363.8" y="899.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="366.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (74 samples, 6.64%)</title><rect x="367.0" y="915.0" width="78.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="370.0" y="926.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.44%)</title><rect x="368.0" y="899.0" width="17.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="371.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.45%)</title><rect x="371.2" y="883.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="374.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.45%)</title><rect x="371.2" y="867.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="374.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.45%)</title><rect x="371.2" y="851.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="374.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.18%)</title><rect x="376.5" y="883.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="379.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.18%)</title><rect x="376.5" y="867.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="379.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (6 samples, 0.54%)</title><rect x="378.6" y="883.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="381.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (57 samples, 5.12%)</title><rect x="385.0" y="899.0" width="60.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="388.0" y="910.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (57 samples, 5.12%)</title><rect x="385.0" y="883.0" width="60.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="388.0" y="894.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (56 samples, 5.03%)</title><rect x="386.0" y="867.0" width="59.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="389.0" y="878.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.81%)</title><rect x="400.9" y="851.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="403.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.45%)</title><rect x="403.0" y="835.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="406.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.45%)</title><rect x="403.0" y="819.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="406.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.45%)</title><rect x="403.0" y="803.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.18%)</title><rect x="406.2" y="787.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="409.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="408.3" y="835.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="411.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="408.3" y="819.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="411.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="409.3" y="835.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="412.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (13 samples, 1.17%)</title><rect x="410.4" y="851.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (11 samples, 0.99%)</title><rect x="412.5" y="835.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="415.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (11 samples, 0.99%)</title><rect x="412.5" y="819.0" width="11.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="415.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (11 samples, 0.99%)</title><rect x="412.5" y="803.0" width="11.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="415.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (11 samples, 0.99%)</title><rect x="412.5" y="787.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="415.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="424.2" y="851.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="427.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.54%)</title><rect x="425.2" y="851.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="428.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.54%)</title><rect x="425.2" y="835.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="428.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.54%)</title><rect x="425.2" y="819.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="428.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.54%)</title><rect x="425.2" y="803.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.2" y="814.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.54%)</title><rect x="425.2" y="787.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="428.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.54%)</title><rect x="431.6" y="851.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="434.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.54%)</title><rect x="431.6" y="835.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="434.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.54%)</title><rect x="431.6" y="819.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="434.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.18%)</title><rect x="435.8" y="803.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="438.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (7 samples, 0.63%)</title><rect x="437.9" y="851.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="440.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="444.3" y="835.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="447.3" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="444.3" y="819.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="447.3" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="444.3" y="803.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="447.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (13 samples, 1.17%)</title><rect x="445.4" y="931.0" width="13.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="448.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (13 samples, 1.17%)</title><rect x="445.4" y="915.0" width="13.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="448.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (13 samples, 1.17%)</title><rect x="445.4" y="899.0" width="13.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="448.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (13 samples, 1.17%)</title><rect x="445.4" y="883.0" width="13.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="448.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (13 samples, 1.17%)</title><rect x="445.4" y="867.0" width="13.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="448.4" y="878.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.18%)</title><rect x="457.0" y="851.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="460.0" y="862.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="459.1" y="979.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="462.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (279 samples, 25.04%)</title><rect x="460.2" y="1027.0" width="295.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="463.2" y="1038.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (63 samples, 5.66%)</title><rect x="460.2" y="1011.0" width="66.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="463.2" y="1022.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="460.2" y="995.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="463.2" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (62 samples, 5.57%)</title><rect x="461.2" y="995.0" width="65.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="464.2" y="1006.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (59 samples, 5.30%)</title><rect x="464.4" y="979.0" width="62.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="467.4" y="990.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (24 samples, 2.15%)</title><rect x="466.5" y="963.0" width="25.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="469.5" y="974.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (24 samples, 2.15%)</title><rect x="466.5" y="947.0" width="25.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="469.5" y="958.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (12 samples, 1.08%)</title><rect x="479.2" y="931.0" width="12.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="482.2" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 1.08%)</title><rect x="479.2" y="915.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="482.2" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (12 samples, 1.08%)</title><rect x="479.2" y="899.0" width="12.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="482.2" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.90%)</title><rect x="492.0" y="963.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="495.0" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (10 samples, 0.90%)</title><rect x="492.0" y="947.0" width="10.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="495.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (10 samples, 0.90%)</title><rect x="492.0" y="931.0" width="10.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="495.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.18%)</title><rect x="500.4" y="915.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="503.4" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (23 samples, 2.06%)</title><rect x="502.5" y="963.0" width="24.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="505.5" y="974.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 0.72%)</title><rect x="518.4" y="947.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="521.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 0.72%)</title><rect x="518.4" y="931.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="521.4" y="942.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.18%)</title><rect x="523.7" y="915.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="526.7" y="926.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="525.9" y="915.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="528.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="526.9" y="1011.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="529.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="526.9" y="995.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="529.9" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.27%)</title><rect x="526.9" y="979.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="529.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (150 samples, 13.46%)</title><rect x="530.1" y="1011.0" width="158.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="533.1" y="1022.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (150 samples, 13.46%)</title><rect x="530.1" y="995.0" width="158.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="533.1" y="1006.0">com/linecorp/decaton..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="537.5" y="979.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="540.5" y="990.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="537.5" y="963.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="540.5" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.36%)</title><rect x="538.6" y="979.0" width="4.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="541.6" y="990.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.36%)</title><rect x="538.6" y="963.0" width="4.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="541.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (49 samples, 4.40%)</title><rect x="542.8" y="979.0" width="51.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="545.8" y="990.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (24 samples, 2.15%)</title><rect x="558.7" y="963.0" width="25.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="561.7" y="974.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (24 samples, 2.15%)</title><rect x="558.7" y="947.0" width="25.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="561.7" y="958.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.90%)</title><rect x="566.1" y="931.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="569.1" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.90%)</title><rect x="566.1" y="915.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="569.1" y="926.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.90%)</title><rect x="566.1" y="899.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="569.1" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="566.1" y="883.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="569.1" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.81%)</title><rect x="567.2" y="883.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="570.2" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="568.2" y="867.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="571.2" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.18%)</title><rect x="569.3" y="867.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="572.3" y="878.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="569.3" y="851.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="572.3" y="862.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="569.3" y="835.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="572.3" y="846.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="570.3" y="851.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="573.3" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.27%)</title><rect x="571.4" y="867.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="574.4" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="572.5" y="851.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="575.5" y="862.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="573.5" y="835.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="576.5" y="846.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (2 samples, 0.18%)</title><rect x="574.6" y="867.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="577.6" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.18%)</title><rect x="576.7" y="931.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="579.7" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="578.8" y="931.0" width="2.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="581.8" y="942.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="580.9" y="931.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="583.9" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="582.0" y="931.0" width="2.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="585.0" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (10 samples, 0.90%)</title><rect x="584.1" y="963.0" width="10.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="587.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="594.7" y="979.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="597.7" y="990.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.45%)</title><rect x="595.8" y="979.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="598.8" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.45%)</title><rect x="595.8" y="963.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="598.8" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.45%)</title><rect x="595.8" y="947.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="598.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.27%)</title><rect x="597.9" y="931.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="600.9" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="601.1" y="979.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="604.1" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="601.1" y="963.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="604.1" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="601.1" y="947.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="604.1" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.09%)</title><rect x="601.1" y="931.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="604.1" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="601.1" y="915.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="604.1" y="926.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (82 samples, 7.36%)</title><rect x="602.1" y="979.0" width="86.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="605.1" y="990.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (79 samples, 7.09%)</title><rect x="605.3" y="963.0" width="83.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="608.3" y="974.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (23 samples, 2.06%)</title><rect x="605.3" y="947.0" width="24.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="608.3" y="958.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (23 samples, 2.06%)</title><rect x="605.3" y="931.0" width="24.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="608.3" y="942.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (17 samples, 1.53%)</title><rect x="611.7" y="915.0" width="18.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="614.7" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (17 samples, 1.53%)</title><rect x="611.7" y="899.0" width="18.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="614.7" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (17 samples, 1.53%)</title><rect x="611.7" y="883.0" width="18.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="614.7" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="629.7" y="947.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="632.7" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="629.7" y="931.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="632.7" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="629.7" y="915.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="632.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.18%)</title><rect x="629.7" y="899.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="632.7" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (54 samples, 4.85%)</title><rect x="631.8" y="947.0" width="57.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="634.8" y="958.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (49 samples, 4.40%)</title><rect x="637.1" y="931.0" width="51.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="640.1" y="942.0">java/..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.18%)</title><rect x="642.4" y="915.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="645.4" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.63%)</title><rect x="644.5" y="915.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="647.5" y="926.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (7 samples, 0.63%)</title><rect x="644.5" y="899.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="647.5" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (35 samples, 3.14%)</title><rect x="651.9" y="915.0" width="37.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="654.9" y="926.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.18%)</title><rect x="674.1" y="899.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="677.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.99%)</title><rect x="676.3" y="899.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="679.3" y="910.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="687.9" y="899.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="690.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (41 samples, 3.68%)</title><rect x="689.0" y="1011.0" width="43.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="692.0" y="1022.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (41 samples, 3.68%)</title><rect x="689.0" y="995.0" width="43.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="692.0" y="1006.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1860270935.process (17 samples, 1.53%)</title><rect x="691.1" y="979.0" width="18.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="694.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (14 samples, 1.26%)</title><rect x="694.3" y="963.0" width="14.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="697.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (7 samples, 0.63%)</title><rect x="698.5" y="947.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="701.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.45%)</title><rect x="699.6" y="931.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="702.6" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.45%)</title><rect x="699.6" y="915.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="702.6" y="926.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.45%)</title><rect x="699.6" y="899.0" width="5.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="702.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="704.9" y="931.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="707.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.27%)</title><rect x="705.9" y="947.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="708.9" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="707.0" y="931.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="710.0" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="707.0" y="915.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.0" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="707.0" y="899.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="710.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.36%)</title><rect x="709.1" y="979.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="712.1" y="990.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.36%)</title><rect x="709.1" y="963.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="712.1" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.81%)</title><rect x="713.3" y="979.0" width="9.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="716.3" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.36%)</title><rect x="718.6" y="963.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="721.6" y="974.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.36%)</title><rect x="718.6" y="947.0" width="4.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="721.6" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.27%)</title><rect x="722.9" y="979.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="725.9" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.27%)</title><rect x="722.9" y="963.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="725.9" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.54%)</title><rect x="726.1" y="979.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="729.1" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.45%)</title><rect x="727.1" y="963.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="730.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.97%)</title><rect x="732.4" y="1011.0" width="23.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="735.4" y="1022.0">j..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.54%)</title><rect x="738.8" y="995.0" width="6.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="741.8" y="1006.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.54%)</title><rect x="738.8" y="979.0" width="6.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="741.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.90%)</title><rect x="745.1" y="995.0" width="10.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="748.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.90%)</title><rect x="745.1" y="979.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="748.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/241069320.accept (10 samples, 0.90%)</title><rect x="745.1" y="963.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="748.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$40 (10 samples, 0.90%)</title><rect x="745.1" y="947.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="748.1" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (10 samples, 0.90%)</title><rect x="745.1" y="931.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="748.1" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (10 samples, 0.90%)</title><rect x="745.1" y="915.0" width="10.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="748.1" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.45%)</title><rect x="750.4" y="899.0" width="5.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="753.4" y="910.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.45%)</title><rect x="750.4" y="883.0" width="5.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="753.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 1.89%)</title><rect x="755.7" y="1027.0" width="22.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.7" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 1.89%)</title><rect x="755.7" y="1011.0" width="22.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="758.7" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (21 samples, 1.89%)</title><rect x="755.7" y="995.0" width="22.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="758.7" y="1006.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/1191628563.accept (21 samples, 1.89%)</title><rect x="755.7" y="979.0" width="22.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="758.7" y="990.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$39 (21 samples, 1.89%)</title><rect x="755.7" y="963.0" width="22.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="758.7" y="974.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/80425629.complete (21 samples, 1.89%)</title><rect x="755.7" y="947.0" width="22.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="758.7" y="958.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (21 samples, 1.89%)</title><rect x="755.7" y="931.0" width="22.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="758.7" y="942.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (21 samples, 1.89%)</title><rect x="755.7" y="915.0" width="22.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="758.7" y="926.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (21 samples, 1.89%)</title><rect x="755.7" y="899.0" width="22.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="758.7" y="910.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (21 samples, 1.89%)</title><rect x="755.7" y="883.0" width="22.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="758.7" y="894.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (21 samples, 1.89%)</title><rect x="755.7" y="867.0" width="22.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="758.7" y="878.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (21 samples, 1.89%)</title><rect x="755.7" y="851.0" width="22.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="758.7" y="862.0">c..</text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.72%)</title><rect x="778.0" y="1027.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="781.0" y="1038.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.63%)</title><rect x="779.0" y="1011.0" width="7.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="782.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (12 samples, 1.08%)</title><rect x="786.4" y="1043.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="789.4" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.63%)</title><rect x="790.7" y="1027.0" width="7.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="793.7" y="1038.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.54%)</title><rect x="791.7" y="1011.0" width="6.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="794.7" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="798.1" y="1027.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="801.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (2 samples, 0.18%)</title><rect x="799.1" y="1091.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="802.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.18%)</title><rect x="801.3" y="1091.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="804.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.18%)</title><rect x="801.3" y="1075.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="804.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.18%)</title><rect x="801.3" y="1059.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="804.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.18%)</title><rect x="801.3" y="1043.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="804.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (198 samples, 17.77%)</title><rect x="803.4" y="1091.0" width="209.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="806.4" y="1102.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (197 samples, 17.68%)</title><rect x="803.4" y="1075.0" width="208.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="806.4" y="1086.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (181 samples, 16.25%)</title><rect x="805.5" y="1059.0" width="191.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="808.5" y="1070.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (13 samples, 1.17%)</title><rect x="820.3" y="1043.0" width="13.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="823.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.18%)</title><rect x="834.1" y="1043.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="837.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.18%)</title><rect x="834.1" y="1027.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="837.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.18%)</title><rect x="834.1" y="1011.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="837.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.18%)</title><rect x="834.1" y="995.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="837.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.18%)</title><rect x="834.1" y="979.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="837.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (151 samples, 13.55%)</title><rect x="836.2" y="1043.0" width="160.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="839.2" y="1054.0">java/util/concurrent..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (145 samples, 13.02%)</title><rect x="842.6" y="1027.0" width="153.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="845.6" y="1038.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.18%)</title><rect x="848.9" y="1011.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="851.9" y="1022.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="851.0" y="1011.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="854.0" y="1022.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.09%)</title><rect x="852.1" y="1011.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="855.1" y="1022.0"></text>
</g>
<g>
<title>Unsafe_Park (128 samples, 11.49%)</title><rect x="853.2" y="1011.0" width="135.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="856.2" y="1022.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.27%)</title><rect x="857.4" y="995.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="860.4" y="1006.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.09%)</title><rect x="860.6" y="995.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="863.6" y="1006.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (29 samples, 2.60%)</title><rect x="861.6" y="995.0" width="30.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="864.6" y="1006.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (12 samples, 1.08%)</title><rect x="873.3" y="979.0" width="12.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="876.3" y="990.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.36%)</title><rect x="876.5" y="963.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="879.5" y="974.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.18%)</title><rect x="878.6" y="947.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="881.6" y="958.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.18%)</title><rect x="880.7" y="963.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="883.7" y="974.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.27%)</title><rect x="882.8" y="963.0" width="3.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="885.8" y="974.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="886.0" y="979.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="889.0" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.36%)</title><rect x="887.1" y="979.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="890.1" y="990.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="891.3" y="979.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="894.3" y="990.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (3 samples, 0.27%)</title><rect x="892.4" y="995.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="895.4" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="895.5" y="995.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="898.5" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="896.6" y="995.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="899.6" y="1006.0"></text>
</g>
<g>
<title>_L_unlock_738 (2 samples, 0.18%)</title><rect x="898.7" y="995.0" width="2.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="901.7" y="1006.0"></text>
</g>
<g>
<title>__lll_lock_wait (3 samples, 0.27%)</title><rect x="900.8" y="995.0" width="3.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="903.8" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (25 samples, 2.24%)</title><rect x="904.0" y="995.0" width="26.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="907.0" y="1006.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (37 samples, 3.32%)</title><rect x="930.5" y="995.0" width="39.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="933.5" y="1006.0">__p..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="969.7" y="995.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="972.7" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.36%)</title><rect x="970.7" y="995.0" width="4.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="973.7" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (7 samples, 0.63%)</title><rect x="975.0" y="995.0" width="7.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="978.0" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="982.4" y="995.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="985.4" y="1006.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="983.4" y="995.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="986.4" y="1006.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.18%)</title><rect x="984.5" y="995.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.5" y="1006.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="986.6" y="995.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="989.6" y="1006.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="987.7" y="995.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="990.7" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (6 samples, 0.54%)</title><rect x="988.7" y="1011.0" width="6.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="991.7" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="995.1" y="1011.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="998.1" y="1022.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="996.2" y="1043.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="999.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 1.26%)</title><rect x="997.2" y="1059.0" width="14.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1000.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.26%)</title><rect x="997.2" y="1043.0" width="14.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1000.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.26%)</title><rect x="997.2" y="1027.0" width="14.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1000.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.26%)</title><rect x="997.2" y="1011.0" width="14.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1000.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.09%)</title><rect x="1012.0" y="1075.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1015.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.09%)</title><rect x="1012.0" y="1059.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1015.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="1012.0" y="1043.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1015.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="1012.0" y="1027.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1015.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="1012.0" y="1011.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1015.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1013.1" y="1139.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1016.1" y="1150.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.09%)</title><rect x="1013.1" y="1123.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1016.1" y="1134.0"></text>
</g>
<g>
<title>start_thread (166 samples, 14.90%)</title><rect x="1014.2" y="1139.0" width="175.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1017.2" y="1150.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (166 samples, 14.90%)</title><rect x="1014.2" y="1123.0" width="175.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1017.2" y="1134.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.80%)</title><rect x="1014.2" y="1107.0" width="21.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1017.2" y="1118.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.36%)</title><rect x="1014.2" y="1091.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1017.2" y="1102.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.36%)</title><rect x="1014.2" y="1075.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1017.2" y="1086.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1014.2" y="1059.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1017.2" y="1070.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.27%)</title><rect x="1015.2" y="1059.0" width="3.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1018.2" y="1070.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.44%)</title><rect x="1018.4" y="1091.0" width="17.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1021.4" y="1102.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.27%)</title><rect x="1018.4" y="1075.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1021.4" y="1086.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1019.5" y="1059.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1022.5" y="1070.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1020.5" y="1059.0" width="1.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1023.5" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.27%)</title><rect x="1021.6" y="1075.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.6" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.18%)</title><rect x="1021.6" y="1059.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1024.6" y="1070.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1021.6" y="1043.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.6" y="1054.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1021.6" y="1027.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1024.6" y="1038.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1021.6" y="1011.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.6" y="1022.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1022.6" y="1043.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1025.6" y="1054.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1022.6" y="1027.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1025.6" y="1038.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.09%)</title><rect x="1022.6" y="1011.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1025.6" y="1022.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.09%)</title><rect x="1022.6" y="995.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1025.6" y="1006.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="1022.6" y="979.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1025.6" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1023.7" y="1059.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1026.7" y="1070.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1023.7" y="1043.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1026.7" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (10 samples, 0.90%)</title><rect x="1024.8" y="1075.0" width="10.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1027.8" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (10 samples, 0.90%)</title><rect x="1024.8" y="1059.0" width="10.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1027.8" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (8 samples, 0.72%)</title><rect x="1024.8" y="1043.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1027.8" y="1054.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (8 samples, 0.72%)</title><rect x="1024.8" y="1027.0" width="8.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1027.8" y="1038.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 0.72%)</title><rect x="1024.8" y="1011.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1027.8" y="1022.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (8 samples, 0.72%)</title><rect x="1024.8" y="995.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1027.8" y="1006.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.45%)</title><rect x="1027.9" y="979.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1030.9" y="990.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.27%)</title><rect x="1029.0" y="963.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1032.0" y="974.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1032.2" y="963.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1035.2" y="974.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.18%)</title><rect x="1033.2" y="1043.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1036.2" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.18%)</title><rect x="1033.2" y="1027.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1036.2" y="1038.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.09%)</title><rect x="1033.2" y="1011.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.2" y="1022.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1034.3" y="1011.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1037.3" y="1022.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.09%)</title><rect x="1034.3" y="995.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1037.3" y="1006.0"></text>
</g>
<g>
<title>JavaThread::run() (144 samples, 12.93%)</title><rect x="1035.4" y="1107.0" width="152.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1038.4" y="1118.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (144 samples, 12.93%)</title><rect x="1035.4" y="1091.0" width="152.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.4" y="1102.0">JavaThread::thread_..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (144 samples, 12.93%)</title><rect x="1035.4" y="1075.0" width="152.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.4" y="1086.0">CompileBroker::comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (142 samples, 12.75%)</title><rect x="1035.4" y="1059.0" width="150.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.4" y="1070.0">CompileBroker::invo..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (142 samples, 12.75%)</title><rect x="1035.4" y="1043.0" width="150.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1038.4" y="1054.0">C2Compiler::compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (142 samples, 12.75%)</title><rect x="1035.4" y="1027.0" width="150.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1038.4" y="1038.0">Compile::Compile(ci..</text>
</g>
<g>
<title>Compile::Code_Gen() (53 samples, 4.76%)</title><rect x="1035.4" y="1011.0" width="56.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1038.4" y="1022.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="1035.4" y="995.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1038.4" y="1006.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1035.4" y="979.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1038.4" y="990.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.09%)</title><rect x="1035.4" y="963.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.4" y="974.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.18%)</title><rect x="1036.4" y="995.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1039.4" y="1006.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1036.4" y="979.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1039.4" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1036.4" y="963.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1039.4" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1036.4" y="947.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1039.4" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1037.5" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1040.5" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1037.5" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1040.5" y="974.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.54%)</title><rect x="1038.5" y="995.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1041.5" y="1006.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1038.5" y="979.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1041.5" y="990.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="1039.6" y="979.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1042.6" y="990.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.36%)</title><rect x="1040.6" y="979.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1043.6" y="990.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.18%)</title><rect x="1041.7" y="963.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1044.7" y="974.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1043.8" y="963.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.8" y="974.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1043.8" y="947.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1046.8" y="958.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1043.8" y="931.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1046.8" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.36%)</title><rect x="1044.9" y="995.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1047.9" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.09%)</title><rect x="1044.9" y="979.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1047.9" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.09%)</title><rect x="1044.9" y="963.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.9" y="974.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (1 samples, 0.09%)</title><rect x="1044.9" y="947.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1047.9" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.27%)</title><rect x="1045.9" y="979.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.9" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::call_catch_cleanup(Block*) (1 samples, 0.09%)</title><rect x="1045.9" y="963.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1048.9" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1047.0" y="963.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1050.0" y="974.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.09%)</title><rect x="1047.0" y="947.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1050.0" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1047.0" y="931.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1050.0" y="942.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1047.0" y="915.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1050.0" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1048.1" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1051.1" y="974.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.09%)</title><rect x="1048.1" y="947.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1051.1" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.09%)</title><rect x="1049.1" y="995.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1052.1" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (39 samples, 3.50%)</title><rect x="1050.2" y="995.0" width="41.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1053.2" y="1006.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.18%)</title><rect x="1051.2" y="979.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1054.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.27%)</title><rect x="1053.4" y="979.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1056.4" y="990.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1053.4" y="963.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1056.4" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.18%)</title><rect x="1054.4" y="963.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1057.4" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1055.5" y="947.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1058.5" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.09%)</title><rect x="1056.5" y="979.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1059.5" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1056.5" y="963.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.5" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1056.5" y="947.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1059.5" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.54%)</title><rect x="1057.6" y="979.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1060.6" y="990.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.09%)</title><rect x="1060.8" y="963.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1063.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1061.8" y="963.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1064.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1061.8" y="947.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1064.8" y="958.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.09%)</title><rect x="1061.8" y="931.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1064.8" y="942.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.09%)</title><rect x="1062.9" y="963.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.9" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.72%)</title><rect x="1063.9" y="979.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1066.9" y="990.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.18%)</title><rect x="1065.0" y="963.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1068.0" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1067.1" y="963.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1070.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.27%)</title><rect x="1068.2" y="963.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.2" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1071.4" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1074.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.27%)</title><rect x="1072.4" y="979.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1075.4" y="990.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1074.5" y="963.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.5" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.18%)</title><rect x="1075.6" y="979.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.6" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (2 samples, 0.18%)</title><rect x="1075.6" y="963.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1078.6" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.27%)</title><rect x="1077.7" y="979.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1080.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1079.8" y="963.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.09%)</title><rect x="1080.9" y="979.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.9" y="990.0"></text>
</g>
<g>
<title>loadConL0Node::bottom_type() const (1 samples, 0.09%)</title><rect x="1080.9" y="963.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1083.9" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1080.9" y="947.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.9" y="958.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1080.9" y="931.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1083.9" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.18%)</title><rect x="1082.0" y="979.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.0" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1083.0" y="963.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1086.0" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.27%)</title><rect x="1084.1" y="979.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.1" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1086.2" y="963.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.2" y="974.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.18%)</title><rect x="1087.3" y="979.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.3" y="990.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1088.3" y="963.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.3" y="974.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.09%)</title><rect x="1089.4" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.4" y="990.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1090.4" y="979.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1093.4" y="990.0"></text>
</g>
<g>
<title>Compile::Optimize() (79 samples, 7.09%)</title><rect x="1091.5" y="1011.0" width="83.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.5" y="1022.0">Compile::..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.27%)</title><rect x="1091.5" y="995.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.27%)</title><rect x="1091.5" y="979.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.27%)</title><rect x="1091.5" y="963.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="947.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1094.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="931.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="915.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1094.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="899.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1094.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="883.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1094.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="867.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="851.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="835.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="819.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="803.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="787.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="771.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="723.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1094.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="691.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="675.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="659.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1091.5" y="643.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1094.5" y="654.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1091.5" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_AddP(Node*, Node*) (1 samples, 0.09%)</title><rect x="1092.5" y="947.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.5" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1092.5" y="931.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.5" y="942.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="1093.6" y="947.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1096.6" y="958.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1094.7" y="995.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.09%)</title><rect x="1095.7" y="995.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.7" y="1006.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1095.7" y="979.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1098.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (57 samples, 5.12%)</title><rect x="1096.8" y="995.0" width="60.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1099.8" y="1006.0">PhaseI..</text>
</g>
<g>
<title>CatchProjNode::Opcode() const (1 samples, 0.09%)</title><rect x="1096.8" y="979.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.8" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1097.8" y="979.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1100.8" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1097.8" y="963.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1100.8" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1097.8" y="947.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.8" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1097.8" y="931.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1100.8" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1097.8" y="915.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1100.8" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1097.8" y="899.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1100.8" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1097.8" y="883.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1100.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1097.8" y="867.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.8" y="878.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1097.8" y="851.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1100.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.18%)</title><rect x="1098.9" y="979.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1101.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 0.81%)</title><rect x="1101.0" y="979.0" width="9.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1104.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.18%)</title><rect x="1107.4" y="963.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.4" y="974.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.09%)</title><rect x="1109.5" y="963.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (41 samples, 3.68%)</title><rect x="1110.6" y="979.0" width="43.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.6" y="990.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (39 samples, 3.50%)</title><rect x="1112.7" y="963.0" width="41.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1115.7" y="974.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (35 samples, 3.14%)</title><rect x="1116.9" y="947.0" width="37.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.9" y="958.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.27%)</title><rect x="1139.2" y="931.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.27%)</title><rect x="1139.2" y="915.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.2" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.18%)</title><rect x="1140.2" y="899.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (10 samples, 0.90%)</title><rect x="1142.3" y="931.0" width="10.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.3" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1152.9" y="931.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.9" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1152.9" y="915.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.9" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.18%)</title><rect x="1154.0" y="979.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.18%)</title><rect x="1154.0" y="963.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.0" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.09%)</title><rect x="1155.0" y="947.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.0" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1156.1" y="979.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.1" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1156.1" y="963.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.1" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1156.1" y="947.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.1" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1156.1" y="931.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.1" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1157.2" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1157.2" y="979.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.2" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1157.2" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.2" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (12 samples, 1.08%)</title><rect x="1158.2" y="995.0" width="12.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (12 samples, 1.08%)</title><rect x="1158.2" y="979.0" width="12.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.2" y="990.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1158.2" y="963.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.2" y="974.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1158.2" y="947.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.2" y="958.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1158.2" y="931.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.2" y="942.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1158.2" y="915.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.2" y="926.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1158.2" y="899.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.2" y="910.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.18%)</title><rect x="1159.3" y="963.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.3" y="974.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1159.3" y="947.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.3" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1160.3" y="947.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.3" y="958.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.09%)</title><rect x="1160.3" y="931.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.3" y="942.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.27%)</title><rect x="1161.4" y="963.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.4" y="974.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1161.4" y="947.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.4" y="958.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.09%)</title><rect x="1161.4" y="931.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.4" y="942.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1161.4" y="915.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.4" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1161.4" y="899.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.4" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1161.4" y="883.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.4" y="894.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.18%)</title><rect x="1162.5" y="947.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.5" y="958.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.18%)</title><rect x="1162.5" y="931.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.5" y="942.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1163.5" y="915.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.5" y="926.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1164.6" y="963.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.6" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.18%)</title><rect x="1165.6" y="963.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.6" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1166.7" y="947.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.7" y="958.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.09%)</title><rect x="1166.7" y="931.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.7" y="942.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.27%)</title><rect x="1167.8" y="963.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.8" y="974.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (3 samples, 0.27%)</title><rect x="1167.8" y="947.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.8" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1170.9" y="995.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.9" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1170.9" y="979.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.9" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="963.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.9" y="974.0"></text>
</g>
<g>
<title>VectorSet::VectorSet(Arena*) (1 samples, 0.09%)</title><rect x="1170.9" y="947.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.9" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.18%)</title><rect x="1172.0" y="995.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1172.0" y="979.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.0" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1172.0" y="963.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.0" y="974.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1172.0" y="947.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.0" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1173.1" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.1" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1173.1" y="963.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.1" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1173.1" y="947.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.1" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.09%)</title><rect x="1173.1" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.1" y="942.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.09%)</title><rect x="1173.1" y="915.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1176.1" y="926.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.09%)</title><rect x="1173.1" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.1" y="910.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1173.1" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.1" y="894.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1173.1" y="867.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.1" y="878.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1173.1" y="851.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.1" y="862.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1173.1" y="835.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.1" y="846.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1174.1" y="995.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1177.1" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.81%)</title><rect x="1175.2" y="1011.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.81%)</title><rect x="1175.2" y="995.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.81%)</title><rect x="1175.2" y="979.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.81%)</title><rect x="1175.2" y="963.0" width="9.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.81%)</title><rect x="1175.2" y="947.0" width="9.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.81%)</title><rect x="1175.2" y="931.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="942.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1175.2" y="915.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.2" y="926.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1175.2" y="899.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1175.2" y="883.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.2" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1175.2" y="867.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.2" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1175.2" y="851.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1175.2" y="835.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1175.2" y="819.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1175.2" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.2" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1175.2" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="798.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1175.2" y="771.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1175.2" y="755.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.2" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1175.2" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.2" y="750.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1175.2" y="723.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.2" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.72%)</title><rect x="1176.2" y="915.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.2" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.72%)</title><rect x="1176.2" y="899.0" width="8.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.72%)</title><rect x="1176.2" y="883.0" width="8.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.2" y="894.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1176.2" y="867.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.2" y="878.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1176.2" y="851.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1179.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.63%)</title><rect x="1177.3" y="867.0" width="7.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.63%)</title><rect x="1177.3" y="851.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.63%)</title><rect x="1177.3" y="835.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.3" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.63%)</title><rect x="1177.3" y="819.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.3" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.63%)</title><rect x="1177.3" y="803.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.63%)</title><rect x="1177.3" y="787.0" width="7.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.63%)</title><rect x="1177.3" y="771.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.63%)</title><rect x="1177.3" y="755.0" width="7.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.54%)</title><rect x="1177.3" y="739.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.3" y="750.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.09%)</title><rect x="1177.3" y="723.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.3" y="734.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.09%)</title><rect x="1177.3" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.3" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1177.3" y="691.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.3" y="702.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1177.3" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.3" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.36%)</title><rect x="1178.3" y="723.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.36%)</title><rect x="1178.3" y="707.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.36%)</title><rect x="1178.3" y="691.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.36%)</title><rect x="1178.3" y="675.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.36%)</title><rect x="1178.3" y="659.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.36%)</title><rect x="1178.3" y="643.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1178.3" y="627.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1178.3" y="611.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1178.3" y="595.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1178.3" y="579.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1178.3" y="563.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1178.3" y="547.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.3" y="531.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.3" y="515.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.3" y="499.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.3" y="483.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.3" y="467.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.3" y="451.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.3" y="435.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.3" y="419.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.3" y="403.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.3" y="387.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.3" y="371.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.3" y="355.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.3" y="339.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.3" y="323.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.3" y="307.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.3" y="291.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.3" y="275.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.3" y="259.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.3" y="243.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.3" y="227.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.3" y="211.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.3" y="195.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.3" y="179.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.3" y="163.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1178.3" y="147.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1178.3" y="131.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1178.3" y="115.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.3" y="126.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1178.3" y="99.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="110.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.09%)</title><rect x="1178.3" y="83.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.3" y="94.0"></text>
</g>
<g>
<title>IdealKit::transform(Node*) (1 samples, 0.09%)</title><rect x="1178.3" y="67.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.3" y="78.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1178.3" y="51.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="62.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1178.3" y="35.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1181.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.4" y="531.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.4" y="542.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.09%)</title><rect x="1179.4" y="515.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.4" y="526.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.09%)</title><rect x="1179.4" y="499.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1179.4" y="483.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="494.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1179.4" y="467.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="478.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1179.4" y="451.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="462.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.09%)</title><rect x="1179.4" y="435.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.4" y="446.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1179.4" y="419.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.4" y="430.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1179.4" y="403.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="414.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1179.4" y="387.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="398.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1179.4" y="371.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1180.5" y="627.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.5" y="638.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1180.5" y="611.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1180.5" y="595.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="606.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1180.5" y="579.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="590.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1180.5" y="563.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="574.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1180.5" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="558.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.09%)</title><rect x="1180.5" y="531.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.5" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.5" y="611.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.5" y="595.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.5" y="579.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.5" y="563.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.5" y="547.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.5" y="531.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.5" y="515.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.5" y="499.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.5" y="483.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.5" y="467.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.5" y="451.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.5" y="435.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.5" y="419.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.5" y="403.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.5" y="387.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.5" y="371.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.5" y="355.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.5" y="339.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1181.5" y="323.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1181.5" y="307.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="318.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1181.5" y="291.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.5" y="302.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1181.5" y="275.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.5" y="286.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.09%)</title><rect x="1181.5" y="259.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.5" y="270.0"></text>
</g>
<g>
<title>TypeNode::size_of() const (1 samples, 0.09%)</title><rect x="1181.5" y="243.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.6" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.6" y="707.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.6" y="691.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.6" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.6" y="659.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.6" y="643.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.6" y="627.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.6" y="611.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.6" y="595.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.6" y="579.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.6" y="563.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.6" y="547.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.6" y="531.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.6" y="515.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.6" y="499.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.6" y="510.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.09%)</title><rect x="1182.6" y="483.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.6" y="494.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1182.6" y="467.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="478.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.09%)</title><rect x="1182.6" y="451.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="462.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.09%)</title><rect x="1182.6" y="435.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1183.6" y="739.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.6" y="750.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1183.6" y="723.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="734.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1183.6" y="707.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.6" y="718.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1183.6" y="691.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.6" y="702.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1184.7" y="1011.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.7" y="1022.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1184.7" y="995.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.7" y="1006.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.18%)</title><rect x="1185.8" y="1059.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.8" y="1070.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.18%)</title><rect x="1185.8" y="1043.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.8" y="1054.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.18%)</title><rect x="1185.8" y="1027.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.8" y="1038.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.18%)</title><rect x="1185.8" y="1011.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.8" y="1022.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.9" y="1107.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.9" y="1118.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.9" y="1091.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.9" y="1102.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.18%)</title><rect x="1187.9" y="1075.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="1086.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.18%)</title><rect x="1187.9" y="1059.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.9" y="1070.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.18%)</title><rect x="1187.9" y="1043.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.9" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.18%)</title><rect x="1187.9" y="1027.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1187.9" y="1011.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.09%)</title><rect x="1187.9" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="1006.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.09%)</title><rect x="1187.9" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.9" y="990.0"></text>
</g>
<g>
<title>JNIHandles::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="963.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.9" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="1011.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="1022.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.09%)</title><rect x="1188.9" y="995.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="1006.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.09%)</title><rect x="1188.9" y="979.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="990.0"></text>
</g>
<g>
<title>OtherRegionsTable::clear() (1 samples, 0.09%)</title><rect x="1188.9" y="963.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.9" y="974.0"></text>
</g>
</g>
</svg>
